{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Distributed Experiment workflows Welcome to DEW - distributed experiment workflows. Our goal is to simplify design of testbed experiments using a webapp. DEW is available at dew.isi.edu . Some of this documentation is available as video tutorials on DEW YouTube channel . This work is based on research sponsored by the National Science Foundation (award #1835608)","title":"Home"},{"location":"#distributed-experiment-workflows","text":"Welcome to DEW - distributed experiment workflows. Our goal is to simplify design of testbed experiments using a webapp. DEW is available at dew.isi.edu . Some of this documentation is available as video tutorials on DEW YouTube channel . This work is based on research sponsored by the National Science Foundation (award #1835608)","title":"Distributed Experiment workflows"},{"location":"backup_and_recovery/","text":"Backup and recovery One of the benefits of DEW is the ability to back up and recover a previous version seamlessly. Version history DEW automatically stores a version for every save performed for the experiment and allows you to revert to an earlier version. To know more about how to revert to a version, click here Google Drive If the user is saving to Google Drive, previous versions of the files can be viewed and you can revert to a particular version in Google Drive. However, to get the changes in Google Drive reflected in DEW, the user must reupload the DEW file .","title":"Backup and recovery"},{"location":"backup_and_recovery/#backup-and-recovery","text":"One of the benefits of DEW is the ability to back up and recover a previous version seamlessly.","title":"Backup and recovery"},{"location":"backup_and_recovery/#version-history","text":"DEW automatically stores a version for every save performed for the experiment and allows you to revert to an earlier version. To know more about how to revert to a version, click here","title":"Version history"},{"location":"backup_and_recovery/#google-drive","text":"If the user is saving to Google Drive, previous versions of the files can be viewed and you can revert to a particular version in Google Drive. However, to get the changes in Google Drive reflected in DEW, the user must reupload the DEW file .","title":"Google Drive"},{"location":"basics/","text":"Basics This guide provides a quick introduction to Distributed Experiment Workflows (DEW). What is DEW? DEW is an attempt to encode behavior and toplogical constraints which help with realization on testbeds. DEW consists of 4 major components. They are Actors, Scenario/Behavior, Constraints, and Bindings. DEW helps users encode behavior of an experiment, and uses that encoding to generate topology and runnable scripts. DEW representation has three major components: scenario, constraints, and bindings. Scenario Scenario defines the behavior of the the experiment. Each statement consists of the action (command or script being executed) and the actor (the machine or identical group of machines executing the action). To enforce the order of execution of actions, we use events. An actor can emit one or more events (e.g., when an action is completed). We use the emit keyword for this. Similarly, an actor can wait for one for more events to perform an action. The when keyword is used for this. A user may also want to wait for a certain amount of time before executing an action. For this purpose, the wait keyword is used. It accepts either a number or a variable, which can be filled later. Sometimes, we may have multiple instances of an actor and we need to define whether to wait for events from all instances or just any instance. Hence, we add ALL or ANY keyword before the events. The syntax of a DEW statement looks like: [when [ALL/ANY] <events>][wait <time>] actor action [emit <events>] (The parts enclosed in square brackets are optional.) It is also possible to provide labels by starting the line with @ . With multiple labels, each label will have its own script when exported. We also support C++ style line comments // as well. Labels Labels are user defined keywords which help in splitting the scenario into multiple phases. Labels help in generating multiple scripts for the scenario with each file name being the label provided. This helps the user in making multiple iterations quickly without running everything from scratch. For example, say you have to install wget and then run a script which uses wget . By using labels, we can create two scripts - an installation script and a test script (which you obtain on exporting to bash). The DEW scenario can look something like @ install server install_wget_dependencies server install_wget @ test server run_wget_script Upon exporting to bash, you get two scripts - install.sh and test.sh Now, the user can run install.sh once and focus on the execution of test.sh . If it was a single script, the user must wait till the installation is finished everytime it is run. Constraints Constraints section defines how actors should be realized on a testbed, i.e., it describes topological constraints for actors. If no constraints are specified, all actors will be materialized in a disconnected topology; with a default OS, hardware type, and IP Address, with only one node per actor. Actor Configuration Parameters Each Actor can be configured according to the requirements of the experiment. The general syntax to configure the actor parameters is given below: <actor list> [ <parameter> <value>, <parameter> <value>, ... ] where <actor list> is the comma-separated list of actors to be configured (can also be a single actor), <parameter> is the actor parameter to be configured, and <value> is the correponding parameter value where each <parameter> <value> constitutes a parameter-value pair for a given actor or list of actors. The parameter-value pairs are optional. If the parameter-value pairs aren't specified in the constraints, the default values will be used for the corresponding actors. Example: actor1, actor2 [ os Ubuntu, num 2 ] , actor1 [ nodeType pc ] The parameters that can be configured are as follows: os The os parameter defines the operating system of the actor(s). The format of the constraint is: <actor list> [ os <alphanumerical value> ] num The num parameter defines the number of instances of the actor(s). The format of the constraint is: <actor list> [ num <numerical value> ] nodeType The nodeType parameter defines the hardware type of the actor(s). The format of the constraint is: <actor list> [ nodeType <alphanumerical value> ] location The location parameter defines the IP Address of the actor(s). The format of the constraint is: <actor list> [ location <IP Address> ] Link/LAN Configuration Parameters Each link/LAN can be configured according to the requirements of the experiment. The general syntax to configure the link/LAN parameters is given below: <link/lan> <actor list> [ <parameter> <value>, <parameter> <value>, ... ] where <link/lan> denotes the placement of a link or LAN between a set of actors, <actor list> is the space-separated list of actors to be configured, <parameter> is the link/LAN parameter to be configured, and <value> is the correponding parameter value where each <parameter> <value> constitutes a parameter-value pair for the link/LAN between the set of actors. The parameter-value pairs are optional. If the parameter-value pairs aren't specified in the constraints, the default values will be used for the corresponding links and LANs. Example: link actor1 actor2 [ bw 100 ] , lan actor1 actor2 actor3 [ bw 20, delay 4 ] The Link/LAN Keyword The keywords link and lan are explained below: link The Link constraint denotes that there is a link between two actors. If there are multiple number of instances, you need to define the keyword ALL or ANY to indicate whether all instances need to be linked or any instance needs to be linked. The format of the constraint is link [ALL/ANY] actor1 [ALL/ANY] actor2 [ <parameter> <value>, <parameter> <value>, ... ] lan The LAN constraint creates a LAN between specified actors. The format of the statement is lan <actor list> [ <parameter> <value>, <parameter> <value>, ...] Link/LAN Parameters The parameters that can be configured for any link/LAN are as follows: bw The bw parameter defines the bandwidth of the corresponding link or LAN. The format of the constraint is: <link/lan> <actor list> [ bw <value> ] The unit of measurement of the bandwidth is Gbps . (Do not mention the unit in the value. Example: link actor1 actor2 [ bw 1 ] ) delay The delay parameter defines the latency/delay of the corresponding link or LAN. The format of the constraint is: <link/lan> <actor list> [ delay <value> ] The unit of measurement of the latency/delay is ms . (Do not mention the unit in the value. Example: lan actor1 actor2 actor3 [ delay 100 ] ) Bindings Bindings provide the actual commands to be run on the nodes in the experiment to achieve actions and to detect events. DEW file format The DEW file format consists of text statements, with each component (scenario, bindings, constraints) starting with its label within square brackets. The format is: [Scenario] <scenario_statements> [Bindings] <bindings> [Constraints] <constraint_statements> We also support inner labels in the scenario section. These labels will correspond to separate BASH scripts if you export your DEW specification as BASH scripts. The inner labels start with @ character. [Scenario] @setup <setup_scenario_statements> @execute <execute_scenario_statements> @cleanup <cleanup_scenario_statements> Benefits Robust design - DEW format helps testbed users design an experiment at a high level, and in a flexible manner. It is easy to replace some pieces (e.g., which traffic generator to use) with others, and to scale the experiment up. History - DEW portal keeps a history of all changes in the experiment, which helps restore to a particular version when things go wrong Sharing and reuse - Since experiments can be shared, multiple researchers can collaborate on a single experiment. DEW experiments can also be published for anyone to use (by choosing the link sharing option).","title":"Basics"},{"location":"basics/#basics","text":"This guide provides a quick introduction to Distributed Experiment Workflows (DEW).","title":"Basics"},{"location":"basics/#what-is-dew","text":"DEW is an attempt to encode behavior and toplogical constraints which help with realization on testbeds. DEW consists of 4 major components. They are Actors, Scenario/Behavior, Constraints, and Bindings. DEW helps users encode behavior of an experiment, and uses that encoding to generate topology and runnable scripts. DEW representation has three major components: scenario, constraints, and bindings.","title":"What is DEW?"},{"location":"basics/#scenario","text":"Scenario defines the behavior of the the experiment. Each statement consists of the action (command or script being executed) and the actor (the machine or identical group of machines executing the action). To enforce the order of execution of actions, we use events. An actor can emit one or more events (e.g., when an action is completed). We use the emit keyword for this. Similarly, an actor can wait for one for more events to perform an action. The when keyword is used for this. A user may also want to wait for a certain amount of time before executing an action. For this purpose, the wait keyword is used. It accepts either a number or a variable, which can be filled later. Sometimes, we may have multiple instances of an actor and we need to define whether to wait for events from all instances or just any instance. Hence, we add ALL or ANY keyword before the events. The syntax of a DEW statement looks like: [when [ALL/ANY] <events>][wait <time>] actor action [emit <events>] (The parts enclosed in square brackets are optional.) It is also possible to provide labels by starting the line with @ . With multiple labels, each label will have its own script when exported. We also support C++ style line comments // as well.","title":"Scenario"},{"location":"basics/#labels","text":"Labels are user defined keywords which help in splitting the scenario into multiple phases. Labels help in generating multiple scripts for the scenario with each file name being the label provided. This helps the user in making multiple iterations quickly without running everything from scratch. For example, say you have to install wget and then run a script which uses wget . By using labels, we can create two scripts - an installation script and a test script (which you obtain on exporting to bash). The DEW scenario can look something like @ install server install_wget_dependencies server install_wget @ test server run_wget_script Upon exporting to bash, you get two scripts - install.sh and test.sh Now, the user can run install.sh once and focus on the execution of test.sh . If it was a single script, the user must wait till the installation is finished everytime it is run.","title":"Labels"},{"location":"basics/#constraints","text":"Constraints section defines how actors should be realized on a testbed, i.e., it describes topological constraints for actors. If no constraints are specified, all actors will be materialized in a disconnected topology; with a default OS, hardware type, and IP Address, with only one node per actor.","title":"Constraints"},{"location":"basics/#actor-configuration-parameters","text":"Each Actor can be configured according to the requirements of the experiment. The general syntax to configure the actor parameters is given below: <actor list> [ <parameter> <value>, <parameter> <value>, ... ] where <actor list> is the comma-separated list of actors to be configured (can also be a single actor), <parameter> is the actor parameter to be configured, and <value> is the correponding parameter value where each <parameter> <value> constitutes a parameter-value pair for a given actor or list of actors. The parameter-value pairs are optional. If the parameter-value pairs aren't specified in the constraints, the default values will be used for the corresponding actors. Example: actor1, actor2 [ os Ubuntu, num 2 ] , actor1 [ nodeType pc ] The parameters that can be configured are as follows:","title":"Actor Configuration Parameters"},{"location":"basics/#os","text":"The os parameter defines the operating system of the actor(s). The format of the constraint is: <actor list> [ os <alphanumerical value> ]","title":"os"},{"location":"basics/#num","text":"The num parameter defines the number of instances of the actor(s). The format of the constraint is: <actor list> [ num <numerical value> ]","title":"num"},{"location":"basics/#nodetype","text":"The nodeType parameter defines the hardware type of the actor(s). The format of the constraint is: <actor list> [ nodeType <alphanumerical value> ]","title":"nodeType"},{"location":"basics/#location","text":"The location parameter defines the IP Address of the actor(s). The format of the constraint is: <actor list> [ location <IP Address> ]","title":"location"},{"location":"basics/#linklan-configuration-parameters","text":"Each link/LAN can be configured according to the requirements of the experiment. The general syntax to configure the link/LAN parameters is given below: <link/lan> <actor list> [ <parameter> <value>, <parameter> <value>, ... ] where <link/lan> denotes the placement of a link or LAN between a set of actors, <actor list> is the space-separated list of actors to be configured, <parameter> is the link/LAN parameter to be configured, and <value> is the correponding parameter value where each <parameter> <value> constitutes a parameter-value pair for the link/LAN between the set of actors. The parameter-value pairs are optional. If the parameter-value pairs aren't specified in the constraints, the default values will be used for the corresponding links and LANs. Example: link actor1 actor2 [ bw 100 ] , lan actor1 actor2 actor3 [ bw 20, delay 4 ]","title":"Link/LAN Configuration Parameters"},{"location":"basics/#the-linklan-keyword","text":"The keywords link and lan are explained below:","title":"The Link/LAN Keyword"},{"location":"basics/#link","text":"The Link constraint denotes that there is a link between two actors. If there are multiple number of instances, you need to define the keyword ALL or ANY to indicate whether all instances need to be linked or any instance needs to be linked. The format of the constraint is link [ALL/ANY] actor1 [ALL/ANY] actor2 [ <parameter> <value>, <parameter> <value>, ... ]","title":"link"},{"location":"basics/#lan","text":"The LAN constraint creates a LAN between specified actors. The format of the statement is lan <actor list> [ <parameter> <value>, <parameter> <value>, ...]","title":"lan"},{"location":"basics/#linklan-parameters","text":"The parameters that can be configured for any link/LAN are as follows:","title":"Link/LAN Parameters"},{"location":"basics/#bw","text":"The bw parameter defines the bandwidth of the corresponding link or LAN. The format of the constraint is: <link/lan> <actor list> [ bw <value> ] The unit of measurement of the bandwidth is Gbps . (Do not mention the unit in the value. Example: link actor1 actor2 [ bw 1 ] )","title":"bw"},{"location":"basics/#delay","text":"The delay parameter defines the latency/delay of the corresponding link or LAN. The format of the constraint is: <link/lan> <actor list> [ delay <value> ] The unit of measurement of the latency/delay is ms . (Do not mention the unit in the value. Example: lan actor1 actor2 actor3 [ delay 100 ] )","title":"delay"},{"location":"basics/#bindings","text":"Bindings provide the actual commands to be run on the nodes in the experiment to achieve actions and to detect events.","title":"Bindings"},{"location":"basics/#dew-file-format","text":"The DEW file format consists of text statements, with each component (scenario, bindings, constraints) starting with its label within square brackets. The format is: [Scenario] <scenario_statements> [Bindings] <bindings> [Constraints] <constraint_statements> We also support inner labels in the scenario section. These labels will correspond to separate BASH scripts if you export your DEW specification as BASH scripts. The inner labels start with @ character. [Scenario] @setup <setup_scenario_statements> @execute <execute_scenario_statements> @cleanup <cleanup_scenario_statements>","title":"DEW file format"},{"location":"basics/#benefits","text":"Robust design - DEW format helps testbed users design an experiment at a high level, and in a flexible manner. It is easy to replace some pieces (e.g., which traffic generator to use) with others, and to scale the experiment up. History - DEW portal keeps a history of all changes in the experiment, which helps restore to a particular version when things go wrong Sharing and reuse - Since experiments can be shared, multiple researchers can collaborate on a single experiment. DEW experiments can also be published for anyone to use (by choosing the link sharing option).","title":"Benefits"},{"location":"binding_suggestions/","text":"Built-in Functions As part of DEW, we provide some built-in functions, which we later expand into runnable code on the testbed during the export process. Action Bindings Currently supported built-in functions / suggestions for action bindings are: Suggestion tcpdump -i expeth($node) -w $file ping $node iperf -s iperf -c $node nmap $node wget $node dig $name start_apache start_bind Event Bindings Currently supported built-in functions for event bindings are: Suggestion Description pexists($action) process exists that performs action in the binding psuccess($action) process completed w success for the given action OS Built-in Functions We have also provided some built-in functions in Ubuntu-DEW OS image on Deterlab. If you use that image you can use the following built-in functions in your bindings, and we will resolve them automatically. Built-in function Description expIP experimental IP on the node ctlIP control IP on the node expeth experimental iface on the node ctleth control iface on the node expIP(A) experimental IP on the given node, leading expeth(A) experimental iface on the given node, IP(A) IP address of node A pid project name eid experiment name nid node name epoch epoch time","title":"Built-in Functions"},{"location":"binding_suggestions/#built-in-functions","text":"As part of DEW, we provide some built-in functions, which we later expand into runnable code on the testbed during the export process.","title":"Built-in Functions"},{"location":"binding_suggestions/#action-bindings","text":"Currently supported built-in functions / suggestions for action bindings are: Suggestion tcpdump -i expeth($node) -w $file ping $node iperf -s iperf -c $node nmap $node wget $node dig $name start_apache start_bind","title":"Action Bindings"},{"location":"binding_suggestions/#event-bindings","text":"Currently supported built-in functions for event bindings are: Suggestion Description pexists($action) process exists that performs action in the binding psuccess($action) process completed w success for the given action","title":"Event Bindings"},{"location":"binding_suggestions/#os-built-in-functions","text":"We have also provided some built-in functions in Ubuntu-DEW OS image on Deterlab. If you use that image you can use the following built-in functions in your bindings, and we will resolve them automatically. Built-in function Description expIP experimental IP on the node ctlIP control IP on the node expeth experimental iface on the node ctleth control iface on the node expIP(A) experimental IP on the given node, leading expeth(A) experimental iface on the given node, IP(A) IP address of node A pid project name eid experiment name nid node name epoch epoch time","title":"OS Built-in Functions"},{"location":"contact_us/","text":"Contact us You can use the mailing list address dew@mailman.isi.edu to reach us for any feedback or suggestions. For bugs and feature requests, we recommend you to create an issue on Github for easier tracking and to avoid duplicates.","title":"Contact us"},{"location":"contact_us/#contact-us","text":"You can use the mailing list address dew@mailman.isi.edu to reach us for any feedback or suggestions. For bugs and feature requests, we recommend you to create an issue on Github for easier tracking and to avoid duplicates.","title":"Contact us"},{"location":"dashboard/","text":"Dashboard The dashboard provides a list of experiments; and options to create a new experiment, edit an existing experiment, or logout. The image below depicts the main page upon successfully logging into the system. Clicking on the menu bar (\u2261) shows your name, picture, and the logout button. Clicking on the close button removes the menu bar. Click on an experiment to open the experiment page. Each experiment list item contains the name, creation date, last updated date, and the role you have in the experiment. The possible roles are - Admin - Have access to edit and manage access for the experiment. This is the default role assigned to the creator on creating a new experiment. Developer - Have access to edit experiment but is not allowed to manage users and roles for the experiment. Spectator - Have read only access to the experiment. You can filter the experiments by using the filter options in the left panel of the page. Clicking on the Create button allows you to create a new experiment. You will be redirected to the experiment page on either clicking on an experiment, or on clicking the Create button.","title":"Dashboard"},{"location":"dashboard/#dashboard","text":"The dashboard provides a list of experiments; and options to create a new experiment, edit an existing experiment, or logout. The image below depicts the main page upon successfully logging into the system. Clicking on the menu bar (\u2261) shows your name, picture, and the logout button. Clicking on the close button removes the menu bar. Click on an experiment to open the experiment page. Each experiment list item contains the name, creation date, last updated date, and the role you have in the experiment. The possible roles are - Admin - Have access to edit and manage access for the experiment. This is the default role assigned to the creator on creating a new experiment. Developer - Have access to edit experiment but is not allowed to manage users and roles for the experiment. Spectator - Have read only access to the experiment. You can filter the experiments by using the filter options in the left panel of the page. Clicking on the Create button allows you to create a new experiment. You will be redirected to the experiment page on either clicking on an experiment, or on clicking the Create button.","title":"Dashboard"},{"location":"examples/","text":"Examples This page contains DEW file contents of various scenarios. Parallel ping [Scenario] client pingServer server pingClient [Bindings] pingServer = ping -c 10 server pingClient = ping -c 10 client [Constraints] link client server Sequential ping [Scenario] client pingServer emit clientRunpingServerSig when clientRunpingServerSig server pingClient [Bindings] pingServer = ping -c 1 server pingClient = ping -c 1 client clientRunpingServerSig = psuccess(pingServer) [Constraints] link server client Complex experiment [Scenario] server installiperf1 emit sdone client installiperf2 emit cdone when sdone, cdone server startServer emit ssdone when ssdone client startClient [Bindings] installiperf1 = sudo apt-get install iperf -y sdone = psuccess(installiperf1) installiperf2 = sudo apt-get install iperf -y cdone = psuccess(installiperf2) startServer = iperf -s ssdone = pexists(startServer) startClient = iperf -c server -t $time [Constraints] link server client","title":"Examples"},{"location":"examples/#examples","text":"This page contains DEW file contents of various scenarios.","title":"Examples"},{"location":"examples/#parallel-ping","text":"[Scenario] client pingServer server pingClient [Bindings] pingServer = ping -c 10 server pingClient = ping -c 10 client [Constraints] link client server","title":"Parallel ping"},{"location":"examples/#sequential-ping","text":"[Scenario] client pingServer emit clientRunpingServerSig when clientRunpingServerSig server pingClient [Bindings] pingServer = ping -c 1 server pingClient = ping -c 1 client clientRunpingServerSig = psuccess(pingServer) [Constraints] link server client","title":"Sequential ping"},{"location":"examples/#complex-experiment","text":"[Scenario] server installiperf1 emit sdone client installiperf2 emit cdone when sdone, cdone server startServer emit ssdone when ssdone client startClient [Bindings] installiperf1 = sudo apt-get install iperf -y sdone = psuccess(installiperf1) installiperf2 = sudo apt-get install iperf -y cdone = psuccess(installiperf2) startServer = iperf -s ssdone = pexists(startServer) startClient = iperf -c server -t $time [Constraints] link server client","title":"Complex experiment"},{"location":"experiment_page/","text":"Experiment page General Layout of the Page The experiment page is divided into 2 sections: Experiment Definition Section Visual Representation Section The Experiment Definition Section is comprised of 3 sub-sections: Scenario Constraint Bindings The Scenario section is used to define the actions and triggers of the experiment. The Constraint section is used to define the topology structure of the experiment. The Bindings section is used to bind the actions defined in the scenario to actual computer commands . The Visual Representation Section depicts two kinds of graphs: The Network Topology The Dependency Graph The Network Topology is used to depict the nodes of the nodes, and the connections that exist between them. The Dependency Graph is used to depict the actions of the experiment, and the dependencies that exist between these actions. A few general views of the page and its various components are shown below. Navigating the Page The initial page that opens once you create/open an experiment depicts the network topology of the experiment. You can click on the Graph Selector to toggle between the topology network and the dependency graph views. You can click on the Experiment Definition Section Toggle to toggle the Experiment Definition Section view. Tutorials View video tutorials on using the experiment page below: Experiment Name The name of the experiment is displayed on the top left corner of the page. To edit the name, click on the name and update the text. (just like Google docs) The name can be a maximum of 101 characters. The number of characters remaining is shown to the right of the name. Menu Bar The menu bar is colored green when the experiment does not contain any unsaved changes. It is colored grey if the experiment contains unsaved changes. The status is also shown next to the access level to the right. Your level of access with the experiment is displayed towards the extreme right. The various buttons and their functions are as follows: Back button Click on the back button to go to the dashboard. Alternatively, you can use the back button in the browser. File menu This menu contains a number of file related operations. They are: Save Clicking on save will save the current experiment to the database. Save to Google Drive This button allows you to save the experiment to Google Drive. The experiment is saved in the DEW format. The user will have a top level directory called \u201cDistributed Experiment Workflows\u201d in their Google Drive. Inside the top level directory, we have folders created for each experiment. Files relevant to the experiment will be contained in the respective experiment folders. For example, if we have an experiment named \"test\", the DEW file will be located at MyDrive > Distributed Experiment Workflows > test > test.dew . Delete Deletes the experiment in the DEW portal. This is a non-recoverable action. But, the experiment will still remain on your Google Drive, if you have saved it there. Version history View the changes made previously to the experiment. To revert to a particular version, click on the revert button. Share to User Share the experiment with another DEW user for access. To learn more about sharing and access levels, visit the Sharing and Collaboration page List of users View and manage the list of users who can access the experiment. To learn more about sharing and access levels, visit Sharing and Collaboration page . Close Close the experiment and go back to the dashboard. Note: If the user has not saved the file, the file menu would have a restricted set of options as shown below. Save This menu option is used to save the experiment to the database. Other file operations cannot be performed until the user has saved the experiment. Input This menu option allows the user to upload an experiment saved locally in the DEW format or as a bash script. We hope to support more experiment formats in the near future. Upload Upload DEW files to load the experiment. For example, the DEW file saved in Google Drive can be used for upload. Export This menu is used to export the experiment to different formats NS file Download the NS file for the current experiment BASH file Download the Bash script or scripts for the experiment. Currently the scripts should be run on Deterlab, from the users machine. Running the script without arguments will display a help message to tell you which input parameters you need to specify. DEW Download the DEW file of the current experiment. Graph Views and Manipulation As mentioned previously in the document, the Visual Representation Section comprises of the Network Topology Graph and the Dependency Graph . The steps to create and manipulate the graphs are shown below: Network Topology Graph The Network Topology Graph depicts the experiment nodes and the connections that exist between these nodes. Graph Creation and Manipulation Switch to the Network Topology Network View by clicking on the Topology Button in the Graph Selector bar. You can add nodes to the network by clicking on the Add Node button on the bottom portion of the screen. Nodes are represented as server icons in the graph. You can add a LAN to the network by clicking on the Add LAN button on the bottom portion of the screen. LANS are represented as black dots in the graph. You can add links between the nodes by clicking and holding Ctrl + Left Mouse Button between the 2 nodes that need to be linked. Links are represented as black lines in the graph. The Action Number towards the side of the node icon denotes the action sequence numbers of the actions associated with the actors (nodes). The network topology components and their symbols are shown below. You can define the parameters of a network node such as the Operating System , IP Address/Location , Number of Nodes , and Hardware Type by clicking on a node and modifying the fields in the popup that displays on the top-right portion of the screen. You can also define the parameters of a link/LAN such as the Bandwidth and Delay by clicking on the link/LAN and modifying the fields in the popup that displays on the top-right portion of the screen. The Topology Node/Link Parameter Definition popup is shown below. Any changes made to the network topology graph also reflects in the scenario and constraints in the Experiment Definition Section of the page. Dependency Graph In order to understand the experiment better, we have a graph view which displays the experiment as a flowchart of actions. The nodes denote actions, with the color of the node denoting the actor that performs the given action. Edges denote a dependency, where one action results in an event and a following action waits for that event. You can create new edges (dependencies) between nodes, or delete existing edges (dependencies). As you modify the dependency graph, the modifications are propagated to the Experiment view. The Dependency Graph depicts the actions of the experiment, and the dependencies that exist between the actions. Graph Creation and Manipulation Switch to the Dependency Graph View by clicking on the Dependency Button in the Graph Selector bar. You can add actions to the dependency graph by clicking on the Add Action button in the bottom portion of the screen. This will open up the Add Action Popup . Note that you can access the same Add Action Popup when you click on the Add Action button in the Topology Node/Link Parameter Definition popup that shows up when you click on a node in the network topology graph. Using the Add Action Popup , you can create an action by assigning an action name , trigger event , emit event , wait time , action binding , and event binding ; and then clicking on the Add Action button. You can also edit an action by clicking on the Edit Action button that shows up in the bottom portion of the screen when you click on the respective action. The Add Action Popup is shown in the image below. The Action Number towards the side of the action icon denotes the action sequence numbers of the actions associated with the actors (nodes in the graph legend). Any changes made to the dependency graph also reflects in the scenario and bindings in the Experiment Definition Section of the page. The dependency graph components and their symbols are shown below. Behavior, Constraints, and Bindings In DEW, an experiment consists of a scenario (who does what and when), constraints (how experiment should be materialized on a testbed) and bindings (specific commands to run on nodes for each action). Behavior Behavior defines the actions to be executed by actors during the experiment. You can think of an actor as a node in an experiment, or as many nodes that perform the same set of actions. You can think of an action as one or more commands executed on a node in an experiment. An action can result in an event (we say that it emits an event) and a later action will occur only when that event is generated. For example you may want to install an Apache application on the \u201cserver\u201d node, and then generate traffic to it from a \u201cclient\u201d node when the installation is completed. Two actions that are not connected by emit-when rules occur independently and in parallel. Please explore our examples to get familiar with some common uses of DEW language. Behavior statements are in the form of [when <event>][wait <time>] actor action [emit <event>] For example, if you want to express the following behavior \"A pings B, after that B waits 5 sec and pings A\" you would write: A start_ping1 emit ping1_done when ping1_done wait 5 B start_ping2 Conversely if you wanted A and B to ping each other in parallel you would write: A start_ping1 B start_ping2 Names of actors will eventually correspond to names of nodes in your experiments. Names of actions are chosen by you. You will get to define what they mean in the bindings section. As you start typing there will be auto-suggestion displayed near the top of the text area. Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase. Constraints The constraints section helps define any constraints about the topology of the experiment, as it will be materialized on a testbed. The statements are in the form of constraint_type actor1 [actor2|value] The allowed constraint types are os num link lan interfaces location nodetype For example: os server ubuntu num attacker 3 lan client attacker link router server As you start typing there will be auto-suggestion displayed near the top of the text area. Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase. Bindings The bindings section defines the commands to be executed on testbed nodes for the given action or event in your experiment. Choose an option from drop-down boxes or input your own commands. Variables are preceded by $ to indicate that their values should be replaced by constants in the design stage, or specified by user at run-time on the command line. For example: install_iperf apt-get install iperf -y run_tcpdump tcpdump -i expIP -w $file install_flooder /scripts/common/install_flooder.sh start_server iperf -s As you start typing behavior above this area will be populated with the terms which require definition for the experiment to execute. We have provided some suggestions for action and event bindings. Please look at the binding suggestions page for more information.","title":"Experiment Page"},{"location":"experiment_page/#experiment-page","text":"","title":"Experiment page"},{"location":"experiment_page/#general-layout-of-the-page","text":"The experiment page is divided into 2 sections: Experiment Definition Section Visual Representation Section The Experiment Definition Section is comprised of 3 sub-sections: Scenario Constraint Bindings The Scenario section is used to define the actions and triggers of the experiment. The Constraint section is used to define the topology structure of the experiment. The Bindings section is used to bind the actions defined in the scenario to actual computer commands . The Visual Representation Section depicts two kinds of graphs: The Network Topology The Dependency Graph The Network Topology is used to depict the nodes of the nodes, and the connections that exist between them. The Dependency Graph is used to depict the actions of the experiment, and the dependencies that exist between these actions. A few general views of the page and its various components are shown below.","title":"General Layout of the Page"},{"location":"experiment_page/#navigating-the-page","text":"The initial page that opens once you create/open an experiment depicts the network topology of the experiment. You can click on the Graph Selector to toggle between the topology network and the dependency graph views. You can click on the Experiment Definition Section Toggle to toggle the Experiment Definition Section view.","title":"Navigating the Page"},{"location":"experiment_page/#tutorials","text":"View video tutorials on using the experiment page below:","title":"Tutorials"},{"location":"experiment_page/#experiment-name","text":"The name of the experiment is displayed on the top left corner of the page. To edit the name, click on the name and update the text. (just like Google docs) The name can be a maximum of 101 characters. The number of characters remaining is shown to the right of the name.","title":"Experiment Name"},{"location":"experiment_page/#menu-bar","text":"The menu bar is colored green when the experiment does not contain any unsaved changes. It is colored grey if the experiment contains unsaved changes. The status is also shown next to the access level to the right. Your level of access with the experiment is displayed towards the extreme right. The various buttons and their functions are as follows:","title":"Menu Bar"},{"location":"experiment_page/#back-button","text":"Click on the back button to go to the dashboard. Alternatively, you can use the back button in the browser.","title":"Back button"},{"location":"experiment_page/#file-menu","text":"This menu contains a number of file related operations. They are:","title":"File menu"},{"location":"experiment_page/#save","text":"Clicking on save will save the current experiment to the database.","title":"Save"},{"location":"experiment_page/#save-to-google-drive","text":"This button allows you to save the experiment to Google Drive. The experiment is saved in the DEW format. The user will have a top level directory called \u201cDistributed Experiment Workflows\u201d in their Google Drive. Inside the top level directory, we have folders created for each experiment. Files relevant to the experiment will be contained in the respective experiment folders. For example, if we have an experiment named \"test\", the DEW file will be located at MyDrive > Distributed Experiment Workflows > test > test.dew .","title":"Save to Google Drive"},{"location":"experiment_page/#delete","text":"Deletes the experiment in the DEW portal. This is a non-recoverable action. But, the experiment will still remain on your Google Drive, if you have saved it there.","title":"Delete"},{"location":"experiment_page/#version-history","text":"View the changes made previously to the experiment. To revert to a particular version, click on the revert button.","title":"Version history"},{"location":"experiment_page/#share-to-user","text":"Share the experiment with another DEW user for access. To learn more about sharing and access levels, visit the Sharing and Collaboration page","title":"Share to User"},{"location":"experiment_page/#list-of-users","text":"View and manage the list of users who can access the experiment. To learn more about sharing and access levels, visit Sharing and Collaboration page .","title":"List of users"},{"location":"experiment_page/#close","text":"Close the experiment and go back to the dashboard. Note: If the user has not saved the file, the file menu would have a restricted set of options as shown below.","title":"Close"},{"location":"experiment_page/#save_1","text":"This menu option is used to save the experiment to the database. Other file operations cannot be performed until the user has saved the experiment.","title":"Save"},{"location":"experiment_page/#input","text":"This menu option allows the user to upload an experiment saved locally in the DEW format or as a bash script. We hope to support more experiment formats in the near future.","title":"Input"},{"location":"experiment_page/#upload","text":"Upload DEW files to load the experiment. For example, the DEW file saved in Google Drive can be used for upload.","title":"Upload"},{"location":"experiment_page/#export","text":"This menu is used to export the experiment to different formats","title":"Export"},{"location":"experiment_page/#ns-file","text":"Download the NS file for the current experiment","title":"NS file"},{"location":"experiment_page/#bash-file","text":"Download the Bash script or scripts for the experiment. Currently the scripts should be run on Deterlab, from the users machine. Running the script without arguments will display a help message to tell you which input parameters you need to specify.","title":"BASH file"},{"location":"experiment_page/#dew","text":"Download the DEW file of the current experiment.","title":"DEW"},{"location":"experiment_page/#graph-views-and-manipulation","text":"As mentioned previously in the document, the Visual Representation Section comprises of the Network Topology Graph and the Dependency Graph . The steps to create and manipulate the graphs are shown below:","title":"Graph Views and Manipulation"},{"location":"experiment_page/#network-topology-graph","text":"The Network Topology Graph depicts the experiment nodes and the connections that exist between these nodes.","title":"Network Topology Graph"},{"location":"experiment_page/#graph-creation-and-manipulation","text":"Switch to the Network Topology Network View by clicking on the Topology Button in the Graph Selector bar. You can add nodes to the network by clicking on the Add Node button on the bottom portion of the screen. Nodes are represented as server icons in the graph. You can add a LAN to the network by clicking on the Add LAN button on the bottom portion of the screen. LANS are represented as black dots in the graph. You can add links between the nodes by clicking and holding Ctrl + Left Mouse Button between the 2 nodes that need to be linked. Links are represented as black lines in the graph. The Action Number towards the side of the node icon denotes the action sequence numbers of the actions associated with the actors (nodes). The network topology components and their symbols are shown below. You can define the parameters of a network node such as the Operating System , IP Address/Location , Number of Nodes , and Hardware Type by clicking on a node and modifying the fields in the popup that displays on the top-right portion of the screen. You can also define the parameters of a link/LAN such as the Bandwidth and Delay by clicking on the link/LAN and modifying the fields in the popup that displays on the top-right portion of the screen. The Topology Node/Link Parameter Definition popup is shown below. Any changes made to the network topology graph also reflects in the scenario and constraints in the Experiment Definition Section of the page.","title":"Graph Creation and Manipulation"},{"location":"experiment_page/#dependency-graph","text":"In order to understand the experiment better, we have a graph view which displays the experiment as a flowchart of actions. The nodes denote actions, with the color of the node denoting the actor that performs the given action. Edges denote a dependency, where one action results in an event and a following action waits for that event. You can create new edges (dependencies) between nodes, or delete existing edges (dependencies). As you modify the dependency graph, the modifications are propagated to the Experiment view. The Dependency Graph depicts the actions of the experiment, and the dependencies that exist between the actions.","title":"Dependency Graph"},{"location":"experiment_page/#graph-creation-and-manipulation_1","text":"Switch to the Dependency Graph View by clicking on the Dependency Button in the Graph Selector bar. You can add actions to the dependency graph by clicking on the Add Action button in the bottom portion of the screen. This will open up the Add Action Popup . Note that you can access the same Add Action Popup when you click on the Add Action button in the Topology Node/Link Parameter Definition popup that shows up when you click on a node in the network topology graph. Using the Add Action Popup , you can create an action by assigning an action name , trigger event , emit event , wait time , action binding , and event binding ; and then clicking on the Add Action button. You can also edit an action by clicking on the Edit Action button that shows up in the bottom portion of the screen when you click on the respective action. The Add Action Popup is shown in the image below. The Action Number towards the side of the action icon denotes the action sequence numbers of the actions associated with the actors (nodes in the graph legend). Any changes made to the dependency graph also reflects in the scenario and bindings in the Experiment Definition Section of the page. The dependency graph components and their symbols are shown below.","title":"Graph Creation and Manipulation"},{"location":"experiment_page/#behavior-constraints-and-bindings","text":"In DEW, an experiment consists of a scenario (who does what and when), constraints (how experiment should be materialized on a testbed) and bindings (specific commands to run on nodes for each action).","title":"Behavior, Constraints, and Bindings"},{"location":"experiment_page/#behavior","text":"Behavior defines the actions to be executed by actors during the experiment. You can think of an actor as a node in an experiment, or as many nodes that perform the same set of actions. You can think of an action as one or more commands executed on a node in an experiment. An action can result in an event (we say that it emits an event) and a later action will occur only when that event is generated. For example you may want to install an Apache application on the \u201cserver\u201d node, and then generate traffic to it from a \u201cclient\u201d node when the installation is completed. Two actions that are not connected by emit-when rules occur independently and in parallel. Please explore our examples to get familiar with some common uses of DEW language. Behavior statements are in the form of [when <event>][wait <time>] actor action [emit <event>] For example, if you want to express the following behavior \"A pings B, after that B waits 5 sec and pings A\" you would write: A start_ping1 emit ping1_done when ping1_done wait 5 B start_ping2 Conversely if you wanted A and B to ping each other in parallel you would write: A start_ping1 B start_ping2 Names of actors will eventually correspond to names of nodes in your experiments. Names of actions are chosen by you. You will get to define what they mean in the bindings section. As you start typing there will be auto-suggestion displayed near the top of the text area. Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase.","title":"Behavior"},{"location":"experiment_page/#constraints","text":"The constraints section helps define any constraints about the topology of the experiment, as it will be materialized on a testbed. The statements are in the form of constraint_type actor1 [actor2|value] The allowed constraint types are os num link lan interfaces location nodetype For example: os server ubuntu num attacker 3 lan client attacker link router server As you start typing there will be auto-suggestion displayed near the top of the text area. Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase.","title":"Constraints"},{"location":"experiment_page/#bindings","text":"The bindings section defines the commands to be executed on testbed nodes for the given action or event in your experiment. Choose an option from drop-down boxes or input your own commands. Variables are preceded by $ to indicate that their values should be replaced by constants in the design stage, or specified by user at run-time on the command line. For example: install_iperf apt-get install iperf -y run_tcpdump tcpdump -i expIP -w $file install_flooder /scripts/common/install_flooder.sh start_server iperf -s As you start typing behavior above this area will be populated with the terms which require definition for the experiment to execute. We have provided some suggestions for action and event bindings. Please look at the binding suggestions page for more information.","title":"Bindings"},{"location":"first_time/","text":"Registration View a video tutorial here DEW currently allows login with Google. After logging for the first time, you are required to provide a username and the institution you are from. The username is unique for all users. If it is not unique, you will be shown an error message below the textbox. A sample screenshot of the page can be seen below - After registering, you will be redirected to the dashboard","title":"First time setup"},{"location":"first_time/#registration","text":"View a video tutorial here DEW currently allows login with Google. After logging for the first time, you are required to provide a username and the institution you are from. The username is unique for all users. If it is not unique, you will be shown an error message below the textbox. A sample screenshot of the page can be seen below - After registering, you will be redirected to the dashboard","title":"Registration"},{"location":"manual_capture/","text":"From testbed to DEW Some users may develop their experiment manually and then desire to create scripts to run it automatically. Since experiment development may span several weeks or even months it is challenging for a user to recall what worked and when, to assemble a robust script. We have developed tools to aid in this process. Terminal input and output capture If you use the image Ubuntu-DEW in your experiment all your terminal input and the first 500 characters of your terminal output, along with the time, the current directory and the current user, will be logged in your project directory (in /proj/YourProject/logs/output_csv ). Automated file versioning If you use the image Ubuntu-DEW in your experiment we can save all changes you make to files on your nodes in a git repository. This can be very useful if e.g., you recall that some application you have spent days to configure worked fine last Tuesday, but you have since changed its configuration and you cannot recall what exactly you have changed. To use this fuctionality you need to take the following steps (only once per project): (1) Create the folder named upload_modified_files in /proj/YourProject/ , and (2) In that folder run: git init --bare After these actions, next time you swap in, the files you edit using vi, vim, emacs, nano, pico and files created through redirection will be saved in your project's git repository. Selecting files and commands for the script On a node that is booted into Ubuntu-DEW you can run python3 /usr/local/src/flight_log.py YourExperiment YourProject This will create a shell-like environment in which you can explore the history of that experiment. The view is illustrated below. Use help command to list the available commands. At the end you should have a runnable bash script in the folder you have specified. From bash scripts to DEW Coming soon","title":"From testbed to DEW"},{"location":"manual_capture/#from-testbed-to-dew","text":"Some users may develop their experiment manually and then desire to create scripts to run it automatically. Since experiment development may span several weeks or even months it is challenging for a user to recall what worked and when, to assemble a robust script. We have developed tools to aid in this process.","title":"From testbed to DEW"},{"location":"manual_capture/#terminal-input-and-output-capture","text":"If you use the image Ubuntu-DEW in your experiment all your terminal input and the first 500 characters of your terminal output, along with the time, the current directory and the current user, will be logged in your project directory (in /proj/YourProject/logs/output_csv ).","title":"Terminal input and output capture"},{"location":"manual_capture/#automated-file-versioning","text":"If you use the image Ubuntu-DEW in your experiment we can save all changes you make to files on your nodes in a git repository. This can be very useful if e.g., you recall that some application you have spent days to configure worked fine last Tuesday, but you have since changed its configuration and you cannot recall what exactly you have changed. To use this fuctionality you need to take the following steps (only once per project): (1) Create the folder named upload_modified_files in /proj/YourProject/ , and (2) In that folder run: git init --bare After these actions, next time you swap in, the files you edit using vi, vim, emacs, nano, pico and files created through redirection will be saved in your project's git repository.","title":"Automated file versioning"},{"location":"manual_capture/#selecting-files-and-commands-for-the-script","text":"On a node that is booted into Ubuntu-DEW you can run python3 /usr/local/src/flight_log.py YourExperiment YourProject This will create a shell-like environment in which you can explore the history of that experiment. The view is illustrated below. Use help command to list the available commands. At the end you should have a runnable bash script in the folder you have specified.","title":"Selecting files and commands for the script"},{"location":"manual_capture/#from-bash-scripts-to-dew","text":"Coming soon","title":"From bash scripts to DEW"},{"location":"profile_page/","text":"Profile Page The Profile Page is used to link Deterlab user accounts in order to run and monitor DEW experiments on Deterlab. The profile page is shown below: Linking a Deterlab User Account You can link Deterlab user accounts to your DEW profile by entering the Deterlab Username and Password in the respective fields of the User Details Form (shown on the upper-left portion of the screen). Once you link a Deterlab account, it will be added to the table shown in the right portion of the screen. The linked Deterlab accounts can be used to run and monitor DEW experiments on Deterlab.","title":"Profile Page"},{"location":"profile_page/#profile-page","text":"The Profile Page is used to link Deterlab user accounts in order to run and monitor DEW experiments on Deterlab. The profile page is shown below:","title":"Profile Page"},{"location":"profile_page/#linking-a-deterlab-user-account","text":"You can link Deterlab user accounts to your DEW profile by entering the Deterlab Username and Password in the respective fields of the User Details Form (shown on the upper-left portion of the screen). Once you link a Deterlab account, it will be added to the table shown in the right portion of the screen. The linked Deterlab accounts can be used to run and monitor DEW experiments on Deterlab.","title":"Linking a Deterlab User Account"},{"location":"run_deterlab_experiment/","text":"Deterlab Page The Deterlab page can be accessed from the Menu bar on the Experiment Page. This page can be used to run the corresponding DEW experiment on Deterlab and get the real-time status of the experiment. Pre-requisites Prior to running an experiment, make sure to add your deterlab profile at the Profile Page which can be found in the Side-Navigation Panel on the Dashboard page. Run DEW experiment on Deterlab","title":"Deterlab Page"},{"location":"run_deterlab_experiment/#deterlab-page","text":"The Deterlab page can be accessed from the Menu bar on the Experiment Page. This page can be used to run the corresponding DEW experiment on Deterlab and get the real-time status of the experiment.","title":"Deterlab Page"},{"location":"run_deterlab_experiment/#pre-requisites","text":"Prior to running an experiment, make sure to add your deterlab profile at the Profile Page which can be found in the Side-Navigation Panel on the Dashboard page.","title":"Pre-requisites"},{"location":"run_deterlab_experiment/#run-dew-experiment-on-deterlab","text":"","title":"Run DEW experiment on Deterlab"},{"location":"running_on_deter/","text":"From DEW to testbed Deterlab View a video tutorial for running on deterlab - To deploy your experiment on Deterlab please save it as NS file and as Bash script(s). Use the NS file to swap the experiment in. Once swapped in, run the Bash script or scripts on the users machine. If you run a script without parameters it will display an error message letting you know which parameters need to be specified. If you omit to specify something in your DEW format (e.g., bindings) the scripts may be incomplete and will not run. You can manually edit the scripts to provide missing information. Other testbeds Coming soon","title":"From DEW to testbed"},{"location":"running_on_deter/#from-dew-to-testbed","text":"","title":"From DEW to testbed"},{"location":"running_on_deter/#deterlab","text":"View a video tutorial for running on deterlab - To deploy your experiment on Deterlab please save it as NS file and as Bash script(s). Use the NS file to swap the experiment in. Once swapped in, run the Bash script or scripts on the users machine. If you run a script without parameters it will display an error message letting you know which parameters need to be specified. If you omit to specify something in your DEW format (e.g., bindings) the scripts may be incomplete and will not run. You can manually edit the scripts to provide missing information.","title":"Deterlab"},{"location":"running_on_deter/#other-testbeds","text":"Coming soon","title":"Other testbeds"},{"location":"sharing_and_collaboration/","text":"Sharing and Collaboration One of the benefits of DEW is the ability to share and collaborate with multiple people. It is possible to share directly on the UI or to use Google Drive. Sharing in DEW To share an experiment with another user, both users must have accounts in DEW. Along with sharing, the creator of the experiment can also control the access a user has for the experiment. Access levels There are 3 levels Spectator/Read only - The user can only view the experiment but cannot change it. Developer/Write - The user can change the contents of the experiment but cannot change sharing settings Admin/Manage - The user will have the ability to change all aspects of an experiment. The creator of the experiment will have this level of access. Sharing in Google Drive Another way to share with others is to save the experiment to Google Drive. After saving to Google Drive, the user can share the files to anyone just like any other folder or file on Google Drive. To know more about how to save to Google Drive, click here .","title":"Sharing and Collaboration"},{"location":"sharing_and_collaboration/#sharing-and-collaboration","text":"One of the benefits of DEW is the ability to share and collaborate with multiple people. It is possible to share directly on the UI or to use Google Drive.","title":"Sharing and Collaboration"},{"location":"sharing_and_collaboration/#sharing-in-dew","text":"To share an experiment with another user, both users must have accounts in DEW. Along with sharing, the creator of the experiment can also control the access a user has for the experiment.","title":"Sharing in DEW"},{"location":"sharing_and_collaboration/#access-levels","text":"There are 3 levels Spectator/Read only - The user can only view the experiment but cannot change it. Developer/Write - The user can change the contents of the experiment but cannot change sharing settings Admin/Manage - The user will have the ability to change all aspects of an experiment. The creator of the experiment will have this level of access.","title":"Access levels"},{"location":"sharing_and_collaboration/#sharing-in-google-drive","text":"Another way to share with others is to save the experiment to Google Drive. After saving to Google Drive, the user can share the files to anyone just like any other folder or file on Google Drive. To know more about how to save to Google Drive, click here .","title":"Sharing in Google Drive"}]}