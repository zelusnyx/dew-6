{"version":3,"file":"angular-user-idle.service.d.ts","sources":["angular-user-idle.service.d.ts"],"names":[],"mappingssourcesContent":["import { NgZone } from '@angular/core';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { UserIdleConfig } from './angular-user-idle.config';\n/**\n * User's idle service.\n */\nexport declare class UserIdleService {\n    private _ngZone;\n    ping$: Observable<any>;\n    /**\n     * Events that can interrupts user's inactivity timer.\n     */\n    protected activityEvents$: Observable<any>;\n    protected timerStart$: Subject<boolean>;\n    protected idleDetected$: Subject<boolean>;\n    protected timeout$: Subject<boolean>;\n    protected idle$: Observable<any>;\n    protected timer$: Observable<any>;\n    /**\n     * Idle value in milliseconds.\n     * Default equals to 10 minutes.\n     */\n    protected idleMillisec: number;\n    /**\n     * Idle buffer wait time milliseconds to collect user action\n     * Default equals to 1 Sec.\n     */\n    protected idleSensitivityMillisec: number;\n    /**\n     * Timeout value in seconds.\n     * Default equals to 5 minutes.\n     */\n    protected timeout: number;\n    /**\n     * Ping value in milliseconds.\n     * Default equals to 2 minutes.\n     */\n    protected pingMillisec: number;\n    /**\n     * Timeout status.\n     */\n    protected isTimeout: boolean;\n    /**\n     * Timer of user's inactivity is in progress.\n     */\n    protected isInactivityTimer: boolean;\n    protected isIdleDetected: boolean;\n    protected idleSubscription: Subscription;\n    constructor(config: UserIdleConfig, _ngZone: NgZone);\n    /**\n     * Start watching for user idle and setup timer and ping.\n     */\n    startWatching(): void;\n    stopWatching(): void;\n    stopTimer(): void;\n    resetTimer(): void;\n    /**\n     * Return observable for timer's countdown number that emits after idle.\n     */\n    onTimerStart(): Observable<number>;\n    /**\n     * Return observable for idle status changed\n     */\n    onIdleStatusChanged(): Observable<boolean>;\n    /**\n     * Return observable for timeout is fired.\n     */\n    onTimeout(): Observable<boolean>;\n    getConfigValue(): UserIdleConfig;\n    /**\n     * Set config values.\n     * @param config\n     */\n    setConfigValues(config: UserIdleConfig): void;\n    private setConfig;\n    /**\n     * Set custom activity events\n     *\n     * @param customEvents Example: merge(\n     *   fromEvent(window, 'mousemove'),\n     *   fromEvent(window, 'resize'),\n     *   fromEvent(document, 'keydown'),\n     *   fromEvent(document, 'touchstart'),\n     *   fromEvent(document, 'touchend')\n     * )\n     */\n    setCustomActivityEvents(customEvents: Observable<any>): void;\n    /**\n     * Setup timer.\n     *\n     * Counts every seconds and return n+1 and fire timeout for last count.\n     * @param timeout Timeout in seconds.\n     */\n    protected setupTimer(timeout: number): void;\n    /**\n     * Setup ping.\n     *\n     * Pings every ping-seconds only if is not timeout.\n     * @param pingMillisec\n     */\n    protected setupPing(pingMillisec: number): void;\n}\n"]}