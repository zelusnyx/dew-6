{"version":3,"sources":["ng://angular-user-idle/lib/angular-user-idle.config.ts","ng://angular-user-idle/lib/angular-user-idle.service.ts","ng://angular-user-idle/lib/angular-user-idle.module.ts"],"names":["UserIdleConfig","UserIdleService","config","_ngZone","this","timerStart$","Subject","idleDetected$","timeout$","idleMillisec","idleSensitivityMillisec","timeout","pingMillisec","setConfig","prototype","startWatching","_this","activityEvents$","merge","fromEvent","window","document","idle$","from","idleSubscription","unsubscribe","pipe","bufferTime","filter","arr","length","isIdleDetected","isInactivityTimer","tap","next","switchMap","runOutsideAngular","interval","takeUntil","timer","finalize","subscribe","setupTimer","setupPing","stopWatching","stopTimer","resetTimer","isTimeout","onTimerStart","distinctUntilChanged","start","timer$","of","onIdleStatusChanged","asObservable","onTimeout","map","getConfigValue","idle","idleSensitivity","ping","setConfigValues","closed","console","error","setCustomActivityEvents","customEvents","take","scan","acc","n","count","ping$","Injectable","args","providedIn","decorators","type","Optional","NgZone","UserIdleModule","forRoot","ngModule","providers","provide","useValue","NgModule","imports"],"mappings":"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","sourcesContent":["export class UserIdleConfig {\n  /**\n   * Idle value in seconds.\n   */\n  idle?: number;\n  /**\n   * Timeout value in seconds.\n   */\n  timeout?: number;\n  /**\n   * Ping value in seconds.\n   */\n  ping?: number;\n  /**\n   * IdleSensitivity time that activity must remain below the idle detection threshold before\n   * idle buffer timer count user's activity actions, in seconds.\n   */\n  idleSensitivity?: number;\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  from,\n  fromEvent,\n  interval,\n  merge,\n  Observable,\n  of,\n  Subject,\n  Subscription,\n  timer\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n/**\n * User's idle service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserIdleService {\n  ping$: Observable<any>;\n\n  /**\n   * Events that can interrupts user's inactivity timer.\n   */\n  protected activityEvents$: Observable<any>;\n\n  protected timerStart$ = new Subject<boolean>();\n  protected idleDetected$ = new Subject<boolean>();\n  protected timeout$ = new Subject<boolean>();\n  protected idle$: Observable<any>;\n  protected timer$: Observable<any>;\n  /**\n   * Idle value in milliseconds.\n   * Default equals to 10 minutes.\n   */\n  protected idleMillisec = 600 * 1000;\n  /**\n   * Idle buffer wait time milliseconds to collect user action\n   * Default equals to 1 Sec.\n   */\n  protected idleSensitivityMillisec = 1000;\n  /**\n   * Timeout value in seconds.\n   * Default equals to 5 minutes.\n   */\n  protected timeout = 300;\n  /**\n   * Ping value in milliseconds.\n   * Default equals to 2 minutes.\n   */\n  protected pingMillisec = 120 * 1000;\n  /**\n   * Timeout status.\n   */\n  protected isTimeout: boolean;\n  /**\n   * Timer of user's inactivity is in progress.\n   */\n  protected isInactivityTimer: boolean;\n  protected isIdleDetected: boolean;\n\n  protected idleSubscription: Subscription;\n\n  constructor(@Optional() config: UserIdleConfig, private _ngZone: NgZone) {\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    if (!this.activityEvents$) {\n      this.activityEvents$ = merge(\n        fromEvent(window, 'mousemove'),\n        fromEvent(window, 'resize'),\n        fromEvent(document, 'keydown')\n      );\n    }\n\n    this.idle$ = from(this.activityEvents$);\n\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    // If any of user events is not active for idle-seconds when start timer.\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(this.idleSensitivityMillisec), // Starting point of detecting of user's inactivity\n        filter(\n          arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer\n        ),\n        tap(() => {\n          this.isIdleDetected = true;\n          this.idleDetected$.next(true);\n        }),\n        switchMap(() =>\n          this._ngZone.runOutsideAngular(() =>\n            interval(1000).pipe(\n              takeUntil(\n                merge(\n                  this.activityEvents$,\n                  timer(this.idleMillisec).pipe(\n                    tap(() => {\n                      this.isInactivityTimer = true;\n                      this.timerStart$.next(true);\n                    })\n                  )\n                )\n              ),\n              finalize(() => {\n                this.isIdleDetected = false;\n                this.idleDetected$.next(false);\n              })\n            )\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setupPing(this.pingMillisec);\n  }\n\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  stopTimer() {\n    this.isInactivityTimer = false;\n    this.timerStart$.next(false);\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for idle status changed\n   */\n  onIdleStatusChanged(): Observable<boolean> {\n    return this.idleDetected$.asObservable();\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => (this.isTimeout = true)),\n      map(() => true)\n    );\n  }\n\n  getConfigValue(): UserIdleConfig {\n    return {\n      idle: this.idleMillisec,\n      idleSensitivity: this.idleSensitivityMillisec,\n      timeout: this.timeout,\n      ping: this.pingMillisec\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: UserIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    this.setConfig(config);\n  }\n\n  private setConfig(config: UserIdleConfig) {\n    if (config.idle) {\n      this.idleMillisec = config.idle * 1000;\n    }\n    if (config.ping) {\n      this.pingMillisec = config.ping * 1000;\n    }\n    if (config.idleSensitivity) {\n      this.idleSensitivityMillisec = config.idleSensitivity * 1000;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Set custom activity events\n   *\n   * @param customEvents Example: merge(\n   *   fromEvent(window, 'mousemove'),\n   *   fromEvent(window, 'resize'),\n   *   fromEvent(document, 'keydown'),\n   *   fromEvent(document, 'touchstart'),\n   *   fromEvent(document, 'touchend')\n   * )\n   */\n  setCustomActivityEvents(customEvents: Observable<any>) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set custom activity events');\n      return;\n    }\n\n    this.activityEvents$ = customEvents;\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  protected setupTimer(timeout: number) {\n    this._ngZone.runOutsideAngular(() => {\n      this.timer$ = interval(1000).pipe(\n        take(timeout),\n        map(() => 1),\n        scan((acc, n) => acc + n),\n        tap(count => {\n          if (count === timeout) {\n            this.timeout$.next(true);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param pingMillisec\n   */\n  protected setupPing(pingMillisec: number) {\n    this.ping$ = interval(pingMillisec).pipe(filter(() => !this.isTimeout));\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n@NgModule({\n  imports: []\n})\nexport class UserIdleModule {\n  static forRoot(config: UserIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: UserIdleModule,\n      providers: [\n        {provide: UserIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"]}