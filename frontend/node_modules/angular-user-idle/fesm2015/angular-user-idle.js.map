{"version":3,"file":"angular-user-idle.js.map","sources":["ng://angular-user-idle/lib/angular-user-idle.config.ts","ng://angular-user-idle/lib/angular-user-idle.service.ts","ng://angular-user-idle/lib/angular-user-idle.module.ts"],"sourcesContent":["export class UserIdleConfig {\n  /**\n   * Idle value in seconds.\n   */\n  idle?: number;\n  /**\n   * Timeout value in seconds.\n   */\n  timeout?: number;\n  /**\n   * Ping value in seconds.\n   */\n  ping?: number;\n  /**\n   * IdleSensitivity time that activity must remain below the idle detection threshold before\n   * idle buffer timer count user's activity actions, in seconds.\n   */\n  idleSensitivity?: number;\n}\n","import { Injectable, NgZone, Optional } from '@angular/core';\nimport {\n  from,\n  fromEvent,\n  interval,\n  merge,\n  Observable,\n  of,\n  Subject,\n  Subscription,\n  timer\n} from 'rxjs';\nimport {\n  bufferTime,\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  scan,\n  switchMap,\n  take,\n  takeUntil,\n  tap\n} from 'rxjs/operators';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n/**\n * User's idle service.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserIdleService {\n  ping$: Observable<any>;\n\n  /**\n   * Events that can interrupts user's inactivity timer.\n   */\n  protected activityEvents$: Observable<any>;\n\n  protected timerStart$ = new Subject<boolean>();\n  protected idleDetected$ = new Subject<boolean>();\n  protected timeout$ = new Subject<boolean>();\n  protected idle$: Observable<any>;\n  protected timer$: Observable<any>;\n  /**\n   * Idle value in milliseconds.\n   * Default equals to 10 minutes.\n   */\n  protected idleMillisec = 600 * 1000;\n  /**\n   * Idle buffer wait time milliseconds to collect user action\n   * Default equals to 1 Sec.\n   */\n  protected idleSensitivityMillisec = 1000;\n  /**\n   * Timeout value in seconds.\n   * Default equals to 5 minutes.\n   */\n  protected timeout = 300;\n  /**\n   * Ping value in milliseconds.\n   * Default equals to 2 minutes.\n   */\n  protected pingMillisec = 120 * 1000;\n  /**\n   * Timeout status.\n   */\n  protected isTimeout: boolean;\n  /**\n   * Timer of user's inactivity is in progress.\n   */\n  protected isInactivityTimer: boolean;\n  protected isIdleDetected: boolean;\n\n  protected idleSubscription: Subscription;\n\n  constructor(@Optional() config: UserIdleConfig, private _ngZone: NgZone) {\n    if (config) {\n      this.setConfig(config);\n    }\n  }\n\n  /**\n   * Start watching for user idle and setup timer and ping.\n   */\n  startWatching() {\n    if (!this.activityEvents$) {\n      this.activityEvents$ = merge(\n        fromEvent(window, 'mousemove'),\n        fromEvent(window, 'resize'),\n        fromEvent(document, 'keydown')\n      );\n    }\n\n    this.idle$ = from(this.activityEvents$);\n\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n\n    // If any of user events is not active for idle-seconds when start timer.\n    this.idleSubscription = this.idle$\n      .pipe(\n        bufferTime(this.idleSensitivityMillisec), // Starting point of detecting of user's inactivity\n        filter(\n          arr => !arr.length && !this.isIdleDetected && !this.isInactivityTimer\n        ),\n        tap(() => {\n          this.isIdleDetected = true;\n          this.idleDetected$.next(true);\n        }),\n        switchMap(() =>\n          this._ngZone.runOutsideAngular(() =>\n            interval(1000).pipe(\n              takeUntil(\n                merge(\n                  this.activityEvents$,\n                  timer(this.idleMillisec).pipe(\n                    tap(() => {\n                      this.isInactivityTimer = true;\n                      this.timerStart$.next(true);\n                    })\n                  )\n                )\n              ),\n              finalize(() => {\n                this.isIdleDetected = false;\n                this.idleDetected$.next(false);\n              })\n            )\n          )\n        )\n      )\n      .subscribe();\n\n    this.setupTimer(this.timeout);\n    this.setupPing(this.pingMillisec);\n  }\n\n  stopWatching() {\n    this.stopTimer();\n    if (this.idleSubscription) {\n      this.idleSubscription.unsubscribe();\n    }\n  }\n\n  stopTimer() {\n    this.isInactivityTimer = false;\n    this.timerStart$.next(false);\n  }\n\n  resetTimer() {\n    this.stopTimer();\n    this.isTimeout = false;\n  }\n\n  /**\n   * Return observable for timer's countdown number that emits after idle.\n   */\n  onTimerStart(): Observable<number> {\n    return this.timerStart$.pipe(\n      distinctUntilChanged(),\n      switchMap(start => (start ? this.timer$ : of(null)))\n    );\n  }\n\n  /**\n   * Return observable for idle status changed\n   */\n  onIdleStatusChanged(): Observable<boolean> {\n    return this.idleDetected$.asObservable();\n  }\n\n  /**\n   * Return observable for timeout is fired.\n   */\n  onTimeout(): Observable<boolean> {\n    return this.timeout$.pipe(\n      filter(timeout => !!timeout),\n      tap(() => (this.isTimeout = true)),\n      map(() => true)\n    );\n  }\n\n  getConfigValue(): UserIdleConfig {\n    return {\n      idle: this.idleMillisec,\n      idleSensitivity: this.idleSensitivityMillisec,\n      timeout: this.timeout,\n      ping: this.pingMillisec\n    };\n  }\n\n  /**\n   * Set config values.\n   * @param config\n   */\n  setConfigValues(config: UserIdleConfig) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set config values');\n      return;\n    }\n\n    this.setConfig(config);\n  }\n\n  private setConfig(config: UserIdleConfig) {\n    if (config.idle) {\n      this.idleMillisec = config.idle * 1000;\n    }\n    if (config.ping) {\n      this.pingMillisec = config.ping * 1000;\n    }\n    if (config.idleSensitivity) {\n      this.idleSensitivityMillisec = config.idleSensitivity * 1000;\n    }\n    if (config.timeout) {\n      this.timeout = config.timeout;\n    }\n  }\n\n  /**\n   * Set custom activity events\n   *\n   * @param customEvents Example: merge(\n   *   fromEvent(window, 'mousemove'),\n   *   fromEvent(window, 'resize'),\n   *   fromEvent(document, 'keydown'),\n   *   fromEvent(document, 'touchstart'),\n   *   fromEvent(document, 'touchend')\n   * )\n   */\n  setCustomActivityEvents(customEvents: Observable<any>) {\n    if (this.idleSubscription && !this.idleSubscription.closed) {\n      console.error('Call stopWatching() before set custom activity events');\n      return;\n    }\n\n    this.activityEvents$ = customEvents;\n  }\n\n  /**\n   * Setup timer.\n   *\n   * Counts every seconds and return n+1 and fire timeout for last count.\n   * @param timeout Timeout in seconds.\n   */\n  protected setupTimer(timeout: number) {\n    this._ngZone.runOutsideAngular(() => {\n      this.timer$ = interval(1000).pipe(\n        take(timeout),\n        map(() => 1),\n        scan((acc, n) => acc + n),\n        tap(count => {\n          if (count === timeout) {\n            this.timeout$.next(true);\n          }\n        })\n      );\n    });\n  }\n\n  /**\n   * Setup ping.\n   *\n   * Pings every ping-seconds only if is not timeout.\n   * @param pingMillisec\n   */\n  protected setupPing(pingMillisec: number) {\n    this.ping$ = interval(pingMillisec).pipe(filter(() => !this.isTimeout));\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { UserIdleConfig } from './angular-user-idle.config';\n\n@NgModule({\n  imports: []\n})\nexport class UserIdleModule {\n  static forRoot(config: UserIdleConfig): ModuleWithProviders {\n    return {\n      ngModule: UserIdleModule,\n      providers: [\n        {provide: UserIdleConfig, useValue: config}\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":"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"}
