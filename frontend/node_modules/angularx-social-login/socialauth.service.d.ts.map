{"version":3,"file":"socialauth.service.d.ts","sources":["socialauth.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Observable } from 'rxjs';\nimport { LoginProvider } from './entities/login-provider';\nimport { SocialUser } from './entities/social-user';\n/**\n * An interface to define the shape of the service configuration options.\n */\nexport interface SocialAuthServiceConfig {\n    autoLogin?: boolean;\n    providers: {\n        id: string;\n        provider: LoginProvider;\n    }[];\n    onError?: (error: any) => any;\n}\n/**\n * The service encapsulating the social login functionality. Exposes methods like\n * `signIn`, `signOut`. Also, exposes an `authState` `Observable` that one can\n * subscribe to get the current logged in user information.\n *\n * @dynamic\n */\nexport declare class SocialAuthService {\n    private static readonly ERR_LOGIN_PROVIDER_NOT_FOUND;\n    private static readonly ERR_NOT_LOGGED_IN;\n    private static readonly ERR_NOT_INITIALIZED;\n    private static readonly ERR_NOT_SUPPORTED_FOR_REFRESH_TOKEN;\n    private providers;\n    private autoLogin;\n    private _user;\n    private _authState;\n    private initialized;\n    private _initState;\n    /** An `Observable` that one can subscribe to get the current logged in user information */\n    get authState(): Observable<SocialUser>;\n    /** An `Observable` to communicate the readiness of the service and associated login providers */\n    get initState(): Observable<boolean>;\n    /**\n     * @param config A `SocialAuthServiceConfig` object or a `Promise` that resolves to a `SocialAuthServiceConfig` object\n     */\n    constructor(config: SocialAuthServiceConfig | Promise<SocialAuthServiceConfig>);\n    private initialize;\n    refreshAuthToken(providerId: string): Promise<void>;\n    /**\n     * A method used to sign in a user with a specific `LoginProvider`.\n     *\n     * @param providerId Id with which the `LoginProvider` has been registered with the service\n     * @param signInOptions Optional `LoginProvider` specific arguments\n     * @returns A `Promise` that resolves to the authenticated user information\n     */\n    signIn(providerId: string, signInOptions?: any): Promise<SocialUser>;\n    /**\n     * A method used to sign out the currently loggen in user.\n     *\n     * @param revoke Optional parameter to specify whether a hard sign out is to be performed\n     * @returns A `Promise` that resolves if the operation is successful, rejects otherwise\n     */\n    signOut(revoke?: boolean): Promise<void>;\n}\n"]}