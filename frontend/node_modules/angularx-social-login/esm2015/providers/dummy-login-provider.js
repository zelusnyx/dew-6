import { BaseLoginProvider } from '../entities/base-login-provider';
// Simulates login / logout without actually requiring an Internet connection.
//
// Useful for certain development situations.
//
// For example, if you want to simulate the greatest football referee England has ever produced:
//
//  const dummyUser: SocialUser = {
//     id: '0123456789',
//     name: 'Howard Webb',
//     email: 'howard@webb.com',
//     firstName: 'Howard',
//     lastName: 'Webb',
//     authToken: 'dummyAuthToken',
//     photoUrl: 'https://en.wikipedia.org/wiki/Howard_Webb#/media/File:Howard_Webb_march11.jpg',
//     provider: 'DUMMY',
//     idToken: 'dummyIdToken',
//     authorizationCode: 'dummyAuthCode'
// };
//
//  let config = new AuthServiceConfig([
//  { ... },
//  {
//       id: DummyLoginProvider.PROVIDER_ID,
//       provider: new DummyLoginProvider(dummyUser)  // Pass your user into the constructor
//   },
//  { ... }
//  ]);
export class DummyLoginProvider extends BaseLoginProvider {
    constructor(dummy) {
        super();
        if (dummy) {
            this.dummy = dummy;
        }
        else {
            this.dummy = DummyLoginProvider.DEFAULT_USER;
        }
        // Start not logged in
        this.loggedIn = false;
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => {
            if (this.loggedIn) {
                resolve(this.dummy);
            }
            else {
                reject('No user is currently logged in.');
            }
        });
    }
    initialize() {
        return new Promise((resolve, reject) => {
            resolve();
        });
    }
    signIn() {
        return new Promise((resolve, reject) => {
            this.loggedIn = true;
            resolve(this.dummy);
        });
    }
    signOut(revoke) {
        return new Promise((resolve, reject) => {
            this.loggedIn = false;
            resolve();
        });
    }
}
DummyLoginProvider.PROVIDER_ID = 'DUMMY';
DummyLoginProvider.DEFAULT_USER = {
    id: '1234567890',
    name: 'Mickey Mouse',
    email: 'mickey@mouse.com',
    firstName: 'Mickey',
    lastName: 'Mouse',
    authToken: 'dummyAuthToken',
    photoUrl: 'https://en.wikipedia.org/wiki/File:Mickey_Mouse.png',
    provider: 'DUMMY',
    idToken: 'dummyIdToken',
    authorizationCode: 'dummyAuthCode',
    response: {}
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVtbXktbG9naW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2pkdXR0YS9Qcm9qZWN0cy93ZWIvYW5ndWxhcngtc29jaWFsLWxvZ2luL3Byb2plY3RzL2xpYi9zcmMvIiwic291cmNlcyI6WyJwcm92aWRlcnMvZHVtbXktbG9naW4tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFJbEUsOEVBQThFO0FBQzlFLEVBQUU7QUFDRiw2Q0FBNkM7QUFDN0MsRUFBRTtBQUNGLGdHQUFnRztBQUNoRyxFQUFFO0FBQ0YsbUNBQW1DO0FBQ25DLHdCQUF3QjtBQUN4QiwyQkFBMkI7QUFDM0IsZ0NBQWdDO0FBQ2hDLDJCQUEyQjtBQUMzQix3QkFBd0I7QUFDeEIsbUNBQW1DO0FBQ25DLGlHQUFpRztBQUNqRyx5QkFBeUI7QUFDekIsK0JBQStCO0FBQy9CLHlDQUF5QztBQUN6QyxLQUFLO0FBQ0wsRUFBRTtBQUNGLHdDQUF3QztBQUN4QyxZQUFZO0FBQ1osS0FBSztBQUNMLDRDQUE0QztBQUM1Qyw0RkFBNEY7QUFDNUYsT0FBTztBQUNQLFdBQVc7QUFDWCxPQUFPO0FBR1AsTUFBTSxPQUFPLGtCQUFtQixTQUFRLGlCQUFpQjtJQXFCdkQsWUFBWSxLQUFrQjtRQUM1QixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksS0FBSyxFQUFFO1lBQ1QsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDcEI7YUFBTTtZQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsa0JBQWtCLENBQUMsWUFBWSxDQUFDO1NBQzlDO1FBRUQsc0JBQXNCO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDckI7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7YUFDM0M7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxPQUFPLEVBQUUsQ0FBQztRQUNaLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQWdCO1FBQ3RCLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDdEIsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBNURzQiw4QkFBVyxHQUFXLE9BQU8sQ0FBQztBQUVyQywrQkFBWSxHQUFHO0lBQzdCLEVBQUUsRUFBRSxZQUFZO0lBQ2hCLElBQUksRUFBRSxjQUFjO0lBQ3BCLEtBQUssRUFBRSxrQkFBa0I7SUFDekIsU0FBUyxFQUFFLFFBQVE7SUFDbkIsUUFBUSxFQUFFLE9BQU87SUFDakIsU0FBUyxFQUFFLGdCQUFnQjtJQUMzQixRQUFRLEVBQUUscURBQXFEO0lBQy9ELFFBQVEsRUFBRSxPQUFPO0lBQ2pCLE9BQU8sRUFBRSxjQUFjO0lBQ3ZCLGlCQUFpQixFQUFFLGVBQWU7SUFDbEMsUUFBUSxFQUFFLEVBQUU7Q0FDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCYXNlTG9naW5Qcm92aWRlcn0gZnJvbSAnLi4vZW50aXRpZXMvYmFzZS1sb2dpbi1wcm92aWRlcic7XG5pbXBvcnQge1NvY2lhbFVzZXJ9IGZyb20gJy4uL2VudGl0aWVzL3NvY2lhbC11c2VyJztcblxuXG4vLyBTaW11bGF0ZXMgbG9naW4gLyBsb2dvdXQgd2l0aG91dCBhY3R1YWxseSByZXF1aXJpbmcgYW4gSW50ZXJuZXQgY29ubmVjdGlvbi5cbi8vXG4vLyBVc2VmdWwgZm9yIGNlcnRhaW4gZGV2ZWxvcG1lbnQgc2l0dWF0aW9ucy5cbi8vXG4vLyBGb3IgZXhhbXBsZSwgaWYgeW91IHdhbnQgdG8gc2ltdWxhdGUgdGhlIGdyZWF0ZXN0IGZvb3RiYWxsIHJlZmVyZWUgRW5nbGFuZCBoYXMgZXZlciBwcm9kdWNlZDpcbi8vXG4vLyAgY29uc3QgZHVtbXlVc2VyOiBTb2NpYWxVc2VyID0ge1xuLy8gICAgIGlkOiAnMDEyMzQ1Njc4OScsXG4vLyAgICAgbmFtZTogJ0hvd2FyZCBXZWJiJyxcbi8vICAgICBlbWFpbDogJ2hvd2FyZEB3ZWJiLmNvbScsXG4vLyAgICAgZmlyc3ROYW1lOiAnSG93YXJkJyxcbi8vICAgICBsYXN0TmFtZTogJ1dlYmInLFxuLy8gICAgIGF1dGhUb2tlbjogJ2R1bW15QXV0aFRva2VuJyxcbi8vICAgICBwaG90b1VybDogJ2h0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hvd2FyZF9XZWJiIy9tZWRpYS9GaWxlOkhvd2FyZF9XZWJiX21hcmNoMTEuanBnJyxcbi8vICAgICBwcm92aWRlcjogJ0RVTU1ZJyxcbi8vICAgICBpZFRva2VuOiAnZHVtbXlJZFRva2VuJyxcbi8vICAgICBhdXRob3JpemF0aW9uQ29kZTogJ2R1bW15QXV0aENvZGUnXG4vLyB9O1xuLy9cbi8vICBsZXQgY29uZmlnID0gbmV3IEF1dGhTZXJ2aWNlQ29uZmlnKFtcbi8vICB7IC4uLiB9LFxuLy8gIHtcbi8vICAgICAgIGlkOiBEdW1teUxvZ2luUHJvdmlkZXIuUFJPVklERVJfSUQsXG4vLyAgICAgICBwcm92aWRlcjogbmV3IER1bW15TG9naW5Qcm92aWRlcihkdW1teVVzZXIpICAvLyBQYXNzIHlvdXIgdXNlciBpbnRvIHRoZSBjb25zdHJ1Y3RvclxuLy8gICB9LFxuLy8gIHsgLi4uIH1cbi8vICBdKTtcblxuXG5leHBvcnQgY2xhc3MgRHVtbXlMb2dpblByb3ZpZGVyIGV4dGVuZHMgQmFzZUxvZ2luUHJvdmlkZXIge1xuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IFBST1ZJREVSX0lEOiBzdHJpbmcgPSAnRFVNTVknO1xuXG4gIHN0YXRpYyByZWFkb25seSBERUZBVUxUX1VTRVIgPSB7XG4gICAgaWQ6ICcxMjM0NTY3ODkwJyxcbiAgICBuYW1lOiAnTWlja2V5IE1vdXNlJyxcbiAgICBlbWFpbDogJ21pY2tleUBtb3VzZS5jb20nLFxuICAgIGZpcnN0TmFtZTogJ01pY2tleScsXG4gICAgbGFzdE5hbWU6ICdNb3VzZScsXG4gICAgYXV0aFRva2VuOiAnZHVtbXlBdXRoVG9rZW4nLFxuICAgIHBob3RvVXJsOiAnaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmlsZTpNaWNrZXlfTW91c2UucG5nJyxcbiAgICBwcm92aWRlcjogJ0RVTU1ZJyxcbiAgICBpZFRva2VuOiAnZHVtbXlJZFRva2VuJyxcbiAgICBhdXRob3JpemF0aW9uQ29kZTogJ2R1bW15QXV0aENvZGUnLFxuICAgIHJlc3BvbnNlOiB7fVxuICB9O1xuXG4gIHByaXZhdGUgZHVtbXk6IFNvY2lhbFVzZXI7XG5cbiAgcHJpdmF0ZSBsb2dnZWRJbjogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihkdW1teT86IFNvY2lhbFVzZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChkdW1teSkge1xuICAgICAgdGhpcy5kdW1teSA9IGR1bW15O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmR1bW15ID0gRHVtbXlMb2dpblByb3ZpZGVyLkRFRkFVTFRfVVNFUjtcbiAgICB9XG5cbiAgICAvLyBTdGFydCBub3QgbG9nZ2VkIGluXG4gICAgdGhpcy5sb2dnZWRJbiA9IGZhbHNlO1xuICB9XG5cbiAgZ2V0TG9naW5TdGF0dXMoKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLmxvZ2dlZEluKSB7XG4gICAgICAgIHJlc29sdmUodGhpcy5kdW1teSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWplY3QoJ05vIHVzZXIgaXMgY3VycmVudGx5IGxvZ2dlZCBpbi4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNpZ25JbigpOiBQcm9taXNlPFNvY2lhbFVzZXI+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5sb2dnZWRJbiA9IHRydWU7XG4gICAgICByZXNvbHZlKHRoaXMuZHVtbXkpO1xuICAgIH0pO1xuICB9XG5cbiAgc2lnbk91dChyZXZva2U/OiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5sb2dnZWRJbiA9IGZhbHNlO1xuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9XG59XG4iXX0=