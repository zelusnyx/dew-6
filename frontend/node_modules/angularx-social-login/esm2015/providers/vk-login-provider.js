import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
export class VKLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = {
        fields: 'photo_max,contacts',
        version: '5.124',
    }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
        this.VK_API_URL = '//vk.com/js/api/openapi.js';
        this.VK_API_GET_USER = 'users.get';
    }
    initialize() {
        return new Promise((resolve, reject) => {
            try {
                this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {
                    VK.init({
                        apiId: this.clientId,
                    });
                    resolve();
                });
            }
            catch (err) {
                reject(err);
            }
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));
    }
    signIn() {
        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));
    }
    signOut() {
        return new Promise((resolve, reject) => {
            VK.Auth.logout((response) => {
                resolve();
            });
        });
    }
    signInInternal(resolve, reject) {
        VK.Auth.login((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    getUser(userId, token, resolve) {
        VK.Api.call(this.VK_API_GET_USER, {
            user_id: userId,
            fields: this.initOptions.fields,
            v: this.initOptions.version,
        }, (userResponse) => {
            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));
        });
    }
    getLoginStatusInternal(resolve, reject) {
        VK.Auth.getLoginStatus((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    createUser(response) {
        const user = new SocialUser();
        user.id = response.id;
        user.name = `${response.first_name} ${response.last_name}`;
        user.photoUrl = response.photo_max;
        user.authToken = response.token;
        return user;
    }
}
VKLoginProvider.PROVIDER_ID = 'VK';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmstbG9naW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL2pkdXR0YS9Qcm9qZWN0cy93ZWIvYW5ndWxhcngtc29jaWFsLWxvZ2luL3Byb2plY3RzL2xpYi9zcmMvIiwic291cmNlcyI6WyJwcm92aWRlcnMvdmstbG9naW4tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBSXJELE1BQU0sT0FBTyxlQUFnQixTQUFRLGlCQUFpQjtJQUNwRCxZQUNVLFFBQWdCLEVBQ2hCLGNBQW1CO1FBQ3pCLE1BQU0sRUFBRSxvQkFBb0I7UUFDNUIsT0FBTyxFQUFFLE9BQU87S0FDakI7UUFFRCxLQUFLLEVBQUUsQ0FBQztRQU5BLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsZ0JBQVcsR0FBWCxXQUFXLENBR2xCO1FBT2MsZUFBVSxHQUFHLDRCQUE0QixDQUFDO1FBQzFDLG9CQUFlLEdBQUcsV0FBVyxDQUFDO0lBTC9DLENBQUM7SUFPRCxVQUFVO1FBQ1IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxJQUFJO2dCQUNGLElBQUksQ0FBQyxVQUFVLENBQ2IsZUFBZSxDQUFDLFdBQVcsRUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFDZixHQUFHLEVBQUU7b0JBQ0gsRUFBRSxDQUFDLElBQUksQ0FBQzt3QkFDTixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVE7cUJBQ3JCLENBQUMsQ0FBQztvQkFFSCxPQUFPLEVBQUUsQ0FBQztnQkFDWixDQUFDLENBQ0YsQ0FBQzthQUNIO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxjQUFjO1FBQ1osT0FBTyxJQUFJLE9BQU8sQ0FBYSxDQUFDLE9BQVksRUFBRSxNQUFXLEVBQUUsRUFBRSxDQUMzRCxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUM3QyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU07UUFDSixPQUFPLElBQUksT0FBTyxDQUFhLENBQUMsT0FBWSxFQUFFLE1BQVcsRUFBRSxFQUFFLENBQzNELElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUNyQyxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBYSxFQUFFLEVBQUU7Z0JBQy9CLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxjQUFjLENBQUMsT0FBWSxFQUFFLE1BQVc7UUFDOUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxhQUFrQixFQUFFLEVBQUU7WUFDbkMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FDVixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ3pCLE9BQU8sQ0FDUixDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxPQUFPLENBQUMsTUFBVyxFQUFFLEtBQVUsRUFBRSxPQUFZO1FBQ25ELEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUNULElBQUksQ0FBQyxlQUFlLEVBQ3BCO1lBQ0UsT0FBTyxFQUFFLE1BQU07WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNO1lBQy9CLENBQUMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87U0FDNUIsRUFDRCxDQUFDLFlBQWlCLEVBQUUsRUFBRTtZQUNwQixPQUFPLENBQ0wsSUFBSSxDQUFDLFVBQVUsQ0FDYixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDdkQsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRU8sc0JBQXNCLENBQUMsT0FBWSxFQUFFLE1BQVc7UUFDdEQsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxhQUFrQixFQUFFLEVBQUU7WUFDNUMsSUFBSSxhQUFhLENBQUMsTUFBTSxLQUFLLFdBQVcsRUFBRTtnQkFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FDVixhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFDekIsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ3pCLE9BQU8sQ0FDUixDQUFDO2FBQ0g7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxVQUFVLENBQUMsUUFBYTtRQUM5QixNQUFNLElBQUksR0FBZSxJQUFJLFVBQVUsRUFBRSxDQUFDO1FBQzFDLElBQUksQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsUUFBUSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDO1FBQ25DLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQztRQUNoQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7O0FBOUZzQiwyQkFBVyxHQUFXLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VMb2dpblByb3ZpZGVyIH0gZnJvbSAnLi4vZW50aXRpZXMvYmFzZS1sb2dpbi1wcm92aWRlcic7XG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vZW50aXRpZXMvc29jaWFsLXVzZXInO1xuXG5kZWNsYXJlIGxldCBWSzogYW55O1xuXG5leHBvcnQgY2xhc3MgVktMb2dpblByb3ZpZGVyIGV4dGVuZHMgQmFzZUxvZ2luUHJvdmlkZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGNsaWVudElkOiBzdHJpbmcsXG4gICAgcHJpdmF0ZSBpbml0T3B0aW9uczogYW55ID0ge1xuICAgICAgZmllbGRzOiAncGhvdG9fbWF4LGNvbnRhY3RzJyxcbiAgICAgIHZlcnNpb246ICc1LjEyNCcsXG4gICAgfVxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9WSURFUl9JRDogc3RyaW5nID0gJ1ZLJztcblxuICBwcml2YXRlIHJlYWRvbmx5IFZLX0FQSV9VUkwgPSAnLy92ay5jb20vanMvYXBpL29wZW5hcGkuanMnO1xuICBwcml2YXRlIHJlYWRvbmx5IFZLX0FQSV9HRVRfVVNFUiA9ICd1c2Vycy5nZXQnO1xuXG4gIGluaXRpYWxpemUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRoaXMubG9hZFNjcmlwdChcbiAgICAgICAgICBWS0xvZ2luUHJvdmlkZXIuUFJPVklERVJfSUQsXG4gICAgICAgICAgdGhpcy5WS19BUElfVVJMLFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIFZLLmluaXQoe1xuICAgICAgICAgICAgICBhcGlJZDogdGhpcy5jbGllbnRJZCxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZ2V0TG9naW5TdGF0dXMoKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PlxuICAgICAgdGhpcy5nZXRMb2dpblN0YXR1c0ludGVybmFsKHJlc29sdmUsIHJlamVjdClcbiAgICApO1xuICB9XG5cbiAgc2lnbkluKCk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxTb2NpYWxVc2VyPigocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkgPT5cbiAgICAgIHRoaXMuc2lnbkluSW50ZXJuYWwocmVzb2x2ZSwgcmVqZWN0KVxuICAgICk7XG4gIH1cblxuICBzaWduT3V0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBWSy5BdXRoLmxvZ291dCgocmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2lnbkluSW50ZXJuYWwocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkge1xuICAgIFZLLkF1dGgubG9naW4oKGxvZ2luUmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgaWYgKGxvZ2luUmVzcG9uc2Uuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICB0aGlzLmdldFVzZXIoXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLm1pZCxcbiAgICAgICAgICBsb2dpblJlc3BvbnNlLnNlc3Npb24uc2lkLFxuICAgICAgICAgIHJlc29sdmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VXNlcih1c2VySWQ6IGFueSwgdG9rZW46IGFueSwgcmVzb2x2ZTogYW55KSB7XG4gICAgVksuQXBpLmNhbGwoXG4gICAgICB0aGlzLlZLX0FQSV9HRVRfVVNFUixcbiAgICAgIHtcbiAgICAgICAgdXNlcl9pZDogdXNlcklkLFxuICAgICAgICBmaWVsZHM6IHRoaXMuaW5pdE9wdGlvbnMuZmllbGRzLFxuICAgICAgICB2OiB0aGlzLmluaXRPcHRpb25zLnZlcnNpb24sXG4gICAgICB9LFxuICAgICAgKHVzZXJSZXNwb25zZTogYW55KSA9PiB7XG4gICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgdGhpcy5jcmVhdGVVc2VyKFxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih7fSwgeyB0b2tlbiB9LCB1c2VyUmVzcG9uc2UucmVzcG9uc2VbMF0pXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGdldExvZ2luU3RhdHVzSW50ZXJuYWwocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkge1xuICAgIFZLLkF1dGguZ2V0TG9naW5TdGF0dXMoKGxvZ2luUmVzcG9uc2U6IGFueSkgPT4ge1xuICAgICAgaWYgKGxvZ2luUmVzcG9uc2Uuc3RhdHVzID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICB0aGlzLmdldFVzZXIoXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLm1pZCxcbiAgICAgICAgICBsb2dpblJlc3BvbnNlLnNlc3Npb24uc2lkLFxuICAgICAgICAgIHJlc29sdmVcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVXNlcihyZXNwb25zZTogYW55KTogU29jaWFsVXNlciB7XG4gICAgY29uc3QgdXNlcjogU29jaWFsVXNlciA9IG5ldyBTb2NpYWxVc2VyKCk7XG4gICAgdXNlci5pZCA9IHJlc3BvbnNlLmlkO1xuICAgIHVzZXIubmFtZSA9IGAke3Jlc3BvbnNlLmZpcnN0X25hbWV9ICR7cmVzcG9uc2UubGFzdF9uYW1lfWA7XG4gICAgdXNlci5waG90b1VybCA9IHJlc3BvbnNlLnBob3RvX21heDtcbiAgICB1c2VyLmF1dGhUb2tlbiA9IHJlc3BvbnNlLnRva2VuO1xuICAgIHJldHVybiB1c2VyO1xuICB9XG59XG4iXX0=