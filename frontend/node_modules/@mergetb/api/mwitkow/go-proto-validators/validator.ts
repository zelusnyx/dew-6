/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "validator";

export interface FieldValidator {
  /** Uses a Golang RE2-syntax regex to match the field contents. */
  regex: string;
  /** Field value of integer strictly greater than this value. */
  intGt: number;
  /** Field value of integer strictly smaller than this value. */
  intLt: number;
  /** Used for nested message types, requires that the message type exists. */
  msgExists: boolean;
  /** Human error specifies a user-customizable error that is visible to the user. */
  humanError: string;
  /**
   * Field value of double strictly greater than this value.
   * Note that this value can only take on a valid floating point
   * value. Use together with float_epsilon if you need something more specific.
   */
  floatGt: number;
  /**
   * Field value of double strictly smaller than this value.
   * Note that this value can only take on a valid floating point
   * value. Use together with float_epsilon if you need something more specific.
   */
  floatLt: number;
  /**
   * Field value of double describing the epsilon within which
   * any comparison should be considered to be true. For example,
   * when using float_gt = 0.35, using a float_epsilon of 0.05
   * would mean that any value above 0.30 is acceptable. It can be
   * thought of as a {float_value_condition} +- {float_epsilon}.
   * If unset, no correction for floating point inaccuracies in
   * comparisons will be attempted.
   */
  floatEpsilon: number;
  /** Floating-point value compared to which the field content should be greater or equal. */
  floatGte: number;
  /** Floating-point value compared to which the field content should be smaller or equal. */
  floatLte: number;
  /** Used for string fields, requires the string to be not empty (i.e different from ""). */
  stringNotEmpty: boolean;
  /** Repeated field with at least this number of elements. */
  repeatedCountMin: number;
  /** Repeated field with at most this number of elements. */
  repeatedCountMax: number;
  /** Field value of length greater than this value. */
  lengthGt: number;
  /** Field value of length smaller than this value. */
  lengthLt: number;
  /** Field value of length strictly equal to this value. */
  lengthEq: number;
  /** Requires that the value is in the enum. */
  isInEnum: boolean;
  /**
   * Ensures that a string value is in UUID format.
   * uuid_ver specifies the valid UUID versions. Valid values are: 0-5.
   * If uuid_ver is 0 all UUID versions are accepted.
   */
  uuidVer: number;
}

export interface OneofValidator {
  /** Require that one of the oneof fields is set. */
  required: boolean;
}

function createBaseFieldValidator(): FieldValidator {
  return {
    regex: "",
    intGt: 0,
    intLt: 0,
    msgExists: false,
    humanError: "",
    floatGt: 0,
    floatLt: 0,
    floatEpsilon: 0,
    floatGte: 0,
    floatLte: 0,
    stringNotEmpty: false,
    repeatedCountMin: 0,
    repeatedCountMax: 0,
    lengthGt: 0,
    lengthLt: 0,
    lengthEq: 0,
    isInEnum: false,
    uuidVer: 0,
  };
}

export const FieldValidator = {
  encode(message: FieldValidator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.regex !== "") {
      writer.uint32(10).string(message.regex);
    }
    if (message.intGt !== 0) {
      writer.uint32(16).int64(message.intGt);
    }
    if (message.intLt !== 0) {
      writer.uint32(24).int64(message.intLt);
    }
    if (message.msgExists === true) {
      writer.uint32(32).bool(message.msgExists);
    }
    if (message.humanError !== "") {
      writer.uint32(42).string(message.humanError);
    }
    if (message.floatGt !== 0) {
      writer.uint32(49).double(message.floatGt);
    }
    if (message.floatLt !== 0) {
      writer.uint32(57).double(message.floatLt);
    }
    if (message.floatEpsilon !== 0) {
      writer.uint32(65).double(message.floatEpsilon);
    }
    if (message.floatGte !== 0) {
      writer.uint32(73).double(message.floatGte);
    }
    if (message.floatLte !== 0) {
      writer.uint32(81).double(message.floatLte);
    }
    if (message.stringNotEmpty === true) {
      writer.uint32(88).bool(message.stringNotEmpty);
    }
    if (message.repeatedCountMin !== 0) {
      writer.uint32(96).int64(message.repeatedCountMin);
    }
    if (message.repeatedCountMax !== 0) {
      writer.uint32(104).int64(message.repeatedCountMax);
    }
    if (message.lengthGt !== 0) {
      writer.uint32(112).int64(message.lengthGt);
    }
    if (message.lengthLt !== 0) {
      writer.uint32(120).int64(message.lengthLt);
    }
    if (message.lengthEq !== 0) {
      writer.uint32(128).int64(message.lengthEq);
    }
    if (message.isInEnum === true) {
      writer.uint32(136).bool(message.isInEnum);
    }
    if (message.uuidVer !== 0) {
      writer.uint32(144).int32(message.uuidVer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): FieldValidator {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFieldValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.regex = reader.string();
          break;
        case 2:
          message.intGt = longToNumber(reader.int64() as Long);
          break;
        case 3:
          message.intLt = longToNumber(reader.int64() as Long);
          break;
        case 4:
          message.msgExists = reader.bool();
          break;
        case 5:
          message.humanError = reader.string();
          break;
        case 6:
          message.floatGt = reader.double();
          break;
        case 7:
          message.floatLt = reader.double();
          break;
        case 8:
          message.floatEpsilon = reader.double();
          break;
        case 9:
          message.floatGte = reader.double();
          break;
        case 10:
          message.floatLte = reader.double();
          break;
        case 11:
          message.stringNotEmpty = reader.bool();
          break;
        case 12:
          message.repeatedCountMin = longToNumber(reader.int64() as Long);
          break;
        case 13:
          message.repeatedCountMax = longToNumber(reader.int64() as Long);
          break;
        case 14:
          message.lengthGt = longToNumber(reader.int64() as Long);
          break;
        case 15:
          message.lengthLt = longToNumber(reader.int64() as Long);
          break;
        case 16:
          message.lengthEq = longToNumber(reader.int64() as Long);
          break;
        case 17:
          message.isInEnum = reader.bool();
          break;
        case 18:
          message.uuidVer = reader.int32();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): FieldValidator {
    return {
      regex: isSet(object.regex) ? String(object.regex) : "",
      intGt: isSet(object.intGt) ? Number(object.intGt) : 0,
      intLt: isSet(object.intLt) ? Number(object.intLt) : 0,
      msgExists: isSet(object.msgExists) ? Boolean(object.msgExists) : false,
      humanError: isSet(object.humanError) ? String(object.humanError) : "",
      floatGt: isSet(object.floatGt) ? Number(object.floatGt) : 0,
      floatLt: isSet(object.floatLt) ? Number(object.floatLt) : 0,
      floatEpsilon: isSet(object.floatEpsilon) ? Number(object.floatEpsilon) : 0,
      floatGte: isSet(object.floatGte) ? Number(object.floatGte) : 0,
      floatLte: isSet(object.floatLte) ? Number(object.floatLte) : 0,
      stringNotEmpty: isSet(object.stringNotEmpty) ? Boolean(object.stringNotEmpty) : false,
      repeatedCountMin: isSet(object.repeatedCountMin) ? Number(object.repeatedCountMin) : 0,
      repeatedCountMax: isSet(object.repeatedCountMax) ? Number(object.repeatedCountMax) : 0,
      lengthGt: isSet(object.lengthGt) ? Number(object.lengthGt) : 0,
      lengthLt: isSet(object.lengthLt) ? Number(object.lengthLt) : 0,
      lengthEq: isSet(object.lengthEq) ? Number(object.lengthEq) : 0,
      isInEnum: isSet(object.isInEnum) ? Boolean(object.isInEnum) : false,
      uuidVer: isSet(object.uuidVer) ? Number(object.uuidVer) : 0,
    };
  },

  toJSON(message: FieldValidator): unknown {
    const obj: any = {};
    message.regex !== undefined && (obj.regex = message.regex);
    message.intGt !== undefined && (obj.intGt = Math.round(message.intGt));
    message.intLt !== undefined && (obj.intLt = Math.round(message.intLt));
    message.msgExists !== undefined && (obj.msgExists = message.msgExists);
    message.humanError !== undefined && (obj.humanError = message.humanError);
    message.floatGt !== undefined && (obj.floatGt = message.floatGt);
    message.floatLt !== undefined && (obj.floatLt = message.floatLt);
    message.floatEpsilon !== undefined && (obj.floatEpsilon = message.floatEpsilon);
    message.floatGte !== undefined && (obj.floatGte = message.floatGte);
    message.floatLte !== undefined && (obj.floatLte = message.floatLte);
    message.stringNotEmpty !== undefined && (obj.stringNotEmpty = message.stringNotEmpty);
    message.repeatedCountMin !== undefined && (obj.repeatedCountMin = Math.round(message.repeatedCountMin));
    message.repeatedCountMax !== undefined && (obj.repeatedCountMax = Math.round(message.repeatedCountMax));
    message.lengthGt !== undefined && (obj.lengthGt = Math.round(message.lengthGt));
    message.lengthLt !== undefined && (obj.lengthLt = Math.round(message.lengthLt));
    message.lengthEq !== undefined && (obj.lengthEq = Math.round(message.lengthEq));
    message.isInEnum !== undefined && (obj.isInEnum = message.isInEnum);
    message.uuidVer !== undefined && (obj.uuidVer = Math.round(message.uuidVer));
    return obj;
  },

  create<I extends Exact<DeepPartial<FieldValidator>, I>>(base?: I): FieldValidator {
    return FieldValidator.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<FieldValidator>, I>>(object: I): FieldValidator {
    const message = createBaseFieldValidator();
    message.regex = object.regex ?? "";
    message.intGt = object.intGt ?? 0;
    message.intLt = object.intLt ?? 0;
    message.msgExists = object.msgExists ?? false;
    message.humanError = object.humanError ?? "";
    message.floatGt = object.floatGt ?? 0;
    message.floatLt = object.floatLt ?? 0;
    message.floatEpsilon = object.floatEpsilon ?? 0;
    message.floatGte = object.floatGte ?? 0;
    message.floatLte = object.floatLte ?? 0;
    message.stringNotEmpty = object.stringNotEmpty ?? false;
    message.repeatedCountMin = object.repeatedCountMin ?? 0;
    message.repeatedCountMax = object.repeatedCountMax ?? 0;
    message.lengthGt = object.lengthGt ?? 0;
    message.lengthLt = object.lengthLt ?? 0;
    message.lengthEq = object.lengthEq ?? 0;
    message.isInEnum = object.isInEnum ?? false;
    message.uuidVer = object.uuidVer ?? 0;
    return message;
  },
};

function createBaseOneofValidator(): OneofValidator {
  return { required: false };
}

export const OneofValidator = {
  encode(message: OneofValidator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.required === true) {
      writer.uint32(8).bool(message.required);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): OneofValidator {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOneofValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.required = reader.bool();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): OneofValidator {
    return { required: isSet(object.required) ? Boolean(object.required) : false };
  },

  toJSON(message: OneofValidator): unknown {
    const obj: any = {};
    message.required !== undefined && (obj.required = message.required);
    return obj;
  },

  create<I extends Exact<DeepPartial<OneofValidator>, I>>(base?: I): OneofValidator {
    return OneofValidator.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<OneofValidator>, I>>(object: I): OneofValidator {
    const message = createBaseOneofValidator();
    message.required = object.required ?? false;
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
