import _m0 from "protobufjs/minimal";
import { Facility as Facility1 } from "../../mergetb/xir/v0.3/core";
import { PatchStrategy } from "./patch_types";
import { AccessMode, AccessModeUpdate, DescriptionUpdate, Member, MembershipUpdate } from "./workspace_types";
export declare const protobufPackage = "portal.v1";
export interface Facility {
    name: string;
    address: string;
    description: string;
    accessMode: AccessMode;
    members: {
        [key: string]: Member;
    };
    certificate: string;
    cacertificate: string;
    ver: number;
}
export interface Facility_MembersEntry {
    key: string;
    value: Member | undefined;
}
export interface BlockPool {
    blocks: string[];
}
export interface RegisterFacilityRequest {
    facility: Facility | undefined;
    model: Facility1 | undefined;
}
export interface RegisterFacilityResponse {
    code: number;
    message: string;
}
export interface GetFacilitiesRequest {
}
export interface GetFacilitiesResponse {
    facilities: Facility[];
}
export interface GetFacilityRequest {
    name: string;
    withModel: boolean;
}
export interface GetFacilityResponse {
    facility: Facility | undefined;
    model: Facility1 | undefined;
}
export interface UpdateFacilityRequest {
    /** Name of the facility to update */
    name: string;
    /** Optional facility address update. Empty string indicates no update. */
    address: string;
    /** Optional description update. */
    description: DescriptionUpdate | undefined;
    /** Optional access mode update. */
    accessMode: AccessModeUpdate | undefined;
    /** Optional experiment membership update. */
    members: MembershipUpdate | undefined;
    /** Optional cert update. Empty string indicates no update. */
    certificate: string;
    cacertificate: string;
    /** Optional model update */
    model: Facility1 | undefined;
    /** If a model is given, how to merge the model into the existing one. */
    modelPatchStrategy: PatchStrategy | undefined;
}
export interface UpdateFacilityResponse {
}
export interface DeleteFacilityRequest {
    name: string;
}
export interface DeleteFacilityResponse {
}
export interface DeactivateResourcesRequest {
    facility: string;
    resources: string[];
}
export interface DeactivateResourcesResponse {
}
export interface ActivateResourcesRequest {
    facility: string;
    resources: string[];
}
export interface ActivateResourcesResponse {
}
export interface ListBlockPoolsRequest {
}
export interface ListBlockPoolsResponse {
}
export interface InitHarborRequest {
    facility: string;
    ver: number;
    rid: string;
    eid: string;
    pid: string;
}
export interface InitHarborResponse {
}
export interface DeinitHarborRequest {
    facility: string;
    ver: number;
    rid: string;
    eid: string;
    pid: string;
}
export interface DeinitHarborResponse {
}
export declare const Facility: {
    encode(message: Facility, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Facility;
    fromJSON(object: any): Facility;
    toJSON(message: Facility): unknown;
    create<I extends {
        name?: string;
        address?: string;
        description?: string;
        accessMode?: AccessMode;
        members?: {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            };
        };
        certificate?: string;
        cacertificate?: string;
        ver?: number;
    } & {
        name?: string;
        address?: string;
        description?: string;
        accessMode?: AccessMode;
        members?: {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            };
        } & {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            } & {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            } & { [K in Exclude<keyof I["members"][string], keyof Member>]: never; };
        } & { [K_1 in Exclude<keyof I["members"], string | number>]: never; };
        certificate?: string;
        cacertificate?: string;
        ver?: number;
    } & { [K_2 in Exclude<keyof I, keyof Facility>]: never; }>(base?: I): Facility;
    fromPartial<I_1 extends {
        name?: string;
        address?: string;
        description?: string;
        accessMode?: AccessMode;
        members?: {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            };
        };
        certificate?: string;
        cacertificate?: string;
        ver?: number;
    } & {
        name?: string;
        address?: string;
        description?: string;
        accessMode?: AccessMode;
        members?: {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            };
        } & {
            [x: string]: {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            } & {
                role?: import("./workspace_types").Member_Role;
                state?: import("./workspace_types").Member_State;
            } & { [K_3 in Exclude<keyof I_1["members"][string], keyof Member>]: never; };
        } & { [K_4 in Exclude<keyof I_1["members"], string | number>]: never; };
        certificate?: string;
        cacertificate?: string;
        ver?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof Facility>]: never; }>(object: I_1): Facility;
};
export declare const Facility_MembersEntry: {
    encode(message: Facility_MembersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Facility_MembersEntry;
    fromJSON(object: any): Facility_MembersEntry;
    toJSON(message: Facility_MembersEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        } & {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Facility_MembersEntry>]: never; }>(base?: I): Facility_MembersEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        } & {
            role?: import("./workspace_types").Member_Role;
            state?: import("./workspace_types").Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Facility_MembersEntry>]: never; }>(object: I_1): Facility_MembersEntry;
};
export declare const BlockPool: {
    encode(message: BlockPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BlockPool;
    fromJSON(object: any): BlockPool;
    toJSON(message: BlockPool): unknown;
    create<I extends {
        blocks?: string[];
    } & {
        blocks?: string[] & string[] & { [K in Exclude<keyof I["blocks"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "blocks">]: never; }>(base?: I): BlockPool;
    fromPartial<I_1 extends {
        blocks?: string[];
    } & {
        blocks?: string[] & string[] & { [K_2 in Exclude<keyof I_1["blocks"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "blocks">]: never; }>(object: I_1): BlockPool;
};
export declare const RegisterFacilityRequest: {
    encode(message: RegisterFacilityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterFacilityRequest;
    fromJSON(object: any): RegisterFacilityRequest;
    toJSON(message: RegisterFacilityRequest): unknown;
    create<I extends {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
    } & {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K in Exclude<keyof I["facility"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["facility"]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_2 in Exclude<keyof I["facility"], keyof Facility>]: never; };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_3 in Exclude<keyof I["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_4 in Exclude<keyof I["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_5 in Exclude<keyof I["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_6 in Exclude<keyof I["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_7 in Exclude<keyof I["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_8 in Exclude<keyof I["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_9 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_10 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_11 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_12 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_13 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_14 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_15 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_16 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_17 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_18 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_19 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_20 in Exclude<keyof I["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_21 in Exclude<keyof I["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_22 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_23 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_24 in Exclude<keyof I["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_25 in Exclude<keyof I["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_26 in Exclude<keyof I["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_27 in Exclude<keyof I["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_28 in Exclude<keyof I["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_29 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_30 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_31 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_32 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_33 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_34 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_35 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_36 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_37 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_38 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_39 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_40 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_41 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_42 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_43 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_44 in Exclude<keyof I["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_45 in Exclude<keyof I["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_46 in Exclude<keyof I["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_47 in Exclude<keyof I["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_48 in Exclude<keyof I["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_49 in Exclude<keyof I["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_50 in Exclude<keyof I["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_51 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_52 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_53 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_54 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_55 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_56 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_57 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_58 in Exclude<keyof I["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_59 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_60 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_61 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_62 in Exclude<keyof I["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_63 in Exclude<keyof I["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_64 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_65 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_66 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_67 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_68 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_69 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_70 in Exclude<keyof I["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_71 in Exclude<keyof I["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_72 in Exclude<keyof I["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_73 in Exclude<keyof I["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_74 in Exclude<keyof I["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_75 in Exclude<keyof I["model"], keyof Facility1>]: never; };
    } & { [K_76 in Exclude<keyof I, keyof RegisterFacilityRequest>]: never; }>(base?: I): RegisterFacilityRequest;
    fromPartial<I_1 extends {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
    } & {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K_77 in Exclude<keyof I_1["facility"]["members"][string], keyof Member>]: never; };
            } & { [K_78 in Exclude<keyof I_1["facility"]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_79 in Exclude<keyof I_1["facility"], keyof Facility>]: never; };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_80 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_81 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_82 in Exclude<keyof I_1["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_83 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_84 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_85 in Exclude<keyof I_1["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_86 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_87 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_88 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_89 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_90 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_91 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_92 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_93 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_94 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_95 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_96 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_97 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_98 in Exclude<keyof I_1["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_99 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_100 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_101 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_102 in Exclude<keyof I_1["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_103 in Exclude<keyof I_1["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_104 in Exclude<keyof I_1["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_105 in Exclude<keyof I_1["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_106 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_107 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_108 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_109 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_110 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_111 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_112 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_113 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_114 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_115 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_116 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_117 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_118 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_119 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_120 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_121 in Exclude<keyof I_1["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_122 in Exclude<keyof I_1["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_123 in Exclude<keyof I_1["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_124 in Exclude<keyof I_1["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_125 in Exclude<keyof I_1["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_126 in Exclude<keyof I_1["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_127 in Exclude<keyof I_1["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_128 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_129 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_130 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_131 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_132 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_133 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_134 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_135 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_136 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_137 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_138 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_139 in Exclude<keyof I_1["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_140 in Exclude<keyof I_1["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_141 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_142 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_143 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_144 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_145 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_146 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_147 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_148 in Exclude<keyof I_1["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_149 in Exclude<keyof I_1["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_150 in Exclude<keyof I_1["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_151 in Exclude<keyof I_1["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_152 in Exclude<keyof I_1["model"], keyof Facility1>]: never; };
    } & { [K_153 in Exclude<keyof I_1, keyof RegisterFacilityRequest>]: never; }>(object: I_1): RegisterFacilityRequest;
};
export declare const RegisterFacilityResponse: {
    encode(message: RegisterFacilityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterFacilityResponse;
    fromJSON(object: any): RegisterFacilityResponse;
    toJSON(message: RegisterFacilityResponse): unknown;
    create<I extends {
        code?: number;
        message?: string;
    } & {
        code?: number;
        message?: string;
    } & { [K in Exclude<keyof I, keyof RegisterFacilityResponse>]: never; }>(base?: I): RegisterFacilityResponse;
    fromPartial<I_1 extends {
        code?: number;
        message?: string;
    } & {
        code?: number;
        message?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RegisterFacilityResponse>]: never; }>(object: I_1): RegisterFacilityResponse;
};
export declare const GetFacilitiesRequest: {
    encode(_: GetFacilitiesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFacilitiesRequest;
    fromJSON(_: any): GetFacilitiesRequest;
    toJSON(_: GetFacilitiesRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetFacilitiesRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetFacilitiesRequest;
};
export declare const GetFacilitiesResponse: {
    encode(message: GetFacilitiesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFacilitiesResponse;
    fromJSON(object: any): GetFacilitiesResponse;
    toJSON(message: GetFacilitiesResponse): unknown;
    create<I extends {
        facilities?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[];
    } & {
        facilities?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[] & ({
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K in Exclude<keyof I["facilities"][number]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["facilities"][number]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_2 in Exclude<keyof I["facilities"][number], keyof Facility>]: never; })[] & { [K_3 in Exclude<keyof I["facilities"], keyof {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[]>]: never; };
    } & { [K_4 in Exclude<keyof I, "facilities">]: never; }>(base?: I): GetFacilitiesResponse;
    fromPartial<I_1 extends {
        facilities?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[];
    } & {
        facilities?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[] & ({
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K_5 in Exclude<keyof I_1["facilities"][number]["members"][string], keyof Member>]: never; };
            } & { [K_6 in Exclude<keyof I_1["facilities"][number]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_7 in Exclude<keyof I_1["facilities"][number], keyof Facility>]: never; })[] & { [K_8 in Exclude<keyof I_1["facilities"], keyof {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "facilities">]: never; }>(object: I_1): GetFacilitiesResponse;
};
export declare const GetFacilityRequest: {
    encode(message: GetFacilityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFacilityRequest;
    fromJSON(object: any): GetFacilityRequest;
    toJSON(message: GetFacilityRequest): unknown;
    create<I extends {
        name?: string;
        withModel?: boolean;
    } & {
        name?: string;
        withModel?: boolean;
    } & { [K in Exclude<keyof I, keyof GetFacilityRequest>]: never; }>(base?: I): GetFacilityRequest;
    fromPartial<I_1 extends {
        name?: string;
        withModel?: boolean;
    } & {
        name?: string;
        withModel?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof GetFacilityRequest>]: never; }>(object: I_1): GetFacilityRequest;
};
export declare const GetFacilityResponse: {
    encode(message: GetFacilityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetFacilityResponse;
    fromJSON(object: any): GetFacilityResponse;
    toJSON(message: GetFacilityResponse): unknown;
    create<I extends {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
    } & {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K in Exclude<keyof I["facility"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["facility"]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_2 in Exclude<keyof I["facility"], keyof Facility>]: never; };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_3 in Exclude<keyof I["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_4 in Exclude<keyof I["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_5 in Exclude<keyof I["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_6 in Exclude<keyof I["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_7 in Exclude<keyof I["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_8 in Exclude<keyof I["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_9 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_10 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_11 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_12 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_13 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_14 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_15 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_16 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_17 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_18 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_19 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_20 in Exclude<keyof I["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_21 in Exclude<keyof I["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_22 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_23 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_24 in Exclude<keyof I["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_25 in Exclude<keyof I["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_26 in Exclude<keyof I["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_27 in Exclude<keyof I["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_28 in Exclude<keyof I["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_29 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_30 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_31 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_32 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_33 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_34 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_35 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_36 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_37 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_38 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_39 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_40 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_41 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_42 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_43 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_44 in Exclude<keyof I["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_45 in Exclude<keyof I["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_46 in Exclude<keyof I["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_47 in Exclude<keyof I["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_48 in Exclude<keyof I["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_49 in Exclude<keyof I["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_50 in Exclude<keyof I["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_51 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_52 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_53 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_54 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_55 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_56 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_57 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_58 in Exclude<keyof I["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_59 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_60 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_61 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_62 in Exclude<keyof I["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_63 in Exclude<keyof I["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_64 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_65 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_66 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_67 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_68 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_69 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_70 in Exclude<keyof I["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_71 in Exclude<keyof I["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_72 in Exclude<keyof I["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_73 in Exclude<keyof I["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_74 in Exclude<keyof I["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_75 in Exclude<keyof I["model"], keyof Facility1>]: never; };
    } & { [K_76 in Exclude<keyof I, keyof GetFacilityResponse>]: never; }>(base?: I): GetFacilityResponse;
    fromPartial<I_1 extends {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
    } & {
        facility?: {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & {
            name?: string;
            address?: string;
            description?: string;
            accessMode?: AccessMode;
            members?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K_77 in Exclude<keyof I_1["facility"]["members"][string], keyof Member>]: never; };
            } & { [K_78 in Exclude<keyof I_1["facility"]["members"], string | number>]: never; };
            certificate?: string;
            cacertificate?: string;
            ver?: number;
        } & { [K_79 in Exclude<keyof I_1["facility"], keyof Facility>]: never; };
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_80 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_81 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_82 in Exclude<keyof I_1["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_83 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_84 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_85 in Exclude<keyof I_1["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_86 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_87 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_88 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_89 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_90 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_91 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_92 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_93 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_94 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_95 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_96 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_97 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_98 in Exclude<keyof I_1["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_99 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_100 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_101 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_102 in Exclude<keyof I_1["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_103 in Exclude<keyof I_1["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_104 in Exclude<keyof I_1["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_105 in Exclude<keyof I_1["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_106 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_107 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_108 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_109 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_110 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_111 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_112 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_113 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_114 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_115 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_116 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_117 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_118 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_119 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_120 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_121 in Exclude<keyof I_1["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_122 in Exclude<keyof I_1["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_123 in Exclude<keyof I_1["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_124 in Exclude<keyof I_1["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_125 in Exclude<keyof I_1["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_126 in Exclude<keyof I_1["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_127 in Exclude<keyof I_1["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_128 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_129 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_130 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_131 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_132 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_133 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_134 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_135 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_136 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_137 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_138 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_139 in Exclude<keyof I_1["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_140 in Exclude<keyof I_1["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_141 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_142 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_143 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_144 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_145 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_146 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_147 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_148 in Exclude<keyof I_1["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_149 in Exclude<keyof I_1["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_150 in Exclude<keyof I_1["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_151 in Exclude<keyof I_1["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_152 in Exclude<keyof I_1["model"], keyof Facility1>]: never; };
    } & { [K_153 in Exclude<keyof I_1, keyof GetFacilityResponse>]: never; }>(object: I_1): GetFacilityResponse;
};
export declare const UpdateFacilityRequest: {
    encode(message: UpdateFacilityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateFacilityRequest;
    fromJSON(object: any): UpdateFacilityRequest;
    toJSON(message: UpdateFacilityRequest): unknown;
    create<I extends {
        name?: string;
        address?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
        };
        certificate?: string;
        cacertificate?: string;
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
        modelPatchStrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        name?: string;
        address?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K in Exclude<keyof I["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_1 in Exclude<keyof I["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_2 in Exclude<keyof I["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K_3 in Exclude<keyof I["members"]["set"][string], keyof Member>]: never; };
            } & { [K_4 in Exclude<keyof I["members"]["set"], string | number>]: never; };
        } & { [K_5 in Exclude<keyof I["members"], keyof MembershipUpdate>]: never; };
        certificate?: string;
        cacertificate?: string;
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_6 in Exclude<keyof I["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_7 in Exclude<keyof I["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_8 in Exclude<keyof I["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_9 in Exclude<keyof I["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_10 in Exclude<keyof I["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_11 in Exclude<keyof I["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_12 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_13 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_14 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_15 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_16 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_17 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_18 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_19 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_20 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_21 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_22 in Exclude<keyof I["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_23 in Exclude<keyof I["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_24 in Exclude<keyof I["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_25 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_26 in Exclude<keyof I["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_27 in Exclude<keyof I["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_28 in Exclude<keyof I["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_29 in Exclude<keyof I["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_30 in Exclude<keyof I["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_31 in Exclude<keyof I["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_32 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_33 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_34 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_35 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_36 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_37 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_38 in Exclude<keyof I["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_39 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_40 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_41 in Exclude<keyof I["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_42 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_43 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_44 in Exclude<keyof I["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_45 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_46 in Exclude<keyof I["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_47 in Exclude<keyof I["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_48 in Exclude<keyof I["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_49 in Exclude<keyof I["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_50 in Exclude<keyof I["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_51 in Exclude<keyof I["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_52 in Exclude<keyof I["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_53 in Exclude<keyof I["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_54 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_55 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_56 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_57 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_58 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_59 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_60 in Exclude<keyof I["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_61 in Exclude<keyof I["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_62 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_63 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_64 in Exclude<keyof I["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_65 in Exclude<keyof I["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_66 in Exclude<keyof I["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_67 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_68 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_69 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_70 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_71 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_72 in Exclude<keyof I["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_73 in Exclude<keyof I["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_74 in Exclude<keyof I["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_75 in Exclude<keyof I["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_76 in Exclude<keyof I["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_77 in Exclude<keyof I["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_78 in Exclude<keyof I["model"], keyof Facility1>]: never; };
        modelPatchStrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_79 in Exclude<keyof I["modelPatchStrategy"], "strategy">]: never; };
    } & { [K_80 in Exclude<keyof I, keyof UpdateFacilityRequest>]: never; }>(base?: I): UpdateFacilityRequest;
    fromPartial<I_1 extends {
        name?: string;
        address?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
        };
        certificate?: string;
        cacertificate?: string;
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        };
        modelPatchStrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        name?: string;
        address?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K_81 in Exclude<keyof I_1["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_82 in Exclude<keyof I_1["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_83 in Exclude<keyof I_1["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                };
            } & {
                [x: string]: {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & {
                    role?: import("./workspace_types").Member_Role;
                    state?: import("./workspace_types").Member_State;
                } & { [K_84 in Exclude<keyof I_1["members"]["set"][string], keyof Member>]: never; };
            } & { [K_85 in Exclude<keyof I_1["members"]["set"], string | number>]: never; };
        } & { [K_86 in Exclude<keyof I_1["members"], keyof MembershipUpdate>]: never; };
        certificate?: string;
        cacertificate?: string;
        model?: {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[];
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[];
        } & {
            id?: string;
            fqdn?: string;
            resources?: {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[] & ({
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[] & ({
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                } & {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_87 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCores?: number;
                } & { [K_88 in Exclude<keyof I_1["model"]["resources"][number]["procs"][number], keyof import("../../mergetb/xir/v0.3/core").Proc>]: never; })[] & { [K_89 in Exclude<keyof I_1["model"]["resources"][number]["procs"], keyof {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[]>]: never; };
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[] & ({
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                } & {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_90 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    reservedCapacity?: number;
                } & { [K_91 in Exclude<keyof I_1["model"]["resources"][number]["memory"][number], keyof import("../../mergetb/xir/v0.3/core").Dimm>]: never; })[] & { [K_92 in Exclude<keyof I_1["model"]["resources"][number]["memory"], keyof {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[]>]: never; };
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[] & ({
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_93 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_94 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                        } & { [K_95 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_96 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                        bond?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & { [K_97 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        } & {
                            Pf?: {
                                MaxVFs?: number;
                            } & {
                                MaxVFs?: number;
                            } & { [K_98 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                            Vf?: {
                                VfIndex?: number;
                            } & {
                                VfIndex?: number;
                            } & { [K_99 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                            PfNi?: number;
                            PfPi?: number;
                        } & { [K_100 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof import("../../mergetb/xir/v0.3/core").SRIOV>]: never; };
                    } & { [K_101 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").Port>]: never; })[] & { [K_102 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["ports"], keyof {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[]>]: never; };
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_103 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                } & { [K_104 in Exclude<keyof I_1["model"]["resources"][number]["NICs"][number], keyof import("../../mergetb/xir/v0.3/core").NIC>]: never; })[] & { [K_105 in Exclude<keyof I_1["model"]["resources"][number]["NICs"], keyof {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[]>]: never; };
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[] & ({
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                } & {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    } & { [K_106 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[] & import("../../mergetb/xir/v0.3/core").DiskRole[] & { [K_107 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").DiskRole[]>]: never; };
                    NVMEControllerIndex?: number;
                } & { [K_108 in Exclude<keyof I_1["model"]["resources"][number]["disks"][number], keyof import("../../mergetb/xir/v0.3/core").Disk>]: never; })[] & { [K_109 in Exclude<keyof I_1["model"]["resources"][number]["disks"], keyof {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[]>]: never; };
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[] & import("../../mergetb/xir/v0.3/core").AllocMode[] & { [K_110 in Exclude<keyof I_1["model"]["resources"][number]["alloc"], keyof import("../../mergetb/xir/v0.3/core").AllocMode[]>]: never; };
                roles?: import("../../mergetb/xir/v0.3/core").Role[] & import("../../mergetb/xir/v0.3/core").Role[] & { [K_111 in Exclude<keyof I_1["model"]["resources"][number]["roles"], keyof import("../../mergetb/xir/v0.3/core").Role[]>]: never; };
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                } & { [K_112 in Exclude<keyof I_1["model"]["resources"][number]["firmware"], "kind">]: never; };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[] & ({
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    } & {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        } & { [K_113 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_114 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[]>]: never; };
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        } & {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[] & ({
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            } & { [K_115 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof import("../../mergetb/xir/v0.3/core").InterfaceConfig>]: never; })[] & { [K_116 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[]>]: never; };
                        } & { [K_117 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                    } & { [K_118 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"][number], keyof import("../../mergetb/xir/v0.3/core").BGPRouterConfig>]: never; })[] & { [K_119 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["BGP"], keyof {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[]>]: never; };
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[] & string[] & { [K_120 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_121 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"][number], keyof import("../../mergetb/xir/v0.3/core").BridgeConfig>]: never; })[] & { [K_122 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["bridge"], keyof {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[] & ({
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & {
                        device?: string;
                        vid?: number;
                        addrs?: string[] & string[] & { [K_123 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    } & { [K_124 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"][number], keyof import("../../mergetb/xir/v0.3/core").VLANConfig>]: never; })[] & { [K_125 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["VLAN"], keyof {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[]>]: never; };
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    } & {
                        [x: number]: {
                            address?: string;
                        } & {
                            address?: string;
                        } & { [K_126 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                    } & { [K_127 in Exclude<keyof I_1["model"]["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                } & { [K_128 in Exclude<keyof I_1["model"]["resources"][number]["OS"], keyof import("../../mergetb/xir/v0.3/core").OSConfig>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_129 in Exclude<keyof I_1["model"]["resources"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                } & { [K_130 in Exclude<keyof I_1["model"]["resources"][number]["ipmi"], keyof import("../../mergetb/xir/v0.3/core").BMC>]: never; };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                } & { [K_131 in Exclude<keyof I_1["model"]["resources"][number]["relayboard"], keyof import("../../mergetb/xir/v0.3/core").RelayBoard>]: never; };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & {
                    host?: string;
                    outlets?: number[] & number[] & { [K_132 in Exclude<keyof I_1["model"]["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                } & { [K_133 in Exclude<keyof I_1["model"]["resources"][number]["pdu"], keyof import("../../mergetb/xir/v0.3/core").PowerDistributionUnit>]: never; };
                raven?: {
                    host?: string;
                } & {
                    host?: string;
                } & { [K_134 in Exclude<keyof I_1["model"]["resources"][number]["raven"], "host">]: never; };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                } & {
                    serviceAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_135 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_136 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                    tenantAddressBlocks?: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_137 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                    } & { [K_138 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    } & {
                        [x: string]: {
                            list?: string[];
                        } & {
                            list?: string[] & string[] & { [K_139 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                        } & { [K_140 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                    } & { [K_141 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
                } & { [K_142 in Exclude<keyof I_1["model"]["resources"][number]["leafConfig"], keyof import("../../mergetb/xir/v0.3/core").LeafConfig>]: never; };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_143 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                    } & { [K_144 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"][string], "list">]: never; };
                } & { [K_145 in Exclude<keyof I_1["model"]["resources"][number]["infranetAddr"], string | number>]: never; };
            } & { [K_146 in Exclude<keyof I_1["model"]["resources"][number], keyof import("../../mergetb/xir/v0.3/core").Resource>]: never; })[] & { [K_147 in Exclude<keyof I_1["model"]["resources"], keyof {
                id?: string;
                facility?: string;
                procs?: {
                    isa?: import("../../mergetb/xir/v0.3/core").ISA;
                    family?: string;
                    BaseFrequency?: number;
                    L2?: number;
                    cores?: number;
                    threads?: number;
                    tdp?: number;
                    hyperthreaded?: boolean;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCores?: number;
                }[];
                memory?: {
                    type?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    capacity?: number;
                    frequency?: number;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    reservedCapacity?: number;
                }[];
                NICs?: {
                    ports?: {
                        parent?: string;
                        index?: number;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        mac?: string;
                        formFactor?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        connector?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        TPA?: number;
                        queues?: number;
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                        bond?: {
                            name?: string;
                        };
                        name?: string;
                        sriov?: {
                            Pf?: {
                                MaxVFs?: number;
                            };
                            Vf?: {
                                VfIndex?: number;
                            };
                            PfNi?: number;
                            PfPi?: number;
                        };
                    }[];
                    startingIndex?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").NICKind;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    DPDK?: boolean;
                    model?: import("../../mergetb/xir/v0.3/core").NICModel;
                }[];
                disks?: {
                    capacity?: number;
                    formFactor?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    diskInterface?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    productInfo?: {
                        Manufacturer?: string;
                        Model?: string;
                        SKU?: string;
                        Integrated?: boolean;
                        cost?: number;
                    };
                    roles?: import("../../mergetb/xir/v0.3/core").DiskRole[];
                    NVMEControllerIndex?: number;
                }[];
                alloc?: import("../../mergetb/xir/v0.3/core").AllocMode[];
                roles?: import("../../mergetb/xir/v0.3/core").Role[];
                firmware?: {
                    kind?: import("../../mergetb/xir/v0.3/core").Firmware_Kind;
                };
                OS?: {
                    BGP?: {
                        vrf?: string;
                        ASN?: number;
                        Interfaces?: {
                            address?: string;
                            interface?: string;
                            role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                        }[];
                        EVPN?: {
                            TunnelEndpoints?: {
                                address?: string;
                                interface?: string;
                                role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                            }[];
                        };
                    }[];
                    bridge?: {
                        name?: string;
                        vlanAware?: boolean;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    VLAN?: {
                        device?: string;
                        vid?: number;
                        addrs?: string[];
                        role?: import("../../mergetb/xir/v0.3/core").LinkRole;
                    }[];
                    serviceEndpoints?: {
                        [x: number]: {
                            address?: string;
                        };
                    };
                    append?: string;
                    rootdev?: string;
                    defaultImage?: string;
                };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                TPA?: number;
                ipmi?: {
                    host?: string;
                    kind?: import("../../mergetb/xir/v0.3/core").BMC_Kind;
                };
                relayboard?: {
                    host?: string;
                    index?: number;
                    kind?: import("../../mergetb/xir/v0.3/core").RelayBoard_Kind;
                };
                pdu?: {
                    host?: string;
                    outlets?: number[];
                    kind?: import("../../mergetb/xir/v0.3/core").PowerDistributionUnit_Kind;
                };
                raven?: {
                    host?: string;
                };
                leafConfig?: {
                    serviceAddressBlocks?: {
                        list?: string[];
                    };
                    tenantAddressBlocks?: {
                        list?: string[];
                    };
                    infrapodAddressBlocks?: {
                        [x: string]: {
                            list?: string[];
                        };
                    };
                };
                infranetAddr?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            }[]>]: never; };
            cables?: {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[] & ({
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            } & {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[] & ({
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                } & {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[] & ({
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    } & {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_148 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_149 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                        } & { [K_150 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        } & {
                            index?: number;
                            radix?: number;
                        } & { [K_151 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof import("../../mergetb/xir/v0.3/core").Breakout>]: never; };
                    } & { [K_152 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"][number], keyof import("../../mergetb/xir/v0.3/core").Connector>]: never; })[] & { [K_153 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number]["connectors"], keyof {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[]>]: never; };
                } & { [K_154 in Exclude<keyof I_1["model"]["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_155 in Exclude<keyof I_1["model"]["cables"][number]["ends"], keyof {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[]>]: never; };
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_156 in Exclude<keyof I_1["model"]["cables"][number]["productInfo"], keyof import("../../mergetb/xir/v0.3/core").ProductInfo>]: never; };
            } & { [K_157 in Exclude<keyof I_1["model"]["cables"][number], keyof import("../../mergetb/xir/v0.3/core").Cable>]: never; })[] & { [K_158 in Exclude<keyof I_1["model"]["cables"], keyof {
                id?: string;
                facility?: string;
                kind?: import("../../mergetb/xir/v0.3/core").CableKind;
                ends?: {
                    connectors?: {
                        parent?: string;
                        index?: number;
                        kind?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                        Port?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        breakout?: {
                            index?: number;
                            radix?: number;
                        };
                    }[];
                }[];
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
            }[]>]: never; };
        } & { [K_159 in Exclude<keyof I_1["model"], keyof Facility1>]: never; };
        modelPatchStrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_160 in Exclude<keyof I_1["modelPatchStrategy"], "strategy">]: never; };
    } & { [K_161 in Exclude<keyof I_1, keyof UpdateFacilityRequest>]: never; }>(object: I_1): UpdateFacilityRequest;
};
export declare const UpdateFacilityResponse: {
    encode(_: UpdateFacilityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateFacilityResponse;
    fromJSON(_: any): UpdateFacilityResponse;
    toJSON(_: UpdateFacilityResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateFacilityResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateFacilityResponse;
};
export declare const DeleteFacilityRequest: {
    encode(message: DeleteFacilityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFacilityRequest;
    fromJSON(object: any): DeleteFacilityRequest;
    toJSON(message: DeleteFacilityRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): DeleteFacilityRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): DeleteFacilityRequest;
};
export declare const DeleteFacilityResponse: {
    encode(_: DeleteFacilityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteFacilityResponse;
    fromJSON(_: any): DeleteFacilityResponse;
    toJSON(_: DeleteFacilityResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteFacilityResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteFacilityResponse;
};
export declare const DeactivateResourcesRequest: {
    encode(message: DeactivateResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateResourcesRequest;
    fromJSON(object: any): DeactivateResourcesRequest;
    toJSON(message: DeactivateResourcesRequest): unknown;
    create<I extends {
        facility?: string;
        resources?: string[];
    } & {
        facility?: string;
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof DeactivateResourcesRequest>]: never; }>(base?: I): DeactivateResourcesRequest;
    fromPartial<I_1 extends {
        facility?: string;
        resources?: string[];
    } & {
        facility?: string;
        resources?: string[] & string[] & { [K_2 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof DeactivateResourcesRequest>]: never; }>(object: I_1): DeactivateResourcesRequest;
};
export declare const DeactivateResourcesResponse: {
    encode(_: DeactivateResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeactivateResourcesResponse;
    fromJSON(_: any): DeactivateResourcesResponse;
    toJSON(_: DeactivateResourcesResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeactivateResourcesResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeactivateResourcesResponse;
};
export declare const ActivateResourcesRequest: {
    encode(message: ActivateResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateResourcesRequest;
    fromJSON(object: any): ActivateResourcesRequest;
    toJSON(message: ActivateResourcesRequest): unknown;
    create<I extends {
        facility?: string;
        resources?: string[];
    } & {
        facility?: string;
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof ActivateResourcesRequest>]: never; }>(base?: I): ActivateResourcesRequest;
    fromPartial<I_1 extends {
        facility?: string;
        resources?: string[];
    } & {
        facility?: string;
        resources?: string[] & string[] & { [K_2 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof ActivateResourcesRequest>]: never; }>(object: I_1): ActivateResourcesRequest;
};
export declare const ActivateResourcesResponse: {
    encode(_: ActivateResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateResourcesResponse;
    fromJSON(_: any): ActivateResourcesResponse;
    toJSON(_: ActivateResourcesResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ActivateResourcesResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ActivateResourcesResponse;
};
export declare const ListBlockPoolsRequest: {
    encode(_: ListBlockPoolsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBlockPoolsRequest;
    fromJSON(_: any): ListBlockPoolsRequest;
    toJSON(_: ListBlockPoolsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ListBlockPoolsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ListBlockPoolsRequest;
};
export declare const ListBlockPoolsResponse: {
    encode(_: ListBlockPoolsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListBlockPoolsResponse;
    fromJSON(_: any): ListBlockPoolsResponse;
    toJSON(_: ListBlockPoolsResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ListBlockPoolsResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ListBlockPoolsResponse;
};
export declare const InitHarborRequest: {
    encode(message: InitHarborRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitHarborRequest;
    fromJSON(object: any): InitHarborRequest;
    toJSON(message: InitHarborRequest): unknown;
    create<I extends {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & { [K in Exclude<keyof I, keyof InitHarborRequest>]: never; }>(base?: I): InitHarborRequest;
    fromPartial<I_1 extends {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof InitHarborRequest>]: never; }>(object: I_1): InitHarborRequest;
};
export declare const InitHarborResponse: {
    encode(_: InitHarborResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitHarborResponse;
    fromJSON(_: any): InitHarborResponse;
    toJSON(_: InitHarborResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): InitHarborResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): InitHarborResponse;
};
export declare const DeinitHarborRequest: {
    encode(message: DeinitHarborRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeinitHarborRequest;
    fromJSON(object: any): DeinitHarborRequest;
    toJSON(message: DeinitHarborRequest): unknown;
    create<I extends {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & { [K in Exclude<keyof I, keyof DeinitHarborRequest>]: never; }>(base?: I): DeinitHarborRequest;
    fromPartial<I_1 extends {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & {
        facility?: string;
        ver?: number;
        rid?: string;
        eid?: string;
        pid?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeinitHarborRequest>]: never; }>(object: I_1): DeinitHarborRequest;
};
export declare const DeinitHarborResponse: {
    encode(_: DeinitHarborResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeinitHarborResponse;
    fromJSON(_: any): DeinitHarborResponse;
    toJSON(_: DeinitHarborResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeinitHarborResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeinitHarborResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
