/* eslint-disable */
import _m0 from "protobufjs/minimal";
import {
  AddFacilityToPoolRequest,
  AddFacilityToPoolResponse,
  AddOrganizationToPoolRequest,
  AddOrganizationToPoolResponse,
  AddProjectToPoolRequest,
  AddProjectToPoolResponse,
  AllocationRequest,
  AllocationResponse,
  CreatePoolRequest,
  CreatePoolResponse,
  DeletePoolRequest,
  DeletePoolResponse,
  FetchAllocationTableRequest,
  FetchAllocationTableResponse,
  FreeRequest,
  FreeResponse,
  GetPoolRequest,
  GetPoolResponse,
  GetPoolsRequest,
  GetPoolsResponse,
  RemoveFacilityFromPoolRequest,
  RemoveFacilityFromPoolResponse,
  RemoveOrganizationFromPoolRequest,
  RemoveOrganizationFromPoolResponse,
  RemoveProjectFromPoolRequest,
  RemoveProjectFromPoolResponse,
  UpdatePoolResourcesRequest,
  UpdatePoolResourcesResponse,
} from "./alloc_types";
import {
  ActivateResourcesRequest,
  ActivateResourcesResponse,
  DeactivateResourcesRequest,
  DeactivateResourcesResponse,
  DeinitHarborRequest,
  DeinitHarborResponse,
  DeleteFacilityRequest,
  DeleteFacilityResponse,
  GetFacilitiesRequest,
  GetFacilitiesResponse,
  GetFacilityRequest,
  GetFacilityResponse,
  InitHarborRequest,
  InitHarborResponse,
  ListBlockPoolsRequest,
  ListBlockPoolsResponse,
  RegisterFacilityRequest,
  RegisterFacilityResponse,
  UpdateFacilityRequest,
  UpdateFacilityResponse,
} from "./commission_types";
import {
  GetUserSSHCertRequest,
  GetUserSSHCertResponse,
  GetUserSSHKeysRequest,
  GetUserSSHKeysResponse,
} from "./cred_types";
import {
  GetIdentityRequest,
  GetIdentityResponse,
  ListIdentityRequest,
  ListIdentityResponse,
  LoginRequest,
  LoginResponse,
  LogoutRequest,
  LogoutResponse,
  RegisterRequest,
  RegisterResponse,
  UnregisterRequest,
  UnregisterResponse,
} from "./identity_types";
import {
  DeleteIngressRequest,
  DeleteIngressResponse,
  DematerializeRequest,
  DematerializeResponse,
  GetMaterializationRequest,
  GetMaterializationResponse,
  GetMaterializationsRequest,
  GetMaterializationsResponse,
  GetMaterializationStatusRequest,
  GetMaterializationStatusResponse,
  MaterializeRequest,
  MaterializeResponse,
  NewIngressRequest,
  NewIngressResponse,
  RebootMaterializationRequest,
  RebootMaterializationResponse,
} from "./materialize_types";
import { CompileRequest, CompileResponse, PushRequest, PushResponse } from "./model_types";
import {
  GetRealizationRequest,
  GetRealizationResponse,
  GetRealizationsRequest,
  GetRealizationsResponse,
  GetResourcesRequest,
  GetResourcesResponse,
  RealizeRequest,
  RealizeResponse,
  RelinquishRequest,
  RelinquishResponse,
  UpdateRealizationRequest,
  UpdateRealizationResponse,
} from "./realize_types";
import {
  AddWgIfConfigRequest,
  AddWgIfConfigResponse,
  DelWgIfConfigRequest,
  DelWgIfConfigResponse,
  GetWgEnclaveRequest,
  GetWgEnclaveResponse,
  GetWgIfConfigRequest,
  GetWgIfConfigResponse,
} from "./wg_types";
import {
  ActivateOrganizationRequest,
  ActivateOrganizationResponse,
  ActivateUserRequest,
  ActivateUserResponse,
  AddOrganizationProjectRequest,
  AddOrganizationProjectResponse,
  AddProjectMemberRequest,
  AddProjectMemberResponse,
  AddUserPublicKeyRequest,
  AddUserPublicKeyResponse,
  ConfirmOrganizationMembershipRequest,
  ConfirmOrganizationMembershipResponse,
  CreateExperimentRequest,
  CreateExperimentResponse,
  CreateOrganizationRequest,
  CreateOrganizationResponse,
  CreateProjectRequest,
  CreateProjectResponse,
  DeleteExperimentRequest,
  DeleteExperimentResponse,
  DeleteOrganizationMemberRequest,
  DeleteOrganizationMemberResponse,
  DeleteOrganizationProjectRequest,
  DeleteOrganizationProjectResponse,
  DeleteOrganizationRequest,
  DeleteOrganizationResponse,
  DeleteProjectMemberRequest,
  DeleteProjectMemberResponse,
  DeleteProjectRequest,
  DeleteProjectResponse,
  DeleteUserPublicKeyRequest,
  DeleteUserPublicKeyResponse,
  DeleteUserPublicKeysRequest,
  DeleteUserPublicKeysResponse,
  DeleteUserRequest,
  DeleteUserResponse,
  FreezeOrganizationRequest,
  FreezeOrganizationResponse,
  FreezeUserRequest,
  FreezeUserResponse,
  GetEntityTypeConfigurationsRequest,
  GetEntityTypeConfigurationsResponse,
  GetExperimentRequest,
  GetExperimentResponse,
  GetExperimentsRequest,
  GetExperimentsResponse,
  GetOrganizationMemberRequest,
  GetOrganizationMemberResponse,
  GetOrganizationMembersRequest,
  GetOrganizationMembersResponse,
  GetOrganizationProjectRequest,
  GetOrganizationProjectResponse,
  GetOrganizationProjectsRequest,
  GetOrganizationProjectsResponse,
  GetOrganizationRequest,
  GetOrganizationResponse,
  GetOrganizationsRequest,
  GetOrganizationsResponse,
  GetPolicyRequest,
  GetPolicyResponse,
  GetProjectExperimentsRequest,
  GetProjectExperimentsResponse,
  GetProjectMemberRequest,
  GetProjectMemberResponse,
  GetProjectMembersRequest,
  GetProjectMembersResponse,
  GetProjectRequest,
  GetProjectResponse,
  GetProjectsRequest,
  GetProjectsResponse,
  GetRevisionRequest,
  GetRevisionResponse,
  GetUserConfigurationsRequest,
  GetUserConfigurationsResponse,
  GetUserPublicKeysRequest,
  GetUserPublicKeysResponse,
  GetUserRequest,
  GetUserResponse,
  GetUsersRequest,
  GetUsersResponse,
  HealthRequest,
  HealthResponse,
  InitUserRequest,
  InitUserResponse,
  RequestOrganizationMembershipRequest,
  RequestOrganizationMembershipResponse,
  UpdateEntityTypeConfigurationsRequest,
  UpdateEntityTypeConfigurationsResponse,
  UpdateExperimentRequest,
  UpdateExperimentResponse,
  UpdateOrganizationMemberRequest,
  UpdateOrganizationMemberResponse,
  UpdateOrganizationProjectRequest,
  UpdateOrganizationProjectResponse,
  UpdateOrganizationRequest,
  UpdateOrganizationResponse,
  UpdateProjectMemberRequest,
  UpdateProjectMemberResponse,
  UpdateProjectRequest,
  UpdateProjectResponse,
  UpdateUserConfigurationsRequest,
  UpdateUserConfigurationsResponse,
  UpdateUserRequest,
  UpdateUserResponse,
} from "./workspace_types";
import {
  AttachXDCRequest,
  AttachXDCResponse,
  CreateXDCRequest,
  CreateXDCResponse,
  DeleteXDCRequest,
  DeleteXDCResponse,
  DetachXDCRequest,
  DetachXDCResponse,
  GetXDCJumpHostsRequest,
  GetXDCJumpHostsResponse,
  ListXDCsRequest,
  ListXDCsResponse,
} from "./xdc_types";

export const protobufPackage = "portal.v1";

export interface Workspace {
  /**
   * Activate User
   *
   * Activate a user. When new users are created they are initialized to an
   * inactive state. This API call can be used to activate new users. This API
   * call can also be used to re-activate users that have been frozen.
   */
  ActivateUser(request: ActivateUserRequest): Promise<ActivateUserResponse>;
  /**
   * Freeze User
   *
   * Freeze a user. This prevents the user from using the API in any way. This
   * is typically used for users that violate terms of service. Users can be
   * unfrozen with the [ActivateUser](#operation/User_ActivateUser) method.
   */
  FreezeUser(request: FreezeUserRequest): Promise<FreezeUserResponse>;
  /**
   * Init User
   *
   * Initialize a user. This ensures that the user account exists and has all
   * the basics including.
   *  - User storage in MergeFS
   *  - MergeFS user and group ids
   *  - A personal project
   *  - Personal project storage
   *
   * At this time the user information provided must be the same as the user
   * being initialized e.g., users can only initialize themselves and not on
   * behalf of other users.
   *
   * Initializing a user does not imply that the user account is activated.
   * That must be done by a portal administrator or a member of a project that
   * the user has joined with sufficient permissions (as determined by the
   * policy of the Portal administrators) to initilize the user account.
   */
  InitUser(request: InitUserRequest): Promise<InitUserResponse>;
  /**
   * Get Users
   *
   * Get all users visible to the calling user.
   */
  GetUsers(request: GetUsersRequest): Promise<GetUsersResponse>;
  /**
   * Get User
   *
   * Get a user's account information.
   */
  GetUser(request: GetUserRequest): Promise<GetUserResponse>;
  /**
   * Update User
   *
   * Update a user's account information. Empty/zero value fields ignored.
   */
  UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
  /**
   * Delete User
   *
   * Delete a user's account. **This will delete all data associated with a
   * user, including:**
   * - Personal storage
   * - All projects created by the user
   * - All project storage belonging to projects created by the user
   * - Recycling of users uid/gid
   * - All XDCs belonging to the user
   * - All resource pools created by the user
   * - All facilities created by the user
   *
   * **If any of the above need to be retained, such as a project, the project
   * must be transferred to another user in the `Creator` role before the
   * outgoing user account is deleted.**
   */
  DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
  /**
   * Get User Public Keys
   *
   * Retrieve the public keys a user has uploaded for accessing XDCs and
   * testbed nodes.
   */
  GetUserPublicKeys(request: GetUserPublicKeysRequest): Promise<GetUserPublicKeysResponse>;
  /**
   * Add User Public Key
   *
   * Add a public key for the specified user
   */
  AddUserPublicKey(request: AddUserPublicKeyRequest): Promise<AddUserPublicKeyResponse>;
  /**
   * Delete User Public Key
   *
   * Remove a public key from a users repertoire.
   */
  DeleteUserPublicKey(request: DeleteUserPublicKeyRequest): Promise<DeleteUserPublicKeyResponse>;
  /**
   * Delete User Public Keys
   *
   * Remove all a users public keys
   */
  DeleteUserPublicKeys(request: DeleteUserPublicKeysRequest): Promise<DeleteUserPublicKeysResponse>;
  /**
   * Get Projects
   *
   * Get all projects visible to the calling user.
   */
  GetProjects(request: GetProjectsRequest): Promise<GetProjectsResponse>;
  /**
   * Get Project
   *
   * Get the specified project's information.
   */
  GetProject(request: GetProjectRequest): Promise<GetProjectResponse>;
  /**
   * Create Project
   *
   * Create a new project.
   *
   * The most common case is a user creating a project
   * for themself. In this case `user` can be omitted. In the case that one
   * user is creating a project on behalf of another, such as a bot account or
   * an organization maintainer creating projects on behalf of organization
   * members. What exactly is allowed depends on the policy in place for the
   * specific portal. In the reference portal implementation
   * (portal.mergetb.net), only organization maintainers or above may act on
   * behalf of organization users.
   */
  CreateProject(request: CreateProjectRequest): Promise<CreateProjectResponse>;
  /**
   * Update Project
   *
   * Update a project's information. Empty/zero fields are ignored.
   */
  UpdateProject(request: UpdateProjectRequest): Promise<UpdateProjectResponse>;
  /**
   * Delete Project
   *
   * Delete a project.
   *
   * **Warning: deleting a project will also delete the following:**
   *  - All experiments in the project
   *      - All realizations for experiments in the project
   *      - All materializations for realizations in the project
   *  - All source revisions for experiments in the project
   *  - All XDCs launched for this project
   *  - The project's MergeFS storage
   */
  DeleteProject(request: DeleteProjectRequest): Promise<DeleteProjectResponse>;
  /**
   * Get Project Members
   *
   * Get all members of a project.
   */
  GetProjectMembers(request: GetProjectMembersRequest): Promise<GetProjectMembersResponse>;
  /**
   * Get Project Member
   *
   * Get info about a project member
   */
  GetProjectMember(request: GetProjectMemberRequest): Promise<GetProjectMemberResponse>;
  /**
   * Add Project Member
   *
   * Add a member to a project.
   */
  AddProjectMember(request: AddProjectMemberRequest): Promise<AddProjectMemberResponse>;
  /**
   * Update Project Member
   *
   * Update project member
   */
  UpdateProjectMember(request: UpdateProjectMemberRequest): Promise<UpdateProjectMemberResponse>;
  /**
   * Delete Project Member
   *
   * Remove a member from a project
   */
  DeleteProjectMember(request: DeleteProjectMemberRequest): Promise<DeleteProjectMemberResponse>;
  /**
   * Activate Organization
   *
   * Activate an organization. When new organizations are created they are
   * initialized to an inactive state. This API call can be used to activate
   * new organizations. This API call can also be used to re-activate
   * organizations that have been frozen.
   */
  ActivateOrganization(request: ActivateOrganizationRequest): Promise<ActivateOrganizationResponse>;
  /**
   * Freeze Organization
   *
   * Freeze a organization. This prevents organization members from using the
   * API in any way. This is typically used for organizations that violate
   * terms of service. Organizations can be unfrozen with the
   * [ActivateOrganization](#operation/Organization_ActivateOrganization method.
   */
  FreezeOrganization(request: FreezeOrganizationRequest): Promise<FreezeOrganizationResponse>;
  /**
   * Get Organizations
   *
   * Get all organizations visible to the calling user.
   */
  GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
  /**
   * Get Organization
   *
   * Get the specified organization's information.
   */
  GetOrganization(request: GetOrganizationRequest): Promise<GetOrganizationResponse>;
  /**
   * Create Organization
   *
   * Create a new organization.
   */
  CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
  /**
   * Update Organization
   *
   * Update an organization's information. Empty/zero fields are ignored.
   */
  UpdateOrganization(request: UpdateOrganizationRequest): Promise<UpdateOrganizationResponse>;
  /**
   * Delete Organization
   *
   * Delete an organization.
   *
   * **Warning: deleting an organization will also do the following:**
   *  - Delete all projects that are owned by the organization
   *  - Freeze accounts of all users who are members of the organization
   */
  DeleteOrganization(request: DeleteOrganizationRequest): Promise<DeleteOrganizationResponse>;
  /**
   * Get Organization Users
   *
   * Get all users of an organization.
   */
  GetOrganizationMembers(request: GetOrganizationMembersRequest): Promise<GetOrganizationMembersResponse>;
  /**
   * Get Organization Member
   *
   * Get info about an organization member
   */
  GetOrganizationMember(request: GetOrganizationMemberRequest): Promise<GetOrganizationMemberResponse>;
  /**
   * Request Organization Membership
   *
   * Request membership in an organization
   */
  RequestOrganizationMembership(
    request: RequestOrganizationMembershipRequest,
  ): Promise<RequestOrganizationMembershipResponse>;
  /**
   * Confirm Organization Membership
   *
   * Confirms membership in an organization
   */
  ConfirmOrganizationMembership(
    request: ConfirmOrganizationMembershipRequest,
  ): Promise<ConfirmOrganizationMembershipResponse>;
  /**
   * Update Organization Member
   *
   * Update organization member
   */
  UpdateOrganizationMember(request: UpdateOrganizationMemberRequest): Promise<UpdateOrganizationMemberResponse>;
  /**
   * Delete Organization Member
   *
   * Remove a member from an organization
   */
  DeleteOrganizationMember(request: DeleteOrganizationMemberRequest): Promise<DeleteOrganizationMemberResponse>;
  /**
   * Get Organization Projects
   *
   * Get all projects of an organization.
   */
  GetOrganizationProjects(request: GetOrganizationProjectsRequest): Promise<GetOrganizationProjectsResponse>;
  /**
   * Get Organization Project
   *
   * Get info about an organization project
   */
  GetOrganizationProject(request: GetOrganizationProjectRequest): Promise<GetOrganizationProjectResponse>;
  /**
   * Add Organization Project
   *
   * Add a project to an organization.
   */
  AddOrganizationProject(request: AddOrganizationProjectRequest): Promise<AddOrganizationProjectResponse>;
  /**
   * Update Organization Project
   *
   * Update organization project
   */
  UpdateOrganizationProject(request: UpdateOrganizationProjectRequest): Promise<UpdateOrganizationProjectResponse>;
  /**
   * Delete Organization Project
   *
   * Remove a project from an organization
   */
  DeleteOrganizationProject(request: DeleteOrganizationProjectRequest): Promise<DeleteOrganizationProjectResponse>;
  /**
   * Get Experiments
   *
   * Get all experiments the caller has access to.
   */
  GetExperiments(request: GetExperimentsRequest): Promise<GetExperimentsResponse>;
  /**
   * Get Project Experiments
   *
   * Get the experiments for the given project.
   */
  GetProjectExperiments(request: GetProjectExperimentsRequest): Promise<GetProjectExperimentsResponse>;
  /**
   * Get Experiment
   *
   * Get the descriptor for a particular experiment
   */
  GetExperiment(request: GetExperimentRequest): Promise<GetExperimentResponse>;
  /**
   * Create Experiment
   *
   * Create a new experiment in the given project with the provided experiment
   * descriptor parameters.
   */
  CreateExperiment(request: CreateExperimentRequest): Promise<CreateExperimentResponse>;
  /**
   * Update Experiment
   *
   * Update an existing experiment.
   */
  UpdateExperiment(request: UpdateExperimentRequest): Promise<UpdateExperimentResponse>;
  /**
   * Delete Experiment
   *
   * Delete an experiment
   *
   * **Warning: deleting a project will also delete the following:**
   *  - All realizations for the experiment
   *  - All materializations for realizations in the experiment
   *  - All source revisions for experiments in the experiment
   */
  DeleteExperiment(request: DeleteExperimentRequest): Promise<DeleteExperimentResponse>;
  /**
   * Read Experiment Revision
   *
   * Get a specific experiment revision in different formats.
   */
  GetRevision(request: GetRevisionRequest): Promise<GetRevisionResponse>;
  /**
   * Get Policy
   *
   * Get the current policy governing portal authorization. Returns policy as
   * JSON blob.
   */
  GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse>;
  /** GetUserConfigurations - return information about possible user configuations. */
  GetUserConfigurations(request: GetUserConfigurationsRequest): Promise<GetUserConfigurationsResponse>;
  /** UpdateUserConfiguration - if authorized, update user configurations */
  UpdateUserConfigurations(request: UpdateUserConfigurationsRequest): Promise<UpdateUserConfigurationsResponse>;
  /** GetEntityTypeConfigurations - returns the types and subtypes of projects and organizations. */
  GetEntityTypeConfigurations(
    request: GetEntityTypeConfigurationsRequest,
  ): Promise<GetEntityTypeConfigurationsResponse>;
  /** UpdateEntityTypeConfigurations - if authorized, update entity types and sub type. */
  UpdateEntityTypeConfigurations(
    request: UpdateEntityTypeConfigurationsRequest,
  ): Promise<UpdateEntityTypeConfigurationsResponse>;
  /**
   * Health Check
   *
   * Check the health of the workspace service
   */
  Health(request: HealthRequest): Promise<HealthResponse>;
}

export class WorkspaceClientImpl implements Workspace {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Workspace";
    this.rpc = rpc;
    this.ActivateUser = this.ActivateUser.bind(this);
    this.FreezeUser = this.FreezeUser.bind(this);
    this.InitUser = this.InitUser.bind(this);
    this.GetUsers = this.GetUsers.bind(this);
    this.GetUser = this.GetUser.bind(this);
    this.UpdateUser = this.UpdateUser.bind(this);
    this.DeleteUser = this.DeleteUser.bind(this);
    this.GetUserPublicKeys = this.GetUserPublicKeys.bind(this);
    this.AddUserPublicKey = this.AddUserPublicKey.bind(this);
    this.DeleteUserPublicKey = this.DeleteUserPublicKey.bind(this);
    this.DeleteUserPublicKeys = this.DeleteUserPublicKeys.bind(this);
    this.GetProjects = this.GetProjects.bind(this);
    this.GetProject = this.GetProject.bind(this);
    this.CreateProject = this.CreateProject.bind(this);
    this.UpdateProject = this.UpdateProject.bind(this);
    this.DeleteProject = this.DeleteProject.bind(this);
    this.GetProjectMembers = this.GetProjectMembers.bind(this);
    this.GetProjectMember = this.GetProjectMember.bind(this);
    this.AddProjectMember = this.AddProjectMember.bind(this);
    this.UpdateProjectMember = this.UpdateProjectMember.bind(this);
    this.DeleteProjectMember = this.DeleteProjectMember.bind(this);
    this.ActivateOrganization = this.ActivateOrganization.bind(this);
    this.FreezeOrganization = this.FreezeOrganization.bind(this);
    this.GetOrganizations = this.GetOrganizations.bind(this);
    this.GetOrganization = this.GetOrganization.bind(this);
    this.CreateOrganization = this.CreateOrganization.bind(this);
    this.UpdateOrganization = this.UpdateOrganization.bind(this);
    this.DeleteOrganization = this.DeleteOrganization.bind(this);
    this.GetOrganizationMembers = this.GetOrganizationMembers.bind(this);
    this.GetOrganizationMember = this.GetOrganizationMember.bind(this);
    this.RequestOrganizationMembership = this.RequestOrganizationMembership.bind(this);
    this.ConfirmOrganizationMembership = this.ConfirmOrganizationMembership.bind(this);
    this.UpdateOrganizationMember = this.UpdateOrganizationMember.bind(this);
    this.DeleteOrganizationMember = this.DeleteOrganizationMember.bind(this);
    this.GetOrganizationProjects = this.GetOrganizationProjects.bind(this);
    this.GetOrganizationProject = this.GetOrganizationProject.bind(this);
    this.AddOrganizationProject = this.AddOrganizationProject.bind(this);
    this.UpdateOrganizationProject = this.UpdateOrganizationProject.bind(this);
    this.DeleteOrganizationProject = this.DeleteOrganizationProject.bind(this);
    this.GetExperiments = this.GetExperiments.bind(this);
    this.GetProjectExperiments = this.GetProjectExperiments.bind(this);
    this.GetExperiment = this.GetExperiment.bind(this);
    this.CreateExperiment = this.CreateExperiment.bind(this);
    this.UpdateExperiment = this.UpdateExperiment.bind(this);
    this.DeleteExperiment = this.DeleteExperiment.bind(this);
    this.GetRevision = this.GetRevision.bind(this);
    this.GetPolicy = this.GetPolicy.bind(this);
    this.GetUserConfigurations = this.GetUserConfigurations.bind(this);
    this.UpdateUserConfigurations = this.UpdateUserConfigurations.bind(this);
    this.GetEntityTypeConfigurations = this.GetEntityTypeConfigurations.bind(this);
    this.UpdateEntityTypeConfigurations = this.UpdateEntityTypeConfigurations.bind(this);
    this.Health = this.Health.bind(this);
  }
  ActivateUser(request: ActivateUserRequest): Promise<ActivateUserResponse> {
    const data = ActivateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActivateUser", data);
    return promise.then((data) => ActivateUserResponse.decode(new _m0.Reader(data)));
  }

  FreezeUser(request: FreezeUserRequest): Promise<FreezeUserResponse> {
    const data = FreezeUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FreezeUser", data);
    return promise.then((data) => FreezeUserResponse.decode(new _m0.Reader(data)));
  }

  InitUser(request: InitUserRequest): Promise<InitUserResponse> {
    const data = InitUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InitUser", data);
    return promise.then((data) => InitUserResponse.decode(new _m0.Reader(data)));
  }

  GetUsers(request: GetUsersRequest): Promise<GetUsersResponse> {
    const data = GetUsersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUsers", data);
    return promise.then((data) => GetUsersResponse.decode(new _m0.Reader(data)));
  }

  GetUser(request: GetUserRequest): Promise<GetUserResponse> {
    const data = GetUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUser", data);
    return promise.then((data) => GetUserResponse.decode(new _m0.Reader(data)));
  }

  UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse> {
    const data = UpdateUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUser", data);
    return promise.then((data) => UpdateUserResponse.decode(new _m0.Reader(data)));
  }

  DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse> {
    const data = DeleteUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUser", data);
    return promise.then((data) => DeleteUserResponse.decode(new _m0.Reader(data)));
  }

  GetUserPublicKeys(request: GetUserPublicKeysRequest): Promise<GetUserPublicKeysResponse> {
    const data = GetUserPublicKeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserPublicKeys", data);
    return promise.then((data) => GetUserPublicKeysResponse.decode(new _m0.Reader(data)));
  }

  AddUserPublicKey(request: AddUserPublicKeyRequest): Promise<AddUserPublicKeyResponse> {
    const data = AddUserPublicKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddUserPublicKey", data);
    return promise.then((data) => AddUserPublicKeyResponse.decode(new _m0.Reader(data)));
  }

  DeleteUserPublicKey(request: DeleteUserPublicKeyRequest): Promise<DeleteUserPublicKeyResponse> {
    const data = DeleteUserPublicKeyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserPublicKey", data);
    return promise.then((data) => DeleteUserPublicKeyResponse.decode(new _m0.Reader(data)));
  }

  DeleteUserPublicKeys(request: DeleteUserPublicKeysRequest): Promise<DeleteUserPublicKeysResponse> {
    const data = DeleteUserPublicKeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserPublicKeys", data);
    return promise.then((data) => DeleteUserPublicKeysResponse.decode(new _m0.Reader(data)));
  }

  GetProjects(request: GetProjectsRequest): Promise<GetProjectsResponse> {
    const data = GetProjectsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjects", data);
    return promise.then((data) => GetProjectsResponse.decode(new _m0.Reader(data)));
  }

  GetProject(request: GetProjectRequest): Promise<GetProjectResponse> {
    const data = GetProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProject", data);
    return promise.then((data) => GetProjectResponse.decode(new _m0.Reader(data)));
  }

  CreateProject(request: CreateProjectRequest): Promise<CreateProjectResponse> {
    const data = CreateProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateProject", data);
    return promise.then((data) => CreateProjectResponse.decode(new _m0.Reader(data)));
  }

  UpdateProject(request: UpdateProjectRequest): Promise<UpdateProjectResponse> {
    const data = UpdateProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProject", data);
    return promise.then((data) => UpdateProjectResponse.decode(new _m0.Reader(data)));
  }

  DeleteProject(request: DeleteProjectRequest): Promise<DeleteProjectResponse> {
    const data = DeleteProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProject", data);
    return promise.then((data) => DeleteProjectResponse.decode(new _m0.Reader(data)));
  }

  GetProjectMembers(request: GetProjectMembersRequest): Promise<GetProjectMembersResponse> {
    const data = GetProjectMembersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjectMembers", data);
    return promise.then((data) => GetProjectMembersResponse.decode(new _m0.Reader(data)));
  }

  GetProjectMember(request: GetProjectMemberRequest): Promise<GetProjectMemberResponse> {
    const data = GetProjectMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjectMember", data);
    return promise.then((data) => GetProjectMemberResponse.decode(new _m0.Reader(data)));
  }

  AddProjectMember(request: AddProjectMemberRequest): Promise<AddProjectMemberResponse> {
    const data = AddProjectMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddProjectMember", data);
    return promise.then((data) => AddProjectMemberResponse.decode(new _m0.Reader(data)));
  }

  UpdateProjectMember(request: UpdateProjectMemberRequest): Promise<UpdateProjectMemberResponse> {
    const data = UpdateProjectMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateProjectMember", data);
    return promise.then((data) => UpdateProjectMemberResponse.decode(new _m0.Reader(data)));
  }

  DeleteProjectMember(request: DeleteProjectMemberRequest): Promise<DeleteProjectMemberResponse> {
    const data = DeleteProjectMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteProjectMember", data);
    return promise.then((data) => DeleteProjectMemberResponse.decode(new _m0.Reader(data)));
  }

  ActivateOrganization(request: ActivateOrganizationRequest): Promise<ActivateOrganizationResponse> {
    const data = ActivateOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActivateOrganization", data);
    return promise.then((data) => ActivateOrganizationResponse.decode(new _m0.Reader(data)));
  }

  FreezeOrganization(request: FreezeOrganizationRequest): Promise<FreezeOrganizationResponse> {
    const data = FreezeOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FreezeOrganization", data);
    return promise.then((data) => FreezeOrganizationResponse.decode(new _m0.Reader(data)));
  }

  GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse> {
    const data = GetOrganizationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganizations", data);
    return promise.then((data) => GetOrganizationsResponse.decode(new _m0.Reader(data)));
  }

  GetOrganization(request: GetOrganizationRequest): Promise<GetOrganizationResponse> {
    const data = GetOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganization", data);
    return promise.then((data) => GetOrganizationResponse.decode(new _m0.Reader(data)));
  }

  CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse> {
    const data = CreateOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateOrganization", data);
    return promise.then((data) => CreateOrganizationResponse.decode(new _m0.Reader(data)));
  }

  UpdateOrganization(request: UpdateOrganizationRequest): Promise<UpdateOrganizationResponse> {
    const data = UpdateOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOrganization", data);
    return promise.then((data) => UpdateOrganizationResponse.decode(new _m0.Reader(data)));
  }

  DeleteOrganization(request: DeleteOrganizationRequest): Promise<DeleteOrganizationResponse> {
    const data = DeleteOrganizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteOrganization", data);
    return promise.then((data) => DeleteOrganizationResponse.decode(new _m0.Reader(data)));
  }

  GetOrganizationMembers(request: GetOrganizationMembersRequest): Promise<GetOrganizationMembersResponse> {
    const data = GetOrganizationMembersRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganizationMembers", data);
    return promise.then((data) => GetOrganizationMembersResponse.decode(new _m0.Reader(data)));
  }

  GetOrganizationMember(request: GetOrganizationMemberRequest): Promise<GetOrganizationMemberResponse> {
    const data = GetOrganizationMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganizationMember", data);
    return promise.then((data) => GetOrganizationMemberResponse.decode(new _m0.Reader(data)));
  }

  RequestOrganizationMembership(
    request: RequestOrganizationMembershipRequest,
  ): Promise<RequestOrganizationMembershipResponse> {
    const data = RequestOrganizationMembershipRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RequestOrganizationMembership", data);
    return promise.then((data) => RequestOrganizationMembershipResponse.decode(new _m0.Reader(data)));
  }

  ConfirmOrganizationMembership(
    request: ConfirmOrganizationMembershipRequest,
  ): Promise<ConfirmOrganizationMembershipResponse> {
    const data = ConfirmOrganizationMembershipRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ConfirmOrganizationMembership", data);
    return promise.then((data) => ConfirmOrganizationMembershipResponse.decode(new _m0.Reader(data)));
  }

  UpdateOrganizationMember(request: UpdateOrganizationMemberRequest): Promise<UpdateOrganizationMemberResponse> {
    const data = UpdateOrganizationMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOrganizationMember", data);
    return promise.then((data) => UpdateOrganizationMemberResponse.decode(new _m0.Reader(data)));
  }

  DeleteOrganizationMember(request: DeleteOrganizationMemberRequest): Promise<DeleteOrganizationMemberResponse> {
    const data = DeleteOrganizationMemberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteOrganizationMember", data);
    return promise.then((data) => DeleteOrganizationMemberResponse.decode(new _m0.Reader(data)));
  }

  GetOrganizationProjects(request: GetOrganizationProjectsRequest): Promise<GetOrganizationProjectsResponse> {
    const data = GetOrganizationProjectsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganizationProjects", data);
    return promise.then((data) => GetOrganizationProjectsResponse.decode(new _m0.Reader(data)));
  }

  GetOrganizationProject(request: GetOrganizationProjectRequest): Promise<GetOrganizationProjectResponse> {
    const data = GetOrganizationProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetOrganizationProject", data);
    return promise.then((data) => GetOrganizationProjectResponse.decode(new _m0.Reader(data)));
  }

  AddOrganizationProject(request: AddOrganizationProjectRequest): Promise<AddOrganizationProjectResponse> {
    const data = AddOrganizationProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddOrganizationProject", data);
    return promise.then((data) => AddOrganizationProjectResponse.decode(new _m0.Reader(data)));
  }

  UpdateOrganizationProject(request: UpdateOrganizationProjectRequest): Promise<UpdateOrganizationProjectResponse> {
    const data = UpdateOrganizationProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateOrganizationProject", data);
    return promise.then((data) => UpdateOrganizationProjectResponse.decode(new _m0.Reader(data)));
  }

  DeleteOrganizationProject(request: DeleteOrganizationProjectRequest): Promise<DeleteOrganizationProjectResponse> {
    const data = DeleteOrganizationProjectRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteOrganizationProject", data);
    return promise.then((data) => DeleteOrganizationProjectResponse.decode(new _m0.Reader(data)));
  }

  GetExperiments(request: GetExperimentsRequest): Promise<GetExperimentsResponse> {
    const data = GetExperimentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetExperiments", data);
    return promise.then((data) => GetExperimentsResponse.decode(new _m0.Reader(data)));
  }

  GetProjectExperiments(request: GetProjectExperimentsRequest): Promise<GetProjectExperimentsResponse> {
    const data = GetProjectExperimentsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetProjectExperiments", data);
    return promise.then((data) => GetProjectExperimentsResponse.decode(new _m0.Reader(data)));
  }

  GetExperiment(request: GetExperimentRequest): Promise<GetExperimentResponse> {
    const data = GetExperimentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetExperiment", data);
    return promise.then((data) => GetExperimentResponse.decode(new _m0.Reader(data)));
  }

  CreateExperiment(request: CreateExperimentRequest): Promise<CreateExperimentResponse> {
    const data = CreateExperimentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateExperiment", data);
    return promise.then((data) => CreateExperimentResponse.decode(new _m0.Reader(data)));
  }

  UpdateExperiment(request: UpdateExperimentRequest): Promise<UpdateExperimentResponse> {
    const data = UpdateExperimentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateExperiment", data);
    return promise.then((data) => UpdateExperimentResponse.decode(new _m0.Reader(data)));
  }

  DeleteExperiment(request: DeleteExperimentRequest): Promise<DeleteExperimentResponse> {
    const data = DeleteExperimentRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteExperiment", data);
    return promise.then((data) => DeleteExperimentResponse.decode(new _m0.Reader(data)));
  }

  GetRevision(request: GetRevisionRequest): Promise<GetRevisionResponse> {
    const data = GetRevisionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRevision", data);
    return promise.then((data) => GetRevisionResponse.decode(new _m0.Reader(data)));
  }

  GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse> {
    const data = GetPolicyRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPolicy", data);
    return promise.then((data) => GetPolicyResponse.decode(new _m0.Reader(data)));
  }

  GetUserConfigurations(request: GetUserConfigurationsRequest): Promise<GetUserConfigurationsResponse> {
    const data = GetUserConfigurationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserConfigurations", data);
    return promise.then((data) => GetUserConfigurationsResponse.decode(new _m0.Reader(data)));
  }

  UpdateUserConfigurations(request: UpdateUserConfigurationsRequest): Promise<UpdateUserConfigurationsResponse> {
    const data = UpdateUserConfigurationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserConfigurations", data);
    return promise.then((data) => UpdateUserConfigurationsResponse.decode(new _m0.Reader(data)));
  }

  GetEntityTypeConfigurations(
    request: GetEntityTypeConfigurationsRequest,
  ): Promise<GetEntityTypeConfigurationsResponse> {
    const data = GetEntityTypeConfigurationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEntityTypeConfigurations", data);
    return promise.then((data) => GetEntityTypeConfigurationsResponse.decode(new _m0.Reader(data)));
  }

  UpdateEntityTypeConfigurations(
    request: UpdateEntityTypeConfigurationsRequest,
  ): Promise<UpdateEntityTypeConfigurationsResponse> {
    const data = UpdateEntityTypeConfigurationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateEntityTypeConfigurations", data);
    return promise.then((data) => UpdateEntityTypeConfigurationsResponse.decode(new _m0.Reader(data)));
  }

  Health(request: HealthRequest): Promise<HealthResponse> {
    const data = HealthRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Health", data);
    return promise.then((data) => HealthResponse.decode(new _m0.Reader(data)));
  }
}

export interface Realize {
  /** GetRealizations */
  GetRealizations(request: GetRealizationsRequest): Promise<GetRealizationsResponse>;
  /** GetRealization */
  GetRealization(request: GetRealizationRequest): Promise<GetRealizationResponse>;
  /** Realize */
  Realize(request: RealizeRequest): Promise<RealizeResponse>;
  /** Relinquish */
  Relinquish(request: RelinquishRequest): Promise<RelinquishResponse>;
  /**
   * GetResources
   *
   * Get status of all resources the caller has access to.
   */
  GetResources(request: GetResourcesRequest): Promise<GetResourcesResponse>;
  /**
   * UpdateRealization
   *
   * Update an existing realization.
   */
  UpdateRealization(request: UpdateRealizationRequest): Promise<UpdateRealizationResponse>;
}

export class RealizeClientImpl implements Realize {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Realize";
    this.rpc = rpc;
    this.GetRealizations = this.GetRealizations.bind(this);
    this.GetRealization = this.GetRealization.bind(this);
    this.Realize = this.Realize.bind(this);
    this.Relinquish = this.Relinquish.bind(this);
    this.GetResources = this.GetResources.bind(this);
    this.UpdateRealization = this.UpdateRealization.bind(this);
  }
  GetRealizations(request: GetRealizationsRequest): Promise<GetRealizationsResponse> {
    const data = GetRealizationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRealizations", data);
    return promise.then((data) => GetRealizationsResponse.decode(new _m0.Reader(data)));
  }

  GetRealization(request: GetRealizationRequest): Promise<GetRealizationResponse> {
    const data = GetRealizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetRealization", data);
    return promise.then((data) => GetRealizationResponse.decode(new _m0.Reader(data)));
  }

  Realize(request: RealizeRequest): Promise<RealizeResponse> {
    const data = RealizeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Realize", data);
    return promise.then((data) => RealizeResponse.decode(new _m0.Reader(data)));
  }

  Relinquish(request: RelinquishRequest): Promise<RelinquishResponse> {
    const data = RelinquishRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Relinquish", data);
    return promise.then((data) => RelinquishResponse.decode(new _m0.Reader(data)));
  }

  GetResources(request: GetResourcesRequest): Promise<GetResourcesResponse> {
    const data = GetResourcesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetResources", data);
    return promise.then((data) => GetResourcesResponse.decode(new _m0.Reader(data)));
  }

  UpdateRealization(request: UpdateRealizationRequest): Promise<UpdateRealizationResponse> {
    const data = UpdateRealizationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateRealization", data);
    return promise.then((data) => UpdateRealizationResponse.decode(new _m0.Reader(data)));
  }
}

export interface Materialize {
  GetMaterializations(request: GetMaterializationsRequest): Promise<GetMaterializationsResponse>;
  GetMaterialization(request: GetMaterializationRequest): Promise<GetMaterializationResponse>;
  GetMaterializationStatus(request: GetMaterializationStatusRequest): Promise<GetMaterializationStatusResponse>;
  Materialize(request: MaterializeRequest): Promise<MaterializeResponse>;
  Dematerialize(request: DematerializeRequest): Promise<DematerializeResponse>;
  RebootMaterialization(request: RebootMaterializationRequest): Promise<RebootMaterializationResponse>;
  /** Ingresses */
  NewIngress(request: NewIngressRequest): Promise<NewIngressResponse>;
  DeleteIngress(request: DeleteIngressRequest): Promise<DeleteIngressResponse>;
}

export class MaterializeClientImpl implements Materialize {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Materialize";
    this.rpc = rpc;
    this.GetMaterializations = this.GetMaterializations.bind(this);
    this.GetMaterialization = this.GetMaterialization.bind(this);
    this.GetMaterializationStatus = this.GetMaterializationStatus.bind(this);
    this.Materialize = this.Materialize.bind(this);
    this.Dematerialize = this.Dematerialize.bind(this);
    this.RebootMaterialization = this.RebootMaterialization.bind(this);
    this.NewIngress = this.NewIngress.bind(this);
    this.DeleteIngress = this.DeleteIngress.bind(this);
  }
  GetMaterializations(request: GetMaterializationsRequest): Promise<GetMaterializationsResponse> {
    const data = GetMaterializationsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMaterializations", data);
    return promise.then((data) => GetMaterializationsResponse.decode(new _m0.Reader(data)));
  }

  GetMaterialization(request: GetMaterializationRequest): Promise<GetMaterializationResponse> {
    const data = GetMaterializationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMaterialization", data);
    return promise.then((data) => GetMaterializationResponse.decode(new _m0.Reader(data)));
  }

  GetMaterializationStatus(request: GetMaterializationStatusRequest): Promise<GetMaterializationStatusResponse> {
    const data = GetMaterializationStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetMaterializationStatus", data);
    return promise.then((data) => GetMaterializationStatusResponse.decode(new _m0.Reader(data)));
  }

  Materialize(request: MaterializeRequest): Promise<MaterializeResponse> {
    const data = MaterializeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Materialize", data);
    return promise.then((data) => MaterializeResponse.decode(new _m0.Reader(data)));
  }

  Dematerialize(request: DematerializeRequest): Promise<DematerializeResponse> {
    const data = DematerializeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Dematerialize", data);
    return promise.then((data) => DematerializeResponse.decode(new _m0.Reader(data)));
  }

  RebootMaterialization(request: RebootMaterializationRequest): Promise<RebootMaterializationResponse> {
    const data = RebootMaterializationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RebootMaterialization", data);
    return promise.then((data) => RebootMaterializationResponse.decode(new _m0.Reader(data)));
  }

  NewIngress(request: NewIngressRequest): Promise<NewIngressResponse> {
    const data = NewIngressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "NewIngress", data);
    return promise.then((data) => NewIngressResponse.decode(new _m0.Reader(data)));
  }

  DeleteIngress(request: DeleteIngressRequest): Promise<DeleteIngressResponse> {
    const data = DeleteIngressRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteIngress", data);
    return promise.then((data) => DeleteIngressResponse.decode(new _m0.Reader(data)));
  }
}

export interface Commission {
  /**
   * RegisterFacility
   *
   * Register a Facility with a Merge Portal.
   */
  RegisterFacility(request: RegisterFacilityRequest): Promise<RegisterFacilityResponse>;
  /**
   * GetFacilities
   *
   * Get all facilities in a Merge Portal
   */
  GetFacilities(request: GetFacilitiesRequest): Promise<GetFacilitiesResponse>;
  /**
   * GetFacility
   *
   * Get information about a specific facility in a Merge Portal.
   */
  GetFacility(request: GetFacilityRequest): Promise<GetFacilityResponse>;
  /**
   * UpdateFacility
   *
   * Update the given facility.
   */
  UpdateFacility(request: UpdateFacilityRequest): Promise<UpdateFacilityResponse>;
  /**
   * DeleteFacility
   *
   * Delete the given facility.
   */
  DeleteFacility(request: DeleteFacilityRequest): Promise<DeleteFacilityResponse>;
  /**
   * DeactivateResource
   *
   * Mark resources as not active and unallocable.
   */
  DeactivateResources(request: DeactivateResourcesRequest): Promise<DeactivateResourcesResponse>;
  /**
   * ActivateResource
   *
   * Mark resources as active and allocable.
   */
  ActivateResources(request: ActivateResourcesRequest): Promise<ActivateResourcesResponse>;
  /**
   * ListBlockPools
   *
   * List currently allocated address block pools
   */
  ListBlockPools(request: ListBlockPoolsRequest): Promise<ListBlockPoolsResponse>;
  /**
   * InitializeHarbor
   *
   * Establish "always on" system network embedding, to prepare the facility services
   * for materializations
   */
  InitializeHarbor(request: InitHarborRequest): Promise<InitHarborResponse>;
  /**
   * DeinitializeHarbor
   *
   * Tear down "always on" system network embedding
   */
  DeinitializeHarbor(request: DeinitHarborRequest): Promise<DeinitHarborResponse>;
}

export class CommissionClientImpl implements Commission {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Commission";
    this.rpc = rpc;
    this.RegisterFacility = this.RegisterFacility.bind(this);
    this.GetFacilities = this.GetFacilities.bind(this);
    this.GetFacility = this.GetFacility.bind(this);
    this.UpdateFacility = this.UpdateFacility.bind(this);
    this.DeleteFacility = this.DeleteFacility.bind(this);
    this.DeactivateResources = this.DeactivateResources.bind(this);
    this.ActivateResources = this.ActivateResources.bind(this);
    this.ListBlockPools = this.ListBlockPools.bind(this);
    this.InitializeHarbor = this.InitializeHarbor.bind(this);
    this.DeinitializeHarbor = this.DeinitializeHarbor.bind(this);
  }
  RegisterFacility(request: RegisterFacilityRequest): Promise<RegisterFacilityResponse> {
    const data = RegisterFacilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RegisterFacility", data);
    return promise.then((data) => RegisterFacilityResponse.decode(new _m0.Reader(data)));
  }

  GetFacilities(request: GetFacilitiesRequest): Promise<GetFacilitiesResponse> {
    const data = GetFacilitiesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetFacilities", data);
    return promise.then((data) => GetFacilitiesResponse.decode(new _m0.Reader(data)));
  }

  GetFacility(request: GetFacilityRequest): Promise<GetFacilityResponse> {
    const data = GetFacilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetFacility", data);
    return promise.then((data) => GetFacilityResponse.decode(new _m0.Reader(data)));
  }

  UpdateFacility(request: UpdateFacilityRequest): Promise<UpdateFacilityResponse> {
    const data = UpdateFacilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateFacility", data);
    return promise.then((data) => UpdateFacilityResponse.decode(new _m0.Reader(data)));
  }

  DeleteFacility(request: DeleteFacilityRequest): Promise<DeleteFacilityResponse> {
    const data = DeleteFacilityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteFacility", data);
    return promise.then((data) => DeleteFacilityResponse.decode(new _m0.Reader(data)));
  }

  DeactivateResources(request: DeactivateResourcesRequest): Promise<DeactivateResourcesResponse> {
    const data = DeactivateResourcesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeactivateResources", data);
    return promise.then((data) => DeactivateResourcesResponse.decode(new _m0.Reader(data)));
  }

  ActivateResources(request: ActivateResourcesRequest): Promise<ActivateResourcesResponse> {
    const data = ActivateResourcesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ActivateResources", data);
    return promise.then((data) => ActivateResourcesResponse.decode(new _m0.Reader(data)));
  }

  ListBlockPools(request: ListBlockPoolsRequest): Promise<ListBlockPoolsResponse> {
    const data = ListBlockPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBlockPools", data);
    return promise.then((data) => ListBlockPoolsResponse.decode(new _m0.Reader(data)));
  }

  InitializeHarbor(request: InitHarborRequest): Promise<InitHarborResponse> {
    const data = InitHarborRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "InitializeHarbor", data);
    return promise.then((data) => InitHarborResponse.decode(new _m0.Reader(data)));
  }

  DeinitializeHarbor(request: DeinitHarborRequest): Promise<DeinitHarborResponse> {
    const data = DeinitHarborRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeinitializeHarbor", data);
    return promise.then((data) => DeinitHarborResponse.decode(new _m0.Reader(data)));
  }
}

export interface Alloc {
  /**
   * Allocate
   *
   * Allocate the provided set of resources.
   */
  Alloc(request: AllocationRequest): Promise<AllocationResponse>;
  /**
   * Free
   *
   * Free the specified set of resources, freeing them back into the pool for
   * allocation again.
   */
  Free(request: FreeRequest): Promise<FreeResponse>;
  /**
   * Fetch
   *
   * Fetch the current allocation table.
   */
  Fetch(request: FetchAllocationTableRequest): Promise<FetchAllocationTableResponse>;
  /**
   * GetPool
   *
   * Get details about a specific resource pool
   */
  GetPool(request: GetPoolRequest): Promise<GetPoolResponse>;
  /**
   * GetPools
   *
   * Get all pools
   */
  GetPools(request: GetPoolsRequest): Promise<GetPoolsResponse>;
  /**
   * CreatePool
   *
   * Create a new resource pool.
   */
  CreatePool(request: CreatePoolRequest): Promise<CreatePoolResponse>;
  /**
   * DeletePool
   *
   * Delete a resource pool. Projects assigned to the pool, will be put in the default pool.
   */
  DeletePool(request: DeletePoolRequest): Promise<DeletePoolResponse>;
  /**
   * AddProjectToPool
   *
   * Adds the given project to the given pool.
   */
  AddProject(request: AddProjectToPoolRequest): Promise<AddProjectToPoolResponse>;
  /**
   * RemoveProjectFromPool
   *
   * Removes the project from the pool and places it in the default pool.
   */
  RemoveProject(request: RemoveProjectFromPoolRequest): Promise<RemoveProjectFromPoolResponse>;
  /**
   * AddOrganizationToPool
   *
   * Adds the given organization to the given pool.
   */
  AddOrganization(request: AddOrganizationToPoolRequest): Promise<AddOrganizationToPoolResponse>;
  /**
   * RemoveOrganizationFromPool
   *
   * Removes the organization from the pool and places it in the default pool.
   */
  RemoveOrganization(request: RemoveOrganizationFromPoolRequest): Promise<RemoveOrganizationFromPoolResponse>;
  /**
   * AddFacilityToPool
   *
   * Adds the given facility to the resource pool. Optionally adds the given resources from
   * the facility to the pool.
   */
  AddFacility(request: AddFacilityToPoolRequest): Promise<AddFacilityToPoolResponse>;
  /**
   * RemoveFacilityFromPool
   *
   * Removes the given facility from the pool. Deletes all the given facility's resources from the pool.
   */
  RemoveFacility(request: RemoveFacilityFromPoolRequest): Promise<RemoveFacilityFromPoolResponse>;
  /**
   * UpdatePoolResources
   *
   * Adds or removes the given resources from the pool.
   */
  UpdatePoolResources(request: UpdatePoolResourcesRequest): Promise<UpdatePoolResourcesResponse>;
}

export class AllocClientImpl implements Alloc {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Alloc";
    this.rpc = rpc;
    this.Alloc = this.Alloc.bind(this);
    this.Free = this.Free.bind(this);
    this.Fetch = this.Fetch.bind(this);
    this.GetPool = this.GetPool.bind(this);
    this.GetPools = this.GetPools.bind(this);
    this.CreatePool = this.CreatePool.bind(this);
    this.DeletePool = this.DeletePool.bind(this);
    this.AddProject = this.AddProject.bind(this);
    this.RemoveProject = this.RemoveProject.bind(this);
    this.AddOrganization = this.AddOrganization.bind(this);
    this.RemoveOrganization = this.RemoveOrganization.bind(this);
    this.AddFacility = this.AddFacility.bind(this);
    this.RemoveFacility = this.RemoveFacility.bind(this);
    this.UpdatePoolResources = this.UpdatePoolResources.bind(this);
  }
  Alloc(request: AllocationRequest): Promise<AllocationResponse> {
    const data = AllocationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Alloc", data);
    return promise.then((data) => AllocationResponse.decode(new _m0.Reader(data)));
  }

  Free(request: FreeRequest): Promise<FreeResponse> {
    const data = FreeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Free", data);
    return promise.then((data) => FreeResponse.decode(new _m0.Reader(data)));
  }

  Fetch(request: FetchAllocationTableRequest): Promise<FetchAllocationTableResponse> {
    const data = FetchAllocationTableRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Fetch", data);
    return promise.then((data) => FetchAllocationTableResponse.decode(new _m0.Reader(data)));
  }

  GetPool(request: GetPoolRequest): Promise<GetPoolResponse> {
    const data = GetPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPool", data);
    return promise.then((data) => GetPoolResponse.decode(new _m0.Reader(data)));
  }

  GetPools(request: GetPoolsRequest): Promise<GetPoolsResponse> {
    const data = GetPoolsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetPools", data);
    return promise.then((data) => GetPoolsResponse.decode(new _m0.Reader(data)));
  }

  CreatePool(request: CreatePoolRequest): Promise<CreatePoolResponse> {
    const data = CreatePoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreatePool", data);
    return promise.then((data) => CreatePoolResponse.decode(new _m0.Reader(data)));
  }

  DeletePool(request: DeletePoolRequest): Promise<DeletePoolResponse> {
    const data = DeletePoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeletePool", data);
    return promise.then((data) => DeletePoolResponse.decode(new _m0.Reader(data)));
  }

  AddProject(request: AddProjectToPoolRequest): Promise<AddProjectToPoolResponse> {
    const data = AddProjectToPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddProject", data);
    return promise.then((data) => AddProjectToPoolResponse.decode(new _m0.Reader(data)));
  }

  RemoveProject(request: RemoveProjectFromPoolRequest): Promise<RemoveProjectFromPoolResponse> {
    const data = RemoveProjectFromPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveProject", data);
    return promise.then((data) => RemoveProjectFromPoolResponse.decode(new _m0.Reader(data)));
  }

  AddOrganization(request: AddOrganizationToPoolRequest): Promise<AddOrganizationToPoolResponse> {
    const data = AddOrganizationToPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddOrganization", data);
    return promise.then((data) => AddOrganizationToPoolResponse.decode(new _m0.Reader(data)));
  }

  RemoveOrganization(request: RemoveOrganizationFromPoolRequest): Promise<RemoveOrganizationFromPoolResponse> {
    const data = RemoveOrganizationFromPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveOrganization", data);
    return promise.then((data) => RemoveOrganizationFromPoolResponse.decode(new _m0.Reader(data)));
  }

  AddFacility(request: AddFacilityToPoolRequest): Promise<AddFacilityToPoolResponse> {
    const data = AddFacilityToPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddFacility", data);
    return promise.then((data) => AddFacilityToPoolResponse.decode(new _m0.Reader(data)));
  }

  RemoveFacility(request: RemoveFacilityFromPoolRequest): Promise<RemoveFacilityFromPoolResponse> {
    const data = RemoveFacilityFromPoolRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RemoveFacility", data);
    return promise.then((data) => RemoveFacilityFromPoolResponse.decode(new _m0.Reader(data)));
  }

  UpdatePoolResources(request: UpdatePoolResourcesRequest): Promise<UpdatePoolResourcesResponse> {
    const data = UpdatePoolResourcesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdatePoolResources", data);
    return promise.then((data) => UpdatePoolResourcesResponse.decode(new _m0.Reader(data)));
  }
}

export interface Identity {
  /**
   * List Identities
   *
   * List identities registered with the portal. Portal admins and
   * organization maintainers only. Admins can see all identities.
   * Organization maintainers can see identities associated with accounts
   * within their organization.
   */
  ListIdentities(request: ListIdentityRequest): Promise<ListIdentityResponse>;
  /**
   * Get Identity
   *
   * Get an identity registered with the portal.
   */
  GetIdentity(request: GetIdentityRequest): Promise<GetIdentityResponse>;
  /**
   * Register
   *
   * Register a new identity with the portal.
   */
  Register(request: RegisterRequest): Promise<RegisterResponse>;
  /**
   * Unregister
   *
   * Remove an identity from the portal.
   */
  Unregister(request: UnregisterRequest): Promise<UnregisterResponse>;
  /**
   * Login
   *
   * Login to the portal with username and password credentials and receive an
   * access token.
   */
  Login(request: LoginRequest): Promise<LoginResponse>;
  /**
   * Logout
   *
   * Logout of the portal with the given username.
   */
  Logout(request: LogoutRequest): Promise<LogoutResponse>;
}

export class IdentityClientImpl implements Identity {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Identity";
    this.rpc = rpc;
    this.ListIdentities = this.ListIdentities.bind(this);
    this.GetIdentity = this.GetIdentity.bind(this);
    this.Register = this.Register.bind(this);
    this.Unregister = this.Unregister.bind(this);
    this.Login = this.Login.bind(this);
    this.Logout = this.Logout.bind(this);
  }
  ListIdentities(request: ListIdentityRequest): Promise<ListIdentityResponse> {
    const data = ListIdentityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListIdentities", data);
    return promise.then((data) => ListIdentityResponse.decode(new _m0.Reader(data)));
  }

  GetIdentity(request: GetIdentityRequest): Promise<GetIdentityResponse> {
    const data = GetIdentityRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetIdentity", data);
    return promise.then((data) => GetIdentityResponse.decode(new _m0.Reader(data)));
  }

  Register(request: RegisterRequest): Promise<RegisterResponse> {
    const data = RegisterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Register", data);
    return promise.then((data) => RegisterResponse.decode(new _m0.Reader(data)));
  }

  Unregister(request: UnregisterRequest): Promise<UnregisterResponse> {
    const data = UnregisterRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Unregister", data);
    return promise.then((data) => UnregisterResponse.decode(new _m0.Reader(data)));
  }

  Login(request: LoginRequest): Promise<LoginResponse> {
    const data = LoginRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Login", data);
    return promise.then((data) => LoginResponse.decode(new _m0.Reader(data)));
  }

  Logout(request: LogoutRequest): Promise<LogoutResponse> {
    const data = LogoutRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Logout", data);
    return promise.then((data) => LogoutResponse.decode(new _m0.Reader(data)));
  }
}

export interface Cred {
  /**
   * GetUserSSHKeys
   *
   * Request keying material for the given user.
   */
  GetUserSSHKeys(request: GetUserSSHKeysRequest): Promise<GetUserSSHKeysResponse>;
  /**
   * GetSSHCert
   *
   * Request an SSH certifcate that authorizes the logged in user to ssh to Portal entities such as XDCs.
   */
  GetUserSSHCert(request: GetUserSSHCertRequest): Promise<GetUserSSHCertResponse>;
}

export class CredClientImpl implements Cred {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Cred";
    this.rpc = rpc;
    this.GetUserSSHKeys = this.GetUserSSHKeys.bind(this);
    this.GetUserSSHCert = this.GetUserSSHCert.bind(this);
  }
  GetUserSSHKeys(request: GetUserSSHKeysRequest): Promise<GetUserSSHKeysResponse> {
    const data = GetUserSSHKeysRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserSSHKeys", data);
    return promise.then((data) => GetUserSSHKeysResponse.decode(new _m0.Reader(data)));
  }

  GetUserSSHCert(request: GetUserSSHCertRequest): Promise<GetUserSSHCertResponse> {
    const data = GetUserSSHCertRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserSSHCert", data);
    return promise.then((data) => GetUserSSHCertResponse.decode(new _m0.Reader(data)));
  }
}

export interface XDC {
  ListXDCs(request: ListXDCsRequest): Promise<ListXDCsResponse>;
  CreateXDC(request: CreateXDCRequest): Promise<CreateXDCResponse>;
  DeleteXDC(request: DeleteXDCRequest): Promise<DeleteXDCResponse>;
  AttachXDC(request: AttachXDCRequest): Promise<AttachXDCResponse>;
  DetachXDC(request: DetachXDCRequest): Promise<DetachXDCResponse>;
  GetXDCJumpHosts(request: GetXDCJumpHostsRequest): Promise<GetXDCJumpHostsResponse>;
}

export class XDCClientImpl implements XDC {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.XDC";
    this.rpc = rpc;
    this.ListXDCs = this.ListXDCs.bind(this);
    this.CreateXDC = this.CreateXDC.bind(this);
    this.DeleteXDC = this.DeleteXDC.bind(this);
    this.AttachXDC = this.AttachXDC.bind(this);
    this.DetachXDC = this.DetachXDC.bind(this);
    this.GetXDCJumpHosts = this.GetXDCJumpHosts.bind(this);
  }
  ListXDCs(request: ListXDCsRequest): Promise<ListXDCsResponse> {
    const data = ListXDCsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListXDCs", data);
    return promise.then((data) => ListXDCsResponse.decode(new _m0.Reader(data)));
  }

  CreateXDC(request: CreateXDCRequest): Promise<CreateXDCResponse> {
    const data = CreateXDCRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateXDC", data);
    return promise.then((data) => CreateXDCResponse.decode(new _m0.Reader(data)));
  }

  DeleteXDC(request: DeleteXDCRequest): Promise<DeleteXDCResponse> {
    const data = DeleteXDCRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteXDC", data);
    return promise.then((data) => DeleteXDCResponse.decode(new _m0.Reader(data)));
  }

  AttachXDC(request: AttachXDCRequest): Promise<AttachXDCResponse> {
    const data = AttachXDCRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AttachXDC", data);
    return promise.then((data) => AttachXDCResponse.decode(new _m0.Reader(data)));
  }

  DetachXDC(request: DetachXDCRequest): Promise<DetachXDCResponse> {
    const data = DetachXDCRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DetachXDC", data);
    return promise.then((data) => DetachXDCResponse.decode(new _m0.Reader(data)));
  }

  GetXDCJumpHosts(request: GetXDCJumpHostsRequest): Promise<GetXDCJumpHostsResponse> {
    const data = GetXDCJumpHostsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetXDCJumpHosts", data);
    return promise.then((data) => GetXDCJumpHostsResponse.decode(new _m0.Reader(data)));
  }
}

export interface Wireguard {
  /**
   * AddWgIfConfig
   *
   * Tell the portal to associate the given keying material and configuration information
   * with the Wireguard interface. If the interface is not a gateway, the configuration
   * will be added to the enclave gateway.
   */
  AddWgIfConfig(request: AddWgIfConfigRequest): Promise<AddWgIfConfigResponse>;
  /**
   * DelWgIfConfig
   *
   * Tell the portal to disassociate and delete the given keying material and configuration information
   * for the Wireguard interface. The configuration will be removed from the enclave gateway.
   */
  DelWgIfConfig(request: DelWgIfConfigRequest): Promise<DelWgIfConfigResponse>;
  /**
   * GetWgIfConfig
   *
   * Get the configuration associated with the given key in the given enclave.
   */
  GetWgIfConfig(request: GetWgIfConfigRequest): Promise<GetWgIfConfigResponse>;
  /**
   * GetWgEnclave
   *
   * List the keying material and configuration information for the interfaces within the
   * given wireguard enclave.
   */
  GetWgEnclave(request: GetWgEnclaveRequest): Promise<GetWgEnclaveResponse>;
}

export class WireguardClientImpl implements Wireguard {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Wireguard";
    this.rpc = rpc;
    this.AddWgIfConfig = this.AddWgIfConfig.bind(this);
    this.DelWgIfConfig = this.DelWgIfConfig.bind(this);
    this.GetWgIfConfig = this.GetWgIfConfig.bind(this);
    this.GetWgEnclave = this.GetWgEnclave.bind(this);
  }
  AddWgIfConfig(request: AddWgIfConfigRequest): Promise<AddWgIfConfigResponse> {
    const data = AddWgIfConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddWgIfConfig", data);
    return promise.then((data) => AddWgIfConfigResponse.decode(new _m0.Reader(data)));
  }

  DelWgIfConfig(request: DelWgIfConfigRequest): Promise<DelWgIfConfigResponse> {
    const data = DelWgIfConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DelWgIfConfig", data);
    return promise.then((data) => DelWgIfConfigResponse.decode(new _m0.Reader(data)));
  }

  GetWgIfConfig(request: GetWgIfConfigRequest): Promise<GetWgIfConfigResponse> {
    const data = GetWgIfConfigRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWgIfConfig", data);
    return promise.then((data) => GetWgIfConfigResponse.decode(new _m0.Reader(data)));
  }

  GetWgEnclave(request: GetWgEnclaveRequest): Promise<GetWgEnclaveResponse> {
    const data = GetWgEnclaveRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetWgEnclave", data);
    return promise.then((data) => GetWgEnclaveResponse.decode(new _m0.Reader(data)));
  }
}

export interface Model {
  /**
   * Compile
   *
   * Take the given experiment model and compile it. If successful, the network model is returned.
   * Otherwise the compilation error stack is returned.
   */
  Compile(request: CompileRequest): Promise<CompileResponse>;
  /**
   * Push
   *
   * Push the model to the given experiment's repository on the given branch.
   */
  Push(request: PushRequest): Promise<PushResponse>;
}

export class ModelClientImpl implements Model {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || "portal.v1.Model";
    this.rpc = rpc;
    this.Compile = this.Compile.bind(this);
    this.Push = this.Push.bind(this);
  }
  Compile(request: CompileRequest): Promise<CompileResponse> {
    const data = CompileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Compile", data);
    return promise.then((data) => CompileResponse.decode(new _m0.Reader(data)));
  }

  Push(request: PushRequest): Promise<PushResponse> {
    const data = PushRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Push", data);
    return promise.then((data) => PushResponse.decode(new _m0.Reader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
