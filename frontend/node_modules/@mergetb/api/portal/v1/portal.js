"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.ModelClientImpl = exports.WireguardClientImpl = exports.XDCClientImpl = exports.CredClientImpl = exports.IdentityClientImpl = exports.AllocClientImpl = exports.CommissionClientImpl = exports.MaterializeClientImpl = exports.RealizeClientImpl = exports.WorkspaceClientImpl = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var alloc_types_1 = require("./alloc_types");
var commission_types_1 = require("./commission_types");
var cred_types_1 = require("./cred_types");
var identity_types_1 = require("./identity_types");
var materialize_types_1 = require("./materialize_types");
var model_types_1 = require("./model_types");
var realize_types_1 = require("./realize_types");
var wg_types_1 = require("./wg_types");
var workspace_types_1 = require("./workspace_types");
var xdc_types_1 = require("./xdc_types");
exports.protobufPackage = "portal.v1";
var WorkspaceClientImpl = /** @class */ (function () {
    function WorkspaceClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Workspace";
        this.rpc = rpc;
        this.ActivateUser = this.ActivateUser.bind(this);
        this.FreezeUser = this.FreezeUser.bind(this);
        this.InitUser = this.InitUser.bind(this);
        this.GetUsers = this.GetUsers.bind(this);
        this.GetUser = this.GetUser.bind(this);
        this.UpdateUser = this.UpdateUser.bind(this);
        this.DeleteUser = this.DeleteUser.bind(this);
        this.GetUserPublicKeys = this.GetUserPublicKeys.bind(this);
        this.AddUserPublicKey = this.AddUserPublicKey.bind(this);
        this.DeleteUserPublicKey = this.DeleteUserPublicKey.bind(this);
        this.DeleteUserPublicKeys = this.DeleteUserPublicKeys.bind(this);
        this.GetProjects = this.GetProjects.bind(this);
        this.GetProject = this.GetProject.bind(this);
        this.CreateProject = this.CreateProject.bind(this);
        this.UpdateProject = this.UpdateProject.bind(this);
        this.DeleteProject = this.DeleteProject.bind(this);
        this.GetProjectMembers = this.GetProjectMembers.bind(this);
        this.GetProjectMember = this.GetProjectMember.bind(this);
        this.AddProjectMember = this.AddProjectMember.bind(this);
        this.UpdateProjectMember = this.UpdateProjectMember.bind(this);
        this.DeleteProjectMember = this.DeleteProjectMember.bind(this);
        this.ActivateOrganization = this.ActivateOrganization.bind(this);
        this.FreezeOrganization = this.FreezeOrganization.bind(this);
        this.GetOrganizations = this.GetOrganizations.bind(this);
        this.GetOrganization = this.GetOrganization.bind(this);
        this.CreateOrganization = this.CreateOrganization.bind(this);
        this.UpdateOrganization = this.UpdateOrganization.bind(this);
        this.DeleteOrganization = this.DeleteOrganization.bind(this);
        this.GetOrganizationMembers = this.GetOrganizationMembers.bind(this);
        this.GetOrganizationMember = this.GetOrganizationMember.bind(this);
        this.RequestOrganizationMembership = this.RequestOrganizationMembership.bind(this);
        this.ConfirmOrganizationMembership = this.ConfirmOrganizationMembership.bind(this);
        this.UpdateOrganizationMember = this.UpdateOrganizationMember.bind(this);
        this.DeleteOrganizationMember = this.DeleteOrganizationMember.bind(this);
        this.GetOrganizationProjects = this.GetOrganizationProjects.bind(this);
        this.GetOrganizationProject = this.GetOrganizationProject.bind(this);
        this.AddOrganizationProject = this.AddOrganizationProject.bind(this);
        this.UpdateOrganizationProject = this.UpdateOrganizationProject.bind(this);
        this.DeleteOrganizationProject = this.DeleteOrganizationProject.bind(this);
        this.GetExperiments = this.GetExperiments.bind(this);
        this.GetProjectExperiments = this.GetProjectExperiments.bind(this);
        this.GetExperiment = this.GetExperiment.bind(this);
        this.CreateExperiment = this.CreateExperiment.bind(this);
        this.UpdateExperiment = this.UpdateExperiment.bind(this);
        this.DeleteExperiment = this.DeleteExperiment.bind(this);
        this.GetRevision = this.GetRevision.bind(this);
        this.GetPolicy = this.GetPolicy.bind(this);
        this.GetUserConfigurations = this.GetUserConfigurations.bind(this);
        this.UpdateUserConfigurations = this.UpdateUserConfigurations.bind(this);
        this.GetEntityTypeConfigurations = this.GetEntityTypeConfigurations.bind(this);
        this.UpdateEntityTypeConfigurations = this.UpdateEntityTypeConfigurations.bind(this);
        this.Health = this.Health.bind(this);
    }
    WorkspaceClientImpl.prototype.ActivateUser = function (request) {
        var data = workspace_types_1.ActivateUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ActivateUser", data);
        return promise.then(function (data) { return workspace_types_1.ActivateUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.FreezeUser = function (request) {
        var data = workspace_types_1.FreezeUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "FreezeUser", data);
        return promise.then(function (data) { return workspace_types_1.FreezeUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.InitUser = function (request) {
        var data = workspace_types_1.InitUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "InitUser", data);
        return promise.then(function (data) { return workspace_types_1.InitUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetUsers = function (request) {
        var data = workspace_types_1.GetUsersRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUsers", data);
        return promise.then(function (data) { return workspace_types_1.GetUsersResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetUser = function (request) {
        var data = workspace_types_1.GetUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUser", data);
        return promise.then(function (data) { return workspace_types_1.GetUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateUser = function (request) {
        var data = workspace_types_1.UpdateUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateUser", data);
        return promise.then(function (data) { return workspace_types_1.UpdateUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteUser = function (request) {
        var data = workspace_types_1.DeleteUserRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteUser", data);
        return promise.then(function (data) { return workspace_types_1.DeleteUserResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetUserPublicKeys = function (request) {
        var data = workspace_types_1.GetUserPublicKeysRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUserPublicKeys", data);
        return promise.then(function (data) { return workspace_types_1.GetUserPublicKeysResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.AddUserPublicKey = function (request) {
        var data = workspace_types_1.AddUserPublicKeyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddUserPublicKey", data);
        return promise.then(function (data) { return workspace_types_1.AddUserPublicKeyResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteUserPublicKey = function (request) {
        var data = workspace_types_1.DeleteUserPublicKeyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteUserPublicKey", data);
        return promise.then(function (data) { return workspace_types_1.DeleteUserPublicKeyResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteUserPublicKeys = function (request) {
        var data = workspace_types_1.DeleteUserPublicKeysRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteUserPublicKeys", data);
        return promise.then(function (data) { return workspace_types_1.DeleteUserPublicKeysResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetProjects = function (request) {
        var data = workspace_types_1.GetProjectsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetProjects", data);
        return promise.then(function (data) { return workspace_types_1.GetProjectsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetProject = function (request) {
        var data = workspace_types_1.GetProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetProject", data);
        return promise.then(function (data) { return workspace_types_1.GetProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.CreateProject = function (request) {
        var data = workspace_types_1.CreateProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateProject", data);
        return promise.then(function (data) { return workspace_types_1.CreateProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateProject = function (request) {
        var data = workspace_types_1.UpdateProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateProject", data);
        return promise.then(function (data) { return workspace_types_1.UpdateProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteProject = function (request) {
        var data = workspace_types_1.DeleteProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteProject", data);
        return promise.then(function (data) { return workspace_types_1.DeleteProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetProjectMembers = function (request) {
        var data = workspace_types_1.GetProjectMembersRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetProjectMembers", data);
        return promise.then(function (data) { return workspace_types_1.GetProjectMembersResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetProjectMember = function (request) {
        var data = workspace_types_1.GetProjectMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetProjectMember", data);
        return promise.then(function (data) { return workspace_types_1.GetProjectMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.AddProjectMember = function (request) {
        var data = workspace_types_1.AddProjectMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddProjectMember", data);
        return promise.then(function (data) { return workspace_types_1.AddProjectMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateProjectMember = function (request) {
        var data = workspace_types_1.UpdateProjectMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateProjectMember", data);
        return promise.then(function (data) { return workspace_types_1.UpdateProjectMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteProjectMember = function (request) {
        var data = workspace_types_1.DeleteProjectMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteProjectMember", data);
        return promise.then(function (data) { return workspace_types_1.DeleteProjectMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.ActivateOrganization = function (request) {
        var data = workspace_types_1.ActivateOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ActivateOrganization", data);
        return promise.then(function (data) { return workspace_types_1.ActivateOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.FreezeOrganization = function (request) {
        var data = workspace_types_1.FreezeOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "FreezeOrganization", data);
        return promise.then(function (data) { return workspace_types_1.FreezeOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganizations = function (request) {
        var data = workspace_types_1.GetOrganizationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganizations", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganization = function (request) {
        var data = workspace_types_1.GetOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganization", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.CreateOrganization = function (request) {
        var data = workspace_types_1.CreateOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateOrganization", data);
        return promise.then(function (data) { return workspace_types_1.CreateOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateOrganization = function (request) {
        var data = workspace_types_1.UpdateOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateOrganization", data);
        return promise.then(function (data) { return workspace_types_1.UpdateOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteOrganization = function (request) {
        var data = workspace_types_1.DeleteOrganizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteOrganization", data);
        return promise.then(function (data) { return workspace_types_1.DeleteOrganizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganizationMembers = function (request) {
        var data = workspace_types_1.GetOrganizationMembersRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganizationMembers", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationMembersResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganizationMember = function (request) {
        var data = workspace_types_1.GetOrganizationMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganizationMember", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.RequestOrganizationMembership = function (request) {
        var data = workspace_types_1.RequestOrganizationMembershipRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RequestOrganizationMembership", data);
        return promise.then(function (data) { return workspace_types_1.RequestOrganizationMembershipResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.ConfirmOrganizationMembership = function (request) {
        var data = workspace_types_1.ConfirmOrganizationMembershipRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ConfirmOrganizationMembership", data);
        return promise.then(function (data) { return workspace_types_1.ConfirmOrganizationMembershipResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateOrganizationMember = function (request) {
        var data = workspace_types_1.UpdateOrganizationMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateOrganizationMember", data);
        return promise.then(function (data) { return workspace_types_1.UpdateOrganizationMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteOrganizationMember = function (request) {
        var data = workspace_types_1.DeleteOrganizationMemberRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteOrganizationMember", data);
        return promise.then(function (data) { return workspace_types_1.DeleteOrganizationMemberResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganizationProjects = function (request) {
        var data = workspace_types_1.GetOrganizationProjectsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganizationProjects", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationProjectsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetOrganizationProject = function (request) {
        var data = workspace_types_1.GetOrganizationProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetOrganizationProject", data);
        return promise.then(function (data) { return workspace_types_1.GetOrganizationProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.AddOrganizationProject = function (request) {
        var data = workspace_types_1.AddOrganizationProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddOrganizationProject", data);
        return promise.then(function (data) { return workspace_types_1.AddOrganizationProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateOrganizationProject = function (request) {
        var data = workspace_types_1.UpdateOrganizationProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateOrganizationProject", data);
        return promise.then(function (data) { return workspace_types_1.UpdateOrganizationProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteOrganizationProject = function (request) {
        var data = workspace_types_1.DeleteOrganizationProjectRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteOrganizationProject", data);
        return promise.then(function (data) { return workspace_types_1.DeleteOrganizationProjectResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetExperiments = function (request) {
        var data = workspace_types_1.GetExperimentsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetExperiments", data);
        return promise.then(function (data) { return workspace_types_1.GetExperimentsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetProjectExperiments = function (request) {
        var data = workspace_types_1.GetProjectExperimentsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetProjectExperiments", data);
        return promise.then(function (data) { return workspace_types_1.GetProjectExperimentsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetExperiment = function (request) {
        var data = workspace_types_1.GetExperimentRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetExperiment", data);
        return promise.then(function (data) { return workspace_types_1.GetExperimentResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.CreateExperiment = function (request) {
        var data = workspace_types_1.CreateExperimentRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateExperiment", data);
        return promise.then(function (data) { return workspace_types_1.CreateExperimentResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateExperiment = function (request) {
        var data = workspace_types_1.UpdateExperimentRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateExperiment", data);
        return promise.then(function (data) { return workspace_types_1.UpdateExperimentResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.DeleteExperiment = function (request) {
        var data = workspace_types_1.DeleteExperimentRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteExperiment", data);
        return promise.then(function (data) { return workspace_types_1.DeleteExperimentResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetRevision = function (request) {
        var data = workspace_types_1.GetRevisionRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetRevision", data);
        return promise.then(function (data) { return workspace_types_1.GetRevisionResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetPolicy = function (request) {
        var data = workspace_types_1.GetPolicyRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetPolicy", data);
        return promise.then(function (data) { return workspace_types_1.GetPolicyResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetUserConfigurations = function (request) {
        var data = workspace_types_1.GetUserConfigurationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUserConfigurations", data);
        return promise.then(function (data) { return workspace_types_1.GetUserConfigurationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateUserConfigurations = function (request) {
        var data = workspace_types_1.UpdateUserConfigurationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateUserConfigurations", data);
        return promise.then(function (data) { return workspace_types_1.UpdateUserConfigurationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.GetEntityTypeConfigurations = function (request) {
        var data = workspace_types_1.GetEntityTypeConfigurationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetEntityTypeConfigurations", data);
        return promise.then(function (data) { return workspace_types_1.GetEntityTypeConfigurationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.UpdateEntityTypeConfigurations = function (request) {
        var data = workspace_types_1.UpdateEntityTypeConfigurationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateEntityTypeConfigurations", data);
        return promise.then(function (data) { return workspace_types_1.UpdateEntityTypeConfigurationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WorkspaceClientImpl.prototype.Health = function (request) {
        var data = workspace_types_1.HealthRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Health", data);
        return promise.then(function (data) { return workspace_types_1.HealthResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return WorkspaceClientImpl;
}());
exports.WorkspaceClientImpl = WorkspaceClientImpl;
var RealizeClientImpl = /** @class */ (function () {
    function RealizeClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Realize";
        this.rpc = rpc;
        this.GetRealizations = this.GetRealizations.bind(this);
        this.GetRealization = this.GetRealization.bind(this);
        this.Realize = this.Realize.bind(this);
        this.Relinquish = this.Relinquish.bind(this);
        this.GetResources = this.GetResources.bind(this);
        this.UpdateRealization = this.UpdateRealization.bind(this);
    }
    RealizeClientImpl.prototype.GetRealizations = function (request) {
        var data = realize_types_1.GetRealizationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetRealizations", data);
        return promise.then(function (data) { return realize_types_1.GetRealizationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    RealizeClientImpl.prototype.GetRealization = function (request) {
        var data = realize_types_1.GetRealizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetRealization", data);
        return promise.then(function (data) { return realize_types_1.GetRealizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    RealizeClientImpl.prototype.Realize = function (request) {
        var data = realize_types_1.RealizeRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Realize", data);
        return promise.then(function (data) { return realize_types_1.RealizeResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    RealizeClientImpl.prototype.Relinquish = function (request) {
        var data = realize_types_1.RelinquishRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Relinquish", data);
        return promise.then(function (data) { return realize_types_1.RelinquishResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    RealizeClientImpl.prototype.GetResources = function (request) {
        var data = realize_types_1.GetResourcesRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetResources", data);
        return promise.then(function (data) { return realize_types_1.GetResourcesResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    RealizeClientImpl.prototype.UpdateRealization = function (request) {
        var data = realize_types_1.UpdateRealizationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateRealization", data);
        return promise.then(function (data) { return realize_types_1.UpdateRealizationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return RealizeClientImpl;
}());
exports.RealizeClientImpl = RealizeClientImpl;
var MaterializeClientImpl = /** @class */ (function () {
    function MaterializeClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Materialize";
        this.rpc = rpc;
        this.GetMaterializations = this.GetMaterializations.bind(this);
        this.GetMaterialization = this.GetMaterialization.bind(this);
        this.GetMaterializationStatus = this.GetMaterializationStatus.bind(this);
        this.Materialize = this.Materialize.bind(this);
        this.Dematerialize = this.Dematerialize.bind(this);
        this.RebootMaterialization = this.RebootMaterialization.bind(this);
        this.NewIngress = this.NewIngress.bind(this);
        this.DeleteIngress = this.DeleteIngress.bind(this);
    }
    MaterializeClientImpl.prototype.GetMaterializations = function (request) {
        var data = materialize_types_1.GetMaterializationsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetMaterializations", data);
        return promise.then(function (data) { return materialize_types_1.GetMaterializationsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.GetMaterialization = function (request) {
        var data = materialize_types_1.GetMaterializationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetMaterialization", data);
        return promise.then(function (data) { return materialize_types_1.GetMaterializationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.GetMaterializationStatus = function (request) {
        var data = materialize_types_1.GetMaterializationStatusRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetMaterializationStatus", data);
        return promise.then(function (data) { return materialize_types_1.GetMaterializationStatusResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.Materialize = function (request) {
        var data = materialize_types_1.MaterializeRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Materialize", data);
        return promise.then(function (data) { return materialize_types_1.MaterializeResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.Dematerialize = function (request) {
        var data = materialize_types_1.DematerializeRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Dematerialize", data);
        return promise.then(function (data) { return materialize_types_1.DematerializeResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.RebootMaterialization = function (request) {
        var data = materialize_types_1.RebootMaterializationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RebootMaterialization", data);
        return promise.then(function (data) { return materialize_types_1.RebootMaterializationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.NewIngress = function (request) {
        var data = materialize_types_1.NewIngressRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "NewIngress", data);
        return promise.then(function (data) { return materialize_types_1.NewIngressResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    MaterializeClientImpl.prototype.DeleteIngress = function (request) {
        var data = materialize_types_1.DeleteIngressRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteIngress", data);
        return promise.then(function (data) { return materialize_types_1.DeleteIngressResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return MaterializeClientImpl;
}());
exports.MaterializeClientImpl = MaterializeClientImpl;
var CommissionClientImpl = /** @class */ (function () {
    function CommissionClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Commission";
        this.rpc = rpc;
        this.RegisterFacility = this.RegisterFacility.bind(this);
        this.GetFacilities = this.GetFacilities.bind(this);
        this.GetFacility = this.GetFacility.bind(this);
        this.UpdateFacility = this.UpdateFacility.bind(this);
        this.DeleteFacility = this.DeleteFacility.bind(this);
        this.DeactivateResources = this.DeactivateResources.bind(this);
        this.ActivateResources = this.ActivateResources.bind(this);
        this.ListBlockPools = this.ListBlockPools.bind(this);
        this.InitializeHarbor = this.InitializeHarbor.bind(this);
        this.DeinitializeHarbor = this.DeinitializeHarbor.bind(this);
    }
    CommissionClientImpl.prototype.RegisterFacility = function (request) {
        var data = commission_types_1.RegisterFacilityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RegisterFacility", data);
        return promise.then(function (data) { return commission_types_1.RegisterFacilityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.GetFacilities = function (request) {
        var data = commission_types_1.GetFacilitiesRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetFacilities", data);
        return promise.then(function (data) { return commission_types_1.GetFacilitiesResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.GetFacility = function (request) {
        var data = commission_types_1.GetFacilityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetFacility", data);
        return promise.then(function (data) { return commission_types_1.GetFacilityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.UpdateFacility = function (request) {
        var data = commission_types_1.UpdateFacilityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdateFacility", data);
        return promise.then(function (data) { return commission_types_1.UpdateFacilityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.DeleteFacility = function (request) {
        var data = commission_types_1.DeleteFacilityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteFacility", data);
        return promise.then(function (data) { return commission_types_1.DeleteFacilityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.DeactivateResources = function (request) {
        var data = commission_types_1.DeactivateResourcesRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeactivateResources", data);
        return promise.then(function (data) { return commission_types_1.DeactivateResourcesResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.ActivateResources = function (request) {
        var data = commission_types_1.ActivateResourcesRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ActivateResources", data);
        return promise.then(function (data) { return commission_types_1.ActivateResourcesResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.ListBlockPools = function (request) {
        var data = commission_types_1.ListBlockPoolsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ListBlockPools", data);
        return promise.then(function (data) { return commission_types_1.ListBlockPoolsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.InitializeHarbor = function (request) {
        var data = commission_types_1.InitHarborRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "InitializeHarbor", data);
        return promise.then(function (data) { return commission_types_1.InitHarborResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CommissionClientImpl.prototype.DeinitializeHarbor = function (request) {
        var data = commission_types_1.DeinitHarborRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeinitializeHarbor", data);
        return promise.then(function (data) { return commission_types_1.DeinitHarborResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return CommissionClientImpl;
}());
exports.CommissionClientImpl = CommissionClientImpl;
var AllocClientImpl = /** @class */ (function () {
    function AllocClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Alloc";
        this.rpc = rpc;
        this.Alloc = this.Alloc.bind(this);
        this.Free = this.Free.bind(this);
        this.Fetch = this.Fetch.bind(this);
        this.GetPool = this.GetPool.bind(this);
        this.GetPools = this.GetPools.bind(this);
        this.CreatePool = this.CreatePool.bind(this);
        this.DeletePool = this.DeletePool.bind(this);
        this.AddProject = this.AddProject.bind(this);
        this.RemoveProject = this.RemoveProject.bind(this);
        this.AddOrganization = this.AddOrganization.bind(this);
        this.RemoveOrganization = this.RemoveOrganization.bind(this);
        this.AddFacility = this.AddFacility.bind(this);
        this.RemoveFacility = this.RemoveFacility.bind(this);
        this.UpdatePoolResources = this.UpdatePoolResources.bind(this);
    }
    AllocClientImpl.prototype.Alloc = function (request) {
        var data = alloc_types_1.AllocationRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Alloc", data);
        return promise.then(function (data) { return alloc_types_1.AllocationResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.Free = function (request) {
        var data = alloc_types_1.FreeRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Free", data);
        return promise.then(function (data) { return alloc_types_1.FreeResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.Fetch = function (request) {
        var data = alloc_types_1.FetchAllocationTableRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Fetch", data);
        return promise.then(function (data) { return alloc_types_1.FetchAllocationTableResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.GetPool = function (request) {
        var data = alloc_types_1.GetPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetPool", data);
        return promise.then(function (data) { return alloc_types_1.GetPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.GetPools = function (request) {
        var data = alloc_types_1.GetPoolsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetPools", data);
        return promise.then(function (data) { return alloc_types_1.GetPoolsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.CreatePool = function (request) {
        var data = alloc_types_1.CreatePoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreatePool", data);
        return promise.then(function (data) { return alloc_types_1.CreatePoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.DeletePool = function (request) {
        var data = alloc_types_1.DeletePoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeletePool", data);
        return promise.then(function (data) { return alloc_types_1.DeletePoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.AddProject = function (request) {
        var data = alloc_types_1.AddProjectToPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddProject", data);
        return promise.then(function (data) { return alloc_types_1.AddProjectToPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.RemoveProject = function (request) {
        var data = alloc_types_1.RemoveProjectFromPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RemoveProject", data);
        return promise.then(function (data) { return alloc_types_1.RemoveProjectFromPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.AddOrganization = function (request) {
        var data = alloc_types_1.AddOrganizationToPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddOrganization", data);
        return promise.then(function (data) { return alloc_types_1.AddOrganizationToPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.RemoveOrganization = function (request) {
        var data = alloc_types_1.RemoveOrganizationFromPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RemoveOrganization", data);
        return promise.then(function (data) { return alloc_types_1.RemoveOrganizationFromPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.AddFacility = function (request) {
        var data = alloc_types_1.AddFacilityToPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddFacility", data);
        return promise.then(function (data) { return alloc_types_1.AddFacilityToPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.RemoveFacility = function (request) {
        var data = alloc_types_1.RemoveFacilityFromPoolRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "RemoveFacility", data);
        return promise.then(function (data) { return alloc_types_1.RemoveFacilityFromPoolResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    AllocClientImpl.prototype.UpdatePoolResources = function (request) {
        var data = alloc_types_1.UpdatePoolResourcesRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "UpdatePoolResources", data);
        return promise.then(function (data) { return alloc_types_1.UpdatePoolResourcesResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return AllocClientImpl;
}());
exports.AllocClientImpl = AllocClientImpl;
var IdentityClientImpl = /** @class */ (function () {
    function IdentityClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Identity";
        this.rpc = rpc;
        this.ListIdentities = this.ListIdentities.bind(this);
        this.GetIdentity = this.GetIdentity.bind(this);
        this.Register = this.Register.bind(this);
        this.Unregister = this.Unregister.bind(this);
        this.Login = this.Login.bind(this);
        this.Logout = this.Logout.bind(this);
    }
    IdentityClientImpl.prototype.ListIdentities = function (request) {
        var data = identity_types_1.ListIdentityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ListIdentities", data);
        return promise.then(function (data) { return identity_types_1.ListIdentityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    IdentityClientImpl.prototype.GetIdentity = function (request) {
        var data = identity_types_1.GetIdentityRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetIdentity", data);
        return promise.then(function (data) { return identity_types_1.GetIdentityResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    IdentityClientImpl.prototype.Register = function (request) {
        var data = identity_types_1.RegisterRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Register", data);
        return promise.then(function (data) { return identity_types_1.RegisterResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    IdentityClientImpl.prototype.Unregister = function (request) {
        var data = identity_types_1.UnregisterRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Unregister", data);
        return promise.then(function (data) { return identity_types_1.UnregisterResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    IdentityClientImpl.prototype.Login = function (request) {
        var data = identity_types_1.LoginRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Login", data);
        return promise.then(function (data) { return identity_types_1.LoginResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    IdentityClientImpl.prototype.Logout = function (request) {
        var data = identity_types_1.LogoutRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Logout", data);
        return promise.then(function (data) { return identity_types_1.LogoutResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return IdentityClientImpl;
}());
exports.IdentityClientImpl = IdentityClientImpl;
var CredClientImpl = /** @class */ (function () {
    function CredClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Cred";
        this.rpc = rpc;
        this.GetUserSSHKeys = this.GetUserSSHKeys.bind(this);
        this.GetUserSSHCert = this.GetUserSSHCert.bind(this);
    }
    CredClientImpl.prototype.GetUserSSHKeys = function (request) {
        var data = cred_types_1.GetUserSSHKeysRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUserSSHKeys", data);
        return promise.then(function (data) { return cred_types_1.GetUserSSHKeysResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    CredClientImpl.prototype.GetUserSSHCert = function (request) {
        var data = cred_types_1.GetUserSSHCertRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetUserSSHCert", data);
        return promise.then(function (data) { return cred_types_1.GetUserSSHCertResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return CredClientImpl;
}());
exports.CredClientImpl = CredClientImpl;
var XDCClientImpl = /** @class */ (function () {
    function XDCClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.XDC";
        this.rpc = rpc;
        this.ListXDCs = this.ListXDCs.bind(this);
        this.CreateXDC = this.CreateXDC.bind(this);
        this.DeleteXDC = this.DeleteXDC.bind(this);
        this.AttachXDC = this.AttachXDC.bind(this);
        this.DetachXDC = this.DetachXDC.bind(this);
        this.GetXDCJumpHosts = this.GetXDCJumpHosts.bind(this);
    }
    XDCClientImpl.prototype.ListXDCs = function (request) {
        var data = xdc_types_1.ListXDCsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "ListXDCs", data);
        return promise.then(function (data) { return xdc_types_1.ListXDCsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    XDCClientImpl.prototype.CreateXDC = function (request) {
        var data = xdc_types_1.CreateXDCRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "CreateXDC", data);
        return promise.then(function (data) { return xdc_types_1.CreateXDCResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    XDCClientImpl.prototype.DeleteXDC = function (request) {
        var data = xdc_types_1.DeleteXDCRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DeleteXDC", data);
        return promise.then(function (data) { return xdc_types_1.DeleteXDCResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    XDCClientImpl.prototype.AttachXDC = function (request) {
        var data = xdc_types_1.AttachXDCRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AttachXDC", data);
        return promise.then(function (data) { return xdc_types_1.AttachXDCResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    XDCClientImpl.prototype.DetachXDC = function (request) {
        var data = xdc_types_1.DetachXDCRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DetachXDC", data);
        return promise.then(function (data) { return xdc_types_1.DetachXDCResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    XDCClientImpl.prototype.GetXDCJumpHosts = function (request) {
        var data = xdc_types_1.GetXDCJumpHostsRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetXDCJumpHosts", data);
        return promise.then(function (data) { return xdc_types_1.GetXDCJumpHostsResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return XDCClientImpl;
}());
exports.XDCClientImpl = XDCClientImpl;
var WireguardClientImpl = /** @class */ (function () {
    function WireguardClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Wireguard";
        this.rpc = rpc;
        this.AddWgIfConfig = this.AddWgIfConfig.bind(this);
        this.DelWgIfConfig = this.DelWgIfConfig.bind(this);
        this.GetWgIfConfig = this.GetWgIfConfig.bind(this);
        this.GetWgEnclave = this.GetWgEnclave.bind(this);
    }
    WireguardClientImpl.prototype.AddWgIfConfig = function (request) {
        var data = wg_types_1.AddWgIfConfigRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "AddWgIfConfig", data);
        return promise.then(function (data) { return wg_types_1.AddWgIfConfigResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WireguardClientImpl.prototype.DelWgIfConfig = function (request) {
        var data = wg_types_1.DelWgIfConfigRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "DelWgIfConfig", data);
        return promise.then(function (data) { return wg_types_1.DelWgIfConfigResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WireguardClientImpl.prototype.GetWgIfConfig = function (request) {
        var data = wg_types_1.GetWgIfConfigRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetWgIfConfig", data);
        return promise.then(function (data) { return wg_types_1.GetWgIfConfigResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    WireguardClientImpl.prototype.GetWgEnclave = function (request) {
        var data = wg_types_1.GetWgEnclaveRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "GetWgEnclave", data);
        return promise.then(function (data) { return wg_types_1.GetWgEnclaveResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return WireguardClientImpl;
}());
exports.WireguardClientImpl = WireguardClientImpl;
var ModelClientImpl = /** @class */ (function () {
    function ModelClientImpl(rpc, opts) {
        this.service = (opts === null || opts === void 0 ? void 0 : opts.service) || "portal.v1.Model";
        this.rpc = rpc;
        this.Compile = this.Compile.bind(this);
        this.Push = this.Push.bind(this);
    }
    ModelClientImpl.prototype.Compile = function (request) {
        var data = model_types_1.CompileRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Compile", data);
        return promise.then(function (data) { return model_types_1.CompileResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    ModelClientImpl.prototype.Push = function (request) {
        var data = model_types_1.PushRequest.encode(request).finish();
        var promise = this.rpc.request(this.service, "Push", data);
        return promise.then(function (data) { return model_types_1.PushResponse.decode(new minimal_1["default"].Reader(data)); });
    };
    return ModelClientImpl;
}());
exports.ModelClientImpl = ModelClientImpl;
