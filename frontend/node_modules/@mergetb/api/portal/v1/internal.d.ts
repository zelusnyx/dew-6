import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface CountSet {
    name: string;
    size: number;
    values: number[];
    offset: number;
    ver: number;
}
export interface Vlist {
    values: number[];
}
export declare const CountSet: {
    encode(message: CountSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CountSet;
    fromJSON(object: any): CountSet;
    toJSON(message: CountSet): unknown;
    create<I extends {
        name?: string;
        size?: number;
        values?: number[];
        offset?: number;
        ver?: number;
    } & {
        name?: string;
        size?: number;
        values?: number[] & number[] & { [K in Exclude<keyof I["values"], keyof number[]>]: never; };
        offset?: number;
        ver?: number;
    } & { [K_1 in Exclude<keyof I, keyof CountSet>]: never; }>(base?: I): CountSet;
    fromPartial<I_1 extends {
        name?: string;
        size?: number;
        values?: number[];
        offset?: number;
        ver?: number;
    } & {
        name?: string;
        size?: number;
        values?: number[] & number[] & { [K_2 in Exclude<keyof I_1["values"], keyof number[]>]: never; };
        offset?: number;
        ver?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof CountSet>]: never; }>(object: I_1): CountSet;
};
export declare const Vlist: {
    encode(message: Vlist, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Vlist;
    fromJSON(object: any): Vlist;
    toJSON(message: Vlist): unknown;
    create<I extends {
        values?: number[];
    } & {
        values?: number[] & number[] & { [K in Exclude<keyof I["values"], keyof number[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "values">]: never; }>(base?: I): Vlist;
    fromPartial<I_1 extends {
        values?: number[];
    } & {
        values?: number[] & number[] & { [K_2 in Exclude<keyof I_1["values"], keyof number[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "values">]: never; }>(object: I_1): Vlist;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
