/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "portal.v1";

export interface IdentityInfo {
  /** The identity of the user. */
  username: string;
  /** The user's email. */
  email: string;
  /**
   * This is an administrator account. Can only be set by existing admins.
   *
   * @deprecated
   */
  admin: boolean;
  traits: { [key: string]: string };
}

export interface IdentityInfo_TraitsEntry {
  key: string;
  value: string;
}

export interface ListIdentityRequest {
}

export interface ListIdentityResponse {
  identities: IdentityInfo[];
}

export interface GetIdentityRequest {
  /** The identity of the user. */
  username: string;
}

export interface GetIdentityResponse {
  identity: IdentityInfo | undefined;
}

export interface RegisterRequest {
  /** The identity of the user. */
  username: string;
  /** The user's email. */
  email: string;
  /** The user's password. */
  password: string;
  /** This is an administrator account. Can only be set by existing admins. */
  admin: boolean;
  /**
   * Traits not explicity specified by this API.
   * Depreciated.
   *
   * @deprecated
   */
  traits: { [key: string]: string };
  /** User data */
  institution: string;
  category: string;
  country: string;
  usstate: string;
  name: string;
}

export interface RegisterRequest_TraitsEntry {
  key: string;
  value: string;
}

export interface RegisterResponse {
}

export interface LoginRequest {
  /** The identity of the user. */
  username: string;
  /** The user's password. */
  password: string;
}

export interface LoginResponse {
  /** An OAuth2 access token. */
  token: string;
}

export interface LogoutRequest {
  /** The identity of the user. */
  username: string;
}

export interface LogoutResponse {
}

export interface UnregisterRequest {
  /** The identity of the user. */
  username: string;
}

export interface UnregisterResponse {
}

function createBaseIdentityInfo(): IdentityInfo {
  return { username: "", email: "", admin: false, traits: {} };
}

export const IdentityInfo = {
  encode(message: IdentityInfo, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.admin === true) {
      writer.uint32(24).bool(message.admin);
    }
    Object.entries(message.traits).forEach(([key, value]) => {
      IdentityInfo_TraitsEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).ldelim();
    });
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IdentityInfo {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        case 2:
          message.email = reader.string();
          break;
        case 3:
          message.admin = reader.bool();
          break;
        case 4:
          const entry4 = IdentityInfo_TraitsEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.traits[entry4.key] = entry4.value;
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): IdentityInfo {
    return {
      username: isSet(object.username) ? String(object.username) : "",
      email: isSet(object.email) ? String(object.email) : "",
      admin: isSet(object.admin) ? Boolean(object.admin) : false,
      traits: isObject(object.traits)
        ? Object.entries(object.traits).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: IdentityInfo): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    message.email !== undefined && (obj.email = message.email);
    message.admin !== undefined && (obj.admin = message.admin);
    obj.traits = {};
    if (message.traits) {
      Object.entries(message.traits).forEach(([k, v]) => {
        obj.traits[k] = v;
      });
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityInfo>, I>>(base?: I): IdentityInfo {
    return IdentityInfo.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<IdentityInfo>, I>>(object: I): IdentityInfo {
    const message = createBaseIdentityInfo();
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.admin = object.admin ?? false;
    message.traits = Object.entries(object.traits ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseIdentityInfo_TraitsEntry(): IdentityInfo_TraitsEntry {
  return { key: "", value: "" };
}

export const IdentityInfo_TraitsEntry = {
  encode(message: IdentityInfo_TraitsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): IdentityInfo_TraitsEntry {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityInfo_TraitsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;
        case 2:
          message.value = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): IdentityInfo_TraitsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: IdentityInfo_TraitsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<IdentityInfo_TraitsEntry>, I>>(base?: I): IdentityInfo_TraitsEntry {
    return IdentityInfo_TraitsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<IdentityInfo_TraitsEntry>, I>>(object: I): IdentityInfo_TraitsEntry {
    const message = createBaseIdentityInfo_TraitsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseListIdentityRequest(): ListIdentityRequest {
  return {};
}

export const ListIdentityRequest = {
  encode(_: ListIdentityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIdentityRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): ListIdentityRequest {
    return {};
  },

  toJSON(_: ListIdentityRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIdentityRequest>, I>>(base?: I): ListIdentityRequest {
    return ListIdentityRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ListIdentityRequest>, I>>(_: I): ListIdentityRequest {
    const message = createBaseListIdentityRequest();
    return message;
  },
};

function createBaseListIdentityResponse(): ListIdentityResponse {
  return { identities: [] };
}

export const ListIdentityResponse = {
  encode(message: ListIdentityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.identities) {
      IdentityInfo.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListIdentityResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListIdentityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.identities.push(IdentityInfo.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListIdentityResponse {
    return {
      identities: Array.isArray(object?.identities) ? object.identities.map((e: any) => IdentityInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListIdentityResponse): unknown {
    const obj: any = {};
    if (message.identities) {
      obj.identities = message.identities.map((e) => e ? IdentityInfo.toJSON(e) : undefined);
    } else {
      obj.identities = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListIdentityResponse>, I>>(base?: I): ListIdentityResponse {
    return ListIdentityResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<ListIdentityResponse>, I>>(object: I): ListIdentityResponse {
    const message = createBaseListIdentityResponse();
    message.identities = object.identities?.map((e) => IdentityInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetIdentityRequest(): GetIdentityRequest {
  return { username: "" };
}

export const GetIdentityRequest = {
  encode(message: GetIdentityRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIdentityRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetIdentityRequest {
    return { username: isSet(object.username) ? String(object.username) : "" };
  },

  toJSON(message: GetIdentityRequest): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIdentityRequest>, I>>(base?: I): GetIdentityRequest {
    return GetIdentityRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetIdentityRequest>, I>>(object: I): GetIdentityRequest {
    const message = createBaseGetIdentityRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseGetIdentityResponse(): GetIdentityResponse {
  return { identity: undefined };
}

export const GetIdentityResponse = {
  encode(message: GetIdentityResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.identity !== undefined) {
      IdentityInfo.encode(message.identity, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetIdentityResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetIdentityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.identity = IdentityInfo.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetIdentityResponse {
    return { identity: isSet(object.identity) ? IdentityInfo.fromJSON(object.identity) : undefined };
  },

  toJSON(message: GetIdentityResponse): unknown {
    const obj: any = {};
    message.identity !== undefined &&
      (obj.identity = message.identity ? IdentityInfo.toJSON(message.identity) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetIdentityResponse>, I>>(base?: I): GetIdentityResponse {
    return GetIdentityResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetIdentityResponse>, I>>(object: I): GetIdentityResponse {
    const message = createBaseGetIdentityResponse();
    message.identity = (object.identity !== undefined && object.identity !== null)
      ? IdentityInfo.fromPartial(object.identity)
      : undefined;
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return {
    username: "",
    email: "",
    password: "",
    admin: false,
    traits: {},
    institution: "",
    category: "",
    country: "",
    usstate: "",
    name: "",
  };
}

export const RegisterRequest = {
  encode(message: RegisterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.email !== "") {
      writer.uint32(18).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.admin === true) {
      writer.uint32(32).bool(message.admin);
    }
    Object.entries(message.traits).forEach(([key, value]) => {
      RegisterRequest_TraitsEntry.encode({ key: key as any, value }, writer.uint32(42).fork()).ldelim();
    });
    if (message.institution !== "") {
      writer.uint32(50).string(message.institution);
    }
    if (message.category !== "") {
      writer.uint32(58).string(message.category);
    }
    if (message.country !== "") {
      writer.uint32(66).string(message.country);
    }
    if (message.usstate !== "") {
      writer.uint32(74).string(message.usstate);
    }
    if (message.name !== "") {
      writer.uint32(82).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        case 2:
          message.email = reader.string();
          break;
        case 3:
          message.password = reader.string();
          break;
        case 4:
          message.admin = reader.bool();
          break;
        case 5:
          const entry5 = RegisterRequest_TraitsEntry.decode(reader, reader.uint32());
          if (entry5.value !== undefined) {
            message.traits[entry5.key] = entry5.value;
          }
          break;
        case 6:
          message.institution = reader.string();
          break;
        case 7:
          message.category = reader.string();
          break;
        case 8:
          message.country = reader.string();
          break;
        case 9:
          message.usstate = reader.string();
          break;
        case 10:
          message.name = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      username: isSet(object.username) ? String(object.username) : "",
      email: isSet(object.email) ? String(object.email) : "",
      password: isSet(object.password) ? String(object.password) : "",
      admin: isSet(object.admin) ? Boolean(object.admin) : false,
      traits: isObject(object.traits)
        ? Object.entries(object.traits).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      institution: isSet(object.institution) ? String(object.institution) : "",
      category: isSet(object.category) ? String(object.category) : "",
      country: isSet(object.country) ? String(object.country) : "",
      usstate: isSet(object.usstate) ? String(object.usstate) : "",
      name: isSet(object.name) ? String(object.name) : "",
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    message.email !== undefined && (obj.email = message.email);
    message.password !== undefined && (obj.password = message.password);
    message.admin !== undefined && (obj.admin = message.admin);
    obj.traits = {};
    if (message.traits) {
      Object.entries(message.traits).forEach(([k, v]) => {
        obj.traits[k] = v;
      });
    }
    message.institution !== undefined && (obj.institution = message.institution);
    message.category !== undefined && (obj.category = message.category);
    message.country !== undefined && (obj.country = message.country);
    message.usstate !== undefined && (obj.usstate = message.usstate);
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterRequest>, I>>(base?: I): RegisterRequest {
    return RegisterRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RegisterRequest>, I>>(object: I): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.username = object.username ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.admin = object.admin ?? false;
    message.traits = Object.entries(object.traits ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = String(value);
      }
      return acc;
    }, {});
    message.institution = object.institution ?? "";
    message.category = object.category ?? "";
    message.country = object.country ?? "";
    message.usstate = object.usstate ?? "";
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRegisterRequest_TraitsEntry(): RegisterRequest_TraitsEntry {
  return { key: "", value: "" };
}

export const RegisterRequest_TraitsEntry = {
  encode(message: RegisterRequest_TraitsEntry, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterRequest_TraitsEntry {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest_TraitsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;
        case 2:
          message.value = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest_TraitsEntry {
    return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
  },

  toJSON(message: RegisterRequest_TraitsEntry): unknown {
    const obj: any = {};
    message.key !== undefined && (obj.key = message.key);
    message.value !== undefined && (obj.value = message.value);
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterRequest_TraitsEntry>, I>>(base?: I): RegisterRequest_TraitsEntry {
    return RegisterRequest_TraitsEntry.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RegisterRequest_TraitsEntry>, I>>(object: I): RegisterRequest_TraitsEntry {
    const message = createBaseRegisterRequest_TraitsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseRegisterResponse(): RegisterResponse {
  return {};
}

export const RegisterResponse = {
  encode(_: RegisterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): RegisterResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): RegisterResponse {
    return {};
  },

  toJSON(_: RegisterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterResponse>, I>>(base?: I): RegisterResponse {
    return RegisterResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<RegisterResponse>, I>>(_: I): RegisterResponse {
    const message = createBaseRegisterResponse();
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { username: "", password: "" };
}

export const LoginRequest = {
  encode(message: LoginRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        case 3:
          message.password = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      username: isSet(object.username) ? String(object.username) : "",
      password: isSet(object.password) ? String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    message.password !== undefined && (obj.password = message.password);
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginRequest>, I>>(base?: I): LoginRequest {
    return LoginRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<LoginRequest>, I>>(object: I): LoginRequest {
    const message = createBaseLoginRequest();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { token: "" };
}

export const LoginResponse = {
  encode(message: LoginResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.token = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return { token: isSet(object.token) ? String(object.token) : "" };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    message.token !== undefined && (obj.token = message.token);
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResponse>, I>>(base?: I): LoginResponse {
    return LoginResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<LoginResponse>, I>>(object: I): LoginResponse {
    const message = createBaseLoginResponse();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseLogoutRequest(): LogoutRequest {
  return { username: "" };
}

export const LogoutRequest = {
  encode(message: LogoutRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogoutRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): LogoutRequest {
    return { username: isSet(object.username) ? String(object.username) : "" };
  },

  toJSON(message: LogoutRequest): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    return obj;
  },

  create<I extends Exact<DeepPartial<LogoutRequest>, I>>(base?: I): LogoutRequest {
    return LogoutRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<LogoutRequest>, I>>(object: I): LogoutRequest {
    const message = createBaseLogoutRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseLogoutResponse(): LogoutResponse {
  return {};
}

export const LogoutResponse = {
  encode(_: LogoutResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): LogoutResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): LogoutResponse {
    return {};
  },

  toJSON(_: LogoutResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LogoutResponse>, I>>(base?: I): LogoutResponse {
    return LogoutResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<LogoutResponse>, I>>(_: I): LogoutResponse {
    const message = createBaseLogoutResponse();
    return message;
  },
};

function createBaseUnregisterRequest(): UnregisterRequest {
  return { username: "" };
}

export const UnregisterRequest = {
  encode(message: UnregisterRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnregisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.username = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UnregisterRequest {
    return { username: isSet(object.username) ? String(object.username) : "" };
  },

  toJSON(message: UnregisterRequest): unknown {
    const obj: any = {};
    message.username !== undefined && (obj.username = message.username);
    return obj;
  },

  create<I extends Exact<DeepPartial<UnregisterRequest>, I>>(base?: I): UnregisterRequest {
    return UnregisterRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UnregisterRequest>, I>>(object: I): UnregisterRequest {
    const message = createBaseUnregisterRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseUnregisterResponse(): UnregisterResponse {
  return {};
}

export const UnregisterResponse = {
  encode(_: UnregisterResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUnregisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(_: any): UnregisterResponse {
    return {};
  },

  toJSON(_: UnregisterResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<UnregisterResponse>, I>>(base?: I): UnregisterResponse {
    return UnregisterResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<UnregisterResponse>, I>>(_: I): UnregisterResponse {
    const message = createBaseUnregisterResponse();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
