import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface WgEnclave {
    enclaveid: string;
    gateways: {
        [key: string]: WgIfConfig;
    };
    clients: {
        [key: string]: WgIfConfig;
    };
    Ver: number;
    gatewayIps: {
        [key: string]: string;
    };
    clientIps: {
        [key: string]: string;
    };
}
export interface WgEnclave_GatewaysEntry {
    key: string;
    value: WgIfConfig | undefined;
}
export interface WgEnclave_ClientsEntry {
    key: string;
    value: WgIfConfig | undefined;
}
export interface WgEnclave_GatewayIpsEntry {
    key: string;
    value: string;
}
export interface WgEnclave_ClientIpsEntry {
    key: string;
    value: string;
}
export interface WgIfConfig {
    endpoint: string;
    key: string;
    allowedips: string[];
    accessaddr: string;
}
export interface AddWgIfConfigRequest {
    enclaveid: string;
    config: WgIfConfig | undefined;
    gateway: boolean;
}
export interface AddWgIfConfigResponse {
}
export interface DelWgIfConfigRequest {
    enclaveid: string;
    key: string;
}
export interface DelWgIfConfigResponse {
}
export interface GetWgIfConfigRequest {
    enclaveid: string;
    key: string;
}
export interface GetWgIfConfigResponse {
    enclaveid: string;
    endpoint: string;
}
export interface GetWgEnclaveRequest {
    enclaveid: string;
}
export interface GetWgEnclaveResponse {
    enclave: WgEnclave | undefined;
}
export declare const WgEnclave: {
    encode(message: WgEnclave, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgEnclave;
    fromJSON(object: any): WgEnclave;
    toJSON(message: WgEnclave): unknown;
    create<I extends {
        enclaveid?: string;
        gateways?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        };
        clients?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        };
        Ver?: number;
        gatewayIps?: {
            [x: string]: string;
        };
        clientIps?: {
            [x: string]: string;
        };
    } & {
        enclaveid?: string;
        gateways?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        } & {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            } & {
                endpoint?: string;
                key?: string;
                allowedips?: string[] & string[] & { [K in Exclude<keyof I["gateways"][string]["allowedips"], keyof string[]>]: never; };
                accessaddr?: string;
            } & { [K_1 in Exclude<keyof I["gateways"][string], keyof WgIfConfig>]: never; };
        } & { [K_2 in Exclude<keyof I["gateways"], string | number>]: never; };
        clients?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        } & {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            } & {
                endpoint?: string;
                key?: string;
                allowedips?: string[] & string[] & { [K_3 in Exclude<keyof I["clients"][string]["allowedips"], keyof string[]>]: never; };
                accessaddr?: string;
            } & { [K_4 in Exclude<keyof I["clients"][string], keyof WgIfConfig>]: never; };
        } & { [K_5 in Exclude<keyof I["clients"], string | number>]: never; };
        Ver?: number;
        gatewayIps?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_6 in Exclude<keyof I["gatewayIps"], string | number>]: never; };
        clientIps?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_7 in Exclude<keyof I["clientIps"], string | number>]: never; };
    } & { [K_8 in Exclude<keyof I, keyof WgEnclave>]: never; }>(base?: I): WgEnclave;
    fromPartial<I_1 extends {
        enclaveid?: string;
        gateways?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        };
        clients?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        };
        Ver?: number;
        gatewayIps?: {
            [x: string]: string;
        };
        clientIps?: {
            [x: string]: string;
        };
    } & {
        enclaveid?: string;
        gateways?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        } & {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            } & {
                endpoint?: string;
                key?: string;
                allowedips?: string[] & string[] & { [K_9 in Exclude<keyof I_1["gateways"][string]["allowedips"], keyof string[]>]: never; };
                accessaddr?: string;
            } & { [K_10 in Exclude<keyof I_1["gateways"][string], keyof WgIfConfig>]: never; };
        } & { [K_11 in Exclude<keyof I_1["gateways"], string | number>]: never; };
        clients?: {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            };
        } & {
            [x: string]: {
                endpoint?: string;
                key?: string;
                allowedips?: string[];
                accessaddr?: string;
            } & {
                endpoint?: string;
                key?: string;
                allowedips?: string[] & string[] & { [K_12 in Exclude<keyof I_1["clients"][string]["allowedips"], keyof string[]>]: never; };
                accessaddr?: string;
            } & { [K_13 in Exclude<keyof I_1["clients"][string], keyof WgIfConfig>]: never; };
        } & { [K_14 in Exclude<keyof I_1["clients"], string | number>]: never; };
        Ver?: number;
        gatewayIps?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_15 in Exclude<keyof I_1["gatewayIps"], string | number>]: never; };
        clientIps?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_16 in Exclude<keyof I_1["clientIps"], string | number>]: never; };
    } & { [K_17 in Exclude<keyof I_1, keyof WgEnclave>]: never; }>(object: I_1): WgEnclave;
};
export declare const WgEnclave_GatewaysEntry: {
    encode(message: WgEnclave_GatewaysEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgEnclave_GatewaysEntry;
    fromJSON(object: any): WgEnclave_GatewaysEntry;
    toJSON(message: WgEnclave_GatewaysEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
    } & {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K in Exclude<keyof I["value"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_1 in Exclude<keyof I["value"], keyof WgIfConfig>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof WgEnclave_GatewaysEntry>]: never; }>(base?: I): WgEnclave_GatewaysEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
    } & {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_4 in Exclude<keyof I_1["value"], keyof WgIfConfig>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof WgEnclave_GatewaysEntry>]: never; }>(object: I_1): WgEnclave_GatewaysEntry;
};
export declare const WgEnclave_ClientsEntry: {
    encode(message: WgEnclave_ClientsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgEnclave_ClientsEntry;
    fromJSON(object: any): WgEnclave_ClientsEntry;
    toJSON(message: WgEnclave_ClientsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
    } & {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K in Exclude<keyof I["value"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_1 in Exclude<keyof I["value"], keyof WgIfConfig>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof WgEnclave_ClientsEntry>]: never; }>(base?: I): WgEnclave_ClientsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
    } & {
        key?: string;
        value?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_4 in Exclude<keyof I_1["value"], keyof WgIfConfig>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof WgEnclave_ClientsEntry>]: never; }>(object: I_1): WgEnclave_ClientsEntry;
};
export declare const WgEnclave_GatewayIpsEntry: {
    encode(message: WgEnclave_GatewayIpsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgEnclave_GatewayIpsEntry;
    fromJSON(object: any): WgEnclave_GatewayIpsEntry;
    toJSON(message: WgEnclave_GatewayIpsEntry): unknown;
    create<I extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K in Exclude<keyof I, keyof WgEnclave_GatewayIpsEntry>]: never; }>(base?: I): WgEnclave_GatewayIpsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof WgEnclave_GatewayIpsEntry>]: never; }>(object: I_1): WgEnclave_GatewayIpsEntry;
};
export declare const WgEnclave_ClientIpsEntry: {
    encode(message: WgEnclave_ClientIpsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgEnclave_ClientIpsEntry;
    fromJSON(object: any): WgEnclave_ClientIpsEntry;
    toJSON(message: WgEnclave_ClientIpsEntry): unknown;
    create<I extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K in Exclude<keyof I, keyof WgEnclave_ClientIpsEntry>]: never; }>(base?: I): WgEnclave_ClientIpsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof WgEnclave_ClientIpsEntry>]: never; }>(object: I_1): WgEnclave_ClientIpsEntry;
};
export declare const WgIfConfig: {
    encode(message: WgIfConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): WgIfConfig;
    fromJSON(object: any): WgIfConfig;
    toJSON(message: WgIfConfig): unknown;
    create<I extends {
        endpoint?: string;
        key?: string;
        allowedips?: string[];
        accessaddr?: string;
    } & {
        endpoint?: string;
        key?: string;
        allowedips?: string[] & string[] & { [K in Exclude<keyof I["allowedips"], keyof string[]>]: never; };
        accessaddr?: string;
    } & { [K_1 in Exclude<keyof I, keyof WgIfConfig>]: never; }>(base?: I): WgIfConfig;
    fromPartial<I_1 extends {
        endpoint?: string;
        key?: string;
        allowedips?: string[];
        accessaddr?: string;
    } & {
        endpoint?: string;
        key?: string;
        allowedips?: string[] & string[] & { [K_2 in Exclude<keyof I_1["allowedips"], keyof string[]>]: never; };
        accessaddr?: string;
    } & { [K_3 in Exclude<keyof I_1, keyof WgIfConfig>]: never; }>(object: I_1): WgIfConfig;
};
export declare const AddWgIfConfigRequest: {
    encode(message: AddWgIfConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddWgIfConfigRequest;
    fromJSON(object: any): AddWgIfConfigRequest;
    toJSON(message: AddWgIfConfigRequest): unknown;
    create<I extends {
        enclaveid?: string;
        config?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
        gateway?: boolean;
    } & {
        enclaveid?: string;
        config?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K in Exclude<keyof I["config"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_1 in Exclude<keyof I["config"], keyof WgIfConfig>]: never; };
        gateway?: boolean;
    } & { [K_2 in Exclude<keyof I, keyof AddWgIfConfigRequest>]: never; }>(base?: I): AddWgIfConfigRequest;
    fromPartial<I_1 extends {
        enclaveid?: string;
        config?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        };
        gateway?: boolean;
    } & {
        enclaveid?: string;
        config?: {
            endpoint?: string;
            key?: string;
            allowedips?: string[];
            accessaddr?: string;
        } & {
            endpoint?: string;
            key?: string;
            allowedips?: string[] & string[] & { [K_3 in Exclude<keyof I_1["config"]["allowedips"], keyof string[]>]: never; };
            accessaddr?: string;
        } & { [K_4 in Exclude<keyof I_1["config"], keyof WgIfConfig>]: never; };
        gateway?: boolean;
    } & { [K_5 in Exclude<keyof I_1, keyof AddWgIfConfigRequest>]: never; }>(object: I_1): AddWgIfConfigRequest;
};
export declare const AddWgIfConfigResponse: {
    encode(_: AddWgIfConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddWgIfConfigResponse;
    fromJSON(_: any): AddWgIfConfigResponse;
    toJSON(_: AddWgIfConfigResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddWgIfConfigResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddWgIfConfigResponse;
};
export declare const DelWgIfConfigRequest: {
    encode(message: DelWgIfConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DelWgIfConfigRequest;
    fromJSON(object: any): DelWgIfConfigRequest;
    toJSON(message: DelWgIfConfigRequest): unknown;
    create<I extends {
        enclaveid?: string;
        key?: string;
    } & {
        enclaveid?: string;
        key?: string;
    } & { [K in Exclude<keyof I, keyof DelWgIfConfigRequest>]: never; }>(base?: I): DelWgIfConfigRequest;
    fromPartial<I_1 extends {
        enclaveid?: string;
        key?: string;
    } & {
        enclaveid?: string;
        key?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DelWgIfConfigRequest>]: never; }>(object: I_1): DelWgIfConfigRequest;
};
export declare const DelWgIfConfigResponse: {
    encode(_: DelWgIfConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DelWgIfConfigResponse;
    fromJSON(_: any): DelWgIfConfigResponse;
    toJSON(_: DelWgIfConfigResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DelWgIfConfigResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DelWgIfConfigResponse;
};
export declare const GetWgIfConfigRequest: {
    encode(message: GetWgIfConfigRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWgIfConfigRequest;
    fromJSON(object: any): GetWgIfConfigRequest;
    toJSON(message: GetWgIfConfigRequest): unknown;
    create<I extends {
        enclaveid?: string;
        key?: string;
    } & {
        enclaveid?: string;
        key?: string;
    } & { [K in Exclude<keyof I, keyof GetWgIfConfigRequest>]: never; }>(base?: I): GetWgIfConfigRequest;
    fromPartial<I_1 extends {
        enclaveid?: string;
        key?: string;
    } & {
        enclaveid?: string;
        key?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetWgIfConfigRequest>]: never; }>(object: I_1): GetWgIfConfigRequest;
};
export declare const GetWgIfConfigResponse: {
    encode(message: GetWgIfConfigResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWgIfConfigResponse;
    fromJSON(object: any): GetWgIfConfigResponse;
    toJSON(message: GetWgIfConfigResponse): unknown;
    create<I extends {
        enclaveid?: string;
        endpoint?: string;
    } & {
        enclaveid?: string;
        endpoint?: string;
    } & { [K in Exclude<keyof I, keyof GetWgIfConfigResponse>]: never; }>(base?: I): GetWgIfConfigResponse;
    fromPartial<I_1 extends {
        enclaveid?: string;
        endpoint?: string;
    } & {
        enclaveid?: string;
        endpoint?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetWgIfConfigResponse>]: never; }>(object: I_1): GetWgIfConfigResponse;
};
export declare const GetWgEnclaveRequest: {
    encode(message: GetWgEnclaveRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWgEnclaveRequest;
    fromJSON(object: any): GetWgEnclaveRequest;
    toJSON(message: GetWgEnclaveRequest): unknown;
    create<I extends {
        enclaveid?: string;
    } & {
        enclaveid?: string;
    } & { [K in Exclude<keyof I, "enclaveid">]: never; }>(base?: I): GetWgEnclaveRequest;
    fromPartial<I_1 extends {
        enclaveid?: string;
    } & {
        enclaveid?: string;
    } & { [K_1 in Exclude<keyof I_1, "enclaveid">]: never; }>(object: I_1): GetWgEnclaveRequest;
};
export declare const GetWgEnclaveResponse: {
    encode(message: GetWgEnclaveResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetWgEnclaveResponse;
    fromJSON(object: any): GetWgEnclaveResponse;
    toJSON(message: GetWgEnclaveResponse): unknown;
    create<I extends {
        enclave?: {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            };
            clientIps?: {
                [x: string]: string;
            };
        };
    } & {
        enclave?: {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            };
            clientIps?: {
                [x: string]: string;
            };
        } & {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            } & {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                } & {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[] & string[] & { [K in Exclude<keyof I["enclave"]["gateways"][string]["allowedips"], keyof string[]>]: never; };
                    accessaddr?: string;
                } & { [K_1 in Exclude<keyof I["enclave"]["gateways"][string], keyof WgIfConfig>]: never; };
            } & { [K_2 in Exclude<keyof I["enclave"]["gateways"], string | number>]: never; };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            } & {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                } & {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[] & string[] & { [K_3 in Exclude<keyof I["enclave"]["clients"][string]["allowedips"], keyof string[]>]: never; };
                    accessaddr?: string;
                } & { [K_4 in Exclude<keyof I["enclave"]["clients"][string], keyof WgIfConfig>]: never; };
            } & { [K_5 in Exclude<keyof I["enclave"]["clients"], string | number>]: never; };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_6 in Exclude<keyof I["enclave"]["gatewayIps"], string | number>]: never; };
            clientIps?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_7 in Exclude<keyof I["enclave"]["clientIps"], string | number>]: never; };
        } & { [K_8 in Exclude<keyof I["enclave"], keyof WgEnclave>]: never; };
    } & { [K_9 in Exclude<keyof I, "enclave">]: never; }>(base?: I): GetWgEnclaveResponse;
    fromPartial<I_1 extends {
        enclave?: {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            };
            clientIps?: {
                [x: string]: string;
            };
        };
    } & {
        enclave?: {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            };
            clientIps?: {
                [x: string]: string;
            };
        } & {
            enclaveid?: string;
            gateways?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            } & {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                } & {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[] & string[] & { [K_10 in Exclude<keyof I_1["enclave"]["gateways"][string]["allowedips"], keyof string[]>]: never; };
                    accessaddr?: string;
                } & { [K_11 in Exclude<keyof I_1["enclave"]["gateways"][string], keyof WgIfConfig>]: never; };
            } & { [K_12 in Exclude<keyof I_1["enclave"]["gateways"], string | number>]: never; };
            clients?: {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                };
            } & {
                [x: string]: {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[];
                    accessaddr?: string;
                } & {
                    endpoint?: string;
                    key?: string;
                    allowedips?: string[] & string[] & { [K_13 in Exclude<keyof I_1["enclave"]["clients"][string]["allowedips"], keyof string[]>]: never; };
                    accessaddr?: string;
                } & { [K_14 in Exclude<keyof I_1["enclave"]["clients"][string], keyof WgIfConfig>]: never; };
            } & { [K_15 in Exclude<keyof I_1["enclave"]["clients"], string | number>]: never; };
            Ver?: number;
            gatewayIps?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_16 in Exclude<keyof I_1["enclave"]["gatewayIps"], string | number>]: never; };
            clientIps?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_17 in Exclude<keyof I_1["enclave"]["clientIps"], string | number>]: never; };
        } & { [K_18 in Exclude<keyof I_1["enclave"], keyof WgEnclave>]: never; };
    } & { [K_19 in Exclude<keyof I_1, "enclave">]: never; }>(object: I_1): GetWgEnclaveResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
