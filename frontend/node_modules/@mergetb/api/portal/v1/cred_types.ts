/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "portal.v1";

export interface SSHKeyPair {
  Public: string;
  Private: string;
  ver: number;
}

export interface GetUserSSHKeysRequest {
  Username: string;
}

export interface GetUserSSHKeysResponse {
  Keys: SSHKeyPair | undefined;
}

export interface SSHCert {
  Cert: string;
  CAHostPubKey: string;
  ver: number;
}

export interface GetUserSSHCertRequest {
  Username: string;
}

export interface GetUserSSHCertResponse {
  Cert: SSHCert | undefined;
}

function createBaseSSHKeyPair(): SSHKeyPair {
  return { Public: "", Private: "", ver: 0 };
}

export const SSHKeyPair = {
  encode(message: SSHKeyPair, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Public !== "") {
      writer.uint32(10).string(message.Public);
    }
    if (message.Private !== "") {
      writer.uint32(18).string(message.Private);
    }
    if (message.ver !== 0) {
      writer.uint32(24).int64(message.ver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SSHKeyPair {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSHKeyPair();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Public = reader.string();
          break;
        case 2:
          message.Private = reader.string();
          break;
        case 3:
          message.ver = longToNumber(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SSHKeyPair {
    return {
      Public: isSet(object.Public) ? String(object.Public) : "",
      Private: isSet(object.Private) ? String(object.Private) : "",
      ver: isSet(object.ver) ? Number(object.ver) : 0,
    };
  },

  toJSON(message: SSHKeyPair): unknown {
    const obj: any = {};
    message.Public !== undefined && (obj.Public = message.Public);
    message.Private !== undefined && (obj.Private = message.Private);
    message.ver !== undefined && (obj.ver = Math.round(message.ver));
    return obj;
  },

  create<I extends Exact<DeepPartial<SSHKeyPair>, I>>(base?: I): SSHKeyPair {
    return SSHKeyPair.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SSHKeyPair>, I>>(object: I): SSHKeyPair {
    const message = createBaseSSHKeyPair();
    message.Public = object.Public ?? "";
    message.Private = object.Private ?? "";
    message.ver = object.ver ?? 0;
    return message;
  },
};

function createBaseGetUserSSHKeysRequest(): GetUserSSHKeysRequest {
  return { Username: "" };
}

export const GetUserSSHKeysRequest = {
  encode(message: GetUserSSHKeysRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Username !== "") {
      writer.uint32(10).string(message.Username);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHKeysRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSSHKeysRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Username = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetUserSSHKeysRequest {
    return { Username: isSet(object.Username) ? String(object.Username) : "" };
  },

  toJSON(message: GetUserSSHKeysRequest): unknown {
    const obj: any = {};
    message.Username !== undefined && (obj.Username = message.Username);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSSHKeysRequest>, I>>(base?: I): GetUserSSHKeysRequest {
    return GetUserSSHKeysRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetUserSSHKeysRequest>, I>>(object: I): GetUserSSHKeysRequest {
    const message = createBaseGetUserSSHKeysRequest();
    message.Username = object.Username ?? "";
    return message;
  },
};

function createBaseGetUserSSHKeysResponse(): GetUserSSHKeysResponse {
  return { Keys: undefined };
}

export const GetUserSSHKeysResponse = {
  encode(message: GetUserSSHKeysResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Keys !== undefined) {
      SSHKeyPair.encode(message.Keys, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHKeysResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSSHKeysResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Keys = SSHKeyPair.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetUserSSHKeysResponse {
    return { Keys: isSet(object.Keys) ? SSHKeyPair.fromJSON(object.Keys) : undefined };
  },

  toJSON(message: GetUserSSHKeysResponse): unknown {
    const obj: any = {};
    message.Keys !== undefined && (obj.Keys = message.Keys ? SSHKeyPair.toJSON(message.Keys) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSSHKeysResponse>, I>>(base?: I): GetUserSSHKeysResponse {
    return GetUserSSHKeysResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetUserSSHKeysResponse>, I>>(object: I): GetUserSSHKeysResponse {
    const message = createBaseGetUserSSHKeysResponse();
    message.Keys = (object.Keys !== undefined && object.Keys !== null)
      ? SSHKeyPair.fromPartial(object.Keys)
      : undefined;
    return message;
  },
};

function createBaseSSHCert(): SSHCert {
  return { Cert: "", CAHostPubKey: "", ver: 0 };
}

export const SSHCert = {
  encode(message: SSHCert, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Cert !== "") {
      writer.uint32(10).string(message.Cert);
    }
    if (message.CAHostPubKey !== "") {
      writer.uint32(18).string(message.CAHostPubKey);
    }
    if (message.ver !== 0) {
      writer.uint32(24).int64(message.ver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SSHCert {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSHCert();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Cert = reader.string();
          break;
        case 2:
          message.CAHostPubKey = reader.string();
          break;
        case 3:
          message.ver = longToNumber(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): SSHCert {
    return {
      Cert: isSet(object.Cert) ? String(object.Cert) : "",
      CAHostPubKey: isSet(object.CAHostPubKey) ? String(object.CAHostPubKey) : "",
      ver: isSet(object.ver) ? Number(object.ver) : 0,
    };
  },

  toJSON(message: SSHCert): unknown {
    const obj: any = {};
    message.Cert !== undefined && (obj.Cert = message.Cert);
    message.CAHostPubKey !== undefined && (obj.CAHostPubKey = message.CAHostPubKey);
    message.ver !== undefined && (obj.ver = Math.round(message.ver));
    return obj;
  },

  create<I extends Exact<DeepPartial<SSHCert>, I>>(base?: I): SSHCert {
    return SSHCert.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<SSHCert>, I>>(object: I): SSHCert {
    const message = createBaseSSHCert();
    message.Cert = object.Cert ?? "";
    message.CAHostPubKey = object.CAHostPubKey ?? "";
    message.ver = object.ver ?? 0;
    return message;
  },
};

function createBaseGetUserSSHCertRequest(): GetUserSSHCertRequest {
  return { Username: "" };
}

export const GetUserSSHCertRequest = {
  encode(message: GetUserSSHCertRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Username !== "") {
      writer.uint32(10).string(message.Username);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHCertRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSSHCertRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Username = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetUserSSHCertRequest {
    return { Username: isSet(object.Username) ? String(object.Username) : "" };
  },

  toJSON(message: GetUserSSHCertRequest): unknown {
    const obj: any = {};
    message.Username !== undefined && (obj.Username = message.Username);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSSHCertRequest>, I>>(base?: I): GetUserSSHCertRequest {
    return GetUserSSHCertRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetUserSSHCertRequest>, I>>(object: I): GetUserSSHCertRequest {
    const message = createBaseGetUserSSHCertRequest();
    message.Username = object.Username ?? "";
    return message;
  },
};

function createBaseGetUserSSHCertResponse(): GetUserSSHCertResponse {
  return { Cert: undefined };
}

export const GetUserSSHCertResponse = {
  encode(message: GetUserSSHCertResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.Cert !== undefined) {
      SSHCert.encode(message.Cert, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHCertResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSSHCertResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.Cert = SSHCert.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetUserSSHCertResponse {
    return { Cert: isSet(object.Cert) ? SSHCert.fromJSON(object.Cert) : undefined };
  },

  toJSON(message: GetUserSSHCertResponse): unknown {
    const obj: any = {};
    message.Cert !== undefined && (obj.Cert = message.Cert ? SSHCert.toJSON(message.Cert) : undefined);
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSSHCertResponse>, I>>(base?: I): GetUserSSHCertResponse {
    return GetUserSSHCertResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<GetUserSSHCertResponse>, I>>(object: I): GetUserSSHCertResponse {
    const message = createBaseGetUserSSHCertResponse();
    message.Cert = (object.Cert !== undefined && object.Cert !== null) ? SSHCert.fromPartial(object.Cert) : undefined;
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
