import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface CompileRequest {
    model: string;
}
export interface CompileResponse {
    success: boolean;
    errors: string[];
    network: string;
}
export interface PushRequest {
    model: string;
    branch: string;
    experiment: string;
    project: string;
    tag: string;
}
export interface PushResponse {
    revision: string;
}
export declare const CompileRequest: {
    encode(message: CompileRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CompileRequest;
    fromJSON(object: any): CompileRequest;
    toJSON(message: CompileRequest): unknown;
    create<I extends {
        model?: string;
    } & {
        model?: string;
    } & { [K in Exclude<keyof I, "model">]: never; }>(base?: I): CompileRequest;
    fromPartial<I_1 extends {
        model?: string;
    } & {
        model?: string;
    } & { [K_1 in Exclude<keyof I_1, "model">]: never; }>(object: I_1): CompileRequest;
};
export declare const CompileResponse: {
    encode(message: CompileResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CompileResponse;
    fromJSON(object: any): CompileResponse;
    toJSON(message: CompileResponse): unknown;
    create<I extends {
        success?: boolean;
        errors?: string[];
        network?: string;
    } & {
        success?: boolean;
        errors?: string[] & string[] & { [K in Exclude<keyof I["errors"], keyof string[]>]: never; };
        network?: string;
    } & { [K_1 in Exclude<keyof I, keyof CompileResponse>]: never; }>(base?: I): CompileResponse;
    fromPartial<I_1 extends {
        success?: boolean;
        errors?: string[];
        network?: string;
    } & {
        success?: boolean;
        errors?: string[] & string[] & { [K_2 in Exclude<keyof I_1["errors"], keyof string[]>]: never; };
        network?: string;
    } & { [K_3 in Exclude<keyof I_1, keyof CompileResponse>]: never; }>(object: I_1): CompileResponse;
};
export declare const PushRequest: {
    encode(message: PushRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PushRequest;
    fromJSON(object: any): PushRequest;
    toJSON(message: PushRequest): unknown;
    create<I extends {
        model?: string;
        branch?: string;
        experiment?: string;
        project?: string;
        tag?: string;
    } & {
        model?: string;
        branch?: string;
        experiment?: string;
        project?: string;
        tag?: string;
    } & { [K in Exclude<keyof I, keyof PushRequest>]: never; }>(base?: I): PushRequest;
    fromPartial<I_1 extends {
        model?: string;
        branch?: string;
        experiment?: string;
        project?: string;
        tag?: string;
    } & {
        model?: string;
        branch?: string;
        experiment?: string;
        project?: string;
        tag?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof PushRequest>]: never; }>(object: I_1): PushRequest;
};
export declare const PushResponse: {
    encode(message: PushResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PushResponse;
    fromJSON(object: any): PushResponse;
    toJSON(message: PushResponse): unknown;
    create<I extends {
        revision?: string;
    } & {
        revision?: string;
    } & { [K in Exclude<keyof I, "revision">]: never; }>(base?: I): PushResponse;
    fromPartial<I_1 extends {
        revision?: string;
    } & {
        revision?: string;
    } & { [K_1 in Exclude<keyof I_1, "revision">]: never; }>(object: I_1): PushResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
