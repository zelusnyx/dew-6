"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Vlist = exports.CountSet = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "portal.v1";
function createBaseCountSet() {
    return { name: "", size: 0, values: [], offset: 0, ver: 0 };
}
exports.CountSet = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.size !== 0) {
            writer.uint32(16).uint64(message.size);
        }
        writer.uint32(26).fork();
        for (var _i = 0, _a = message.values; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.offset !== 0) {
            writer.uint32(32).uint64(message.offset);
        }
        if (message.ver !== 0) {
            writer.uint32(40).int64(message.ver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCountSet();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.size = longToNumber(reader.uint64());
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.values.push(longToNumber(reader.uint64()));
                        }
                    }
                    else {
                        message.values.push(longToNumber(reader.uint64()));
                    }
                    break;
                case 4:
                    message.offset = longToNumber(reader.uint64());
                    break;
                case 5:
                    message.ver = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            size: isSet(object.size) ? Number(object.size) : 0,
            values: Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map(function (e) { return Number(e); }) : [],
            offset: isSet(object.offset) ? Number(object.offset) : 0,
            ver: isSet(object.ver) ? Number(object.ver) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.size !== undefined && (obj.size = Math.round(message.size));
        if (message.values) {
            obj.values = message.values.map(function (e) { return Math.round(e); });
        }
        else {
            obj.values = [];
        }
        message.offset !== undefined && (obj.offset = Math.round(message.offset));
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        return obj;
    },
    create: function (base) {
        return exports.CountSet.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseCountSet();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.size = (_b = object.size) !== null && _b !== void 0 ? _b : 0;
        message.values = ((_c = object.values) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.offset = (_d = object.offset) !== null && _d !== void 0 ? _d : 0;
        message.ver = (_e = object.ver) !== null && _e !== void 0 ? _e : 0;
        return message;
    }
};
function createBaseVlist() {
    return { values: [] };
}
exports.Vlist = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        writer.uint32(10).fork();
        for (var _i = 0, _a = message.values; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVlist();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.values.push(reader.uint32());
                        }
                    }
                    else {
                        message.values.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { values: Array.isArray(object === null || object === void 0 ? void 0 : object.values) ? object.values.map(function (e) { return Number(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.values) {
            obj.values = message.values.map(function (e) { return Math.round(e); });
        }
        else {
            obj.values = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.Vlist.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVlist();
        message.values = ((_a = object.values) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        return message;
    }
};
var tsProtoGlobalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
