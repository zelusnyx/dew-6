/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "portal.v1";

export interface CountSet {
  name: string;
  size: number;
  values: number[];
  offset: number;
  ver: number;
}

export interface Vlist {
  values: number[];
}

function createBaseCountSet(): CountSet {
  return { name: "", size: 0, values: [], offset: 0, ver: 0 };
}

export const CountSet = {
  encode(message: CountSet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.size !== 0) {
      writer.uint32(16).uint64(message.size);
    }
    writer.uint32(26).fork();
    for (const v of message.values) {
      writer.uint64(v);
    }
    writer.ldelim();
    if (message.offset !== 0) {
      writer.uint32(32).uint64(message.offset);
    }
    if (message.ver !== 0) {
      writer.uint32(40).int64(message.ver);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CountSet {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCountSet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.size = longToNumber(reader.uint64() as Long);
          break;
        case 3:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(longToNumber(reader.uint64() as Long));
            }
          } else {
            message.values.push(longToNumber(reader.uint64() as Long));
          }
          break;
        case 4:
          message.offset = longToNumber(reader.uint64() as Long);
          break;
        case 5:
          message.ver = longToNumber(reader.int64() as Long);
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CountSet {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      size: isSet(object.size) ? Number(object.size) : 0,
      values: Array.isArray(object?.values) ? object.values.map((e: any) => Number(e)) : [],
      offset: isSet(object.offset) ? Number(object.offset) : 0,
      ver: isSet(object.ver) ? Number(object.ver) : 0,
    };
  },

  toJSON(message: CountSet): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.size !== undefined && (obj.size = Math.round(message.size));
    if (message.values) {
      obj.values = message.values.map((e) => Math.round(e));
    } else {
      obj.values = [];
    }
    message.offset !== undefined && (obj.offset = Math.round(message.offset));
    message.ver !== undefined && (obj.ver = Math.round(message.ver));
    return obj;
  },

  create<I extends Exact<DeepPartial<CountSet>, I>>(base?: I): CountSet {
    return CountSet.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CountSet>, I>>(object: I): CountSet {
    const message = createBaseCountSet();
    message.name = object.name ?? "";
    message.size = object.size ?? 0;
    message.values = object.values?.map((e) => e) || [];
    message.offset = object.offset ?? 0;
    message.ver = object.ver ?? 0;
    return message;
  },
};

function createBaseVlist(): Vlist {
  return { values: [] };
}

export const Vlist = {
  encode(message: Vlist, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    writer.uint32(10).fork();
    for (const v of message.values) {
      writer.uint32(v);
    }
    writer.ldelim();
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Vlist {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVlist();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if ((tag & 7) === 2) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.values.push(reader.uint32());
            }
          } else {
            message.values.push(reader.uint32());
          }
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): Vlist {
    return { values: Array.isArray(object?.values) ? object.values.map((e: any) => Number(e)) : [] };
  },

  toJSON(message: Vlist): unknown {
    const obj: any = {};
    if (message.values) {
      obj.values = message.values.map((e) => Math.round(e));
    } else {
      obj.values = [];
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vlist>, I>>(base?: I): Vlist {
    return Vlist.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<Vlist>, I>>(object: I): Vlist {
    const message = createBaseVlist();
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

declare var self: any | undefined;
declare var window: any | undefined;
declare var global: any | undefined;
var tsProtoGlobalThis: any = (() => {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw "Unable to locate global object";
})();

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(long: Long): number {
  if (long.gt(Number.MAX_SAFE_INTEGER)) {
    throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  return long.toNumber();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
