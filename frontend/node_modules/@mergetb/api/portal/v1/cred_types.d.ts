import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface SSHKeyPair {
    Public: string;
    Private: string;
    ver: number;
}
export interface GetUserSSHKeysRequest {
    Username: string;
}
export interface GetUserSSHKeysResponse {
    Keys: SSHKeyPair | undefined;
}
export interface SSHCert {
    Cert: string;
    CAHostPubKey: string;
    ver: number;
}
export interface GetUserSSHCertRequest {
    Username: string;
}
export interface GetUserSSHCertResponse {
    Cert: SSHCert | undefined;
}
export declare const SSHKeyPair: {
    encode(message: SSHKeyPair, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SSHKeyPair;
    fromJSON(object: any): SSHKeyPair;
    toJSON(message: SSHKeyPair): unknown;
    create<I extends {
        Public?: string;
        Private?: string;
        ver?: number;
    } & {
        Public?: string;
        Private?: string;
        ver?: number;
    } & { [K in Exclude<keyof I, keyof SSHKeyPair>]: never; }>(base?: I): SSHKeyPair;
    fromPartial<I_1 extends {
        Public?: string;
        Private?: string;
        ver?: number;
    } & {
        Public?: string;
        Private?: string;
        ver?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof SSHKeyPair>]: never; }>(object: I_1): SSHKeyPair;
};
export declare const GetUserSSHKeysRequest: {
    encode(message: GetUserSSHKeysRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHKeysRequest;
    fromJSON(object: any): GetUserSSHKeysRequest;
    toJSON(message: GetUserSSHKeysRequest): unknown;
    create<I extends {
        Username?: string;
    } & {
        Username?: string;
    } & { [K in Exclude<keyof I, "Username">]: never; }>(base?: I): GetUserSSHKeysRequest;
    fromPartial<I_1 extends {
        Username?: string;
    } & {
        Username?: string;
    } & { [K_1 in Exclude<keyof I_1, "Username">]: never; }>(object: I_1): GetUserSSHKeysRequest;
};
export declare const GetUserSSHKeysResponse: {
    encode(message: GetUserSSHKeysResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHKeysResponse;
    fromJSON(object: any): GetUserSSHKeysResponse;
    toJSON(message: GetUserSSHKeysResponse): unknown;
    create<I extends {
        Keys?: {
            Public?: string;
            Private?: string;
            ver?: number;
        };
    } & {
        Keys?: {
            Public?: string;
            Private?: string;
            ver?: number;
        } & {
            Public?: string;
            Private?: string;
            ver?: number;
        } & { [K in Exclude<keyof I["Keys"], keyof SSHKeyPair>]: never; };
    } & { [K_1 in Exclude<keyof I, "Keys">]: never; }>(base?: I): GetUserSSHKeysResponse;
    fromPartial<I_1 extends {
        Keys?: {
            Public?: string;
            Private?: string;
            ver?: number;
        };
    } & {
        Keys?: {
            Public?: string;
            Private?: string;
            ver?: number;
        } & {
            Public?: string;
            Private?: string;
            ver?: number;
        } & { [K_2 in Exclude<keyof I_1["Keys"], keyof SSHKeyPair>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "Keys">]: never; }>(object: I_1): GetUserSSHKeysResponse;
};
export declare const SSHCert: {
    encode(message: SSHCert, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SSHCert;
    fromJSON(object: any): SSHCert;
    toJSON(message: SSHCert): unknown;
    create<I extends {
        Cert?: string;
        CAHostPubKey?: string;
        ver?: number;
    } & {
        Cert?: string;
        CAHostPubKey?: string;
        ver?: number;
    } & { [K in Exclude<keyof I, keyof SSHCert>]: never; }>(base?: I): SSHCert;
    fromPartial<I_1 extends {
        Cert?: string;
        CAHostPubKey?: string;
        ver?: number;
    } & {
        Cert?: string;
        CAHostPubKey?: string;
        ver?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof SSHCert>]: never; }>(object: I_1): SSHCert;
};
export declare const GetUserSSHCertRequest: {
    encode(message: GetUserSSHCertRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHCertRequest;
    fromJSON(object: any): GetUserSSHCertRequest;
    toJSON(message: GetUserSSHCertRequest): unknown;
    create<I extends {
        Username?: string;
    } & {
        Username?: string;
    } & { [K in Exclude<keyof I, "Username">]: never; }>(base?: I): GetUserSSHCertRequest;
    fromPartial<I_1 extends {
        Username?: string;
    } & {
        Username?: string;
    } & { [K_1 in Exclude<keyof I_1, "Username">]: never; }>(object: I_1): GetUserSSHCertRequest;
};
export declare const GetUserSSHCertResponse: {
    encode(message: GetUserSSHCertResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSSHCertResponse;
    fromJSON(object: any): GetUserSSHCertResponse;
    toJSON(message: GetUserSSHCertResponse): unknown;
    create<I extends {
        Cert?: {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        };
    } & {
        Cert?: {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        } & {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        } & { [K in Exclude<keyof I["Cert"], keyof SSHCert>]: never; };
    } & { [K_1 in Exclude<keyof I, "Cert">]: never; }>(base?: I): GetUserSSHCertResponse;
    fromPartial<I_1 extends {
        Cert?: {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        };
    } & {
        Cert?: {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        } & {
            Cert?: string;
            CAHostPubKey?: string;
            ver?: number;
        } & { [K_2 in Exclude<keyof I_1["Cert"], keyof SSHCert>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "Cert">]: never; }>(object: I_1): GetUserSSHCertResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
