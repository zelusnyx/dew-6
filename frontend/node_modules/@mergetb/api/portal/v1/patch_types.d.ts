import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface PatchStrategy {
    strategy: PatchStrategy_Strategy;
}
export declare enum PatchStrategy_Strategy {
    /** replace - Replace the entity entirely. */
    replace = 0,
    /** remove - Non nil entities are removed (i.e. remove all entries) */
    remove = 1,
    /** expand - Add things to the entity */
    expand = 2,
    /** subtract - Remove things from the entity */
    subtract = 3,
    UNRECOGNIZED = -1
}
export declare function patchStrategy_StrategyFromJSON(object: any): PatchStrategy_Strategy;
export declare function patchStrategy_StrategyToJSON(object: PatchStrategy_Strategy): string;
export declare const PatchStrategy: {
    encode(message: PatchStrategy, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PatchStrategy;
    fromJSON(object: any): PatchStrategy;
    toJSON(message: PatchStrategy): unknown;
    create<I extends {
        strategy?: PatchStrategy_Strategy;
    } & {
        strategy?: PatchStrategy_Strategy;
    } & { [K in Exclude<keyof I, "strategy">]: never; }>(base?: I): PatchStrategy;
    fromPartial<I_1 extends {
        strategy?: PatchStrategy_Strategy;
    } & {
        strategy?: PatchStrategy_Strategy;
    } & { [K_1 in Exclude<keyof I_1, "strategy">]: never; }>(object: I_1): PatchStrategy;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
