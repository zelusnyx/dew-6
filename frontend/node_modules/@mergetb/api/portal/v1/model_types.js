"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.PushResponse = exports.PushRequest = exports.CompileResponse = exports.CompileRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "portal.v1";
function createBaseCompileRequest() {
    return { model: "" };
}
exports.CompileRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.model !== "") {
            writer.uint32(10).string(message.model);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCompileRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.model = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { model: isSet(object.model) ? String(object.model) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.model !== undefined && (obj.model = message.model);
        return obj;
    },
    create: function (base) {
        return exports.CompileRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseCompileRequest();
        message.model = (_a = object.model) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseCompileResponse() {
    return { success: false, errors: [], network: "" };
}
exports.CompileResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.success === true) {
            writer.uint32(8).bool(message.success);
        }
        for (var _i = 0, _a = message.errors; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(18).string(v);
        }
        if (message.network !== "") {
            writer.uint32(26).string(message.network);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCompileResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.success = reader.bool();
                    break;
                case 2:
                    message.errors.push(reader.string());
                    break;
                case 3:
                    message.network = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            success: isSet(object.success) ? Boolean(object.success) : false,
            errors: Array.isArray(object === null || object === void 0 ? void 0 : object.errors) ? object.errors.map(function (e) { return String(e); }) : [],
            network: isSet(object.network) ? String(object.network) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.success !== undefined && (obj.success = message.success);
        if (message.errors) {
            obj.errors = message.errors.map(function (e) { return e; });
        }
        else {
            obj.errors = [];
        }
        message.network !== undefined && (obj.network = message.network);
        return obj;
    },
    create: function (base) {
        return exports.CompileResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseCompileResponse();
        message.success = (_a = object.success) !== null && _a !== void 0 ? _a : false;
        message.errors = ((_b = object.errors) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        message.network = (_c = object.network) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBasePushRequest() {
    return { model: "", branch: "", experiment: "", project: "", tag: "" };
}
exports.PushRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.model !== "") {
            writer.uint32(10).string(message.model);
        }
        if (message.branch !== "") {
            writer.uint32(18).string(message.branch);
        }
        if (message.experiment !== "") {
            writer.uint32(26).string(message.experiment);
        }
        if (message.project !== "") {
            writer.uint32(34).string(message.project);
        }
        if (message.tag !== "") {
            writer.uint32(42).string(message.tag);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePushRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.model = reader.string();
                    break;
                case 2:
                    message.branch = reader.string();
                    break;
                case 3:
                    message.experiment = reader.string();
                    break;
                case 4:
                    message.project = reader.string();
                    break;
                case 5:
                    message.tag = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            model: isSet(object.model) ? String(object.model) : "",
            branch: isSet(object.branch) ? String(object.branch) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            project: isSet(object.project) ? String(object.project) : "",
            tag: isSet(object.tag) ? String(object.tag) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.model !== undefined && (obj.model = message.model);
        message.branch !== undefined && (obj.branch = message.branch);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.project !== undefined && (obj.project = message.project);
        message.tag !== undefined && (obj.tag = message.tag);
        return obj;
    },
    create: function (base) {
        return exports.PushRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBasePushRequest();
        message.model = (_a = object.model) !== null && _a !== void 0 ? _a : "";
        message.branch = (_b = object.branch) !== null && _b !== void 0 ? _b : "";
        message.experiment = (_c = object.experiment) !== null && _c !== void 0 ? _c : "";
        message.project = (_d = object.project) !== null && _d !== void 0 ? _d : "";
        message.tag = (_e = object.tag) !== null && _e !== void 0 ? _e : "";
        return message;
    }
};
function createBasePushResponse() {
    return { revision: "" };
}
exports.PushResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.revision !== "") {
            writer.uint32(10).string(message.revision);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePushResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.revision = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { revision: isSet(object.revision) ? String(object.revision) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.revision !== undefined && (obj.revision = message.revision);
        return obj;
    },
    create: function (base) {
        return exports.PushResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBasePushResponse();
        message.revision = (_a = object.revision) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function isSet(value) {
    return value !== null && value !== undefined;
}
