"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.UpdatePoolResourcesResponse = exports.UpdatePoolResourcesRequest = exports.RemoveFacilityFromPoolResponse = exports.RemoveFacilityFromPoolRequest = exports.AddFacilityToPoolResponse = exports.AddFacilityToPoolRequest = exports.RemoveOrganizationFromPoolResponse = exports.RemoveOrganizationFromPoolRequest = exports.AddOrganizationToPoolResponse = exports.AddOrganizationToPoolRequest = exports.RemoveProjectFromPoolResponse = exports.RemoveProjectFromPoolRequest = exports.AddProjectToPoolResponse = exports.AddProjectToPoolRequest = exports.DeletePoolResponse = exports.DeletePoolRequest = exports.CreatePoolResponse = exports.CreatePoolRequest = exports.GetPoolResponse = exports.GetPoolRequest = exports.GetPoolsResponse = exports.GetPoolsRequest = exports.Pool_FacilitiesEntry = exports.Pool_Resources = exports.Pool = exports.FetchAllocationTableResponse = exports.FetchAllocationTableRequest = exports.FreeResponse = exports.FreeRequest = exports.AllocationResponse = exports.AllocationRequest = exports.AllocationTable_CableEntry = exports.AllocationTable_ResourceEntry = exports.AllocationTable = exports.CableAllocationList = exports.ResourceAllocationList = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var core_1 = require("../../mergetb/xir/v0.3/core");
var patch_types_1 = require("./patch_types");
exports.protobufPackage = "portal.v1";
function createBaseResourceAllocationList() {
    return { value: [], revision: 0 };
}
exports.ResourceAllocationList = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.value; _i < _a.length; _i++) {
            var v = _a[_i];
            core_1.ResourceAllocation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.revision !== 0) {
            writer.uint32(16).int64(message.revision);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseResourceAllocationList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value.push(core_1.ResourceAllocation.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.revision = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            value: Array.isArray(object === null || object === void 0 ? void 0 : object.value) ? object.value.map(function (e) { return core_1.ResourceAllocation.fromJSON(e); }) : [],
            revision: isSet(object.revision) ? Number(object.revision) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.value) {
            obj.value = message.value.map(function (e) { return e ? core_1.ResourceAllocation.toJSON(e) : undefined; });
        }
        else {
            obj.value = [];
        }
        message.revision !== undefined && (obj.revision = Math.round(message.revision));
        return obj;
    },
    create: function (base) {
        return exports.ResourceAllocationList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseResourceAllocationList();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map(function (e) { return core_1.ResourceAllocation.fromPartial(e); })) || [];
        message.revision = (_b = object.revision) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
function createBaseCableAllocationList() {
    return { value: [], revision: 0 };
}
exports.CableAllocationList = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.value; _i < _a.length; _i++) {
            var v = _a[_i];
            core_1.CableAllocation.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.revision !== 0) {
            writer.uint32(16).int64(message.revision);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCableAllocationList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value.push(core_1.CableAllocation.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.revision = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            value: Array.isArray(object === null || object === void 0 ? void 0 : object.value) ? object.value.map(function (e) { return core_1.CableAllocation.fromJSON(e); }) : [],
            revision: isSet(object.revision) ? Number(object.revision) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.value) {
            obj.value = message.value.map(function (e) { return e ? core_1.CableAllocation.toJSON(e) : undefined; });
        }
        else {
            obj.value = [];
        }
        message.revision !== undefined && (obj.revision = Math.round(message.revision));
        return obj;
    },
    create: function (base) {
        return exports.CableAllocationList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseCableAllocationList();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map(function (e) { return core_1.CableAllocation.fromPartial(e); })) || [];
        message.revision = (_b = object.revision) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
function createBaseAllocationTable() {
    return { resource: {}, cable: {} };
}
exports.AllocationTable = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        Object.entries(message.resource).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.AllocationTable_ResourceEntry.encode({ key: key, value: value }, writer.uint32(10).fork()).ldelim();
        });
        Object.entries(message.cable).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.AllocationTable_CableEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocationTable();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    var entry1 = exports.AllocationTable_ResourceEntry.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.resource[entry1.key] = entry1.value;
                    }
                    break;
                case 2:
                    var entry2 = exports.AllocationTable_CableEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.cable[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            resource: isObject(object.resource)
                ? Object.entries(object.resource).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.ResourceAllocationList.fromJSON(value);
                    return acc;
                }, {})
                : {},
            cable: isObject(object.cable)
                ? Object.entries(object.cable).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.CableAllocationList.fromJSON(value);
                    return acc;
                }, {})
                : {}
        };
    },
    toJSON: function (message) {
        var obj = {};
        obj.resource = {};
        if (message.resource) {
            Object.entries(message.resource).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.resource[k] = exports.ResourceAllocationList.toJSON(v);
            });
        }
        obj.cable = {};
        if (message.cable) {
            Object.entries(message.cable).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.cable[k] = exports.CableAllocationList.toJSON(v);
            });
        }
        return obj;
    },
    create: function (base) {
        return exports.AllocationTable.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAllocationTable();
        message.resource = Object.entries((_a = object.resource) !== null && _a !== void 0 ? _a : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.ResourceAllocationList.fromPartial(value);
            }
            return acc;
        }, {});
        message.cable = Object.entries((_b = object.cable) !== null && _b !== void 0 ? _b : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.CableAllocationList.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    }
};
function createBaseAllocationTable_ResourceEntry() {
    return { key: "", value: undefined };
}
exports.AllocationTable_ResourceEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ResourceAllocationList.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocationTable_ResourceEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.ResourceAllocationList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.ResourceAllocationList.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined &&
            (obj.value = message.value ? exports.ResourceAllocationList.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.AllocationTable_ResourceEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseAllocationTable_ResourceEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.ResourceAllocationList.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseAllocationTable_CableEntry() {
    return { key: "", value: undefined };
}
exports.AllocationTable_CableEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.CableAllocationList.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocationTable_CableEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.CableAllocationList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.CableAllocationList.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.CableAllocationList.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.AllocationTable_CableEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseAllocationTable_CableEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.CableAllocationList.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseAllocationRequest() {
    return { table: undefined };
}
exports.AllocationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.table !== undefined) {
            exports.AllocationTable.encode(message.table, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.table = exports.AllocationTable.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { table: isSet(object.table) ? exports.AllocationTable.fromJSON(object.table) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.table !== undefined && (obj.table = message.table ? exports.AllocationTable.toJSON(message.table) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.AllocationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseAllocationRequest();
        message.table = (object.table !== undefined && object.table !== null)
            ? exports.AllocationTable.fromPartial(object.table)
            : undefined;
        return message;
    }
};
function createBaseAllocationResponse() {
    return {};
}
exports.AllocationResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.AllocationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseAllocationResponse();
        return message;
    }
};
function createBaseFreeRequest() {
    return { rzid: "" };
}
exports.FreeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.rzid !== "") {
            writer.uint32(10).string(message.rzid);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFreeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rzid = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { rzid: isSet(object.rzid) ? String(object.rzid) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.rzid !== undefined && (obj.rzid = message.rzid);
        return obj;
    },
    create: function (base) {
        return exports.FreeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseFreeRequest();
        message.rzid = (_a = object.rzid) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseFreeResponse() {
    return {};
}
exports.FreeResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFreeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.FreeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseFreeResponse();
        return message;
    }
};
function createBaseFetchAllocationTableRequest() {
    return {};
}
exports.FetchAllocationTableRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFetchAllocationTableRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.FetchAllocationTableRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseFetchAllocationTableRequest();
        return message;
    }
};
function createBaseFetchAllocationTableResponse() {
    return { table: undefined };
}
exports.FetchAllocationTableResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.table !== undefined) {
            exports.AllocationTable.encode(message.table, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFetchAllocationTableResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.table = exports.AllocationTable.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { table: isSet(object.table) ? exports.AllocationTable.fromJSON(object.table) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.table !== undefined && (obj.table = message.table ? exports.AllocationTable.toJSON(message.table) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.FetchAllocationTableResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseFetchAllocationTableResponse();
        message.table = (object.table !== undefined && object.table !== null)
            ? exports.AllocationTable.fromPartial(object.table)
            : undefined;
        return message;
    }
};
function createBasePool() {
    return { name: "", description: "", projects: [], facilities: {}, creator: "", ver: 0, organizations: [] };
}
exports.Pool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (var _i = 0, _a = message.projects; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        Object.entries(message.facilities).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Pool_FacilitiesEntry.encode({ key: key, value: value }, writer.uint32(34).fork()).ldelim();
        });
        if (message.creator !== "") {
            writer.uint32(42).string(message.creator);
        }
        if (message.ver !== 0) {
            writer.uint32(48).int64(message.ver);
        }
        for (var _b = 0, _c = message.organizations; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.projects.push(reader.string());
                    break;
                case 4:
                    var entry4 = exports.Pool_FacilitiesEntry.decode(reader, reader.uint32());
                    if (entry4.value !== undefined) {
                        message.facilities[entry4.key] = entry4.value;
                    }
                    break;
                case 5:
                    message.creator = reader.string();
                    break;
                case 6:
                    message.ver = longToNumber(reader.int64());
                    break;
                case 7:
                    message.organizations.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
            projects: Array.isArray(object === null || object === void 0 ? void 0 : object.projects) ? object.projects.map(function (e) { return String(e); }) : [],
            facilities: isObject(object.facilities)
                ? Object.entries(object.facilities).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.Pool_Resources.fromJSON(value);
                    return acc;
                }, {})
                : {},
            creator: isSet(object.creator) ? String(object.creator) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0,
            organizations: Array.isArray(object === null || object === void 0 ? void 0 : object.organizations) ? object.organizations.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        if (message.projects) {
            obj.projects = message.projects.map(function (e) { return e; });
        }
        else {
            obj.projects = [];
        }
        obj.facilities = {};
        if (message.facilities) {
            Object.entries(message.facilities).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.facilities[k] = exports.Pool_Resources.toJSON(v);
            });
        }
        message.creator !== undefined && (obj.creator = message.creator);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        if (message.organizations) {
            obj.organizations = message.organizations.map(function (e) { return e; });
        }
        else {
            obj.organizations = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.Pool.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBasePool();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.projects = ((_c = object.projects) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.facilities = Object.entries((_d = object.facilities) !== null && _d !== void 0 ? _d : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.Pool_Resources.fromPartial(value);
            }
            return acc;
        }, {});
        message.creator = (_e = object.creator) !== null && _e !== void 0 ? _e : "";
        message.ver = (_f = object.ver) !== null && _f !== void 0 ? _f : 0;
        message.organizations = ((_g = object.organizations) === null || _g === void 0 ? void 0 : _g.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBasePool_Resources() {
    return { resources: [] };
}
exports.Pool_Resources = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.resources; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePool_Resources();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resources.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) { return String(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.resources) {
            obj.resources = message.resources.map(function (e) { return e; });
        }
        else {
            obj.resources = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.Pool_Resources.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBasePool_Resources();
        message.resources = ((_a = object.resources) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBasePool_FacilitiesEntry() {
    return { key: "", value: undefined };
}
exports.Pool_FacilitiesEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.Pool_Resources.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePool_FacilitiesEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.Pool_Resources.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.Pool_Resources.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.Pool_Resources.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Pool_FacilitiesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBasePool_FacilitiesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.Pool_Resources.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseGetPoolsRequest() {
    return {};
}
exports.GetPoolsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetPoolsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.GetPoolsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseGetPoolsRequest();
        return message;
    }
};
function createBaseGetPoolsResponse() {
    return { pools: [] };
}
exports.GetPoolsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.pools; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Pool.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetPoolsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pools.push(exports.Pool.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { pools: Array.isArray(object === null || object === void 0 ? void 0 : object.pools) ? object.pools.map(function (e) { return exports.Pool.fromJSON(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.pools) {
            obj.pools = message.pools.map(function (e) { return e ? exports.Pool.toJSON(e) : undefined; });
        }
        else {
            obj.pools = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.GetPoolsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetPoolsResponse();
        message.pools = ((_a = object.pools) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Pool.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetPoolRequest() {
    return { name: "" };
}
exports.GetPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { name: isSet(object.name) ? String(object.name) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    create: function (base) {
        return exports.GetPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseGetPoolResponse() {
    return { pool: undefined };
}
exports.GetPoolResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.pool !== undefined) {
            exports.Pool.encode(message.pool, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pool = exports.Pool.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { pool: isSet(object.pool) ? exports.Pool.fromJSON(object.pool) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.pool !== undefined && (obj.pool = message.pool ? exports.Pool.toJSON(message.pool) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.GetPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseGetPoolResponse();
        message.pool = (object.pool !== undefined && object.pool !== null) ? exports.Pool.fromPartial(object.pool) : undefined;
        return message;
    }
};
function createBaseCreatePoolRequest() {
    return { name: "", description: "", projects: [], facilities: [], organizations: [] };
}
exports.CreatePoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (var _i = 0, _a = message.projects; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        for (var _b = 0, _c = message.facilities; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.uint32(34).string(v);
        }
        for (var _d = 0, _e = message.organizations; _d < _e.length; _d++) {
            var v = _e[_d];
            writer.uint32(42).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreatePoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.projects.push(reader.string());
                    break;
                case 4:
                    message.facilities.push(reader.string());
                    break;
                case 5:
                    message.organizations.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            description: isSet(object.description) ? String(object.description) : "",
            projects: Array.isArray(object === null || object === void 0 ? void 0 : object.projects) ? object.projects.map(function (e) { return String(e); }) : [],
            facilities: Array.isArray(object === null || object === void 0 ? void 0 : object.facilities) ? object.facilities.map(function (e) { return String(e); }) : [],
            organizations: Array.isArray(object === null || object === void 0 ? void 0 : object.organizations) ? object.organizations.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.description !== undefined && (obj.description = message.description);
        if (message.projects) {
            obj.projects = message.projects.map(function (e) { return e; });
        }
        else {
            obj.projects = [];
        }
        if (message.facilities) {
            obj.facilities = message.facilities.map(function (e) { return e; });
        }
        else {
            obj.facilities = [];
        }
        if (message.organizations) {
            obj.organizations = message.organizations.map(function (e) { return e; });
        }
        else {
            obj.organizations = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.CreatePoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseCreatePoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.projects = ((_c = object.projects) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.facilities = ((_d = object.facilities) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        message.organizations = ((_e = object.organizations) === null || _e === void 0 ? void 0 : _e.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseCreatePoolResponse() {
    return {};
}
exports.CreatePoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreatePoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.CreatePoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseCreatePoolResponse();
        return message;
    }
};
function createBaseDeletePoolRequest() {
    return { name: "" };
}
exports.DeletePoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeletePoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { name: isSet(object.name) ? String(object.name) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    create: function (base) {
        return exports.DeletePoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDeletePoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseDeletePoolResponse() {
    return {};
}
exports.DeletePoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeletePoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.DeletePoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseDeletePoolResponse();
        return message;
    }
};
function createBaseAddProjectToPoolRequest() {
    return { name: "", project: "" };
}
exports.AddProjectToPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddProjectToPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            project: isSet(object.project) ? String(object.project) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.project !== undefined && (obj.project = message.project);
        return obj;
    },
    create: function (base) {
        return exports.AddProjectToPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAddProjectToPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseAddProjectToPoolResponse() {
    return {};
}
exports.AddProjectToPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddProjectToPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.AddProjectToPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseAddProjectToPoolResponse();
        return message;
    }
};
function createBaseRemoveProjectFromPoolRequest() {
    return { name: "", project: "" };
}
exports.RemoveProjectFromPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveProjectFromPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            project: isSet(object.project) ? String(object.project) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.project !== undefined && (obj.project = message.project);
        return obj;
    },
    create: function (base) {
        return exports.RemoveProjectFromPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRemoveProjectFromPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseRemoveProjectFromPoolResponse() {
    return {};
}
exports.RemoveProjectFromPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveProjectFromPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.RemoveProjectFromPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseRemoveProjectFromPoolResponse();
        return message;
    }
};
function createBaseAddOrganizationToPoolRequest() {
    return { name: "", organization: "" };
}
exports.AddOrganizationToPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.organization !== "") {
            writer.uint32(18).string(message.organization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddOrganizationToPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.organization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            organization: isSet(object.organization) ? String(object.organization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.organization !== undefined && (obj.organization = message.organization);
        return obj;
    },
    create: function (base) {
        return exports.AddOrganizationToPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseAddOrganizationToPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.organization = (_b = object.organization) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseAddOrganizationToPoolResponse() {
    return {};
}
exports.AddOrganizationToPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddOrganizationToPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.AddOrganizationToPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseAddOrganizationToPoolResponse();
        return message;
    }
};
function createBaseRemoveOrganizationFromPoolRequest() {
    return { name: "", organization: "" };
}
exports.RemoveOrganizationFromPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.organization !== "") {
            writer.uint32(18).string(message.organization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveOrganizationFromPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.organization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            organization: isSet(object.organization) ? String(object.organization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.organization !== undefined && (obj.organization = message.organization);
        return obj;
    },
    create: function (base) {
        return exports.RemoveOrganizationFromPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRemoveOrganizationFromPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.organization = (_b = object.organization) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseRemoveOrganizationFromPoolResponse() {
    return {};
}
exports.RemoveOrganizationFromPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveOrganizationFromPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.RemoveOrganizationFromPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseRemoveOrganizationFromPoolResponse();
        return message;
    }
};
function createBaseAddFacilityToPoolRequest() {
    return { name: "", facility: "", resources: [] };
}
exports.AddFacilityToPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        for (var _i = 0, _a = message.resources; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddFacilityToPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                case 3:
                    message.resources.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            facility: isSet(object.facility) ? String(object.facility) : "",
            resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.facility !== undefined && (obj.facility = message.facility);
        if (message.resources) {
            obj.resources = message.resources.map(function (e) { return e; });
        }
        else {
            obj.resources = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.AddFacilityToPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseAddFacilityToPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        message.resources = ((_c = object.resources) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseAddFacilityToPoolResponse() {
    return {};
}
exports.AddFacilityToPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAddFacilityToPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.AddFacilityToPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseAddFacilityToPoolResponse();
        return message;
    }
};
function createBaseRemoveFacilityFromPoolRequest() {
    return { name: "", facility: "" };
}
exports.RemoveFacilityFromPoolRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveFacilityFromPoolRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            facility: isSet(object.facility) ? String(object.facility) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.facility !== undefined && (obj.facility = message.facility);
        return obj;
    },
    create: function (base) {
        return exports.RemoveFacilityFromPoolRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRemoveFacilityFromPoolRequest();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseRemoveFacilityFromPoolResponse() {
    return {};
}
exports.RemoveFacilityFromPoolResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRemoveFacilityFromPoolResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.RemoveFacilityFromPoolResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseRemoveFacilityFromPoolResponse();
        return message;
    }
};
function createBaseUpdatePoolResourcesRequest() {
    return { pool: "", facility: "", resources: [], patchstrategy: undefined };
}
exports.UpdatePoolResourcesRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.pool !== "") {
            writer.uint32(10).string(message.pool);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        for (var _i = 0, _a = message.resources; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        if (message.patchstrategy !== undefined) {
            patch_types_1.PatchStrategy.encode(message.patchstrategy, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUpdatePoolResourcesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pool = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                case 3:
                    message.resources.push(reader.string());
                    break;
                case 4:
                    message.patchstrategy = patch_types_1.PatchStrategy.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool: isSet(object.pool) ? String(object.pool) : "",
            facility: isSet(object.facility) ? String(object.facility) : "",
            resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) { return String(e); }) : [],
            patchstrategy: isSet(object.patchstrategy) ? patch_types_1.PatchStrategy.fromJSON(object.patchstrategy) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.pool !== undefined && (obj.pool = message.pool);
        message.facility !== undefined && (obj.facility = message.facility);
        if (message.resources) {
            obj.resources = message.resources.map(function (e) { return e; });
        }
        else {
            obj.resources = [];
        }
        message.patchstrategy !== undefined &&
            (obj.patchstrategy = message.patchstrategy ? patch_types_1.PatchStrategy.toJSON(message.patchstrategy) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.UpdatePoolResourcesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseUpdatePoolResourcesRequest();
        message.pool = (_a = object.pool) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        message.resources = ((_c = object.resources) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.patchstrategy = (object.patchstrategy !== undefined && object.patchstrategy !== null)
            ? patch_types_1.PatchStrategy.fromPartial(object.patchstrategy)
            : undefined;
        return message;
    }
};
function createBaseUpdatePoolResourcesResponse() {
    return { pool: "", facility: "", resources: [] };
}
exports.UpdatePoolResourcesResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.pool !== "") {
            writer.uint32(10).string(message.pool);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        for (var _i = 0, _a = message.resources; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUpdatePoolResourcesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pool = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                case 3:
                    message.resources.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pool: isSet(object.pool) ? String(object.pool) : "",
            facility: isSet(object.facility) ? String(object.facility) : "",
            resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.pool !== undefined && (obj.pool = message.pool);
        message.facility !== undefined && (obj.facility = message.facility);
        if (message.resources) {
            obj.resources = message.resources.map(function (e) { return e; });
        }
        else {
            obj.resources = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.UpdatePoolResourcesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseUpdatePoolResourcesResponse();
        message.pool = (_a = object.pool) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        message.resources = ((_c = object.resources) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        return message;
    }
};
var tsProtoGlobalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
