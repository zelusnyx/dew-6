import _m0 from "protobufjs/minimal";
import { CableAllocation, ResourceAllocation } from "../../mergetb/xir/v0.3/core";
import { PatchStrategy } from "./patch_types";
export declare const protobufPackage = "portal.v1";
export interface ResourceAllocationList {
    value: ResourceAllocation[];
    revision: number;
}
export interface CableAllocationList {
    value: CableAllocation[];
    revision: number;
}
export interface AllocationTable {
    resource: {
        [key: string]: ResourceAllocationList;
    };
    cable: {
        [key: string]: CableAllocationList;
    };
}
export interface AllocationTable_ResourceEntry {
    key: string;
    value: ResourceAllocationList | undefined;
}
export interface AllocationTable_CableEntry {
    key: string;
    value: CableAllocationList | undefined;
}
export interface AllocationRequest {
    table: AllocationTable | undefined;
}
export interface AllocationResponse {
}
export interface FreeRequest {
    rzid: string;
}
export interface FreeResponse {
}
export interface FetchAllocationTableRequest {
}
export interface FetchAllocationTableResponse {
    table: AllocationTable | undefined;
}
export interface Pool {
    name: string;
    description: string;
    projects: string[];
    /** Per facility list of resources (as strings) */
    facilities: {
        [key: string]: Pool_Resources;
    };
    creator: string;
    ver: number;
    organizations: string[];
}
export interface Pool_Resources {
    resources: string[];
}
export interface Pool_FacilitiesEntry {
    key: string;
    value: Pool_Resources | undefined;
}
export interface GetPoolsRequest {
}
export interface GetPoolsResponse {
    pools: Pool[];
}
export interface GetPoolRequest {
    name: string;
}
export interface GetPoolResponse {
    pool: Pool | undefined;
}
export interface CreatePoolRequest {
    name: string;
    description: string;
    projects: string[];
    facilities: string[];
    organizations: string[];
}
export interface CreatePoolResponse {
}
export interface DeletePoolRequest {
    name: string;
}
export interface DeletePoolResponse {
}
export interface AddProjectToPoolRequest {
    name: string;
    project: string;
}
export interface AddProjectToPoolResponse {
}
export interface RemoveProjectFromPoolRequest {
    name: string;
    project: string;
}
export interface RemoveProjectFromPoolResponse {
}
export interface AddOrganizationToPoolRequest {
    name: string;
    organization: string;
}
export interface AddOrganizationToPoolResponse {
}
export interface RemoveOrganizationFromPoolRequest {
    name: string;
    organization: string;
}
export interface RemoveOrganizationFromPoolResponse {
}
export interface AddFacilityToPoolRequest {
    name: string;
    facility: string;
    /** optional */
    resources: string[];
}
export interface AddFacilityToPoolResponse {
}
export interface RemoveFacilityFromPoolRequest {
    name: string;
    facility: string;
}
export interface RemoveFacilityFromPoolResponse {
}
export interface UpdatePoolResourcesRequest {
    pool: string;
    facility: string;
    resources: string[];
    /**
     * how to merge the given resources into the existing pool
     * replace, remove, expand, or subtract.
     */
    patchstrategy: PatchStrategy | undefined;
}
/**
 * UpdatePoolResourcesResponse contains the updates list
 * of resources for the facility in the pool.
 */
export interface UpdatePoolResourcesResponse {
    pool: string;
    facility: string;
    resources: string[];
}
export declare const ResourceAllocationList: {
    encode(message: ResourceAllocationList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceAllocationList;
    fromJSON(object: any): ResourceAllocationList;
    toJSON(message: ResourceAllocationList): unknown;
    create<I extends {
        value?: {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[];
        revision?: number;
    } & {
        value?: {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[] & ({
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        } & {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                } & {
                    [x: number]: {
                        cores?: number;
                    } & {
                        cores?: number;
                    } & { [K in Exclude<keyof I["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                } & { [K_1 in Exclude<keyof I["value"][number]["procs"]["alloc"], number>]: never; };
            } & { [K_2 in Exclude<keyof I["value"][number]["procs"], "alloc">]: never; };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                } & {
                    [x: number]: {
                        capacity?: number;
                    } & {
                        capacity?: number;
                    } & { [K_3 in Exclude<keyof I["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                } & { [K_4 in Exclude<keyof I["value"][number]["memory"]["alloc"], number>]: never; };
            } & { [K_5 in Exclude<keyof I["value"][number]["memory"], "alloc">]: never; };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                } & {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        } & {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            } & {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            } & { [K_6 in Exclude<keyof I["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                        } & { [K_7 in Exclude<keyof I["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                    } & { [K_8 in Exclude<keyof I["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                } & { [K_9 in Exclude<keyof I["value"][number]["NICs"]["alloc"], number>]: never; };
            } & { [K_10 in Exclude<keyof I["value"][number]["NICs"], "alloc">]: never; };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                } & {
                    [x: number]: {
                        capacity?: number;
                    } & {
                        capacity?: number;
                    } & { [K_11 in Exclude<keyof I["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                } & { [K_12 in Exclude<keyof I["value"][number]["disks"]["alloc"], number>]: never; };
            } & { [K_13 in Exclude<keyof I["value"][number]["disks"], "alloc">]: never; };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            } & {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[] & ({
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                } & {
                    index?: number;
                    addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_15 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                    } & { [K_16 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_17 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_18 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_19 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_20 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_21 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_22 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_23 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_24 in Exclude<keyof I["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                } & { [K_25 in Exclude<keyof I["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_26 in Exclude<keyof I["value"][number]["model"]["sockets"], keyof {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[]>]: never; };
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                } & {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & { [K_27 in Exclude<keyof I["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_28 in Exclude<keyof I["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_29 in Exclude<keyof I["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_30 in Exclude<keyof I["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_31 in Exclude<keyof I["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_32 in Exclude<keyof I["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_33 in Exclude<keyof I["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_34 in Exclude<keyof I["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_35 in Exclude<keyof I["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                } & { [K_36 in Exclude<keyof I["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & { [K_37 in Exclude<keyof I["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_38 in Exclude<keyof I["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_39 in Exclude<keyof I["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_40 in Exclude<keyof I["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_41 in Exclude<keyof I["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                } & {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[] & ({
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_42 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_43 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_44 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_45 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_46 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_47 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_48 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_49 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["value"][number]["model"]["NIC"]["ports"], keyof {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[]>]: never; };
                } & { [K_51 in Exclude<keyof I["value"][number]["model"]["NIC"], "ports">]: never; };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_52 in Exclude<keyof I["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & { [K_53 in Exclude<keyof I["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & { [K_54 in Exclude<keyof I["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_55 in Exclude<keyof I["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_56 in Exclude<keyof I["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_57 in Exclude<keyof I["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_58 in Exclude<keyof I["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_59 in Exclude<keyof I["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_60 in Exclude<keyof I["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                viz?: {
                    color?: string;
                    size?: number;
                } & {
                    color?: string;
                    size?: number;
                } & { [K_61 in Exclude<keyof I["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                } & {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[] & ({
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & { [K_62 in Exclude<keyof I["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["value"][number]["model"]["conf"]["routes"], keyof {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[]>]: never; };
                } & { [K_64 in Exclude<keyof I["value"][number]["model"]["conf"], "routes">]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_65 in Exclude<keyof I["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_66 in Exclude<keyof I["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_67 in Exclude<keyof I["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_68 in Exclude<keyof I["value"][number]["model"]["properties"], "keyvalues">]: never; };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_69 in Exclude<keyof I["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
            } & { [K_70 in Exclude<keyof I["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
            revision?: number;
            virtual?: boolean;
        } & { [K_71 in Exclude<keyof I["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_72 in Exclude<keyof I["value"], keyof {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[]>]: never; };
        revision?: number;
    } & { [K_73 in Exclude<keyof I, keyof ResourceAllocationList>]: never; }>(base?: I): ResourceAllocationList;
    fromPartial<I_1 extends {
        value?: {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[];
        revision?: number;
    } & {
        value?: {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[] & ({
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        } & {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                } & {
                    [x: number]: {
                        cores?: number;
                    } & {
                        cores?: number;
                    } & { [K_74 in Exclude<keyof I_1["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                } & { [K_75 in Exclude<keyof I_1["value"][number]["procs"]["alloc"], number>]: never; };
            } & { [K_76 in Exclude<keyof I_1["value"][number]["procs"], "alloc">]: never; };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                } & {
                    [x: number]: {
                        capacity?: number;
                    } & {
                        capacity?: number;
                    } & { [K_77 in Exclude<keyof I_1["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                } & { [K_78 in Exclude<keyof I_1["value"][number]["memory"]["alloc"], number>]: never; };
            } & { [K_79 in Exclude<keyof I_1["value"][number]["memory"], "alloc">]: never; };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                } & {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        } & {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            } & {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            } & { [K_80 in Exclude<keyof I_1["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                        } & { [K_81 in Exclude<keyof I_1["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                    } & { [K_82 in Exclude<keyof I_1["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                } & { [K_83 in Exclude<keyof I_1["value"][number]["NICs"]["alloc"], number>]: never; };
            } & { [K_84 in Exclude<keyof I_1["value"][number]["NICs"], "alloc">]: never; };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                } & {
                    [x: number]: {
                        capacity?: number;
                    } & {
                        capacity?: number;
                    } & { [K_85 in Exclude<keyof I_1["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                } & { [K_86 in Exclude<keyof I_1["value"][number]["disks"]["alloc"], number>]: never; };
            } & { [K_87 in Exclude<keyof I_1["value"][number]["disks"], "alloc">]: never; };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            } & {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[] & ({
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                } & {
                    index?: number;
                    addrs?: string[] & string[] & { [K_88 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_89 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                    } & { [K_90 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_91 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_92 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_93 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_94 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_95 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_96 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_97 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_98 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                } & { [K_99 in Exclude<keyof I_1["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_100 in Exclude<keyof I_1["value"][number]["model"]["sockets"], keyof {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[]>]: never; };
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                } & {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & { [K_101 in Exclude<keyof I_1["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_102 in Exclude<keyof I_1["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_103 in Exclude<keyof I_1["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_104 in Exclude<keyof I_1["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_105 in Exclude<keyof I_1["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_106 in Exclude<keyof I_1["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_107 in Exclude<keyof I_1["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_108 in Exclude<keyof I_1["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_109 in Exclude<keyof I_1["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                } & { [K_110 in Exclude<keyof I_1["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & { [K_111 in Exclude<keyof I_1["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_112 in Exclude<keyof I_1["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_113 in Exclude<keyof I_1["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_114 in Exclude<keyof I_1["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_115 in Exclude<keyof I_1["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                } & {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[] & ({
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_116 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_117 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_118 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_119 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_120 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_121 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_122 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_123 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_124 in Exclude<keyof I_1["value"][number]["model"]["NIC"]["ports"], keyof {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[]>]: never; };
                } & { [K_125 in Exclude<keyof I_1["value"][number]["model"]["NIC"], "ports">]: never; };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_126 in Exclude<keyof I_1["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & { [K_127 in Exclude<keyof I_1["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & { [K_128 in Exclude<keyof I_1["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_129 in Exclude<keyof I_1["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_130 in Exclude<keyof I_1["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_131 in Exclude<keyof I_1["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_132 in Exclude<keyof I_1["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_133 in Exclude<keyof I_1["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_134 in Exclude<keyof I_1["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                viz?: {
                    color?: string;
                    size?: number;
                } & {
                    color?: string;
                    size?: number;
                } & { [K_135 in Exclude<keyof I_1["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                } & {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[] & ({
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & { [K_136 in Exclude<keyof I_1["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_137 in Exclude<keyof I_1["value"][number]["model"]["conf"]["routes"], keyof {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[]>]: never; };
                } & { [K_138 in Exclude<keyof I_1["value"][number]["model"]["conf"], "routes">]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_139 in Exclude<keyof I_1["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_140 in Exclude<keyof I_1["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_141 in Exclude<keyof I_1["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_142 in Exclude<keyof I_1["value"][number]["model"]["properties"], "keyvalues">]: never; };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_143 in Exclude<keyof I_1["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
            } & { [K_144 in Exclude<keyof I_1["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
            revision?: number;
            virtual?: boolean;
        } & { [K_145 in Exclude<keyof I_1["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_146 in Exclude<keyof I_1["value"], keyof {
            resource?: string;
            facility?: string;
            mzid?: string;
            node?: string;
            procs?: {
                alloc?: {
                    [x: number]: {
                        cores?: number;
                    };
                };
            };
            memory?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            NICs?: {
                alloc?: {
                    [x: number]: {
                        alloc?: {
                            [x: number]: {
                                name?: string;
                                mac?: string;
                                capacity?: number;
                                VfName?: string;
                                VfAlloc?: boolean;
                            };
                        };
                    };
                };
            };
            disks?: {
                alloc?: {
                    [x: number]: {
                        capacity?: number;
                    };
                };
            };
            model?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            };
            revision?: number;
            virtual?: boolean;
        }[]>]: never; };
        revision?: number;
    } & { [K_147 in Exclude<keyof I_1, keyof ResourceAllocationList>]: never; }>(object: I_1): ResourceAllocationList;
};
export declare const CableAllocationList: {
    encode(message: CableAllocationList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CableAllocationList;
    fromJSON(object: any): CableAllocationList;
    toJSON(message: CableAllocationList): unknown;
    create<I extends {
        value?: {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[];
        revision?: number;
    } & {
        value?: {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[] & ({
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        } & {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        } & { [K in Exclude<keyof I["value"][number], keyof CableAllocation>]: never; })[] & { [K_1 in Exclude<keyof I["value"], keyof {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[]>]: never; };
        revision?: number;
    } & { [K_2 in Exclude<keyof I, keyof CableAllocationList>]: never; }>(base?: I): CableAllocationList;
    fromPartial<I_1 extends {
        value?: {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[];
        revision?: number;
    } & {
        value?: {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[] & ({
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        } & {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        } & { [K_3 in Exclude<keyof I_1["value"][number], keyof CableAllocation>]: never; })[] & { [K_4 in Exclude<keyof I_1["value"], keyof {
            cable?: string;
            facility?: string;
            mzid?: string;
            link?: string;
            capacity?: number;
            revision?: number;
        }[]>]: never; };
        revision?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof CableAllocationList>]: never; }>(object: I_1): CableAllocationList;
};
export declare const AllocationTable: {
    encode(message: AllocationTable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllocationTable;
    fromJSON(object: any): AllocationTable;
    toJSON(message: AllocationTable): unknown;
    create<I extends {
        resource?: {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            };
        };
        cable?: {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            };
        };
    } & {
        resource?: {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            };
        } & {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            } & {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[] & ({
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                } & {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        } & {
                            [x: number]: {
                                cores?: number;
                            } & {
                                cores?: number;
                            } & { [K in Exclude<keyof I["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                        } & { [K_1 in Exclude<keyof I["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                    } & { [K_2 in Exclude<keyof I["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        } & {
                            [x: number]: {
                                capacity?: number;
                            } & {
                                capacity?: number;
                            } & { [K_3 in Exclude<keyof I["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                        } & { [K_4 in Exclude<keyof I["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                    } & { [K_5 in Exclude<keyof I["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        } & {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            } & {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                } & {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    } & {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    } & { [K_6 in Exclude<keyof I["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                } & { [K_7 in Exclude<keyof I["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                            } & { [K_8 in Exclude<keyof I["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                        } & { [K_9 in Exclude<keyof I["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                    } & { [K_10 in Exclude<keyof I["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        } & {
                            [x: number]: {
                                capacity?: number;
                            } & {
                                capacity?: number;
                            } & { [K_11 in Exclude<keyof I["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                        } & { [K_12 in Exclude<keyof I["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                    } & { [K_13 in Exclude<keyof I["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    } & {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[] & ({
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        } & {
                            index?: number;
                            addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_15 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                            } & { [K_16 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_17 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_18 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_19 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_20 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_21 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_22 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_23 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_24 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                        } & { [K_25 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_26 in Exclude<keyof I["resource"][string]["value"][number]["model"]["sockets"], keyof {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[]>]: never; };
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & { [K_27 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_28 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_29 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_30 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_31 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_32 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_33 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_34 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_35 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_36 in Exclude<keyof I["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & { [K_37 in Exclude<keyof I["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_38 in Exclude<keyof I["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_39 in Exclude<keyof I["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_40 in Exclude<keyof I["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_41 in Exclude<keyof I["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        } & {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[] & ({
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_42 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_43 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_44 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_45 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_46 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_47 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_48 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_49 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[]>]: never; };
                        } & { [K_51 in Exclude<keyof I["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_52 in Exclude<keyof I["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & { [K_53 in Exclude<keyof I["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & { [K_54 in Exclude<keyof I["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_55 in Exclude<keyof I["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_56 in Exclude<keyof I["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_57 in Exclude<keyof I["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_58 in Exclude<keyof I["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_59 in Exclude<keyof I["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_60 in Exclude<keyof I["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        viz?: {
                            color?: string;
                            size?: number;
                        } & {
                            color?: string;
                            size?: number;
                        } & { [K_61 in Exclude<keyof I["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        } & {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[] & ({
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & { [K_62 in Exclude<keyof I["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[]>]: never; };
                        } & { [K_64 in Exclude<keyof I["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_65 in Exclude<keyof I["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_66 in Exclude<keyof I["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_67 in Exclude<keyof I["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_68 in Exclude<keyof I["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_69 in Exclude<keyof I["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    } & { [K_70 in Exclude<keyof I["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                    revision?: number;
                    virtual?: boolean;
                } & { [K_71 in Exclude<keyof I["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_72 in Exclude<keyof I["resource"][string]["value"], keyof {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[]>]: never; };
                revision?: number;
            } & { [K_73 in Exclude<keyof I["resource"][string], keyof ResourceAllocationList>]: never; };
        } & { [K_74 in Exclude<keyof I["resource"], string | number>]: never; };
        cable?: {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            };
        } & {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            } & {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[] & ({
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                } & {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                } & { [K_75 in Exclude<keyof I["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_76 in Exclude<keyof I["cable"][string]["value"], keyof {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[]>]: never; };
                revision?: number;
            } & { [K_77 in Exclude<keyof I["cable"][string], keyof CableAllocationList>]: never; };
        } & { [K_78 in Exclude<keyof I["cable"], string | number>]: never; };
    } & { [K_79 in Exclude<keyof I, keyof AllocationTable>]: never; }>(base?: I): AllocationTable;
    fromPartial<I_1 extends {
        resource?: {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            };
        };
        cable?: {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            };
        };
    } & {
        resource?: {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            };
        } & {
            [x: string]: {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[];
                revision?: number;
            } & {
                value?: {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[] & ({
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                } & {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        } & {
                            [x: number]: {
                                cores?: number;
                            } & {
                                cores?: number;
                            } & { [K_80 in Exclude<keyof I_1["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                        } & { [K_81 in Exclude<keyof I_1["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                    } & { [K_82 in Exclude<keyof I_1["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        } & {
                            [x: number]: {
                                capacity?: number;
                            } & {
                                capacity?: number;
                            } & { [K_83 in Exclude<keyof I_1["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                        } & { [K_84 in Exclude<keyof I_1["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                    } & { [K_85 in Exclude<keyof I_1["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        } & {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            } & {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                } & {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    } & {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    } & { [K_86 in Exclude<keyof I_1["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                } & { [K_87 in Exclude<keyof I_1["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                            } & { [K_88 in Exclude<keyof I_1["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                        } & { [K_89 in Exclude<keyof I_1["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                    } & { [K_90 in Exclude<keyof I_1["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    } & {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        } & {
                            [x: number]: {
                                capacity?: number;
                            } & {
                                capacity?: number;
                            } & { [K_91 in Exclude<keyof I_1["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                        } & { [K_92 in Exclude<keyof I_1["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                    } & { [K_93 in Exclude<keyof I_1["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    } & {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[] & ({
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        } & {
                            index?: number;
                            addrs?: string[] & string[] & { [K_94 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_95 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                            } & { [K_96 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_97 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_98 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_99 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_100 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_101 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_102 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_103 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_104 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                        } & { [K_105 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_106 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["sockets"], keyof {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[]>]: never; };
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & { [K_107 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_108 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_109 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_110 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_111 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_112 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_113 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_114 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_115 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_116 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & { [K_117 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_118 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_119 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_120 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_121 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        } & {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[] & ({
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_122 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_123 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_124 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_125 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_126 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_127 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_128 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_129 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_130 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[]>]: never; };
                        } & { [K_131 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_132 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & { [K_133 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & { [K_134 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_135 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_136 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_137 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_138 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_139 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_140 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        viz?: {
                            color?: string;
                            size?: number;
                        } & {
                            color?: string;
                            size?: number;
                        } & { [K_141 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        } & {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[] & ({
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & { [K_142 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_143 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[]>]: never; };
                        } & { [K_144 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_145 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_146 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_147 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_148 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_149 in Exclude<keyof I_1["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    } & { [K_150 in Exclude<keyof I_1["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                    revision?: number;
                    virtual?: boolean;
                } & { [K_151 in Exclude<keyof I_1["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_152 in Exclude<keyof I_1["resource"][string]["value"], keyof {
                    resource?: string;
                    facility?: string;
                    mzid?: string;
                    node?: string;
                    procs?: {
                        alloc?: {
                            [x: number]: {
                                cores?: number;
                            };
                        };
                    };
                    memory?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    NICs?: {
                        alloc?: {
                            [x: number]: {
                                alloc?: {
                                    [x: number]: {
                                        name?: string;
                                        mac?: string;
                                        capacity?: number;
                                        VfName?: string;
                                        VfAlloc?: boolean;
                                    };
                                };
                            };
                        };
                    };
                    disks?: {
                        alloc?: {
                            [x: number]: {
                                capacity?: number;
                            };
                        };
                    };
                    model?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    };
                    revision?: number;
                    virtual?: boolean;
                }[]>]: never; };
                revision?: number;
            } & { [K_153 in Exclude<keyof I_1["resource"][string], keyof ResourceAllocationList>]: never; };
        } & { [K_154 in Exclude<keyof I_1["resource"], string | number>]: never; };
        cable?: {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            };
        } & {
            [x: string]: {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[];
                revision?: number;
            } & {
                value?: {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[] & ({
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                } & {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                } & { [K_155 in Exclude<keyof I_1["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_156 in Exclude<keyof I_1["cable"][string]["value"], keyof {
                    cable?: string;
                    facility?: string;
                    mzid?: string;
                    link?: string;
                    capacity?: number;
                    revision?: number;
                }[]>]: never; };
                revision?: number;
            } & { [K_157 in Exclude<keyof I_1["cable"][string], keyof CableAllocationList>]: never; };
        } & { [K_158 in Exclude<keyof I_1["cable"], string | number>]: never; };
    } & { [K_159 in Exclude<keyof I_1, keyof AllocationTable>]: never; }>(object: I_1): AllocationTable;
};
export declare const AllocationTable_ResourceEntry: {
    encode(message: AllocationTable_ResourceEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllocationTable_ResourceEntry;
    fromJSON(object: any): AllocationTable_ResourceEntry;
    toJSON(message: AllocationTable_ResourceEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[];
            revision?: number;
        };
    } & {
        key?: string;
        value?: {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[];
            revision?: number;
        } & {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[] & ({
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            } & {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    } & {
                        [x: number]: {
                            cores?: number;
                        } & {
                            cores?: number;
                        } & { [K in Exclude<keyof I["value"]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                    } & { [K_1 in Exclude<keyof I["value"]["value"][number]["procs"]["alloc"], number>]: never; };
                } & { [K_2 in Exclude<keyof I["value"]["value"][number]["procs"], "alloc">]: never; };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    } & {
                        [x: number]: {
                            capacity?: number;
                        } & {
                            capacity?: number;
                        } & { [K_3 in Exclude<keyof I["value"]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                    } & { [K_4 in Exclude<keyof I["value"]["value"][number]["memory"]["alloc"], number>]: never; };
                } & { [K_5 in Exclude<keyof I["value"]["value"][number]["memory"], "alloc">]: never; };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    } & {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            } & {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                } & {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                } & { [K_6 in Exclude<keyof I["value"]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                            } & { [K_7 in Exclude<keyof I["value"]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                        } & { [K_8 in Exclude<keyof I["value"]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                    } & { [K_9 in Exclude<keyof I["value"]["value"][number]["NICs"]["alloc"], number>]: never; };
                } & { [K_10 in Exclude<keyof I["value"]["value"][number]["NICs"], "alloc">]: never; };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    } & {
                        [x: number]: {
                            capacity?: number;
                        } & {
                            capacity?: number;
                        } & { [K_11 in Exclude<keyof I["value"]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                    } & { [K_12 in Exclude<keyof I["value"]["value"][number]["disks"]["alloc"], number>]: never; };
                } & { [K_13 in Exclude<keyof I["value"]["value"][number]["disks"], "alloc">]: never; };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_15 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_16 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_17 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_18 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_19 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_20 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_21 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_22 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_23 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_24 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_25 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_26 in Exclude<keyof I["value"]["value"][number]["model"]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_27 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_28 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_29 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_30 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_31 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_32 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_33 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_34 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_35 in Exclude<keyof I["value"]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_36 in Exclude<keyof I["value"]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_37 in Exclude<keyof I["value"]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_38 in Exclude<keyof I["value"]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_39 in Exclude<keyof I["value"]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_40 in Exclude<keyof I["value"]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_41 in Exclude<keyof I["value"]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_42 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_43 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_44 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_45 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_46 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_47 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_48 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_49 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_51 in Exclude<keyof I["value"]["value"][number]["model"]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_52 in Exclude<keyof I["value"]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_53 in Exclude<keyof I["value"]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_54 in Exclude<keyof I["value"]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_55 in Exclude<keyof I["value"]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_56 in Exclude<keyof I["value"]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_57 in Exclude<keyof I["value"]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_58 in Exclude<keyof I["value"]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_59 in Exclude<keyof I["value"]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_60 in Exclude<keyof I["value"]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_61 in Exclude<keyof I["value"]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_62 in Exclude<keyof I["value"]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["value"]["value"][number]["model"]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_64 in Exclude<keyof I["value"]["value"][number]["model"]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_65 in Exclude<keyof I["value"]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_66 in Exclude<keyof I["value"]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_67 in Exclude<keyof I["value"]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_68 in Exclude<keyof I["value"]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_69 in Exclude<keyof I["value"]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_70 in Exclude<keyof I["value"]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                revision?: number;
                virtual?: boolean;
            } & { [K_71 in Exclude<keyof I["value"]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_72 in Exclude<keyof I["value"]["value"], keyof {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[]>]: never; };
            revision?: number;
        } & { [K_73 in Exclude<keyof I["value"], keyof ResourceAllocationList>]: never; };
    } & { [K_74 in Exclude<keyof I, keyof AllocationTable_ResourceEntry>]: never; }>(base?: I): AllocationTable_ResourceEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[];
            revision?: number;
        };
    } & {
        key?: string;
        value?: {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[];
            revision?: number;
        } & {
            value?: {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[] & ({
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            } & {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    } & {
                        [x: number]: {
                            cores?: number;
                        } & {
                            cores?: number;
                        } & { [K_75 in Exclude<keyof I_1["value"]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                    } & { [K_76 in Exclude<keyof I_1["value"]["value"][number]["procs"]["alloc"], number>]: never; };
                } & { [K_77 in Exclude<keyof I_1["value"]["value"][number]["procs"], "alloc">]: never; };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    } & {
                        [x: number]: {
                            capacity?: number;
                        } & {
                            capacity?: number;
                        } & { [K_78 in Exclude<keyof I_1["value"]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                    } & { [K_79 in Exclude<keyof I_1["value"]["value"][number]["memory"]["alloc"], number>]: never; };
                } & { [K_80 in Exclude<keyof I_1["value"]["value"][number]["memory"], "alloc">]: never; };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    } & {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            } & {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                } & {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                } & { [K_81 in Exclude<keyof I_1["value"]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                            } & { [K_82 in Exclude<keyof I_1["value"]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                        } & { [K_83 in Exclude<keyof I_1["value"]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                    } & { [K_84 in Exclude<keyof I_1["value"]["value"][number]["NICs"]["alloc"], number>]: never; };
                } & { [K_85 in Exclude<keyof I_1["value"]["value"][number]["NICs"], "alloc">]: never; };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    } & {
                        [x: number]: {
                            capacity?: number;
                        } & {
                            capacity?: number;
                        } & { [K_86 in Exclude<keyof I_1["value"]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                    } & { [K_87 in Exclude<keyof I_1["value"]["value"][number]["disks"]["alloc"], number>]: never; };
                } & { [K_88 in Exclude<keyof I_1["value"]["value"][number]["disks"], "alloc">]: never; };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K_89 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_90 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_91 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_92 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_93 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_94 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_95 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_96 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_97 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_98 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_99 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_100 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_101 in Exclude<keyof I_1["value"]["value"][number]["model"]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_102 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_103 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_104 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_105 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_106 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_107 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_108 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_109 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_110 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_111 in Exclude<keyof I_1["value"]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_112 in Exclude<keyof I_1["value"]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_113 in Exclude<keyof I_1["value"]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_114 in Exclude<keyof I_1["value"]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_115 in Exclude<keyof I_1["value"]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_116 in Exclude<keyof I_1["value"]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_117 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_118 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_119 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_120 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_121 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_122 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_123 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_124 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_125 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_126 in Exclude<keyof I_1["value"]["value"][number]["model"]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_127 in Exclude<keyof I_1["value"]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_128 in Exclude<keyof I_1["value"]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_129 in Exclude<keyof I_1["value"]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_130 in Exclude<keyof I_1["value"]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_131 in Exclude<keyof I_1["value"]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_132 in Exclude<keyof I_1["value"]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_133 in Exclude<keyof I_1["value"]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_134 in Exclude<keyof I_1["value"]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_135 in Exclude<keyof I_1["value"]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_136 in Exclude<keyof I_1["value"]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_137 in Exclude<keyof I_1["value"]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_138 in Exclude<keyof I_1["value"]["value"][number]["model"]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_139 in Exclude<keyof I_1["value"]["value"][number]["model"]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_140 in Exclude<keyof I_1["value"]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_141 in Exclude<keyof I_1["value"]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_142 in Exclude<keyof I_1["value"]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_143 in Exclude<keyof I_1["value"]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_144 in Exclude<keyof I_1["value"]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_145 in Exclude<keyof I_1["value"]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                revision?: number;
                virtual?: boolean;
            } & { [K_146 in Exclude<keyof I_1["value"]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_147 in Exclude<keyof I_1["value"]["value"], keyof {
                resource?: string;
                facility?: string;
                mzid?: string;
                node?: string;
                procs?: {
                    alloc?: {
                        [x: number]: {
                            cores?: number;
                        };
                    };
                };
                memory?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                NICs?: {
                    alloc?: {
                        [x: number]: {
                            alloc?: {
                                [x: number]: {
                                    name?: string;
                                    mac?: string;
                                    capacity?: number;
                                    VfName?: string;
                                    VfAlloc?: boolean;
                                };
                            };
                        };
                    };
                };
                disks?: {
                    alloc?: {
                        [x: number]: {
                            capacity?: number;
                        };
                    };
                };
                model?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                };
                revision?: number;
                virtual?: boolean;
            }[]>]: never; };
            revision?: number;
        } & { [K_148 in Exclude<keyof I_1["value"], keyof ResourceAllocationList>]: never; };
    } & { [K_149 in Exclude<keyof I_1, keyof AllocationTable_ResourceEntry>]: never; }>(object: I_1): AllocationTable_ResourceEntry;
};
export declare const AllocationTable_CableEntry: {
    encode(message: AllocationTable_CableEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllocationTable_CableEntry;
    fromJSON(object: any): AllocationTable_CableEntry;
    toJSON(message: AllocationTable_CableEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[];
            revision?: number;
        };
    } & {
        key?: string;
        value?: {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[];
            revision?: number;
        } & {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[] & ({
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            } & {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            } & { [K in Exclude<keyof I["value"]["value"][number], keyof CableAllocation>]: never; })[] & { [K_1 in Exclude<keyof I["value"]["value"], keyof {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[]>]: never; };
            revision?: number;
        } & { [K_2 in Exclude<keyof I["value"], keyof CableAllocationList>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof AllocationTable_CableEntry>]: never; }>(base?: I): AllocationTable_CableEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[];
            revision?: number;
        };
    } & {
        key?: string;
        value?: {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[];
            revision?: number;
        } & {
            value?: {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[] & ({
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            } & {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            } & { [K_4 in Exclude<keyof I_1["value"]["value"][number], keyof CableAllocation>]: never; })[] & { [K_5 in Exclude<keyof I_1["value"]["value"], keyof {
                cable?: string;
                facility?: string;
                mzid?: string;
                link?: string;
                capacity?: number;
                revision?: number;
            }[]>]: never; };
            revision?: number;
        } & { [K_6 in Exclude<keyof I_1["value"], keyof CableAllocationList>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof AllocationTable_CableEntry>]: never; }>(object: I_1): AllocationTable_CableEntry;
};
export declare const AllocationRequest: {
    encode(message: AllocationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllocationRequest;
    fromJSON(object: any): AllocationRequest;
    toJSON(message: AllocationRequest): unknown;
    create<I extends {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        };
    } & {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        } & {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[] & ({
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    } & {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            } & {
                                [x: number]: {
                                    cores?: number;
                                } & {
                                    cores?: number;
                                } & { [K in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                            } & { [K_1 in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                        } & { [K_2 in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_3 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                            } & { [K_4 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                        } & { [K_5 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            } & {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                } & {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    } & {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & { [K_6 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                    } & { [K_7 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                                } & { [K_8 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                            } & { [K_9 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                        } & { [K_10 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_11 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                            } & { [K_12 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                        } & { [K_13 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        } & {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[] & ({
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            } & {
                                index?: number;
                                addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                } & {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    } & {
                                        index?: number;
                                    } & { [K_15 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                                } & { [K_16 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_17 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_18 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_19 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_20 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_21 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_22 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_23 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_24 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                            } & { [K_25 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_26 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"], keyof {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[]>]: never; };
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & { [K_27 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & { [K_28 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_29 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_30 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_31 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_32 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_33 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_34 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_35 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_36 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & { [K_37 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_38 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_39 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_40 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_41 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            } & {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[] & ({
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_42 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_43 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_44 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_45 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_46 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_47 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_48 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_49 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[]>]: never; };
                            } & { [K_51 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_52 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & { [K_53 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & { [K_54 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_55 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_56 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_57 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_58 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_59 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_60 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            viz?: {
                                color?: string;
                                size?: number;
                            } & {
                                color?: string;
                                size?: number;
                            } & { [K_61 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            } & {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[] & ({
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & { [K_62 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[]>]: never; };
                            } & { [K_64 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            } & {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                } & {
                                    [x: string]: {
                                        values?: string[];
                                    } & {
                                        values?: string[] & string[] & { [K_65 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                    } & { [K_66 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                                } & { [K_67 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                            } & { [K_68 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_69 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        } & { [K_70 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                        revision?: number;
                        virtual?: boolean;
                    } & { [K_71 in Exclude<keyof I["table"]["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_72 in Exclude<keyof I["table"]["resource"][string]["value"], keyof {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_73 in Exclude<keyof I["table"]["resource"][string], keyof ResourceAllocationList>]: never; };
            } & { [K_74 in Exclude<keyof I["table"]["resource"], string | number>]: never; };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[] & ({
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & { [K_75 in Exclude<keyof I["table"]["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_76 in Exclude<keyof I["table"]["cable"][string]["value"], keyof {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_77 in Exclude<keyof I["table"]["cable"][string], keyof CableAllocationList>]: never; };
            } & { [K_78 in Exclude<keyof I["table"]["cable"], string | number>]: never; };
        } & { [K_79 in Exclude<keyof I["table"], keyof AllocationTable>]: never; };
    } & { [K_80 in Exclude<keyof I, "table">]: never; }>(base?: I): AllocationRequest;
    fromPartial<I_1 extends {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        };
    } & {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        } & {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[] & ({
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    } & {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            } & {
                                [x: number]: {
                                    cores?: number;
                                } & {
                                    cores?: number;
                                } & { [K_81 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                            } & { [K_82 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                        } & { [K_83 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_84 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                            } & { [K_85 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                        } & { [K_86 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            } & {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                } & {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    } & {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & { [K_87 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                    } & { [K_88 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                                } & { [K_89 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                            } & { [K_90 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                        } & { [K_91 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_92 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                            } & { [K_93 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                        } & { [K_94 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        } & {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[] & ({
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            } & {
                                index?: number;
                                addrs?: string[] & string[] & { [K_95 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                } & {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    } & {
                                        index?: number;
                                    } & { [K_96 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                                } & { [K_97 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_98 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_99 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_100 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_101 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_102 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_103 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_104 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_105 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                            } & { [K_106 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_107 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"], keyof {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[]>]: never; };
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & { [K_108 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & { [K_109 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_110 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_111 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_112 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_113 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_114 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_115 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_116 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_117 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & { [K_118 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_119 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_120 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_121 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_122 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            } & {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[] & ({
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_123 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_124 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_125 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_126 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_127 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_128 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_129 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_130 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_131 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[]>]: never; };
                            } & { [K_132 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_133 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & { [K_134 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & { [K_135 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_136 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_137 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_138 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_139 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_140 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_141 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            viz?: {
                                color?: string;
                                size?: number;
                            } & {
                                color?: string;
                                size?: number;
                            } & { [K_142 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            } & {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[] & ({
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & { [K_143 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_144 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[]>]: never; };
                            } & { [K_145 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            } & {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                } & {
                                    [x: string]: {
                                        values?: string[];
                                    } & {
                                        values?: string[] & string[] & { [K_146 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                    } & { [K_147 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                                } & { [K_148 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                            } & { [K_149 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_150 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        } & { [K_151 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                        revision?: number;
                        virtual?: boolean;
                    } & { [K_152 in Exclude<keyof I_1["table"]["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_153 in Exclude<keyof I_1["table"]["resource"][string]["value"], keyof {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_154 in Exclude<keyof I_1["table"]["resource"][string], keyof ResourceAllocationList>]: never; };
            } & { [K_155 in Exclude<keyof I_1["table"]["resource"], string | number>]: never; };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[] & ({
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & { [K_156 in Exclude<keyof I_1["table"]["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_157 in Exclude<keyof I_1["table"]["cable"][string]["value"], keyof {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_158 in Exclude<keyof I_1["table"]["cable"][string], keyof CableAllocationList>]: never; };
            } & { [K_159 in Exclude<keyof I_1["table"]["cable"], string | number>]: never; };
        } & { [K_160 in Exclude<keyof I_1["table"], keyof AllocationTable>]: never; };
    } & { [K_161 in Exclude<keyof I_1, "table">]: never; }>(object: I_1): AllocationRequest;
};
export declare const AllocationResponse: {
    encode(_: AllocationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AllocationResponse;
    fromJSON(_: any): AllocationResponse;
    toJSON(_: AllocationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AllocationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AllocationResponse;
};
export declare const FreeRequest: {
    encode(message: FreeRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreeRequest;
    fromJSON(object: any): FreeRequest;
    toJSON(message: FreeRequest): unknown;
    create<I extends {
        rzid?: string;
    } & {
        rzid?: string;
    } & { [K in Exclude<keyof I, "rzid">]: never; }>(base?: I): FreeRequest;
    fromPartial<I_1 extends {
        rzid?: string;
    } & {
        rzid?: string;
    } & { [K_1 in Exclude<keyof I_1, "rzid">]: never; }>(object: I_1): FreeRequest;
};
export declare const FreeResponse: {
    encode(_: FreeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreeResponse;
    fromJSON(_: any): FreeResponse;
    toJSON(_: FreeResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): FreeResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): FreeResponse;
};
export declare const FetchAllocationTableRequest: {
    encode(_: FetchAllocationTableRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchAllocationTableRequest;
    fromJSON(_: any): FetchAllocationTableRequest;
    toJSON(_: FetchAllocationTableRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): FetchAllocationTableRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): FetchAllocationTableRequest;
};
export declare const FetchAllocationTableResponse: {
    encode(message: FetchAllocationTableResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FetchAllocationTableResponse;
    fromJSON(object: any): FetchAllocationTableResponse;
    toJSON(message: FetchAllocationTableResponse): unknown;
    create<I extends {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        };
    } & {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        } & {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[] & ({
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    } & {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            } & {
                                [x: number]: {
                                    cores?: number;
                                } & {
                                    cores?: number;
                                } & { [K in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                            } & { [K_1 in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                        } & { [K_2 in Exclude<keyof I["table"]["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_3 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                            } & { [K_4 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                        } & { [K_5 in Exclude<keyof I["table"]["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            } & {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                } & {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    } & {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & { [K_6 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                    } & { [K_7 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                                } & { [K_8 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                            } & { [K_9 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                        } & { [K_10 in Exclude<keyof I["table"]["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_11 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                            } & { [K_12 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                        } & { [K_13 in Exclude<keyof I["table"]["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        } & {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[] & ({
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            } & {
                                index?: number;
                                addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                } & {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    } & {
                                        index?: number;
                                    } & { [K_15 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                                } & { [K_16 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_17 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_18 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_19 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_20 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_21 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_22 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_23 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_24 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                            } & { [K_25 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_26 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["sockets"], keyof {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[]>]: never; };
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & { [K_27 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & { [K_28 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_29 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_30 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_31 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_32 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_33 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_34 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_35 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_36 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & { [K_37 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_38 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_39 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_40 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_41 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            } & {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[] & ({
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_42 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_43 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_44 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_45 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_46 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_47 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_48 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_49 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[]>]: never; };
                            } & { [K_51 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_52 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & { [K_53 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & { [K_54 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_55 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_56 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_57 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_58 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_59 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_60 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            viz?: {
                                color?: string;
                                size?: number;
                            } & {
                                color?: string;
                                size?: number;
                            } & { [K_61 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            } & {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[] & ({
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & { [K_62 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[]>]: never; };
                            } & { [K_64 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            } & {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                } & {
                                    [x: string]: {
                                        values?: string[];
                                    } & {
                                        values?: string[] & string[] & { [K_65 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                    } & { [K_66 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                                } & { [K_67 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                            } & { [K_68 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_69 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        } & { [K_70 in Exclude<keyof I["table"]["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                        revision?: number;
                        virtual?: boolean;
                    } & { [K_71 in Exclude<keyof I["table"]["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_72 in Exclude<keyof I["table"]["resource"][string]["value"], keyof {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_73 in Exclude<keyof I["table"]["resource"][string], keyof ResourceAllocationList>]: never; };
            } & { [K_74 in Exclude<keyof I["table"]["resource"], string | number>]: never; };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[] & ({
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & { [K_75 in Exclude<keyof I["table"]["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_76 in Exclude<keyof I["table"]["cable"][string]["value"], keyof {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_77 in Exclude<keyof I["table"]["cable"][string], keyof CableAllocationList>]: never; };
            } & { [K_78 in Exclude<keyof I["table"]["cable"], string | number>]: never; };
        } & { [K_79 in Exclude<keyof I["table"], keyof AllocationTable>]: never; };
    } & { [K_80 in Exclude<keyof I, "table">]: never; }>(base?: I): FetchAllocationTableResponse;
    fromPartial<I_1 extends {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        };
    } & {
        table?: {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            };
        } & {
            resource?: {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[] & ({
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    } & {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            } & {
                                [x: number]: {
                                    cores?: number;
                                } & {
                                    cores?: number;
                                } & { [K_81 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"]["alloc"][number], "cores">]: never; };
                            } & { [K_82 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"]["alloc"], number>]: never; };
                        } & { [K_83 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["procs"], "alloc">]: never; };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_84 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"]["alloc"][number], "capacity">]: never; };
                            } & { [K_85 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"]["alloc"], number>]: never; };
                        } & { [K_86 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["memory"], "alloc">]: never; };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            } & {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                } & {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    } & {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        } & { [K_87 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"][number], keyof import("../../mergetb/xir/v0.3/core").PortAllocation>]: never; };
                                    } & { [K_88 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number]["alloc"], number>]: never; };
                                } & { [K_89 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"][number], "alloc">]: never; };
                            } & { [K_90 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"]["alloc"], number>]: never; };
                        } & { [K_91 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["NICs"], "alloc">]: never; };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        } & {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            } & {
                                [x: number]: {
                                    capacity?: number;
                                } & {
                                    capacity?: number;
                                } & { [K_92 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"]["alloc"][number], "capacity">]: never; };
                            } & { [K_93 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"]["alloc"], number>]: never; };
                        } & { [K_94 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["disks"], "alloc">]: never; };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        } & {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[] & ({
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            } & {
                                index?: number;
                                addrs?: string[] & string[] & { [K_95 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                } & {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    } & {
                                        index?: number;
                                    } & { [K_96 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                                } & { [K_97 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_98 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_99 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_100 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_101 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_102 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_103 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_104 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_105 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                            } & { [K_106 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_107 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["sockets"], keyof {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[]>]: never; };
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                } & { [K_108 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                } & { [K_109 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_110 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_111 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_112 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_113 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_114 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_115 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_116 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_117 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                } & { [K_118 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_119 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_120 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_121 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_122 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            } & {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[] & ({
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                } & {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_123 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_124 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    } & { [K_125 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    } & { [K_126 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    } & { [K_127 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_128 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    } & { [K_129 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                } & { [K_130 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_131 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"]["ports"], keyof {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[]>]: never; };
                            } & { [K_132 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["NIC"], "ports">]: never; };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            } & {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_133 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                } & { [K_134 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                } & { [K_135 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_136 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            } & { [K_137 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_138 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_139 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_140 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_141 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            viz?: {
                                color?: string;
                                size?: number;
                            } & {
                                color?: string;
                                size?: number;
                            } & { [K_142 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            } & {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[] & ({
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                } & { [K_143 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_144 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"]["routes"], keyof {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[]>]: never; };
                            } & { [K_145 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["conf"], "routes">]: never; };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            } & {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                } & {
                                    [x: string]: {
                                        values?: string[];
                                    } & {
                                        values?: string[] & string[] & { [K_146 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                    } & { [K_147 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"][string], "values">]: never; };
                                } & { [K_148 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"]["keyvalues"], string | number>]: never; };
                            } & { [K_149 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["properties"], "keyvalues">]: never; };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_150 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        } & { [K_151 in Exclude<keyof I_1["table"]["resource"][string]["value"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; };
                        revision?: number;
                        virtual?: boolean;
                    } & { [K_152 in Exclude<keyof I_1["table"]["resource"][string]["value"][number], keyof ResourceAllocation>]: never; })[] & { [K_153 in Exclude<keyof I_1["table"]["resource"][string]["value"], keyof {
                        resource?: string;
                        facility?: string;
                        mzid?: string;
                        node?: string;
                        procs?: {
                            alloc?: {
                                [x: number]: {
                                    cores?: number;
                                };
                            };
                        };
                        memory?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        NICs?: {
                            alloc?: {
                                [x: number]: {
                                    alloc?: {
                                        [x: number]: {
                                            name?: string;
                                            mac?: string;
                                            capacity?: number;
                                            VfName?: string;
                                            VfAlloc?: boolean;
                                        };
                                    };
                                };
                            };
                        };
                        disks?: {
                            alloc?: {
                                [x: number]: {
                                    capacity?: number;
                                };
                            };
                        };
                        model?: {
                            id?: string;
                            sockets?: {
                                index?: number;
                                addrs?: string[];
                                endpoint?: {
                                    element?: string;
                                    index?: number;
                                    subref?: {
                                        index?: number;
                                    };
                                };
                                port?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                };
                            }[];
                            proc?: {
                                isa?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ISA;
                                };
                                family?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: string;
                                };
                                BaseFrequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                L2?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                cores?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                threads?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                tdp?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                sockets?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                hyperthreaded?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                            memory?: {
                                type?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                                };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                frequency?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                modules?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            NIC?: {
                                ports?: {
                                    protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                    capacity?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    formFactor?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                    };
                                    queues?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: number;
                                    };
                                    model?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                    };
                                    DPDK?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                    SriovVF?: {
                                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                                        value?: boolean;
                                    };
                                }[];
                            };
                            disks?: {
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                                };
                                diskInterface?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                                };
                                disks?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                            };
                            metal?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            virt?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            image?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            platform?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            viz?: {
                                color?: string;
                                size?: number;
                            };
                            conf?: {
                                routes?: {
                                    src?: string;
                                    gw?: string;
                                    dst?: string;
                                }[];
                            };
                            properties?: {
                                keyvalues?: {
                                    [x: string]: {
                                        values?: string[];
                                    };
                                };
                            };
                            host?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                        };
                        revision?: number;
                        virtual?: boolean;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_154 in Exclude<keyof I_1["table"]["resource"][string], keyof ResourceAllocationList>]: never; };
            } & { [K_155 in Exclude<keyof I_1["table"]["resource"], string | number>]: never; };
            cable?: {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                };
            } & {
                [x: string]: {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[];
                    revision?: number;
                } & {
                    value?: {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[] & ({
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    } & { [K_156 in Exclude<keyof I_1["table"]["cable"][string]["value"][number], keyof CableAllocation>]: never; })[] & { [K_157 in Exclude<keyof I_1["table"]["cable"][string]["value"], keyof {
                        cable?: string;
                        facility?: string;
                        mzid?: string;
                        link?: string;
                        capacity?: number;
                        revision?: number;
                    }[]>]: never; };
                    revision?: number;
                } & { [K_158 in Exclude<keyof I_1["table"]["cable"][string], keyof CableAllocationList>]: never; };
            } & { [K_159 in Exclude<keyof I_1["table"]["cable"], string | number>]: never; };
        } & { [K_160 in Exclude<keyof I_1["table"], keyof AllocationTable>]: never; };
    } & { [K_161 in Exclude<keyof I_1, "table">]: never; }>(object: I_1): FetchAllocationTableResponse;
};
export declare const Pool: {
    encode(message: Pool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Pool;
    fromJSON(object: any): Pool;
    toJSON(message: Pool): unknown;
    create<I extends {
        name?: string;
        description?: string;
        projects?: string[];
        facilities?: {
            [x: string]: {
                resources?: string[];
            };
        };
        creator?: string;
        ver?: number;
        organizations?: string[];
    } & {
        name?: string;
        description?: string;
        projects?: string[] & string[] & { [K in Exclude<keyof I["projects"], keyof string[]>]: never; };
        facilities?: {
            [x: string]: {
                resources?: string[];
            };
        } & {
            [x: string]: {
                resources?: string[];
            } & {
                resources?: string[] & string[] & { [K_1 in Exclude<keyof I["facilities"][string]["resources"], keyof string[]>]: never; };
            } & { [K_2 in Exclude<keyof I["facilities"][string], "resources">]: never; };
        } & { [K_3 in Exclude<keyof I["facilities"], string | number>]: never; };
        creator?: string;
        ver?: number;
        organizations?: string[] & string[] & { [K_4 in Exclude<keyof I["organizations"], keyof string[]>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof Pool>]: never; }>(base?: I): Pool;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
        projects?: string[];
        facilities?: {
            [x: string]: {
                resources?: string[];
            };
        };
        creator?: string;
        ver?: number;
        organizations?: string[];
    } & {
        name?: string;
        description?: string;
        projects?: string[] & string[] & { [K_6 in Exclude<keyof I_1["projects"], keyof string[]>]: never; };
        facilities?: {
            [x: string]: {
                resources?: string[];
            };
        } & {
            [x: string]: {
                resources?: string[];
            } & {
                resources?: string[] & string[] & { [K_7 in Exclude<keyof I_1["facilities"][string]["resources"], keyof string[]>]: never; };
            } & { [K_8 in Exclude<keyof I_1["facilities"][string], "resources">]: never; };
        } & { [K_9 in Exclude<keyof I_1["facilities"], string | number>]: never; };
        creator?: string;
        ver?: number;
        organizations?: string[] & string[] & { [K_10 in Exclude<keyof I_1["organizations"], keyof string[]>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof Pool>]: never; }>(object: I_1): Pool;
};
export declare const Pool_Resources: {
    encode(message: Pool_Resources, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Pool_Resources;
    fromJSON(object: any): Pool_Resources;
    toJSON(message: Pool_Resources): unknown;
    create<I extends {
        resources?: string[];
    } & {
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "resources">]: never; }>(base?: I): Pool_Resources;
    fromPartial<I_1 extends {
        resources?: string[];
    } & {
        resources?: string[] & string[] & { [K_2 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "resources">]: never; }>(object: I_1): Pool_Resources;
};
export declare const Pool_FacilitiesEntry: {
    encode(message: Pool_FacilitiesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Pool_FacilitiesEntry;
    fromJSON(object: any): Pool_FacilitiesEntry;
    toJSON(message: Pool_FacilitiesEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            resources?: string[];
        };
    } & {
        key?: string;
        value?: {
            resources?: string[];
        } & {
            resources?: string[] & string[] & { [K in Exclude<keyof I["value"]["resources"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["value"], "resources">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof Pool_FacilitiesEntry>]: never; }>(base?: I): Pool_FacilitiesEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            resources?: string[];
        };
    } & {
        key?: string;
        value?: {
            resources?: string[];
        } & {
            resources?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["resources"], keyof string[]>]: never; };
        } & { [K_4 in Exclude<keyof I_1["value"], "resources">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof Pool_FacilitiesEntry>]: never; }>(object: I_1): Pool_FacilitiesEntry;
};
export declare const GetPoolsRequest: {
    encode(_: GetPoolsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPoolsRequest;
    fromJSON(_: any): GetPoolsRequest;
    toJSON(_: GetPoolsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetPoolsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetPoolsRequest;
};
export declare const GetPoolsResponse: {
    encode(message: GetPoolsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPoolsResponse;
    fromJSON(object: any): GetPoolsResponse;
    toJSON(message: GetPoolsResponse): unknown;
    create<I extends {
        pools?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[];
    } & {
        pools?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[] & ({
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        } & {
            name?: string;
            description?: string;
            projects?: string[] & string[] & { [K in Exclude<keyof I["pools"][number]["projects"], keyof string[]>]: never; };
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            } & {
                [x: string]: {
                    resources?: string[];
                } & {
                    resources?: string[] & string[] & { [K_1 in Exclude<keyof I["pools"][number]["facilities"][string]["resources"], keyof string[]>]: never; };
                } & { [K_2 in Exclude<keyof I["pools"][number]["facilities"][string], "resources">]: never; };
            } & { [K_3 in Exclude<keyof I["pools"][number]["facilities"], string | number>]: never; };
            creator?: string;
            ver?: number;
            organizations?: string[] & string[] & { [K_4 in Exclude<keyof I["pools"][number]["organizations"], keyof string[]>]: never; };
        } & { [K_5 in Exclude<keyof I["pools"][number], keyof Pool>]: never; })[] & { [K_6 in Exclude<keyof I["pools"], keyof {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I, "pools">]: never; }>(base?: I): GetPoolsResponse;
    fromPartial<I_1 extends {
        pools?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[];
    } & {
        pools?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[] & ({
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        } & {
            name?: string;
            description?: string;
            projects?: string[] & string[] & { [K_8 in Exclude<keyof I_1["pools"][number]["projects"], keyof string[]>]: never; };
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            } & {
                [x: string]: {
                    resources?: string[];
                } & {
                    resources?: string[] & string[] & { [K_9 in Exclude<keyof I_1["pools"][number]["facilities"][string]["resources"], keyof string[]>]: never; };
                } & { [K_10 in Exclude<keyof I_1["pools"][number]["facilities"][string], "resources">]: never; };
            } & { [K_11 in Exclude<keyof I_1["pools"][number]["facilities"], string | number>]: never; };
            creator?: string;
            ver?: number;
            organizations?: string[] & string[] & { [K_12 in Exclude<keyof I_1["pools"][number]["organizations"], keyof string[]>]: never; };
        } & { [K_13 in Exclude<keyof I_1["pools"][number], keyof Pool>]: never; })[] & { [K_14 in Exclude<keyof I_1["pools"], keyof {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        }[]>]: never; };
    } & { [K_15 in Exclude<keyof I_1, "pools">]: never; }>(object: I_1): GetPoolsResponse;
};
export declare const GetPoolRequest: {
    encode(message: GetPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPoolRequest;
    fromJSON(object: any): GetPoolRequest;
    toJSON(message: GetPoolRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetPoolRequest;
};
export declare const GetPoolResponse: {
    encode(message: GetPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPoolResponse;
    fromJSON(object: any): GetPoolResponse;
    toJSON(message: GetPoolResponse): unknown;
    create<I extends {
        pool?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        };
    } & {
        pool?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        } & {
            name?: string;
            description?: string;
            projects?: string[] & string[] & { [K in Exclude<keyof I["pool"]["projects"], keyof string[]>]: never; };
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            } & {
                [x: string]: {
                    resources?: string[];
                } & {
                    resources?: string[] & string[] & { [K_1 in Exclude<keyof I["pool"]["facilities"][string]["resources"], keyof string[]>]: never; };
                } & { [K_2 in Exclude<keyof I["pool"]["facilities"][string], "resources">]: never; };
            } & { [K_3 in Exclude<keyof I["pool"]["facilities"], string | number>]: never; };
            creator?: string;
            ver?: number;
            organizations?: string[] & string[] & { [K_4 in Exclude<keyof I["pool"]["organizations"], keyof string[]>]: never; };
        } & { [K_5 in Exclude<keyof I["pool"], keyof Pool>]: never; };
    } & { [K_6 in Exclude<keyof I, "pool">]: never; }>(base?: I): GetPoolResponse;
    fromPartial<I_1 extends {
        pool?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        };
    } & {
        pool?: {
            name?: string;
            description?: string;
            projects?: string[];
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            };
            creator?: string;
            ver?: number;
            organizations?: string[];
        } & {
            name?: string;
            description?: string;
            projects?: string[] & string[] & { [K_7 in Exclude<keyof I_1["pool"]["projects"], keyof string[]>]: never; };
            facilities?: {
                [x: string]: {
                    resources?: string[];
                };
            } & {
                [x: string]: {
                    resources?: string[];
                } & {
                    resources?: string[] & string[] & { [K_8 in Exclude<keyof I_1["pool"]["facilities"][string]["resources"], keyof string[]>]: never; };
                } & { [K_9 in Exclude<keyof I_1["pool"]["facilities"][string], "resources">]: never; };
            } & { [K_10 in Exclude<keyof I_1["pool"]["facilities"], string | number>]: never; };
            creator?: string;
            ver?: number;
            organizations?: string[] & string[] & { [K_11 in Exclude<keyof I_1["pool"]["organizations"], keyof string[]>]: never; };
        } & { [K_12 in Exclude<keyof I_1["pool"], keyof Pool>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "pool">]: never; }>(object: I_1): GetPoolResponse;
};
export declare const CreatePoolRequest: {
    encode(message: CreatePoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreatePoolRequest;
    fromJSON(object: any): CreatePoolRequest;
    toJSON(message: CreatePoolRequest): unknown;
    create<I extends {
        name?: string;
        description?: string;
        projects?: string[];
        facilities?: string[];
        organizations?: string[];
    } & {
        name?: string;
        description?: string;
        projects?: string[] & string[] & { [K in Exclude<keyof I["projects"], keyof string[]>]: never; };
        facilities?: string[] & string[] & { [K_1 in Exclude<keyof I["facilities"], keyof string[]>]: never; };
        organizations?: string[] & string[] & { [K_2 in Exclude<keyof I["organizations"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof CreatePoolRequest>]: never; }>(base?: I): CreatePoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
        projects?: string[];
        facilities?: string[];
        organizations?: string[];
    } & {
        name?: string;
        description?: string;
        projects?: string[] & string[] & { [K_4 in Exclude<keyof I_1["projects"], keyof string[]>]: never; };
        facilities?: string[] & string[] & { [K_5 in Exclude<keyof I_1["facilities"], keyof string[]>]: never; };
        organizations?: string[] & string[] & { [K_6 in Exclude<keyof I_1["organizations"], keyof string[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof CreatePoolRequest>]: never; }>(object: I_1): CreatePoolRequest;
};
export declare const CreatePoolResponse: {
    encode(_: CreatePoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreatePoolResponse;
    fromJSON(_: any): CreatePoolResponse;
    toJSON(_: CreatePoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CreatePoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CreatePoolResponse;
};
export declare const DeletePoolRequest: {
    encode(message: DeletePoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeletePoolRequest;
    fromJSON(object: any): DeletePoolRequest;
    toJSON(message: DeletePoolRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): DeletePoolRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): DeletePoolRequest;
};
export declare const DeletePoolResponse: {
    encode(_: DeletePoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeletePoolResponse;
    fromJSON(_: any): DeletePoolResponse;
    toJSON(_: DeletePoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeletePoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeletePoolResponse;
};
export declare const AddProjectToPoolRequest: {
    encode(message: AddProjectToPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectToPoolRequest;
    fromJSON(object: any): AddProjectToPoolRequest;
    toJSON(message: AddProjectToPoolRequest): unknown;
    create<I extends {
        name?: string;
        project?: string;
    } & {
        name?: string;
        project?: string;
    } & { [K in Exclude<keyof I, keyof AddProjectToPoolRequest>]: never; }>(base?: I): AddProjectToPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        project?: string;
    } & {
        name?: string;
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof AddProjectToPoolRequest>]: never; }>(object: I_1): AddProjectToPoolRequest;
};
export declare const AddProjectToPoolResponse: {
    encode(_: AddProjectToPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectToPoolResponse;
    fromJSON(_: any): AddProjectToPoolResponse;
    toJSON(_: AddProjectToPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddProjectToPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddProjectToPoolResponse;
};
export declare const RemoveProjectFromPoolRequest: {
    encode(message: RemoveProjectFromPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectFromPoolRequest;
    fromJSON(object: any): RemoveProjectFromPoolRequest;
    toJSON(message: RemoveProjectFromPoolRequest): unknown;
    create<I extends {
        name?: string;
        project?: string;
    } & {
        name?: string;
        project?: string;
    } & { [K in Exclude<keyof I, keyof RemoveProjectFromPoolRequest>]: never; }>(base?: I): RemoveProjectFromPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        project?: string;
    } & {
        name?: string;
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RemoveProjectFromPoolRequest>]: never; }>(object: I_1): RemoveProjectFromPoolRequest;
};
export declare const RemoveProjectFromPoolResponse: {
    encode(_: RemoveProjectFromPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveProjectFromPoolResponse;
    fromJSON(_: any): RemoveProjectFromPoolResponse;
    toJSON(_: RemoveProjectFromPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): RemoveProjectFromPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): RemoveProjectFromPoolResponse;
};
export declare const AddOrganizationToPoolRequest: {
    encode(message: AddOrganizationToPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrganizationToPoolRequest;
    fromJSON(object: any): AddOrganizationToPoolRequest;
    toJSON(message: AddOrganizationToPoolRequest): unknown;
    create<I extends {
        name?: string;
        organization?: string;
    } & {
        name?: string;
        organization?: string;
    } & { [K in Exclude<keyof I, keyof AddOrganizationToPoolRequest>]: never; }>(base?: I): AddOrganizationToPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        organization?: string;
    } & {
        name?: string;
        organization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof AddOrganizationToPoolRequest>]: never; }>(object: I_1): AddOrganizationToPoolRequest;
};
export declare const AddOrganizationToPoolResponse: {
    encode(_: AddOrganizationToPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrganizationToPoolResponse;
    fromJSON(_: any): AddOrganizationToPoolResponse;
    toJSON(_: AddOrganizationToPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddOrganizationToPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddOrganizationToPoolResponse;
};
export declare const RemoveOrganizationFromPoolRequest: {
    encode(message: RemoveOrganizationFromPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrganizationFromPoolRequest;
    fromJSON(object: any): RemoveOrganizationFromPoolRequest;
    toJSON(message: RemoveOrganizationFromPoolRequest): unknown;
    create<I extends {
        name?: string;
        organization?: string;
    } & {
        name?: string;
        organization?: string;
    } & { [K in Exclude<keyof I, keyof RemoveOrganizationFromPoolRequest>]: never; }>(base?: I): RemoveOrganizationFromPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        organization?: string;
    } & {
        name?: string;
        organization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RemoveOrganizationFromPoolRequest>]: never; }>(object: I_1): RemoveOrganizationFromPoolRequest;
};
export declare const RemoveOrganizationFromPoolResponse: {
    encode(_: RemoveOrganizationFromPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveOrganizationFromPoolResponse;
    fromJSON(_: any): RemoveOrganizationFromPoolResponse;
    toJSON(_: RemoveOrganizationFromPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): RemoveOrganizationFromPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): RemoveOrganizationFromPoolResponse;
};
export declare const AddFacilityToPoolRequest: {
    encode(message: AddFacilityToPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddFacilityToPoolRequest;
    fromJSON(object: any): AddFacilityToPoolRequest;
    toJSON(message: AddFacilityToPoolRequest): unknown;
    create<I extends {
        name?: string;
        facility?: string;
        resources?: string[];
    } & {
        name?: string;
        facility?: string;
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof AddFacilityToPoolRequest>]: never; }>(base?: I): AddFacilityToPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        facility?: string;
        resources?: string[];
    } & {
        name?: string;
        facility?: string;
        resources?: string[] & string[] & { [K_2 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof AddFacilityToPoolRequest>]: never; }>(object: I_1): AddFacilityToPoolRequest;
};
export declare const AddFacilityToPoolResponse: {
    encode(_: AddFacilityToPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddFacilityToPoolResponse;
    fromJSON(_: any): AddFacilityToPoolResponse;
    toJSON(_: AddFacilityToPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddFacilityToPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddFacilityToPoolResponse;
};
export declare const RemoveFacilityFromPoolRequest: {
    encode(message: RemoveFacilityFromPoolRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFacilityFromPoolRequest;
    fromJSON(object: any): RemoveFacilityFromPoolRequest;
    toJSON(message: RemoveFacilityFromPoolRequest): unknown;
    create<I extends {
        name?: string;
        facility?: string;
    } & {
        name?: string;
        facility?: string;
    } & { [K in Exclude<keyof I, keyof RemoveFacilityFromPoolRequest>]: never; }>(base?: I): RemoveFacilityFromPoolRequest;
    fromPartial<I_1 extends {
        name?: string;
        facility?: string;
    } & {
        name?: string;
        facility?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RemoveFacilityFromPoolRequest>]: never; }>(object: I_1): RemoveFacilityFromPoolRequest;
};
export declare const RemoveFacilityFromPoolResponse: {
    encode(_: RemoveFacilityFromPoolResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RemoveFacilityFromPoolResponse;
    fromJSON(_: any): RemoveFacilityFromPoolResponse;
    toJSON(_: RemoveFacilityFromPoolResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): RemoveFacilityFromPoolResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): RemoveFacilityFromPoolResponse;
};
export declare const UpdatePoolResourcesRequest: {
    encode(message: UpdatePoolResourcesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePoolResourcesRequest;
    fromJSON(object: any): UpdatePoolResourcesRequest;
    toJSON(message: UpdatePoolResourcesRequest): unknown;
    create<I extends {
        pool?: string;
        facility?: string;
        resources?: string[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        pool?: string;
        facility?: string;
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_1 in Exclude<keyof I["patchstrategy"], "strategy">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof UpdatePoolResourcesRequest>]: never; }>(base?: I): UpdatePoolResourcesRequest;
    fromPartial<I_1 extends {
        pool?: string;
        facility?: string;
        resources?: string[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        pool?: string;
        facility?: string;
        resources?: string[] & string[] & { [K_3 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_4 in Exclude<keyof I_1["patchstrategy"], "strategy">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof UpdatePoolResourcesRequest>]: never; }>(object: I_1): UpdatePoolResourcesRequest;
};
export declare const UpdatePoolResourcesResponse: {
    encode(message: UpdatePoolResourcesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdatePoolResourcesResponse;
    fromJSON(object: any): UpdatePoolResourcesResponse;
    toJSON(message: UpdatePoolResourcesResponse): unknown;
    create<I extends {
        pool?: string;
        facility?: string;
        resources?: string[];
    } & {
        pool?: string;
        facility?: string;
        resources?: string[] & string[] & { [K in Exclude<keyof I["resources"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof UpdatePoolResourcesResponse>]: never; }>(base?: I): UpdatePoolResourcesResponse;
    fromPartial<I_1 extends {
        pool?: string;
        facility?: string;
        resources?: string[];
    } & {
        pool?: string;
        facility?: string;
        resources?: string[] & string[] & { [K_2 in Exclude<keyof I_1["resources"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof UpdatePoolResourcesResponse>]: never; }>(object: I_1): UpdatePoolResourcesResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
