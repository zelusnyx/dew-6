import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface XDCStorage {
    /** identify an XDC */
    name: string;
    project: string;
    creator: string;
    /** xdc configuration */
    memLimit: number;
    /** in cores */
    cpuLimit: number;
    image: string;
    /** Housekeeping */
    ver: number;
    materialization: string;
}
export interface XDCInfo {
    name: string;
    url: string;
    fqdn: string;
    creator: string;
    memlimit: number;
    cpulimit: number;
    image: string;
    materialization: string;
}
export interface ListXDCsRequest {
    project: string;
}
export interface ListXDCsResponse {
    XDCs: XDCInfo[];
}
export interface CreateXDCRequest {
    project: string;
    xdc: string;
    image: string;
    memlimit: number;
    cpulimit: number;
}
export interface CreateXDCResponse {
}
export interface DeleteXDCRequest {
    project: string;
    xdc: string;
}
export interface DeleteXDCResponse {
}
export interface AttachXDCRequest {
    xdc: string;
    project: string;
    experiment: string;
    realization: string;
}
export interface AttachXDCResponse {
}
export interface DetachXDCRequest {
    xdc: string;
    project: string;
    experiment: string;
    realization: string;
}
export interface DetachXDCResponse {
}
export interface XDCTunnelGatewayRequest {
    site: string;
}
export interface XDCTunnelGateway {
    key: string;
    endpoint: string;
    allowedips: string;
}
export interface XDCTunnelGatewayResponse {
    Gateways: XDCTunnelGateway[];
}
export interface GetXDCJumpHostsRequest {
}
export interface GetXDCJumpHostsResponse {
    JumpHosts: SSHJump[];
}
export interface SSHJump {
    name: string;
    port: number;
    fqdn: string;
    ver: number;
}
export interface JupyterCfg {
    token: string;
    /** full path including token, e.g, https://foo-bar.xdc.mergetb.io/jupyter/lab?token=... */
    url: string;
    host: string;
    domain: string;
    ver: number;
}
export declare const XDCStorage: {
    encode(message: XDCStorage, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XDCStorage;
    fromJSON(object: any): XDCStorage;
    toJSON(message: XDCStorage): unknown;
    create<I extends {
        name?: string;
        project?: string;
        creator?: string;
        memLimit?: number;
        cpuLimit?: number;
        image?: string;
        ver?: number;
        materialization?: string;
    } & {
        name?: string;
        project?: string;
        creator?: string;
        memLimit?: number;
        cpuLimit?: number;
        image?: string;
        ver?: number;
        materialization?: string;
    } & { [K in Exclude<keyof I, keyof XDCStorage>]: never; }>(base?: I): XDCStorage;
    fromPartial<I_1 extends {
        name?: string;
        project?: string;
        creator?: string;
        memLimit?: number;
        cpuLimit?: number;
        image?: string;
        ver?: number;
        materialization?: string;
    } & {
        name?: string;
        project?: string;
        creator?: string;
        memLimit?: number;
        cpuLimit?: number;
        image?: string;
        ver?: number;
        materialization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof XDCStorage>]: never; }>(object: I_1): XDCStorage;
};
export declare const XDCInfo: {
    encode(message: XDCInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XDCInfo;
    fromJSON(object: any): XDCInfo;
    toJSON(message: XDCInfo): unknown;
    create<I extends {
        name?: string;
        url?: string;
        fqdn?: string;
        creator?: string;
        memlimit?: number;
        cpulimit?: number;
        image?: string;
        materialization?: string;
    } & {
        name?: string;
        url?: string;
        fqdn?: string;
        creator?: string;
        memlimit?: number;
        cpulimit?: number;
        image?: string;
        materialization?: string;
    } & { [K in Exclude<keyof I, keyof XDCInfo>]: never; }>(base?: I): XDCInfo;
    fromPartial<I_1 extends {
        name?: string;
        url?: string;
        fqdn?: string;
        creator?: string;
        memlimit?: number;
        cpulimit?: number;
        image?: string;
        materialization?: string;
    } & {
        name?: string;
        url?: string;
        fqdn?: string;
        creator?: string;
        memlimit?: number;
        cpulimit?: number;
        image?: string;
        materialization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof XDCInfo>]: never; }>(object: I_1): XDCInfo;
};
export declare const ListXDCsRequest: {
    encode(message: ListXDCsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListXDCsRequest;
    fromJSON(object: any): ListXDCsRequest;
    toJSON(message: ListXDCsRequest): unknown;
    create<I extends {
        project?: string;
    } & {
        project?: string;
    } & { [K in Exclude<keyof I, "project">]: never; }>(base?: I): ListXDCsRequest;
    fromPartial<I_1 extends {
        project?: string;
    } & {
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, "project">]: never; }>(object: I_1): ListXDCsRequest;
};
export declare const ListXDCsResponse: {
    encode(message: ListXDCsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListXDCsResponse;
    fromJSON(object: any): ListXDCsResponse;
    toJSON(message: ListXDCsResponse): unknown;
    create<I extends {
        XDCs?: {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[];
    } & {
        XDCs?: {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[] & ({
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        } & {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        } & { [K in Exclude<keyof I["XDCs"][number], keyof XDCInfo>]: never; })[] & { [K_1 in Exclude<keyof I["XDCs"], keyof {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "XDCs">]: never; }>(base?: I): ListXDCsResponse;
    fromPartial<I_1 extends {
        XDCs?: {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[];
    } & {
        XDCs?: {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[] & ({
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        } & {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        } & { [K_3 in Exclude<keyof I_1["XDCs"][number], keyof XDCInfo>]: never; })[] & { [K_4 in Exclude<keyof I_1["XDCs"], keyof {
            name?: string;
            url?: string;
            fqdn?: string;
            creator?: string;
            memlimit?: number;
            cpulimit?: number;
            image?: string;
            materialization?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "XDCs">]: never; }>(object: I_1): ListXDCsResponse;
};
export declare const CreateXDCRequest: {
    encode(message: CreateXDCRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateXDCRequest;
    fromJSON(object: any): CreateXDCRequest;
    toJSON(message: CreateXDCRequest): unknown;
    create<I extends {
        project?: string;
        xdc?: string;
        image?: string;
        memlimit?: number;
        cpulimit?: number;
    } & {
        project?: string;
        xdc?: string;
        image?: string;
        memlimit?: number;
        cpulimit?: number;
    } & { [K in Exclude<keyof I, keyof CreateXDCRequest>]: never; }>(base?: I): CreateXDCRequest;
    fromPartial<I_1 extends {
        project?: string;
        xdc?: string;
        image?: string;
        memlimit?: number;
        cpulimit?: number;
    } & {
        project?: string;
        xdc?: string;
        image?: string;
        memlimit?: number;
        cpulimit?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CreateXDCRequest>]: never; }>(object: I_1): CreateXDCRequest;
};
export declare const CreateXDCResponse: {
    encode(_: CreateXDCResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateXDCResponse;
    fromJSON(_: any): CreateXDCResponse;
    toJSON(_: CreateXDCResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CreateXDCResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CreateXDCResponse;
};
export declare const DeleteXDCRequest: {
    encode(message: DeleteXDCRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteXDCRequest;
    fromJSON(object: any): DeleteXDCRequest;
    toJSON(message: DeleteXDCRequest): unknown;
    create<I extends {
        project?: string;
        xdc?: string;
    } & {
        project?: string;
        xdc?: string;
    } & { [K in Exclude<keyof I, keyof DeleteXDCRequest>]: never; }>(base?: I): DeleteXDCRequest;
    fromPartial<I_1 extends {
        project?: string;
        xdc?: string;
    } & {
        project?: string;
        xdc?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteXDCRequest>]: never; }>(object: I_1): DeleteXDCRequest;
};
export declare const DeleteXDCResponse: {
    encode(_: DeleteXDCResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteXDCResponse;
    fromJSON(_: any): DeleteXDCResponse;
    toJSON(_: DeleteXDCResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteXDCResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteXDCResponse;
};
export declare const AttachXDCRequest: {
    encode(message: AttachXDCRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttachXDCRequest;
    fromJSON(object: any): AttachXDCRequest;
    toJSON(message: AttachXDCRequest): unknown;
    create<I extends {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & { [K in Exclude<keyof I, keyof AttachXDCRequest>]: never; }>(base?: I): AttachXDCRequest;
    fromPartial<I_1 extends {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof AttachXDCRequest>]: never; }>(object: I_1): AttachXDCRequest;
};
export declare const AttachXDCResponse: {
    encode(_: AttachXDCResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AttachXDCResponse;
    fromJSON(_: any): AttachXDCResponse;
    toJSON(_: AttachXDCResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AttachXDCResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AttachXDCResponse;
};
export declare const DetachXDCRequest: {
    encode(message: DetachXDCRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DetachXDCRequest;
    fromJSON(object: any): DetachXDCRequest;
    toJSON(message: DetachXDCRequest): unknown;
    create<I extends {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & { [K in Exclude<keyof I, keyof DetachXDCRequest>]: never; }>(base?: I): DetachXDCRequest;
    fromPartial<I_1 extends {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & {
        xdc?: string;
        project?: string;
        experiment?: string;
        realization?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DetachXDCRequest>]: never; }>(object: I_1): DetachXDCRequest;
};
export declare const DetachXDCResponse: {
    encode(_: DetachXDCResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DetachXDCResponse;
    fromJSON(_: any): DetachXDCResponse;
    toJSON(_: DetachXDCResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DetachXDCResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DetachXDCResponse;
};
export declare const XDCTunnelGatewayRequest: {
    encode(message: XDCTunnelGatewayRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XDCTunnelGatewayRequest;
    fromJSON(object: any): XDCTunnelGatewayRequest;
    toJSON(message: XDCTunnelGatewayRequest): unknown;
    create<I extends {
        site?: string;
    } & {
        site?: string;
    } & { [K in Exclude<keyof I, "site">]: never; }>(base?: I): XDCTunnelGatewayRequest;
    fromPartial<I_1 extends {
        site?: string;
    } & {
        site?: string;
    } & { [K_1 in Exclude<keyof I_1, "site">]: never; }>(object: I_1): XDCTunnelGatewayRequest;
};
export declare const XDCTunnelGateway: {
    encode(message: XDCTunnelGateway, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XDCTunnelGateway;
    fromJSON(object: any): XDCTunnelGateway;
    toJSON(message: XDCTunnelGateway): unknown;
    create<I extends {
        key?: string;
        endpoint?: string;
        allowedips?: string;
    } & {
        key?: string;
        endpoint?: string;
        allowedips?: string;
    } & { [K in Exclude<keyof I, keyof XDCTunnelGateway>]: never; }>(base?: I): XDCTunnelGateway;
    fromPartial<I_1 extends {
        key?: string;
        endpoint?: string;
        allowedips?: string;
    } & {
        key?: string;
        endpoint?: string;
        allowedips?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof XDCTunnelGateway>]: never; }>(object: I_1): XDCTunnelGateway;
};
export declare const XDCTunnelGatewayResponse: {
    encode(message: XDCTunnelGatewayResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XDCTunnelGatewayResponse;
    fromJSON(object: any): XDCTunnelGatewayResponse;
    toJSON(message: XDCTunnelGatewayResponse): unknown;
    create<I extends {
        Gateways?: {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[];
    } & {
        Gateways?: {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[] & ({
            key?: string;
            endpoint?: string;
            allowedips?: string;
        } & {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        } & { [K in Exclude<keyof I["Gateways"][number], keyof XDCTunnelGateway>]: never; })[] & { [K_1 in Exclude<keyof I["Gateways"], keyof {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "Gateways">]: never; }>(base?: I): XDCTunnelGatewayResponse;
    fromPartial<I_1 extends {
        Gateways?: {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[];
    } & {
        Gateways?: {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[] & ({
            key?: string;
            endpoint?: string;
            allowedips?: string;
        } & {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        } & { [K_3 in Exclude<keyof I_1["Gateways"][number], keyof XDCTunnelGateway>]: never; })[] & { [K_4 in Exclude<keyof I_1["Gateways"], keyof {
            key?: string;
            endpoint?: string;
            allowedips?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "Gateways">]: never; }>(object: I_1): XDCTunnelGatewayResponse;
};
export declare const GetXDCJumpHostsRequest: {
    encode(_: GetXDCJumpHostsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetXDCJumpHostsRequest;
    fromJSON(_: any): GetXDCJumpHostsRequest;
    toJSON(_: GetXDCJumpHostsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetXDCJumpHostsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetXDCJumpHostsRequest;
};
export declare const GetXDCJumpHostsResponse: {
    encode(message: GetXDCJumpHostsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetXDCJumpHostsResponse;
    fromJSON(object: any): GetXDCJumpHostsResponse;
    toJSON(message: GetXDCJumpHostsResponse): unknown;
    create<I extends {
        JumpHosts?: {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[];
    } & {
        JumpHosts?: {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[] & ({
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        } & {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        } & { [K in Exclude<keyof I["JumpHosts"][number], keyof SSHJump>]: never; })[] & { [K_1 in Exclude<keyof I["JumpHosts"], keyof {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "JumpHosts">]: never; }>(base?: I): GetXDCJumpHostsResponse;
    fromPartial<I_1 extends {
        JumpHosts?: {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[];
    } & {
        JumpHosts?: {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[] & ({
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        } & {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        } & { [K_3 in Exclude<keyof I_1["JumpHosts"][number], keyof SSHJump>]: never; })[] & { [K_4 in Exclude<keyof I_1["JumpHosts"], keyof {
            name?: string;
            port?: number;
            fqdn?: string;
            ver?: number;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "JumpHosts">]: never; }>(object: I_1): GetXDCJumpHostsResponse;
};
export declare const SSHJump: {
    encode(message: SSHJump, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SSHJump;
    fromJSON(object: any): SSHJump;
    toJSON(message: SSHJump): unknown;
    create<I extends {
        name?: string;
        port?: number;
        fqdn?: string;
        ver?: number;
    } & {
        name?: string;
        port?: number;
        fqdn?: string;
        ver?: number;
    } & { [K in Exclude<keyof I, keyof SSHJump>]: never; }>(base?: I): SSHJump;
    fromPartial<I_1 extends {
        name?: string;
        port?: number;
        fqdn?: string;
        ver?: number;
    } & {
        name?: string;
        port?: number;
        fqdn?: string;
        ver?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof SSHJump>]: never; }>(object: I_1): SSHJump;
};
export declare const JupyterCfg: {
    encode(message: JupyterCfg, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): JupyterCfg;
    fromJSON(object: any): JupyterCfg;
    toJSON(message: JupyterCfg): unknown;
    create<I extends {
        token?: string;
        url?: string;
        host?: string;
        domain?: string;
        ver?: number;
    } & {
        token?: string;
        url?: string;
        host?: string;
        domain?: string;
        ver?: number;
    } & { [K in Exclude<keyof I, keyof JupyterCfg>]: never; }>(base?: I): JupyterCfg;
    fromPartial<I_1 extends {
        token?: string;
        url?: string;
        host?: string;
        domain?: string;
        ver?: number;
    } & {
        token?: string;
        url?: string;
        host?: string;
        domain?: string;
        ver?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof JupyterCfg>]: never; }>(object: I_1): JupyterCfg;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
