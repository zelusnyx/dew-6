"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.Diagnostic_DataEntry = exports.Diagnostic = exports.VLANVfPort = exports.VLANTapPort = exports.VLANTrunkPort = exports.VLANAccessPort = exports.BGPPeer = exports.Vtep = exports.VFInterface = exports.VLANInterface = exports.VirtualFunction = exports.PhysicalInterface = exports.EvpnMulticastAdv = exports.EvpnMacAdv = exports.Evpn = exports.BridgeMember = exports.Waypoint = exports.Endpoint = exports.LinkSegment = exports.ActuatorRealization = exports.SensorRealization = exports.BondRealization = exports.PhyoRealization = exports.LinkRealization_SegmentsEntry = exports.LinkRealization = exports.NodeRealization = exports.Neighbor = exports.BlockPoolAllocations = exports.InfranetEmbedding = exports.InfrapodConfig = exports.Realization_BondsEntry = exports.Realization_ActuatorsEntry = exports.Realization_SensorsEntry = exports.Realization_PhyosEntry = exports.Realization_LinksEntry = exports.Realization_NodesEntry = exports.Realization = exports.realizeResponse_CodeToJSON = exports.realizeResponse_CodeFromJSON = exports.RealizeResponse_Code = exports.reservationDuration_codeToJSON = exports.reservationDuration_codeFromJSON = exports.ReservationDuration_code = exports.nodeRealization_KindToJSON = exports.nodeRealization_KindFromJSON = exports.NodeRealization_Kind = exports.diagnosticLevelToJSON = exports.diagnosticLevelFromJSON = exports.DiagnosticLevel = exports.protobufPackage = void 0;
exports.UpdateRealizationResponse = exports.UpdateRealizationRequest = exports.GetResourcesResponse = exports.GetResourcesRequest = exports.Resource = exports.Allocation = exports.RelinquishResponse = exports.RelinquishRequest = exports.RealizeResponse = exports.ReservationDuration = exports.RealizeRequest = exports.GetRealizationResponse = exports.GetRealizationRequest = exports.GetRealizationsResponse = exports.GetRealizationsRequest = exports.RealizationResult = exports.LinkEmulationParams = exports.LinkEmulation = exports.DiagnosticList = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var timestamp_1 = require("../../google/protobuf/timestamp");
var core_1 = require("../../mergetb/xir/v0.3/core");
var internal_1 = require("./internal");
var workspace_types_1 = require("./workspace_types");
exports.protobufPackage = "portal.v1";
var DiagnosticLevel;
(function (DiagnosticLevel) {
    DiagnosticLevel[DiagnosticLevel["DiagUnspec"] = 0] = "DiagUnspec";
    DiagnosticLevel[DiagnosticLevel["Error"] = 1] = "Error";
    DiagnosticLevel[DiagnosticLevel["Warning"] = 2] = "Warning";
    DiagnosticLevel[DiagnosticLevel["Info"] = 3] = "Info";
    DiagnosticLevel[DiagnosticLevel["Debug"] = 4] = "Debug";
    DiagnosticLevel[DiagnosticLevel["Trace"] = 5] = "Trace";
    DiagnosticLevel[DiagnosticLevel["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DiagnosticLevel = exports.DiagnosticLevel || (exports.DiagnosticLevel = {}));
function diagnosticLevelFromJSON(object) {
    switch (object) {
        case 0:
        case "DiagUnspec":
            return DiagnosticLevel.DiagUnspec;
        case 1:
        case "Error":
            return DiagnosticLevel.Error;
        case 2:
        case "Warning":
            return DiagnosticLevel.Warning;
        case 3:
        case "Info":
            return DiagnosticLevel.Info;
        case 4:
        case "Debug":
            return DiagnosticLevel.Debug;
        case 5:
        case "Trace":
            return DiagnosticLevel.Trace;
        case -1:
        case "UNRECOGNIZED":
        default:
            return DiagnosticLevel.UNRECOGNIZED;
    }
}
exports.diagnosticLevelFromJSON = diagnosticLevelFromJSON;
function diagnosticLevelToJSON(object) {
    switch (object) {
        case DiagnosticLevel.DiagUnspec:
            return "DiagUnspec";
        case DiagnosticLevel.Error:
            return "Error";
        case DiagnosticLevel.Warning:
            return "Warning";
        case DiagnosticLevel.Info:
            return "Info";
        case DiagnosticLevel.Debug:
            return "Debug";
        case DiagnosticLevel.Trace:
            return "Trace";
        case DiagnosticLevel.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.diagnosticLevelToJSON = diagnosticLevelToJSON;
var NodeRealization_Kind;
(function (NodeRealization_Kind) {
    NodeRealization_Kind[NodeRealization_Kind["Undefined"] = 0] = "Undefined";
    NodeRealization_Kind[NodeRealization_Kind["BareMetal"] = 1] = "BareMetal";
    NodeRealization_Kind[NodeRealization_Kind["VirtualMachine"] = 2] = "VirtualMachine";
    NodeRealization_Kind[NodeRealization_Kind["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(NodeRealization_Kind = exports.NodeRealization_Kind || (exports.NodeRealization_Kind = {}));
function nodeRealization_KindFromJSON(object) {
    switch (object) {
        case 0:
        case "Undefined":
            return NodeRealization_Kind.Undefined;
        case 1:
        case "BareMetal":
            return NodeRealization_Kind.BareMetal;
        case 2:
        case "VirtualMachine":
            return NodeRealization_Kind.VirtualMachine;
        case -1:
        case "UNRECOGNIZED":
        default:
            return NodeRealization_Kind.UNRECOGNIZED;
    }
}
exports.nodeRealization_KindFromJSON = nodeRealization_KindFromJSON;
function nodeRealization_KindToJSON(object) {
    switch (object) {
        case NodeRealization_Kind.Undefined:
            return "Undefined";
        case NodeRealization_Kind.BareMetal:
            return "BareMetal";
        case NodeRealization_Kind.VirtualMachine:
            return "VirtualMachine";
        case NodeRealization_Kind.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.nodeRealization_KindToJSON = nodeRealization_KindToJSON;
var ReservationDuration_code;
(function (ReservationDuration_code) {
    /** given - Use given duration string */
    ReservationDuration_code[ReservationDuration_code["given"] = 0] = "given";
    /** never - Never expire */
    ReservationDuration_code[ReservationDuration_code["never"] = 1] = "never";
    ReservationDuration_code[ReservationDuration_code["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ReservationDuration_code = exports.ReservationDuration_code || (exports.ReservationDuration_code = {}));
function reservationDuration_codeFromJSON(object) {
    switch (object) {
        case 0:
        case "given":
            return ReservationDuration_code.given;
        case 1:
        case "never":
            return ReservationDuration_code.never;
        case -1:
        case "UNRECOGNIZED":
        default:
            return ReservationDuration_code.UNRECOGNIZED;
    }
}
exports.reservationDuration_codeFromJSON = reservationDuration_codeFromJSON;
function reservationDuration_codeToJSON(object) {
    switch (object) {
        case ReservationDuration_code.given:
            return "given";
        case ReservationDuration_code.never:
            return "never";
        case ReservationDuration_code.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.reservationDuration_codeToJSON = reservationDuration_codeToJSON;
var RealizeResponse_Code;
(function (RealizeResponse_Code) {
    RealizeResponse_Code[RealizeResponse_Code["Ok"] = 0] = "Ok";
    RealizeResponse_Code[RealizeResponse_Code["BadXir"] = 1] = "BadXir";
    RealizeResponse_Code[RealizeResponse_Code["Unrealizable"] = 2] = "Unrealizable";
    RealizeResponse_Code[RealizeResponse_Code["InternalError"] = 3] = "InternalError";
    RealizeResponse_Code[RealizeResponse_Code["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RealizeResponse_Code = exports.RealizeResponse_Code || (exports.RealizeResponse_Code = {}));
function realizeResponse_CodeFromJSON(object) {
    switch (object) {
        case 0:
        case "Ok":
            return RealizeResponse_Code.Ok;
        case 1:
        case "BadXir":
            return RealizeResponse_Code.BadXir;
        case 2:
        case "Unrealizable":
            return RealizeResponse_Code.Unrealizable;
        case 3:
        case "InternalError":
            return RealizeResponse_Code.InternalError;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RealizeResponse_Code.UNRECOGNIZED;
    }
}
exports.realizeResponse_CodeFromJSON = realizeResponse_CodeFromJSON;
function realizeResponse_CodeToJSON(object) {
    switch (object) {
        case RealizeResponse_Code.Ok:
            return "Ok";
        case RealizeResponse_Code.BadXir:
            return "BadXir";
        case RealizeResponse_Code.Unrealizable:
            return "Unrealizable";
        case RealizeResponse_Code.InternalError:
            return "InternalError";
        case RealizeResponse_Code.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.realizeResponse_CodeToJSON = realizeResponse_CodeToJSON;
function createBaseRealization() {
    return {
        complete: false,
        id: "",
        eid: "",
        pid: "",
        xhash: "",
        nodes: {},
        links: {},
        phyos: {},
        sensors: {},
        actuators: {},
        bonds: {},
        infranet: undefined,
        creator: "",
        ver: 0,
        linkEmulation: undefined,
        created: undefined,
        expires: undefined
    };
}
exports.Realization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.complete === true) {
            writer.uint32(8).bool(message.complete);
        }
        if (message.id !== "") {
            writer.uint32(18).string(message.id);
        }
        if (message.eid !== "") {
            writer.uint32(26).string(message.eid);
        }
        if (message.pid !== "") {
            writer.uint32(34).string(message.pid);
        }
        if (message.xhash !== "") {
            writer.uint32(42).string(message.xhash);
        }
        Object.entries(message.nodes).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_NodesEntry.encode({ key: key, value: value }, writer.uint32(50).fork()).ldelim();
        });
        Object.entries(message.links).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_LinksEntry.encode({ key: key, value: value }, writer.uint32(58).fork()).ldelim();
        });
        Object.entries(message.phyos).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_PhyosEntry.encode({ key: key, value: value }, writer.uint32(66).fork()).ldelim();
        });
        Object.entries(message.sensors).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_SensorsEntry.encode({ key: key, value: value }, writer.uint32(74).fork()).ldelim();
        });
        Object.entries(message.actuators).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_ActuatorsEntry.encode({ key: key, value: value }, writer.uint32(82).fork()).ldelim();
        });
        Object.entries(message.bonds).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Realization_BondsEntry.encode({ key: key, value: value }, writer.uint32(90).fork()).ldelim();
        });
        if (message.infranet !== undefined) {
            exports.InfranetEmbedding.encode(message.infranet, writer.uint32(98).fork()).ldelim();
        }
        if (message.creator !== "") {
            writer.uint32(106).string(message.creator);
        }
        if (message.ver !== 0) {
            writer.uint32(112).int64(message.ver);
        }
        if (message.linkEmulation !== undefined) {
            exports.LinkEmulationParams.encode(message.linkEmulation, writer.uint32(122).fork()).ldelim();
        }
        if (message.created !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.created), writer.uint32(130).fork()).ldelim();
        }
        if (message.expires !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expires), writer.uint32(138).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.complete = reader.bool();
                    break;
                case 2:
                    message.id = reader.string();
                    break;
                case 3:
                    message.eid = reader.string();
                    break;
                case 4:
                    message.pid = reader.string();
                    break;
                case 5:
                    message.xhash = reader.string();
                    break;
                case 6:
                    var entry6 = exports.Realization_NodesEntry.decode(reader, reader.uint32());
                    if (entry6.value !== undefined) {
                        message.nodes[entry6.key] = entry6.value;
                    }
                    break;
                case 7:
                    var entry7 = exports.Realization_LinksEntry.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.links[entry7.key] = entry7.value;
                    }
                    break;
                case 8:
                    var entry8 = exports.Realization_PhyosEntry.decode(reader, reader.uint32());
                    if (entry8.value !== undefined) {
                        message.phyos[entry8.key] = entry8.value;
                    }
                    break;
                case 9:
                    var entry9 = exports.Realization_SensorsEntry.decode(reader, reader.uint32());
                    if (entry9.value !== undefined) {
                        message.sensors[entry9.key] = entry9.value;
                    }
                    break;
                case 10:
                    var entry10 = exports.Realization_ActuatorsEntry.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.actuators[entry10.key] = entry10.value;
                    }
                    break;
                case 11:
                    var entry11 = exports.Realization_BondsEntry.decode(reader, reader.uint32());
                    if (entry11.value !== undefined) {
                        message.bonds[entry11.key] = entry11.value;
                    }
                    break;
                case 12:
                    message.infranet = exports.InfranetEmbedding.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.creator = reader.string();
                    break;
                case 14:
                    message.ver = longToNumber(reader.int64());
                    break;
                case 15:
                    message.linkEmulation = exports.LinkEmulationParams.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.created = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 17:
                    message.expires = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            complete: isSet(object.complete) ? Boolean(object.complete) : false,
            id: isSet(object.id) ? String(object.id) : "",
            eid: isSet(object.eid) ? String(object.eid) : "",
            pid: isSet(object.pid) ? String(object.pid) : "",
            xhash: isSet(object.xhash) ? String(object.xhash) : "",
            nodes: isObject(object.nodes)
                ? Object.entries(object.nodes).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.NodeRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            links: isObject(object.links)
                ? Object.entries(object.links).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.LinkRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            phyos: isObject(object.phyos)
                ? Object.entries(object.phyos).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.PhyoRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            sensors: isObject(object.sensors)
                ? Object.entries(object.sensors).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.SensorRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            actuators: isObject(object.actuators)
                ? Object.entries(object.actuators).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.ActuatorRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            bonds: isObject(object.bonds)
                ? Object.entries(object.bonds).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = exports.BondRealization.fromJSON(value);
                    return acc;
                }, {})
                : {},
            infranet: isSet(object.infranet) ? exports.InfranetEmbedding.fromJSON(object.infranet) : undefined,
            creator: isSet(object.creator) ? String(object.creator) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0,
            linkEmulation: isSet(object.linkEmulation) ? exports.LinkEmulationParams.fromJSON(object.linkEmulation) : undefined,
            created: isSet(object.created) ? fromJsonTimestamp(object.created) : undefined,
            expires: isSet(object.expires) ? fromJsonTimestamp(object.expires) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.complete !== undefined && (obj.complete = message.complete);
        message.id !== undefined && (obj.id = message.id);
        message.eid !== undefined && (obj.eid = message.eid);
        message.pid !== undefined && (obj.pid = message.pid);
        message.xhash !== undefined && (obj.xhash = message.xhash);
        obj.nodes = {};
        if (message.nodes) {
            Object.entries(message.nodes).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.nodes[k] = exports.NodeRealization.toJSON(v);
            });
        }
        obj.links = {};
        if (message.links) {
            Object.entries(message.links).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.links[k] = exports.LinkRealization.toJSON(v);
            });
        }
        obj.phyos = {};
        if (message.phyos) {
            Object.entries(message.phyos).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.phyos[k] = exports.PhyoRealization.toJSON(v);
            });
        }
        obj.sensors = {};
        if (message.sensors) {
            Object.entries(message.sensors).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.sensors[k] = exports.SensorRealization.toJSON(v);
            });
        }
        obj.actuators = {};
        if (message.actuators) {
            Object.entries(message.actuators).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.actuators[k] = exports.ActuatorRealization.toJSON(v);
            });
        }
        obj.bonds = {};
        if (message.bonds) {
            Object.entries(message.bonds).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.bonds[k] = exports.BondRealization.toJSON(v);
            });
        }
        message.infranet !== undefined &&
            (obj.infranet = message.infranet ? exports.InfranetEmbedding.toJSON(message.infranet) : undefined);
        message.creator !== undefined && (obj.creator = message.creator);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        message.linkEmulation !== undefined &&
            (obj.linkEmulation = message.linkEmulation ? exports.LinkEmulationParams.toJSON(message.linkEmulation) : undefined);
        message.created !== undefined && (obj.created = message.created.toISOString());
        message.expires !== undefined && (obj.expires = message.expires.toISOString());
        return obj;
    },
    create: function (base) {
        return exports.Realization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
        var message = createBaseRealization();
        message.complete = (_a = object.complete) !== null && _a !== void 0 ? _a : false;
        message.id = (_b = object.id) !== null && _b !== void 0 ? _b : "";
        message.eid = (_c = object.eid) !== null && _c !== void 0 ? _c : "";
        message.pid = (_d = object.pid) !== null && _d !== void 0 ? _d : "";
        message.xhash = (_e = object.xhash) !== null && _e !== void 0 ? _e : "";
        message.nodes = Object.entries((_f = object.nodes) !== null && _f !== void 0 ? _f : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.NodeRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.links = Object.entries((_g = object.links) !== null && _g !== void 0 ? _g : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.LinkRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.phyos = Object.entries((_h = object.phyos) !== null && _h !== void 0 ? _h : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.PhyoRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.sensors = Object.entries((_j = object.sensors) !== null && _j !== void 0 ? _j : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.SensorRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.actuators = Object.entries((_k = object.actuators) !== null && _k !== void 0 ? _k : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.ActuatorRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.bonds = Object.entries((_l = object.bonds) !== null && _l !== void 0 ? _l : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = exports.BondRealization.fromPartial(value);
            }
            return acc;
        }, {});
        message.infranet = (object.infranet !== undefined && object.infranet !== null)
            ? exports.InfranetEmbedding.fromPartial(object.infranet)
            : undefined;
        message.creator = (_m = object.creator) !== null && _m !== void 0 ? _m : "";
        message.ver = (_o = object.ver) !== null && _o !== void 0 ? _o : 0;
        message.linkEmulation = (object.linkEmulation !== undefined && object.linkEmulation !== null)
            ? exports.LinkEmulationParams.fromPartial(object.linkEmulation)
            : undefined;
        message.created = (_p = object.created) !== null && _p !== void 0 ? _p : undefined;
        message.expires = (_q = object.expires) !== null && _q !== void 0 ? _q : undefined;
        return message;
    }
};
function createBaseRealization_NodesEntry() {
    return { key: "", value: undefined };
}
exports.Realization_NodesEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.NodeRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_NodesEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.NodeRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.NodeRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.NodeRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_NodesEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_NodesEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.NodeRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseRealization_LinksEntry() {
    return { key: "", value: undefined };
}
exports.Realization_LinksEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.LinkRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_LinksEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.LinkRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.LinkRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.LinkRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_LinksEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_LinksEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.LinkRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseRealization_PhyosEntry() {
    return { key: "", value: undefined };
}
exports.Realization_PhyosEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.PhyoRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_PhyosEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.PhyoRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.PhyoRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.PhyoRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_PhyosEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_PhyosEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.PhyoRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseRealization_SensorsEntry() {
    return { key: "", value: undefined };
}
exports.Realization_SensorsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.SensorRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_SensorsEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.SensorRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.SensorRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.SensorRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_SensorsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_SensorsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.SensorRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseRealization_ActuatorsEntry() {
    return { key: "", value: undefined };
}
exports.Realization_ActuatorsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.ActuatorRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_ActuatorsEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.ActuatorRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.ActuatorRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.ActuatorRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_ActuatorsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_ActuatorsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.ActuatorRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseRealization_BondsEntry() {
    return { key: "", value: undefined };
}
exports.Realization_BondsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== undefined) {
            exports.BondRealization.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealization_BondsEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = exports.BondRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? exports.BondRealization.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value ? exports.BondRealization.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Realization_BondsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseRealization_BondsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.BondRealization.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBaseInfrapodConfig() {
    return { phy: "", addr: "", subnet: "", gw: "", vid: 0, mgmtPhy: "", vni: 0 };
}
exports.InfrapodConfig = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.phy !== "") {
            writer.uint32(10).string(message.phy);
        }
        if (message.addr !== "") {
            writer.uint32(18).string(message.addr);
        }
        if (message.subnet !== "") {
            writer.uint32(26).string(message.subnet);
        }
        if (message.gw !== "") {
            writer.uint32(34).string(message.gw);
        }
        if (message.vid !== 0) {
            writer.uint32(40).uint32(message.vid);
        }
        if (message.mgmtPhy !== "") {
            writer.uint32(50).string(message.mgmtPhy);
        }
        if (message.vni !== 0) {
            writer.uint32(56).uint32(message.vni);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseInfrapodConfig();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.phy = reader.string();
                    break;
                case 2:
                    message.addr = reader.string();
                    break;
                case 3:
                    message.subnet = reader.string();
                    break;
                case 4:
                    message.gw = reader.string();
                    break;
                case 5:
                    message.vid = reader.uint32();
                    break;
                case 6:
                    message.mgmtPhy = reader.string();
                    break;
                case 7:
                    message.vni = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            phy: isSet(object.phy) ? String(object.phy) : "",
            addr: isSet(object.addr) ? String(object.addr) : "",
            subnet: isSet(object.subnet) ? String(object.subnet) : "",
            gw: isSet(object.gw) ? String(object.gw) : "",
            vid: isSet(object.vid) ? Number(object.vid) : 0,
            mgmtPhy: isSet(object.mgmtPhy) ? String(object.mgmtPhy) : "",
            vni: isSet(object.vni) ? Number(object.vni) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.phy !== undefined && (obj.phy = message.phy);
        message.addr !== undefined && (obj.addr = message.addr);
        message.subnet !== undefined && (obj.subnet = message.subnet);
        message.gw !== undefined && (obj.gw = message.gw);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        message.mgmtPhy !== undefined && (obj.mgmtPhy = message.mgmtPhy);
        message.vni !== undefined && (obj.vni = Math.round(message.vni));
        return obj;
    },
    create: function (base) {
        return exports.InfrapodConfig.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseInfrapodConfig();
        message.phy = (_a = object.phy) !== null && _a !== void 0 ? _a : "";
        message.addr = (_b = object.addr) !== null && _b !== void 0 ? _b : "";
        message.subnet = (_c = object.subnet) !== null && _c !== void 0 ? _c : "";
        message.gw = (_d = object.gw) !== null && _d !== void 0 ? _d : "";
        message.vid = (_e = object.vid) !== null && _e !== void 0 ? _e : 0;
        message.mgmtPhy = (_f = object.mgmtPhy) !== null && _f !== void 0 ? _f : "";
        message.vni = (_g = object.vni) !== null && _g !== void 0 ? _g : 0;
        return message;
    }
};
function createBaseInfranetEmbedding() {
    return { InfrapodServer: "" };
}
exports.InfranetEmbedding = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.InfrapodServer !== "") {
            writer.uint32(10).string(message.InfrapodServer);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseInfranetEmbedding();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.InfrapodServer = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { InfrapodServer: isSet(object.InfrapodServer) ? String(object.InfrapodServer) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.InfrapodServer !== undefined && (obj.InfrapodServer = message.InfrapodServer);
        return obj;
    },
    create: function (base) {
        return exports.InfranetEmbedding.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseInfranetEmbedding();
        message.InfrapodServer = (_a = object.InfrapodServer) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseBlockPoolAllocations() {
    return { id: "", allocations: undefined };
}
exports.BlockPoolAllocations = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.allocations !== undefined) {
            internal_1.CountSet.encode(message.allocations, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBlockPoolAllocations();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.allocations = internal_1.CountSet.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            allocations: isSet(object.allocations) ? internal_1.CountSet.fromJSON(object.allocations) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.allocations !== undefined &&
            (obj.allocations = message.allocations ? internal_1.CountSet.toJSON(message.allocations) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.BlockPoolAllocations.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseBlockPoolAllocations();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.allocations = (object.allocations !== undefined && object.allocations !== null)
            ? internal_1.CountSet.fromPartial(object.allocations)
            : undefined;
        return message;
    }
};
function createBaseNeighbor() {
    return { prefixV4: "", prefixV6: "", nexthop: "", mac: "", name: "" };
}
exports.Neighbor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.prefixV4 !== "") {
            writer.uint32(10).string(message.prefixV4);
        }
        if (message.prefixV6 !== "") {
            writer.uint32(18).string(message.prefixV6);
        }
        if (message.nexthop !== "") {
            writer.uint32(26).string(message.nexthop);
        }
        if (message.mac !== "") {
            writer.uint32(34).string(message.mac);
        }
        if (message.name !== "") {
            writer.uint32(42).string(message.name);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNeighbor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.prefixV4 = reader.string();
                    break;
                case 2:
                    message.prefixV6 = reader.string();
                    break;
                case 3:
                    message.nexthop = reader.string();
                    break;
                case 4:
                    message.mac = reader.string();
                    break;
                case 5:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            prefixV4: isSet(object.prefixV4) ? String(object.prefixV4) : "",
            prefixV6: isSet(object.prefixV6) ? String(object.prefixV6) : "",
            nexthop: isSet(object.nexthop) ? String(object.nexthop) : "",
            mac: isSet(object.mac) ? String(object.mac) : "",
            name: isSet(object.name) ? String(object.name) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.prefixV4 !== undefined && (obj.prefixV4 = message.prefixV4);
        message.prefixV6 !== undefined && (obj.prefixV6 = message.prefixV6);
        message.nexthop !== undefined && (obj.nexthop = message.nexthop);
        message.mac !== undefined && (obj.mac = message.mac);
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    create: function (base) {
        return exports.Neighbor.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseNeighbor();
        message.prefixV4 = (_a = object.prefixV4) !== null && _a !== void 0 ? _a : "";
        message.prefixV6 = (_b = object.prefixV6) !== null && _b !== void 0 ? _b : "";
        message.nexthop = (_c = object.nexthop) !== null && _c !== void 0 ? _c : "";
        message.mac = (_d = object.mac) !== null && _d !== void 0 ? _d : "";
        message.name = (_e = object.name) !== null && _e !== void 0 ? _e : "";
        return message;
    }
};
function createBaseNodeRealization() {
    return { node: undefined, resource: undefined, vmAlloc: undefined, facility: "", kind: 0, infranetAddr: "" };
}
exports.NodeRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.node !== undefined) {
            core_1.Node.encode(message.node, writer.uint32(10).fork()).ldelim();
        }
        if (message.resource !== undefined) {
            core_1.Resource.encode(message.resource, writer.uint32(18).fork()).ldelim();
        }
        if (message.vmAlloc !== undefined) {
            core_1.ResourceAllocation.encode(message.vmAlloc, writer.uint32(26).fork()).ldelim();
        }
        if (message.facility !== "") {
            writer.uint32(34).string(message.facility);
        }
        if (message.kind !== 0) {
            writer.uint32(40).int32(message.kind);
        }
        if (message.infranetAddr !== "") {
            writer.uint32(50).string(message.infranetAddr);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNodeRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.node = core_1.Node.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.resource = core_1.Resource.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.vmAlloc = core_1.ResourceAllocation.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.facility = reader.string();
                    break;
                case 5:
                    message.kind = reader.int32();
                    break;
                case 6:
                    message.infranetAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            node: isSet(object.node) ? core_1.Node.fromJSON(object.node) : undefined,
            resource: isSet(object.resource) ? core_1.Resource.fromJSON(object.resource) : undefined,
            vmAlloc: isSet(object.vmAlloc) ? core_1.ResourceAllocation.fromJSON(object.vmAlloc) : undefined,
            facility: isSet(object.facility) ? String(object.facility) : "",
            kind: isSet(object.kind) ? nodeRealization_KindFromJSON(object.kind) : 0,
            infranetAddr: isSet(object.infranetAddr) ? String(object.infranetAddr) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.node !== undefined && (obj.node = message.node ? core_1.Node.toJSON(message.node) : undefined);
        message.resource !== undefined &&
            (obj.resource = message.resource ? core_1.Resource.toJSON(message.resource) : undefined);
        message.vmAlloc !== undefined &&
            (obj.vmAlloc = message.vmAlloc ? core_1.ResourceAllocation.toJSON(message.vmAlloc) : undefined);
        message.facility !== undefined && (obj.facility = message.facility);
        message.kind !== undefined && (obj.kind = nodeRealization_KindToJSON(message.kind));
        message.infranetAddr !== undefined && (obj.infranetAddr = message.infranetAddr);
        return obj;
    },
    create: function (base) {
        return exports.NodeRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseNodeRealization();
        message.node = (object.node !== undefined && object.node !== null) ? core_1.Node.fromPartial(object.node) : undefined;
        message.resource = (object.resource !== undefined && object.resource !== null)
            ? core_1.Resource.fromPartial(object.resource)
            : undefined;
        message.vmAlloc = (object.vmAlloc !== undefined && object.vmAlloc !== null)
            ? core_1.ResourceAllocation.fromPartial(object.vmAlloc)
            : undefined;
        message.facility = (_a = object.facility) !== null && _a !== void 0 ? _a : "";
        message.kind = (_b = object.kind) !== null && _b !== void 0 ? _b : 0;
        message.infranetAddr = (_c = object.infranetAddr) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseLinkRealization() {
    return { link: undefined, segments: {} };
}
exports.LinkRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.link !== undefined) {
            core_1.Link.encode(message.link, writer.uint32(10).fork()).ldelim();
        }
        Object.entries(message.segments).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.LinkRealization_SegmentsEntry.encode({ key: key, value: value }, writer.uint32(18).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLinkRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.link = core_1.Link.decode(reader, reader.uint32());
                    break;
                case 2:
                    var entry2 = exports.LinkRealization_SegmentsEntry.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.segments[entry2.key] = entry2.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            link: isSet(object.link) ? core_1.Link.fromJSON(object.link) : undefined,
            segments: isObject(object.segments)
                ? Object.entries(object.segments).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[Number(key)] = exports.LinkSegment.fromJSON(value);
                    return acc;
                }, {})
                : {}
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.link !== undefined && (obj.link = message.link ? core_1.Link.toJSON(message.link) : undefined);
        obj.segments = {};
        if (message.segments) {
            Object.entries(message.segments).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.segments[k] = exports.LinkSegment.toJSON(v);
            });
        }
        return obj;
    },
    create: function (base) {
        return exports.LinkRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseLinkRealization();
        message.link = (object.link !== undefined && object.link !== null) ? core_1.Link.fromPartial(object.link) : undefined;
        message.segments = Object.entries((_a = object.segments) !== null && _a !== void 0 ? _a : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[Number(key)] = exports.LinkSegment.fromPartial(value);
            }
            return acc;
        }, {});
        return message;
    }
};
function createBaseLinkRealization_SegmentsEntry() {
    return { key: 0, value: undefined };
}
exports.LinkRealization_SegmentsEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== 0) {
            writer.uint32(8).uint64(message.key);
        }
        if (message.value !== undefined) {
            exports.LinkSegment.encode(message.value, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLinkRealization_SegmentsEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = longToNumber(reader.uint64());
                    break;
                case 2:
                    message.value = exports.LinkSegment.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? Number(object.key) : 0,
            value: isSet(object.value) ? exports.LinkSegment.fromJSON(object.value) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = Math.round(message.key));
        message.value !== undefined && (obj.value = message.value ? exports.LinkSegment.toJSON(message.value) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.LinkRealization_SegmentsEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseLinkRealization_SegmentsEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : 0;
        message.value = (object.value !== undefined && object.value !== null)
            ? exports.LinkSegment.fromPartial(object.value)
            : undefined;
        return message;
    }
};
function createBasePhyoRealization() {
    return { simulator: "", facility: "" };
}
exports.PhyoRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.simulator !== "") {
            writer.uint32(10).string(message.simulator);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePhyoRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.simulator = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            simulator: isSet(object.simulator) ? String(object.simulator) : "",
            facility: isSet(object.facility) ? String(object.facility) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.simulator !== undefined && (obj.simulator = message.simulator);
        message.facility !== undefined && (obj.facility = message.facility);
        return obj;
    },
    create: function (base) {
        return exports.PhyoRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBasePhyoRealization();
        message.simulator = (_a = object.simulator) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseBondRealization() {
    return { simulator: "", facility: "" };
}
exports.BondRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.simulator !== "") {
            writer.uint32(10).string(message.simulator);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBondRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.simulator = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            simulator: isSet(object.simulator) ? String(object.simulator) : "",
            facility: isSet(object.facility) ? String(object.facility) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.simulator !== undefined && (obj.simulator = message.simulator);
        message.facility !== undefined && (obj.facility = message.facility);
        return obj;
    },
    create: function (base) {
        return exports.BondRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseBondRealization();
        message.simulator = (_a = object.simulator) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseSensorRealization() {
    return { simulator: "", facility: "" };
}
exports.SensorRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.simulator !== "") {
            writer.uint32(10).string(message.simulator);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSensorRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.simulator = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            simulator: isSet(object.simulator) ? String(object.simulator) : "",
            facility: isSet(object.facility) ? String(object.facility) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.simulator !== undefined && (obj.simulator = message.simulator);
        message.facility !== undefined && (obj.facility = message.facility);
        return obj;
    },
    create: function (base) {
        return exports.SensorRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseSensorRealization();
        message.simulator = (_a = object.simulator) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseActuatorRealization() {
    return { simulator: "", facility: "" };
}
exports.ActuatorRealization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.simulator !== "") {
            writer.uint32(10).string(message.simulator);
        }
        if (message.facility !== "") {
            writer.uint32(18).string(message.facility);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseActuatorRealization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.simulator = reader.string();
                    break;
                case 2:
                    message.facility = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            simulator: isSet(object.simulator) ? String(object.simulator) : "",
            facility: isSet(object.facility) ? String(object.facility) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.simulator !== undefined && (obj.simulator = message.simulator);
        message.facility !== undefined && (obj.facility = message.facility);
        return obj;
    },
    create: function (base) {
        return exports.ActuatorRealization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseActuatorRealization();
        message.simulator = (_a = object.simulator) !== null && _a !== void 0 ? _a : "";
        message.facility = (_b = object.facility) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseLinkSegment() {
    return { endpoints: [], waypoints: [] };
}
exports.LinkSegment = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.endpoints; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Endpoint.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (var _b = 0, _c = message.waypoints; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.Waypoint.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLinkSegment();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.endpoints.push(exports.Endpoint.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.waypoints.push(exports.Waypoint.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            endpoints: Array.isArray(object === null || object === void 0 ? void 0 : object.endpoints) ? object.endpoints.map(function (e) { return exports.Endpoint.fromJSON(e); }) : [],
            waypoints: Array.isArray(object === null || object === void 0 ? void 0 : object.waypoints) ? object.waypoints.map(function (e) { return exports.Waypoint.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.endpoints) {
            obj.endpoints = message.endpoints.map(function (e) { return e ? exports.Endpoint.toJSON(e) : undefined; });
        }
        else {
            obj.endpoints = [];
        }
        if (message.waypoints) {
            obj.waypoints = message.waypoints.map(function (e) { return e ? exports.Waypoint.toJSON(e) : undefined; });
        }
        else {
            obj.waypoints = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.LinkSegment.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseLinkSegment();
        message.endpoints = ((_a = object.endpoints) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Endpoint.fromPartial(e); })) || [];
        message.waypoints = ((_b = object.waypoints) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Waypoint.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseEndpoint() {
    return {
        facility: "",
        host: "",
        node: "",
        bridge: undefined,
        mac: "",
        phy: undefined,
        vlan: undefined,
        vtep: undefined,
        vf: undefined,
        trunk: undefined,
        evpn: undefined,
        mtu: 0,
        virtual: false
    };
}
exports.Endpoint = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.facility !== "") {
            writer.uint32(10).string(message.facility);
        }
        if (message.host !== "") {
            writer.uint32(18).string(message.host);
        }
        if (message.node !== "") {
            writer.uint32(26).string(message.node);
        }
        if (message.bridge !== undefined) {
            exports.BridgeMember.encode(message.bridge, writer.uint32(34).fork()).ldelim();
        }
        if (message.mac !== "") {
            writer.uint32(42).string(message.mac);
        }
        if (message.phy !== undefined) {
            exports.PhysicalInterface.encode(message.phy, writer.uint32(50).fork()).ldelim();
        }
        if (message.vlan !== undefined) {
            exports.VLANInterface.encode(message.vlan, writer.uint32(58).fork()).ldelim();
        }
        if (message.vtep !== undefined) {
            exports.Vtep.encode(message.vtep, writer.uint32(66).fork()).ldelim();
        }
        if (message.vf !== undefined) {
            exports.VFInterface.encode(message.vf, writer.uint32(98).fork()).ldelim();
        }
        if (message.trunk !== undefined) {
            exports.VLANTrunkPort.encode(message.trunk, writer.uint32(106).fork()).ldelim();
        }
        if (message.evpn !== undefined) {
            exports.Evpn.encode(message.evpn, writer.uint32(74).fork()).ldelim();
        }
        if (message.mtu !== 0) {
            writer.uint32(80).uint32(message.mtu);
        }
        if (message.virtual === true) {
            writer.uint32(88).bool(message.virtual);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEndpoint();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.facility = reader.string();
                    break;
                case 2:
                    message.host = reader.string();
                    break;
                case 3:
                    message.node = reader.string();
                    break;
                case 4:
                    message.bridge = exports.BridgeMember.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.mac = reader.string();
                    break;
                case 6:
                    message.phy = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.vlan = exports.VLANInterface.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.vtep = exports.Vtep.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.vf = exports.VFInterface.decode(reader, reader.uint32());
                    break;
                case 13:
                    message.trunk = exports.VLANTrunkPort.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.evpn = exports.Evpn.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.mtu = reader.uint32();
                    break;
                case 11:
                    message.virtual = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            facility: isSet(object.facility) ? String(object.facility) : "",
            host: isSet(object.host) ? String(object.host) : "",
            node: isSet(object.node) ? String(object.node) : "",
            bridge: isSet(object.bridge) ? exports.BridgeMember.fromJSON(object.bridge) : undefined,
            mac: isSet(object.mac) ? String(object.mac) : "",
            phy: isSet(object.phy) ? exports.PhysicalInterface.fromJSON(object.phy) : undefined,
            vlan: isSet(object.vlan) ? exports.VLANInterface.fromJSON(object.vlan) : undefined,
            vtep: isSet(object.vtep) ? exports.Vtep.fromJSON(object.vtep) : undefined,
            vf: isSet(object.vf) ? exports.VFInterface.fromJSON(object.vf) : undefined,
            trunk: isSet(object.trunk) ? exports.VLANTrunkPort.fromJSON(object.trunk) : undefined,
            evpn: isSet(object.evpn) ? exports.Evpn.fromJSON(object.evpn) : undefined,
            mtu: isSet(object.mtu) ? Number(object.mtu) : 0,
            virtual: isSet(object.virtual) ? Boolean(object.virtual) : false
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.facility !== undefined && (obj.facility = message.facility);
        message.host !== undefined && (obj.host = message.host);
        message.node !== undefined && (obj.node = message.node);
        message.bridge !== undefined && (obj.bridge = message.bridge ? exports.BridgeMember.toJSON(message.bridge) : undefined);
        message.mac !== undefined && (obj.mac = message.mac);
        message.phy !== undefined && (obj.phy = message.phy ? exports.PhysicalInterface.toJSON(message.phy) : undefined);
        message.vlan !== undefined && (obj.vlan = message.vlan ? exports.VLANInterface.toJSON(message.vlan) : undefined);
        message.vtep !== undefined && (obj.vtep = message.vtep ? exports.Vtep.toJSON(message.vtep) : undefined);
        message.vf !== undefined && (obj.vf = message.vf ? exports.VFInterface.toJSON(message.vf) : undefined);
        message.trunk !== undefined && (obj.trunk = message.trunk ? exports.VLANTrunkPort.toJSON(message.trunk) : undefined);
        message.evpn !== undefined && (obj.evpn = message.evpn ? exports.Evpn.toJSON(message.evpn) : undefined);
        message.mtu !== undefined && (obj.mtu = Math.round(message.mtu));
        message.virtual !== undefined && (obj.virtual = message.virtual);
        return obj;
    },
    create: function (base) {
        return exports.Endpoint.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseEndpoint();
        message.facility = (_a = object.facility) !== null && _a !== void 0 ? _a : "";
        message.host = (_b = object.host) !== null && _b !== void 0 ? _b : "";
        message.node = (_c = object.node) !== null && _c !== void 0 ? _c : "";
        message.bridge = (object.bridge !== undefined && object.bridge !== null)
            ? exports.BridgeMember.fromPartial(object.bridge)
            : undefined;
        message.mac = (_d = object.mac) !== null && _d !== void 0 ? _d : "";
        message.phy = (object.phy !== undefined && object.phy !== null)
            ? exports.PhysicalInterface.fromPartial(object.phy)
            : undefined;
        message.vlan = (object.vlan !== undefined && object.vlan !== null)
            ? exports.VLANInterface.fromPartial(object.vlan)
            : undefined;
        message.vtep = (object.vtep !== undefined && object.vtep !== null) ? exports.Vtep.fromPartial(object.vtep) : undefined;
        message.vf = (object.vf !== undefined && object.vf !== null) ? exports.VFInterface.fromPartial(object.vf) : undefined;
        message.trunk = (object.trunk !== undefined && object.trunk !== null)
            ? exports.VLANTrunkPort.fromPartial(object.trunk)
            : undefined;
        message.evpn = (object.evpn !== undefined && object.evpn !== null) ? exports.Evpn.fromPartial(object.evpn) : undefined;
        message.mtu = (_e = object.mtu) !== null && _e !== void 0 ? _e : 0;
        message.virtual = (_f = object.virtual) !== null && _f !== void 0 ? _f : false;
        return message;
    }
};
function createBaseWaypoint() {
    return {
        facility: "",
        host: "",
        bridge: undefined,
        access: undefined,
        trunk: undefined,
        tap: undefined,
        vtep: undefined,
        bgpPeer: undefined,
        mtu: 0
    };
}
exports.Waypoint = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.facility !== "") {
            writer.uint32(10).string(message.facility);
        }
        if (message.host !== "") {
            writer.uint32(18).string(message.host);
        }
        if (message.bridge !== undefined) {
            exports.BridgeMember.encode(message.bridge, writer.uint32(26).fork()).ldelim();
        }
        if (message.access !== undefined) {
            exports.VLANAccessPort.encode(message.access, writer.uint32(34).fork()).ldelim();
        }
        if (message.trunk !== undefined) {
            exports.VLANTrunkPort.encode(message.trunk, writer.uint32(42).fork()).ldelim();
        }
        if (message.tap !== undefined) {
            exports.VLANTapPort.encode(message.tap, writer.uint32(50).fork()).ldelim();
        }
        if (message.vtep !== undefined) {
            exports.Vtep.encode(message.vtep, writer.uint32(58).fork()).ldelim();
        }
        if (message.bgpPeer !== undefined) {
            exports.BGPPeer.encode(message.bgpPeer, writer.uint32(66).fork()).ldelim();
        }
        if (message.mtu !== 0) {
            writer.uint32(72).uint32(message.mtu);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseWaypoint();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.facility = reader.string();
                    break;
                case 2:
                    message.host = reader.string();
                    break;
                case 3:
                    message.bridge = exports.BridgeMember.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.access = exports.VLANAccessPort.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.trunk = exports.VLANTrunkPort.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.tap = exports.VLANTapPort.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.vtep = exports.Vtep.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.bgpPeer = exports.BGPPeer.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.mtu = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            facility: isSet(object.facility) ? String(object.facility) : "",
            host: isSet(object.host) ? String(object.host) : "",
            bridge: isSet(object.bridge) ? exports.BridgeMember.fromJSON(object.bridge) : undefined,
            access: isSet(object.access) ? exports.VLANAccessPort.fromJSON(object.access) : undefined,
            trunk: isSet(object.trunk) ? exports.VLANTrunkPort.fromJSON(object.trunk) : undefined,
            tap: isSet(object.tap) ? exports.VLANTapPort.fromJSON(object.tap) : undefined,
            vtep: isSet(object.vtep) ? exports.Vtep.fromJSON(object.vtep) : undefined,
            bgpPeer: isSet(object.bgpPeer) ? exports.BGPPeer.fromJSON(object.bgpPeer) : undefined,
            mtu: isSet(object.mtu) ? Number(object.mtu) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.facility !== undefined && (obj.facility = message.facility);
        message.host !== undefined && (obj.host = message.host);
        message.bridge !== undefined && (obj.bridge = message.bridge ? exports.BridgeMember.toJSON(message.bridge) : undefined);
        message.access !== undefined && (obj.access = message.access ? exports.VLANAccessPort.toJSON(message.access) : undefined);
        message.trunk !== undefined && (obj.trunk = message.trunk ? exports.VLANTrunkPort.toJSON(message.trunk) : undefined);
        message.tap !== undefined && (obj.tap = message.tap ? exports.VLANTapPort.toJSON(message.tap) : undefined);
        message.vtep !== undefined && (obj.vtep = message.vtep ? exports.Vtep.toJSON(message.vtep) : undefined);
        message.bgpPeer !== undefined && (obj.bgpPeer = message.bgpPeer ? exports.BGPPeer.toJSON(message.bgpPeer) : undefined);
        message.mtu !== undefined && (obj.mtu = Math.round(message.mtu));
        return obj;
    },
    create: function (base) {
        return exports.Waypoint.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseWaypoint();
        message.facility = (_a = object.facility) !== null && _a !== void 0 ? _a : "";
        message.host = (_b = object.host) !== null && _b !== void 0 ? _b : "";
        message.bridge = (object.bridge !== undefined && object.bridge !== null)
            ? exports.BridgeMember.fromPartial(object.bridge)
            : undefined;
        message.access = (object.access !== undefined && object.access !== null)
            ? exports.VLANAccessPort.fromPartial(object.access)
            : undefined;
        message.trunk = (object.trunk !== undefined && object.trunk !== null)
            ? exports.VLANTrunkPort.fromPartial(object.trunk)
            : undefined;
        message.tap = (object.tap !== undefined && object.tap !== null) ? exports.VLANTapPort.fromPartial(object.tap) : undefined;
        message.vtep = (object.vtep !== undefined && object.vtep !== null) ? exports.Vtep.fromPartial(object.vtep) : undefined;
        message.bgpPeer = (object.bgpPeer !== undefined && object.bgpPeer !== null)
            ? exports.BGPPeer.fromPartial(object.bgpPeer)
            : undefined;
        message.mtu = (_c = object.mtu) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
};
function createBaseBridgeMember() {
    return { bridge: "", untagged: [], tagged: [], pvid: 0 };
}
exports.BridgeMember = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.bridge !== "") {
            writer.uint32(10).string(message.bridge);
        }
        writer.uint32(18).fork();
        for (var _i = 0, _a = message.untagged; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(v);
        }
        writer.ldelim();
        writer.uint32(26).fork();
        for (var _b = 0, _c = message.tagged; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.uint32(v);
        }
        writer.ldelim();
        if (message.pvid !== 0) {
            writer.uint32(32).uint32(message.pvid);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBridgeMember();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bridge = reader.string();
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.untagged.push(reader.uint32());
                        }
                    }
                    else {
                        message.untagged.push(reader.uint32());
                    }
                    break;
                case 3:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.tagged.push(reader.uint32());
                        }
                    }
                    else {
                        message.tagged.push(reader.uint32());
                    }
                    break;
                case 4:
                    message.pvid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            bridge: isSet(object.bridge) ? String(object.bridge) : "",
            untagged: Array.isArray(object === null || object === void 0 ? void 0 : object.untagged) ? object.untagged.map(function (e) { return Number(e); }) : [],
            tagged: Array.isArray(object === null || object === void 0 ? void 0 : object.tagged) ? object.tagged.map(function (e) { return Number(e); }) : [],
            pvid: isSet(object.pvid) ? Number(object.pvid) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.bridge !== undefined && (obj.bridge = message.bridge);
        if (message.untagged) {
            obj.untagged = message.untagged.map(function (e) { return Math.round(e); });
        }
        else {
            obj.untagged = [];
        }
        if (message.tagged) {
            obj.tagged = message.tagged.map(function (e) { return Math.round(e); });
        }
        else {
            obj.tagged = [];
        }
        message.pvid !== undefined && (obj.pvid = Math.round(message.pvid));
        return obj;
    },
    create: function (base) {
        return exports.BridgeMember.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseBridgeMember();
        message.bridge = (_a = object.bridge) !== null && _a !== void 0 ? _a : "";
        message.untagged = ((_b = object.untagged) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        message.tagged = ((_c = object.tagged) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.pvid = (_d = object.pvid) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
};
function createBaseEvpn() {
    return { mac: undefined, multicast: undefined };
}
exports.Evpn = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mac !== undefined) {
            exports.EvpnMacAdv.encode(message.mac, writer.uint32(10).fork()).ldelim();
        }
        if (message.multicast !== undefined) {
            exports.EvpnMulticastAdv.encode(message.multicast, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEvpn();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mac = exports.EvpnMacAdv.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.multicast = exports.EvpnMulticastAdv.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            mac: isSet(object.mac) ? exports.EvpnMacAdv.fromJSON(object.mac) : undefined,
            multicast: isSet(object.multicast) ? exports.EvpnMulticastAdv.fromJSON(object.multicast) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.mac !== undefined && (obj.mac = message.mac ? exports.EvpnMacAdv.toJSON(message.mac) : undefined);
        message.multicast !== undefined &&
            (obj.multicast = message.multicast ? exports.EvpnMulticastAdv.toJSON(message.multicast) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Evpn.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseEvpn();
        message.mac = (object.mac !== undefined && object.mac !== null) ? exports.EvpnMacAdv.fromPartial(object.mac) : undefined;
        message.multicast = (object.multicast !== undefined && object.multicast !== null)
            ? exports.EvpnMulticastAdv.fromPartial(object.multicast)
            : undefined;
        return message;
    }
};
function createBaseEvpnMacAdv() {
    return { mac: "", tunnelIp: "", vni: 0 };
}
exports.EvpnMacAdv = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mac !== "") {
            writer.uint32(10).string(message.mac);
        }
        if (message.tunnelIp !== "") {
            writer.uint32(18).string(message.tunnelIp);
        }
        if (message.vni !== 0) {
            writer.uint32(24).uint32(message.vni);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEvpnMacAdv();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mac = reader.string();
                    break;
                case 2:
                    message.tunnelIp = reader.string();
                    break;
                case 3:
                    message.vni = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            mac: isSet(object.mac) ? String(object.mac) : "",
            tunnelIp: isSet(object.tunnelIp) ? String(object.tunnelIp) : "",
            vni: isSet(object.vni) ? Number(object.vni) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.mac !== undefined && (obj.mac = message.mac);
        message.tunnelIp !== undefined && (obj.tunnelIp = message.tunnelIp);
        message.vni !== undefined && (obj.vni = Math.round(message.vni));
        return obj;
    },
    create: function (base) {
        return exports.EvpnMacAdv.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseEvpnMacAdv();
        message.mac = (_a = object.mac) !== null && _a !== void 0 ? _a : "";
        message.tunnelIp = (_b = object.tunnelIp) !== null && _b !== void 0 ? _b : "";
        message.vni = (_c = object.vni) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
};
function createBaseEvpnMulticastAdv() {
    return { tunnelIp: "", vni: 0 };
}
exports.EvpnMulticastAdv = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.tunnelIp !== "") {
            writer.uint32(10).string(message.tunnelIp);
        }
        if (message.vni !== 0) {
            writer.uint32(16).uint32(message.vni);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseEvpnMulticastAdv();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tunnelIp = reader.string();
                    break;
                case 2:
                    message.vni = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            tunnelIp: isSet(object.tunnelIp) ? String(object.tunnelIp) : "",
            vni: isSet(object.vni) ? Number(object.vni) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.tunnelIp !== undefined && (obj.tunnelIp = message.tunnelIp);
        message.vni !== undefined && (obj.vni = Math.round(message.vni));
        return obj;
    },
    create: function (base) {
        return exports.EvpnMulticastAdv.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseEvpnMulticastAdv();
        message.tunnelIp = (_a = object.tunnelIp) !== null && _a !== void 0 ? _a : "";
        message.vni = (_b = object.vni) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
function createBasePhysicalInterface() {
    return { name: "", mac: "", portIndex: 0 };
}
exports.PhysicalInterface = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.mac !== "") {
            writer.uint32(18).string(message.mac);
        }
        if (message.portIndex !== 0) {
            writer.uint32(24).uint32(message.portIndex);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePhysicalInterface();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.mac = reader.string();
                    break;
                case 3:
                    message.portIndex = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            mac: isSet(object.mac) ? String(object.mac) : "",
            portIndex: isSet(object.portIndex) ? Number(object.portIndex) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.mac !== undefined && (obj.mac = message.mac);
        message.portIndex !== undefined && (obj.portIndex = Math.round(message.portIndex));
        return obj;
    },
    create: function (base) {
        return exports.PhysicalInterface.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBasePhysicalInterface();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.mac = (_b = object.mac) !== null && _b !== void 0 ? _b : "";
        message.portIndex = (_c = object.portIndex) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
};
function createBaseVirtualFunction() {
    return { name: "", Pf: undefined, VfIndex: 0, mac: "" };
}
exports.VirtualFunction = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.Pf !== undefined) {
            exports.PhysicalInterface.encode(message.Pf, writer.uint32(18).fork()).ldelim();
        }
        if (message.VfIndex !== 0) {
            writer.uint32(24).uint32(message.VfIndex);
        }
        if (message.mac !== "") {
            writer.uint32(34).string(message.mac);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVirtualFunction();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.Pf = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.VfIndex = reader.uint32();
                    break;
                case 4:
                    message.mac = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            Pf: isSet(object.Pf) ? exports.PhysicalInterface.fromJSON(object.Pf) : undefined,
            VfIndex: isSet(object.VfIndex) ? Number(object.VfIndex) : 0,
            mac: isSet(object.mac) ? String(object.mac) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.Pf !== undefined && (obj.Pf = message.Pf ? exports.PhysicalInterface.toJSON(message.Pf) : undefined);
        message.VfIndex !== undefined && (obj.VfIndex = Math.round(message.VfIndex));
        message.mac !== undefined && (obj.mac = message.mac);
        return obj;
    },
    create: function (base) {
        return exports.VirtualFunction.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseVirtualFunction();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.Pf = (object.Pf !== undefined && object.Pf !== null) ? exports.PhysicalInterface.fromPartial(object.Pf) : undefined;
        message.VfIndex = (_b = object.VfIndex) !== null && _b !== void 0 ? _b : 0;
        message.mac = (_c = object.mac) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseVLANInterface() {
    return { name: "", vid: 0, parent: undefined, addrs: [] };
}
exports.VLANInterface = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.vid !== 0) {
            writer.uint32(16).uint32(message.vid);
        }
        if (message.parent !== undefined) {
            exports.PhysicalInterface.encode(message.parent, writer.uint32(26).fork()).ldelim();
        }
        for (var _i = 0, _a = message.addrs; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVLANInterface();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.vid = reader.uint32();
                    break;
                case 3:
                    message.parent = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.addrs.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            vid: isSet(object.vid) ? Number(object.vid) : 0,
            parent: isSet(object.parent) ? exports.PhysicalInterface.fromJSON(object.parent) : undefined,
            addrs: Array.isArray(object === null || object === void 0 ? void 0 : object.addrs) ? object.addrs.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        message.parent !== undefined &&
            (obj.parent = message.parent ? exports.PhysicalInterface.toJSON(message.parent) : undefined);
        if (message.addrs) {
            obj.addrs = message.addrs.map(function (e) { return e; });
        }
        else {
            obj.addrs = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.VLANInterface.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseVLANInterface();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.vid = (_b = object.vid) !== null && _b !== void 0 ? _b : 0;
        message.parent = (object.parent !== undefined && object.parent !== null)
            ? exports.PhysicalInterface.fromPartial(object.parent)
            : undefined;
        message.addrs = ((_c = object.addrs) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseVFInterface() {
    return { virtif: undefined, parent: undefined, vid: 0, addrs: [] };
}
exports.VFInterface = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.virtif !== undefined) {
            exports.PhysicalInterface.encode(message.virtif, writer.uint32(10).fork()).ldelim();
        }
        if (message.parent !== undefined) {
            exports.VirtualFunction.encode(message.parent, writer.uint32(18).fork()).ldelim();
        }
        if (message.vid !== 0) {
            writer.uint32(24).uint32(message.vid);
        }
        for (var _i = 0, _a = message.addrs; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVFInterface();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.virtif = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.parent = exports.VirtualFunction.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.vid = reader.uint32();
                    break;
                case 4:
                    message.addrs.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            virtif: isSet(object.virtif) ? exports.PhysicalInterface.fromJSON(object.virtif) : undefined,
            parent: isSet(object.parent) ? exports.VirtualFunction.fromJSON(object.parent) : undefined,
            vid: isSet(object.vid) ? Number(object.vid) : 0,
            addrs: Array.isArray(object === null || object === void 0 ? void 0 : object.addrs) ? object.addrs.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.virtif !== undefined &&
            (obj.virtif = message.virtif ? exports.PhysicalInterface.toJSON(message.virtif) : undefined);
        message.parent !== undefined && (obj.parent = message.parent ? exports.VirtualFunction.toJSON(message.parent) : undefined);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        if (message.addrs) {
            obj.addrs = message.addrs.map(function (e) { return e; });
        }
        else {
            obj.addrs = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.VFInterface.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVFInterface();
        message.virtif = (object.virtif !== undefined && object.virtif !== null)
            ? exports.PhysicalInterface.fromPartial(object.virtif)
            : undefined;
        message.parent = (object.parent !== undefined && object.parent !== null)
            ? exports.VirtualFunction.fromPartial(object.parent)
            : undefined;
        message.vid = (_a = object.vid) !== null && _a !== void 0 ? _a : 0;
        message.addrs = ((_b = object.addrs) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseVtep() {
    return { name: "", vni: 0, parent: undefined, tunnelIp: "" };
}
exports.Vtep = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.vni !== 0) {
            writer.uint32(16).uint32(message.vni);
        }
        if (message.parent !== undefined) {
            exports.PhysicalInterface.encode(message.parent, writer.uint32(26).fork()).ldelim();
        }
        if (message.tunnelIp !== "") {
            writer.uint32(34).string(message.tunnelIp);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVtep();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.vni = reader.uint32();
                    break;
                case 3:
                    message.parent = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.tunnelIp = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            vni: isSet(object.vni) ? Number(object.vni) : 0,
            parent: isSet(object.parent) ? exports.PhysicalInterface.fromJSON(object.parent) : undefined,
            tunnelIp: isSet(object.tunnelIp) ? String(object.tunnelIp) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.vni !== undefined && (obj.vni = Math.round(message.vni));
        message.parent !== undefined &&
            (obj.parent = message.parent ? exports.PhysicalInterface.toJSON(message.parent) : undefined);
        message.tunnelIp !== undefined && (obj.tunnelIp = message.tunnelIp);
        return obj;
    },
    create: function (base) {
        return exports.Vtep.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseVtep();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.vni = (_b = object.vni) !== null && _b !== void 0 ? _b : 0;
        message.parent = (object.parent !== undefined && object.parent !== null)
            ? exports.PhysicalInterface.fromPartial(object.parent)
            : undefined;
        message.tunnelIp = (_c = object.tunnelIp) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseBGPPeer() {
    return { interface: undefined, localAsn: 0, remoteAsn: 0, network: "" };
}
exports.BGPPeer = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.interface !== undefined) {
            exports.PhysicalInterface.encode(message.interface, writer.uint32(10).fork()).ldelim();
        }
        if (message.localAsn !== 0) {
            writer.uint32(16).uint32(message.localAsn);
        }
        if (message.remoteAsn !== 0) {
            writer.uint32(24).uint32(message.remoteAsn);
        }
        if (message.network !== "") {
            writer.uint32(34).string(message.network);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBGPPeer();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interface = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.localAsn = reader.uint32();
                    break;
                case 3:
                    message.remoteAsn = reader.uint32();
                    break;
                case 4:
                    message.network = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            interface: isSet(object.interface) ? exports.PhysicalInterface.fromJSON(object.interface) : undefined,
            localAsn: isSet(object.localAsn) ? Number(object.localAsn) : 0,
            remoteAsn: isSet(object.remoteAsn) ? Number(object.remoteAsn) : 0,
            network: isSet(object.network) ? String(object.network) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.interface !== undefined &&
            (obj.interface = message.interface ? exports.PhysicalInterface.toJSON(message.interface) : undefined);
        message.localAsn !== undefined && (obj.localAsn = Math.round(message.localAsn));
        message.remoteAsn !== undefined && (obj.remoteAsn = Math.round(message.remoteAsn));
        message.network !== undefined && (obj.network = message.network);
        return obj;
    },
    create: function (base) {
        return exports.BGPPeer.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseBGPPeer();
        message.interface = (object.interface !== undefined && object.interface !== null)
            ? exports.PhysicalInterface.fromPartial(object.interface)
            : undefined;
        message.localAsn = (_a = object.localAsn) !== null && _a !== void 0 ? _a : 0;
        message.remoteAsn = (_b = object.remoteAsn) !== null && _b !== void 0 ? _b : 0;
        message.network = (_c = object.network) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseVLANAccessPort() {
    return { port: undefined, vid: 0 };
}
exports.VLANAccessPort = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.port !== undefined) {
            exports.PhysicalInterface.encode(message.port, writer.uint32(10).fork()).ldelim();
        }
        if (message.vid !== 0) {
            writer.uint32(16).uint32(message.vid);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVLANAccessPort();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.port = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.vid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            port: isSet(object.port) ? exports.PhysicalInterface.fromJSON(object.port) : undefined,
            vid: isSet(object.vid) ? Number(object.vid) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.port !== undefined && (obj.port = message.port ? exports.PhysicalInterface.toJSON(message.port) : undefined);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        return obj;
    },
    create: function (base) {
        return exports.VLANAccessPort.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVLANAccessPort();
        message.port = (object.port !== undefined && object.port !== null)
            ? exports.PhysicalInterface.fromPartial(object.port)
            : undefined;
        message.vid = (_a = object.vid) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
};
function createBaseVLANTrunkPort() {
    return { port: undefined, vids: [] };
}
exports.VLANTrunkPort = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.port !== undefined) {
            exports.PhysicalInterface.encode(message.port, writer.uint32(10).fork()).ldelim();
        }
        writer.uint32(18).fork();
        for (var _i = 0, _a = message.vids; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(v);
        }
        writer.ldelim();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVLANTrunkPort();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.port = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 2:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.vids.push(reader.uint32());
                        }
                    }
                    else {
                        message.vids.push(reader.uint32());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            port: isSet(object.port) ? exports.PhysicalInterface.fromJSON(object.port) : undefined,
            vids: Array.isArray(object === null || object === void 0 ? void 0 : object.vids) ? object.vids.map(function (e) { return Number(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.port !== undefined && (obj.port = message.port ? exports.PhysicalInterface.toJSON(message.port) : undefined);
        if (message.vids) {
            obj.vids = message.vids.map(function (e) { return Math.round(e); });
        }
        else {
            obj.vids = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.VLANTrunkPort.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVLANTrunkPort();
        message.port = (object.port !== undefined && object.port !== null)
            ? exports.PhysicalInterface.fromPartial(object.port)
            : undefined;
        message.vids = ((_a = object.vids) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseVLANTapPort() {
    return { node: "", frontend: undefined, vid: 0 };
}
exports.VLANTapPort = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.node !== "") {
            writer.uint32(10).string(message.node);
        }
        if (message.frontend !== undefined) {
            exports.PhysicalInterface.encode(message.frontend, writer.uint32(18).fork()).ldelim();
        }
        if (message.vid !== 0) {
            writer.uint32(24).uint32(message.vid);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVLANTapPort();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.node = reader.string();
                    break;
                case 2:
                    message.frontend = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.vid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            node: isSet(object.node) ? String(object.node) : "",
            frontend: isSet(object.frontend) ? exports.PhysicalInterface.fromJSON(object.frontend) : undefined,
            vid: isSet(object.vid) ? Number(object.vid) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.node !== undefined && (obj.node = message.node);
        message.frontend !== undefined &&
            (obj.frontend = message.frontend ? exports.PhysicalInterface.toJSON(message.frontend) : undefined);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        return obj;
    },
    create: function (base) {
        return exports.VLANTapPort.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseVLANTapPort();
        message.node = (_a = object.node) !== null && _a !== void 0 ? _a : "";
        message.frontend = (object.frontend !== undefined && object.frontend !== null)
            ? exports.PhysicalInterface.fromPartial(object.frontend)
            : undefined;
        message.vid = (_b = object.vid) !== null && _b !== void 0 ? _b : 0;
        return message;
    }
};
function createBaseVLANVfPort() {
    return { vf: undefined, frontend: undefined, vid: 0 };
}
exports.VLANVfPort = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.vf !== undefined) {
            exports.VirtualFunction.encode(message.vf, writer.uint32(10).fork()).ldelim();
        }
        if (message.frontend !== undefined) {
            exports.PhysicalInterface.encode(message.frontend, writer.uint32(18).fork()).ldelim();
        }
        if (message.vid !== 0) {
            writer.uint32(24).uint32(message.vid);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVLANVfPort();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.vf = exports.VirtualFunction.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.frontend = exports.PhysicalInterface.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.vid = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vf: isSet(object.vf) ? exports.VirtualFunction.fromJSON(object.vf) : undefined,
            frontend: isSet(object.frontend) ? exports.PhysicalInterface.fromJSON(object.frontend) : undefined,
            vid: isSet(object.vid) ? Number(object.vid) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.vf !== undefined && (obj.vf = message.vf ? exports.VirtualFunction.toJSON(message.vf) : undefined);
        message.frontend !== undefined &&
            (obj.frontend = message.frontend ? exports.PhysicalInterface.toJSON(message.frontend) : undefined);
        message.vid !== undefined && (obj.vid = Math.round(message.vid));
        return obj;
    },
    create: function (base) {
        return exports.VLANVfPort.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseVLANVfPort();
        message.vf = (object.vf !== undefined && object.vf !== null) ? exports.VirtualFunction.fromPartial(object.vf) : undefined;
        message.frontend = (object.frontend !== undefined && object.frontend !== null)
            ? exports.PhysicalInterface.fromPartial(object.frontend)
            : undefined;
        message.vid = (_a = object.vid) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
};
function createBaseDiagnostic() {
    return { message: "", level: 0, data: {}, guest: "", host: "" };
}
exports.Diagnostic = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.message !== "") {
            writer.uint32(10).string(message.message);
        }
        if (message.level !== 0) {
            writer.uint32(16).int32(message.level);
        }
        Object.entries(message.data).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.Diagnostic_DataEntry.encode({ key: key, value: value }, writer.uint32(26).fork()).ldelim();
        });
        if (message.guest !== "") {
            writer.uint32(34).string(message.guest);
        }
        if (message.host !== "") {
            writer.uint32(42).string(message.host);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDiagnostic();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.message = reader.string();
                    break;
                case 2:
                    message.level = reader.int32();
                    break;
                case 3:
                    var entry3 = exports.Diagnostic_DataEntry.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.data[entry3.key] = entry3.value;
                    }
                    break;
                case 4:
                    message.guest = reader.string();
                    break;
                case 5:
                    message.host = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            message: isSet(object.message) ? String(object.message) : "",
            level: isSet(object.level) ? diagnosticLevelFromJSON(object.level) : 0,
            data: isObject(object.data)
                ? Object.entries(object.data).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
            guest: isSet(object.guest) ? String(object.guest) : "",
            host: isSet(object.host) ? String(object.host) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.message !== undefined && (obj.message = message.message);
        message.level !== undefined && (obj.level = diagnosticLevelToJSON(message.level));
        obj.data = {};
        if (message.data) {
            Object.entries(message.data).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.data[k] = v;
            });
        }
        message.guest !== undefined && (obj.guest = message.guest);
        message.host !== undefined && (obj.host = message.host);
        return obj;
    },
    create: function (base) {
        return exports.Diagnostic.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseDiagnostic();
        message.message = (_a = object.message) !== null && _a !== void 0 ? _a : "";
        message.level = (_b = object.level) !== null && _b !== void 0 ? _b : 0;
        message.data = Object.entries((_c = object.data) !== null && _c !== void 0 ? _c : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        message.guest = (_d = object.guest) !== null && _d !== void 0 ? _d : "";
        message.host = (_e = object.host) !== null && _e !== void 0 ? _e : "";
        return message;
    }
};
function createBaseDiagnostic_DataEntry() {
    return { key: "", value: "" };
}
exports.Diagnostic_DataEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDiagnostic_DataEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { key: isSet(object.key) ? String(object.key) : "", value: isSet(object.value) ? String(object.value) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    create: function (base) {
        return exports.Diagnostic_DataEntry.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseDiagnostic_DataEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseDiagnosticList() {
    return { value: [] };
}
exports.DiagnosticList = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.value; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Diagnostic.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDiagnosticList();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.value.push(exports.Diagnostic.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { value: Array.isArray(object === null || object === void 0 ? void 0 : object.value) ? object.value.map(function (e) { return exports.Diagnostic.fromJSON(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.value) {
            obj.value = message.value.map(function (e) { return e ? exports.Diagnostic.toJSON(e) : undefined; });
        }
        else {
            obj.value = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.DiagnosticList.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseDiagnosticList();
        message.value = ((_a = object.value) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Diagnostic.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseLinkEmulation() {
    return { loss: 0, capacity: 0, latency: 0, tags: [], interfaces: [], nodes: [], server: "" };
}
exports.LinkEmulation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.loss !== 0) {
            writer.uint32(13).float(message.loss);
        }
        if (message.capacity !== 0) {
            writer.uint32(16).uint64(message.capacity);
        }
        if (message.latency !== 0) {
            writer.uint32(24).uint64(message.latency);
        }
        for (var _i = 0, _a = message.tags; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(34).string(v);
        }
        for (var _b = 0, _c = message.interfaces; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.uint32(42).string(v);
        }
        for (var _d = 0, _e = message.nodes; _d < _e.length; _d++) {
            var v = _e[_d];
            writer.uint32(50).string(v);
        }
        if (message.server !== "") {
            writer.uint32(58).string(message.server);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLinkEmulation();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.loss = reader.float();
                    break;
                case 2:
                    message.capacity = longToNumber(reader.uint64());
                    break;
                case 3:
                    message.latency = longToNumber(reader.uint64());
                    break;
                case 4:
                    message.tags.push(reader.string());
                    break;
                case 5:
                    message.interfaces.push(reader.string());
                    break;
                case 6:
                    message.nodes.push(reader.string());
                    break;
                case 7:
                    message.server = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            loss: isSet(object.loss) ? Number(object.loss) : 0,
            capacity: isSet(object.capacity) ? Number(object.capacity) : 0,
            latency: isSet(object.latency) ? Number(object.latency) : 0,
            tags: Array.isArray(object === null || object === void 0 ? void 0 : object.tags) ? object.tags.map(function (e) { return String(e); }) : [],
            interfaces: Array.isArray(object === null || object === void 0 ? void 0 : object.interfaces) ? object.interfaces.map(function (e) { return String(e); }) : [],
            nodes: Array.isArray(object === null || object === void 0 ? void 0 : object.nodes) ? object.nodes.map(function (e) { return String(e); }) : [],
            server: isSet(object.server) ? String(object.server) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.loss !== undefined && (obj.loss = message.loss);
        message.capacity !== undefined && (obj.capacity = Math.round(message.capacity));
        message.latency !== undefined && (obj.latency = Math.round(message.latency));
        if (message.tags) {
            obj.tags = message.tags.map(function (e) { return e; });
        }
        else {
            obj.tags = [];
        }
        if (message.interfaces) {
            obj.interfaces = message.interfaces.map(function (e) { return e; });
        }
        else {
            obj.interfaces = [];
        }
        if (message.nodes) {
            obj.nodes = message.nodes.map(function (e) { return e; });
        }
        else {
            obj.nodes = [];
        }
        message.server !== undefined && (obj.server = message.server);
        return obj;
    },
    create: function (base) {
        return exports.LinkEmulation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseLinkEmulation();
        message.loss = (_a = object.loss) !== null && _a !== void 0 ? _a : 0;
        message.capacity = (_b = object.capacity) !== null && _b !== void 0 ? _b : 0;
        message.latency = (_c = object.latency) !== null && _c !== void 0 ? _c : 0;
        message.tags = ((_d = object.tags) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        message.interfaces = ((_e = object.interfaces) === null || _e === void 0 ? void 0 : _e.map(function (e) { return e; })) || [];
        message.nodes = ((_f = object.nodes) === null || _f === void 0 ? void 0 : _f.map(function (e) { return e; })) || [];
        message.server = (_g = object.server) !== null && _g !== void 0 ? _g : "";
        return message;
    }
};
function createBaseLinkEmulationParams() {
    return { server: "", links: [], backend: 0 };
}
exports.LinkEmulationParams = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.server !== "") {
            writer.uint32(10).string(message.server);
        }
        for (var _i = 0, _a = message.links; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.LinkEmulation.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.backend !== 0) {
            writer.uint32(24).int32(message.backend);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLinkEmulationParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.server = reader.string();
                    break;
                case 2:
                    message.links.push(exports.LinkEmulation.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.backend = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            server: isSet(object.server) ? String(object.server) : "",
            links: Array.isArray(object === null || object === void 0 ? void 0 : object.links) ? object.links.map(function (e) { return exports.LinkEmulation.fromJSON(e); }) : [],
            backend: isSet(object.backend) ? (0, core_1.emulationFromJSON)(object.backend) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.server !== undefined && (obj.server = message.server);
        if (message.links) {
            obj.links = message.links.map(function (e) { return e ? exports.LinkEmulation.toJSON(e) : undefined; });
        }
        else {
            obj.links = [];
        }
        message.backend !== undefined && (obj.backend = (0, core_1.emulationToJSON)(message.backend));
        return obj;
    },
    create: function (base) {
        return exports.LinkEmulationParams.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseLinkEmulationParams();
        message.server = (_a = object.server) !== null && _a !== void 0 ? _a : "";
        message.links = ((_b = object.links) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.LinkEmulation.fromPartial(e); })) || [];
        message.backend = (_c = object.backend) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
};
function createBaseRealizationResult() {
    return { realization: undefined, diagnostics: undefined };
}
exports.RealizationResult = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            exports.Realization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        if (message.diagnostics !== undefined) {
            exports.DiagnosticList.encode(message.diagnostics, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealizationResult();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = exports.Realization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.diagnostics = exports.DiagnosticList.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            realization: isSet(object.realization) ? exports.Realization.fromJSON(object.realization) : undefined,
            diagnostics: isSet(object.diagnostics) ? exports.DiagnosticList.fromJSON(object.diagnostics) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? exports.Realization.toJSON(message.realization) : undefined);
        message.diagnostics !== undefined &&
            (obj.diagnostics = message.diagnostics ? exports.DiagnosticList.toJSON(message.diagnostics) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.RealizationResult.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseRealizationResult();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? exports.Realization.fromPartial(object.realization)
            : undefined;
        message.diagnostics = (object.diagnostics !== undefined && object.diagnostics !== null)
            ? exports.DiagnosticList.fromPartial(object.diagnostics)
            : undefined;
        return message;
    }
};
function createBaseGetRealizationsRequest() {
    return { filter: 0 };
}
exports.GetRealizationsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.filter !== 0) {
            writer.uint32(8).int32(message.filter);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetRealizationsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.filter = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { filter: isSet(object.filter) ? (0, workspace_types_1.filterModeFromJSON)(object.filter) : 0 };
    },
    toJSON: function (message) {
        var obj = {};
        message.filter !== undefined && (obj.filter = (0, workspace_types_1.filterModeToJSON)(message.filter));
        return obj;
    },
    create: function (base) {
        return exports.GetRealizationsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetRealizationsRequest();
        message.filter = (_a = object.filter) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
};
function createBaseGetRealizationsResponse() {
    return { results: [] };
}
exports.GetRealizationsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.results; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.RealizationResult.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetRealizationsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.results.push(exports.RealizationResult.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            results: Array.isArray(object === null || object === void 0 ? void 0 : object.results) ? object.results.map(function (e) { return exports.RealizationResult.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.results) {
            obj.results = message.results.map(function (e) { return e ? exports.RealizationResult.toJSON(e) : undefined; });
        }
        else {
            obj.results = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.GetRealizationsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetRealizationsResponse();
        message.results = ((_a = object.results) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.RealizationResult.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetRealizationRequest() {
    return { project: "", experiment: "", realization: "" };
}
exports.GetRealizationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetRealizationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.GetRealizationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGetRealizationRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseGetRealizationResponse() {
    return { result: undefined };
}
exports.GetRealizationResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.result !== undefined) {
            exports.RealizationResult.encode(message.result, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetRealizationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.result = exports.RealizationResult.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { result: isSet(object.result) ? exports.RealizationResult.fromJSON(object.result) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.result !== undefined &&
            (obj.result = message.result ? exports.RealizationResult.toJSON(message.result) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.GetRealizationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseGetRealizationResponse();
        message.result = (object.result !== undefined && object.result !== null)
            ? exports.RealizationResult.fromPartial(object.result)
            : undefined;
        return message;
    }
};
function createBaseRealizeRequest() {
    return {
        project: "",
        experiment: "",
        realization: "",
        revision: "",
        creator: "",
        time: "",
        ver: 0,
        tag: "",
        branch: "",
        duration: undefined
    };
}
exports.RealizeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        if (message.revision !== "") {
            writer.uint32(34).string(message.revision);
        }
        if (message.creator !== "") {
            writer.uint32(42).string(message.creator);
        }
        if (message.time !== "") {
            writer.uint32(50).string(message.time);
        }
        if (message.ver !== 0) {
            writer.uint32(56).int64(message.ver);
        }
        if (message.tag !== "") {
            writer.uint32(66).string(message.tag);
        }
        if (message.branch !== "") {
            writer.uint32(74).string(message.branch);
        }
        if (message.duration !== undefined) {
            exports.ReservationDuration.encode(message.duration, writer.uint32(82).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealizeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                case 4:
                    message.revision = reader.string();
                    break;
                case 5:
                    message.creator = reader.string();
                    break;
                case 6:
                    message.time = reader.string();
                    break;
                case 7:
                    message.ver = longToNumber(reader.int64());
                    break;
                case 8:
                    message.tag = reader.string();
                    break;
                case 9:
                    message.branch = reader.string();
                    break;
                case 10:
                    message.duration = exports.ReservationDuration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            revision: isSet(object.revision) ? String(object.revision) : "",
            creator: isSet(object.creator) ? String(object.creator) : "",
            time: isSet(object.time) ? String(object.time) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0,
            tag: isSet(object.tag) ? String(object.tag) : "",
            branch: isSet(object.branch) ? String(object.branch) : "",
            duration: isSet(object.duration) ? exports.ReservationDuration.fromJSON(object.duration) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        message.revision !== undefined && (obj.revision = message.revision);
        message.creator !== undefined && (obj.creator = message.creator);
        message.time !== undefined && (obj.time = message.time);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        message.tag !== undefined && (obj.tag = message.tag);
        message.branch !== undefined && (obj.branch = message.branch);
        message.duration !== undefined &&
            (obj.duration = message.duration ? exports.ReservationDuration.toJSON(message.duration) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.RealizeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseRealizeRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        message.revision = (_d = object.revision) !== null && _d !== void 0 ? _d : "";
        message.creator = (_e = object.creator) !== null && _e !== void 0 ? _e : "";
        message.time = (_f = object.time) !== null && _f !== void 0 ? _f : "";
        message.ver = (_g = object.ver) !== null && _g !== void 0 ? _g : 0;
        message.tag = (_h = object.tag) !== null && _h !== void 0 ? _h : "";
        message.branch = (_j = object.branch) !== null && _j !== void 0 ? _j : "";
        message.duration = (object.duration !== undefined && object.duration !== null)
            ? exports.ReservationDuration.fromPartial(object.duration)
            : undefined;
        return message;
    }
};
function createBaseReservationDuration() {
    return { when: 0, duration: "" };
}
exports.ReservationDuration = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.when !== 0) {
            writer.uint32(8).int32(message.when);
        }
        if (message.duration !== "") {
            writer.uint32(18).string(message.duration);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseReservationDuration();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.when = reader.int32();
                    break;
                case 2:
                    message.duration = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            when: isSet(object.when) ? reservationDuration_codeFromJSON(object.when) : 0,
            duration: isSet(object.duration) ? String(object.duration) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.when !== undefined && (obj.when = reservationDuration_codeToJSON(message.when));
        message.duration !== undefined && (obj.duration = message.duration);
        return obj;
    },
    create: function (base) {
        return exports.ReservationDuration.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseReservationDuration();
        message.when = (_a = object.when) !== null && _a !== void 0 ? _a : 0;
        message.duration = (_b = object.duration) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseRealizeResponse() {
    return { code: 0, diagnostics: [], realization: undefined };
}
exports.RealizeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.code !== 0) {
            writer.uint32(8).int32(message.code);
        }
        for (var _i = 0, _a = message.diagnostics; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Diagnostic.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.realization !== undefined) {
            exports.Realization.encode(message.realization, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRealizeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.code = reader.int32();
                    break;
                case 2:
                    message.diagnostics.push(exports.Diagnostic.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.realization = exports.Realization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            code: isSet(object.code) ? realizeResponse_CodeFromJSON(object.code) : 0,
            diagnostics: Array.isArray(object === null || object === void 0 ? void 0 : object.diagnostics) ? object.diagnostics.map(function (e) { return exports.Diagnostic.fromJSON(e); }) : [],
            realization: isSet(object.realization) ? exports.Realization.fromJSON(object.realization) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.code !== undefined && (obj.code = realizeResponse_CodeToJSON(message.code));
        if (message.diagnostics) {
            obj.diagnostics = message.diagnostics.map(function (e) { return e ? exports.Diagnostic.toJSON(e) : undefined; });
        }
        else {
            obj.diagnostics = [];
        }
        message.realization !== undefined &&
            (obj.realization = message.realization ? exports.Realization.toJSON(message.realization) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.RealizeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseRealizeResponse();
        message.code = (_a = object.code) !== null && _a !== void 0 ? _a : 0;
        message.diagnostics = ((_b = object.diagnostics) === null || _b === void 0 ? void 0 : _b.map(function (e) { return exports.Diagnostic.fromPartial(e); })) || [];
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? exports.Realization.fromPartial(object.realization)
            : undefined;
        return message;
    }
};
function createBaseRelinquishRequest() {
    return { project: "", experiment: "", realization: "" };
}
exports.RelinquishRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRelinquishRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.RelinquishRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseRelinquishRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseRelinquishResponse() {
    return {};
}
exports.RelinquishResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRelinquishResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.RelinquishResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseRelinquishResponse();
        return message;
    }
};
function createBaseAllocation() {
    return { rid: "", eid: "", pid: "", uid: "", fid: "", oid: "", node: "", virt: false, coresUsed: 0, memoryUsed: 0 };
}
exports.Allocation = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.rid !== "") {
            writer.uint32(10).string(message.rid);
        }
        if (message.eid !== "") {
            writer.uint32(18).string(message.eid);
        }
        if (message.pid !== "") {
            writer.uint32(26).string(message.pid);
        }
        if (message.uid !== "") {
            writer.uint32(34).string(message.uid);
        }
        if (message.fid !== "") {
            writer.uint32(42).string(message.fid);
        }
        if (message.oid !== "") {
            writer.uint32(50).string(message.oid);
        }
        if (message.node !== "") {
            writer.uint32(58).string(message.node);
        }
        if (message.virt === true) {
            writer.uint32(64).bool(message.virt);
        }
        if (message.coresUsed !== 0) {
            writer.uint32(72).uint32(message.coresUsed);
        }
        if (message.memoryUsed !== 0) {
            writer.uint32(80).uint64(message.memoryUsed);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAllocation();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rid = reader.string();
                    break;
                case 2:
                    message.eid = reader.string();
                    break;
                case 3:
                    message.pid = reader.string();
                    break;
                case 4:
                    message.uid = reader.string();
                    break;
                case 5:
                    message.fid = reader.string();
                    break;
                case 6:
                    message.oid = reader.string();
                    break;
                case 7:
                    message.node = reader.string();
                    break;
                case 8:
                    message.virt = reader.bool();
                    break;
                case 9:
                    message.coresUsed = reader.uint32();
                    break;
                case 10:
                    message.memoryUsed = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            rid: isSet(object.rid) ? String(object.rid) : "",
            eid: isSet(object.eid) ? String(object.eid) : "",
            pid: isSet(object.pid) ? String(object.pid) : "",
            uid: isSet(object.uid) ? String(object.uid) : "",
            fid: isSet(object.fid) ? String(object.fid) : "",
            oid: isSet(object.oid) ? String(object.oid) : "",
            node: isSet(object.node) ? String(object.node) : "",
            virt: isSet(object.virt) ? Boolean(object.virt) : false,
            coresUsed: isSet(object.coresUsed) ? Number(object.coresUsed) : 0,
            memoryUsed: isSet(object.memoryUsed) ? Number(object.memoryUsed) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.rid !== undefined && (obj.rid = message.rid);
        message.eid !== undefined && (obj.eid = message.eid);
        message.pid !== undefined && (obj.pid = message.pid);
        message.uid !== undefined && (obj.uid = message.uid);
        message.fid !== undefined && (obj.fid = message.fid);
        message.oid !== undefined && (obj.oid = message.oid);
        message.node !== undefined && (obj.node = message.node);
        message.virt !== undefined && (obj.virt = message.virt);
        message.coresUsed !== undefined && (obj.coresUsed = Math.round(message.coresUsed));
        message.memoryUsed !== undefined && (obj.memoryUsed = Math.round(message.memoryUsed));
        return obj;
    },
    create: function (base) {
        return exports.Allocation.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseAllocation();
        message.rid = (_a = object.rid) !== null && _a !== void 0 ? _a : "";
        message.eid = (_b = object.eid) !== null && _b !== void 0 ? _b : "";
        message.pid = (_c = object.pid) !== null && _c !== void 0 ? _c : "";
        message.uid = (_d = object.uid) !== null && _d !== void 0 ? _d : "";
        message.fid = (_e = object.fid) !== null && _e !== void 0 ? _e : "";
        message.oid = (_f = object.oid) !== null && _f !== void 0 ? _f : "";
        message.node = (_g = object.node) !== null && _g !== void 0 ? _g : "";
        message.virt = (_h = object.virt) !== null && _h !== void 0 ? _h : false;
        message.coresUsed = (_j = object.coresUsed) !== null && _j !== void 0 ? _j : 0;
        message.memoryUsed = (_k = object.memoryUsed) !== null && _k !== void 0 ? _k : 0;
        return message;
    }
};
function createBaseResource() {
    return { resource: undefined, allocated: [] };
}
exports.Resource = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.resource !== undefined) {
            core_1.Resource.encode(message.resource, writer.uint32(10).fork()).ldelim();
        }
        for (var _i = 0, _a = message.allocated; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Allocation.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseResource();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resource = core_1.Resource.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.allocated.push(exports.Allocation.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            resource: isSet(object.resource) ? core_1.Resource.fromJSON(object.resource) : undefined,
            allocated: Array.isArray(object === null || object === void 0 ? void 0 : object.allocated) ? object.allocated.map(function (e) { return exports.Allocation.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.resource !== undefined &&
            (obj.resource = message.resource ? core_1.Resource.toJSON(message.resource) : undefined);
        if (message.allocated) {
            obj.allocated = message.allocated.map(function (e) { return e ? exports.Allocation.toJSON(e) : undefined; });
        }
        else {
            obj.allocated = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.Resource.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseResource();
        message.resource = (object.resource !== undefined && object.resource !== null)
            ? core_1.Resource.fromPartial(object.resource)
            : undefined;
        message.allocated = ((_a = object.allocated) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Allocation.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetResourcesRequest() {
    return {};
}
exports.GetResourcesRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetResourcesRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.GetResourcesRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseGetResourcesRequest();
        return message;
    }
};
function createBaseGetResourcesResponse() {
    return { resources: [] };
}
exports.GetResourcesResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.resources; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Resource.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetResourcesResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.resources.push(exports.Resource.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            resources: Array.isArray(object === null || object === void 0 ? void 0 : object.resources) ? object.resources.map(function (e) { return exports.Resource.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.resources) {
            obj.resources = message.resources.map(function (e) { return e ? exports.Resource.toJSON(e) : undefined; });
        }
        else {
            obj.resources = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.GetResourcesResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetResourcesResponse();
        message.resources = ((_a = object.resources) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Resource.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseUpdateRealizationRequest() {
    return { project: "", experiment: "", realization: "", duration: undefined };
}
exports.UpdateRealizationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        if (message.duration !== undefined) {
            exports.ReservationDuration.encode(message.duration, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUpdateRealizationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                case 4:
                    message.duration = exports.ReservationDuration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            duration: isSet(object.duration) ? exports.ReservationDuration.fromJSON(object.duration) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        message.duration !== undefined &&
            (obj.duration = message.duration ? exports.ReservationDuration.toJSON(message.duration) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.UpdateRealizationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseUpdateRealizationRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        message.duration = (object.duration !== undefined && object.duration !== null)
            ? exports.ReservationDuration.fromPartial(object.duration)
            : undefined;
        return message;
    }
};
function createBaseUpdateRealizationResponse() {
    return { expires: undefined };
}
exports.UpdateRealizationResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.expires !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.expires), writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUpdateRealizationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.expires = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { expires: isSet(object.expires) ? fromJsonTimestamp(object.expires) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.expires !== undefined && (obj.expires = message.expires.toISOString());
        return obj;
    },
    create: function (base) {
        return exports.UpdateRealizationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseUpdateRealizationResponse();
        message.expires = (_a = object.expires) !== null && _a !== void 0 ? _a : undefined;
        return message;
    }
};
var tsProtoGlobalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function toTimestamp(date) {
    var seconds = date.getTime() / 1000;
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
