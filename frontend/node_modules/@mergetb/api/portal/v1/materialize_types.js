"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.DeleteIngressResponse = exports.DeleteIngressRequest = exports.NewIngressResponse = exports.NewIngressRequest = exports.DematerializeResponse = exports.DematerializeRequest = exports.MaterializeResponse = exports.MaterializeRequest = exports.GetMaterializationStatusResponse = exports.GetMaterializationStatusRequest = exports.GetMaterializationResponse = exports.GetMaterializationRequest = exports.GetMaterializationsResponse = exports.Ingresses = exports.Ingress = exports.GetMaterializationsRequest = exports.RebootMaterializationResponse = exports.RebootMaterializationRequest = exports.Actuator = exports.Bond = exports.Sensor = exports.Phyo = exports.Link = exports.VirtualMachine = exports.BareMetal = exports.UserInfo = exports.Materialization = exports.MzParameters = exports.rebootMaterializationModeToJSON = exports.rebootMaterializationModeFromJSON = exports.RebootMaterializationMode = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var taskstatus_1 = require("../../mergetb/tech/reconcile/taskstatus");
var core_1 = require("../../mergetb/xir/v0.3/core");
var realize_types_1 = require("./realize_types");
var workspace_types_1 = require("./workspace_types");
exports.protobufPackage = "portal.v1";
var RebootMaterializationMode;
(function (RebootMaterializationMode) {
    RebootMaterializationMode[RebootMaterializationMode["Reboot"] = 0] = "Reboot";
    RebootMaterializationMode[RebootMaterializationMode["Cycle"] = 1] = "Cycle";
    RebootMaterializationMode[RebootMaterializationMode["Reimage"] = 2] = "Reimage";
    RebootMaterializationMode[RebootMaterializationMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RebootMaterializationMode = exports.RebootMaterializationMode || (exports.RebootMaterializationMode = {}));
function rebootMaterializationModeFromJSON(object) {
    switch (object) {
        case 0:
        case "Reboot":
            return RebootMaterializationMode.Reboot;
        case 1:
        case "Cycle":
            return RebootMaterializationMode.Cycle;
        case 2:
        case "Reimage":
            return RebootMaterializationMode.Reimage;
        case -1:
        case "UNRECOGNIZED":
        default:
            return RebootMaterializationMode.UNRECOGNIZED;
    }
}
exports.rebootMaterializationModeFromJSON = rebootMaterializationModeFromJSON;
function rebootMaterializationModeToJSON(object) {
    switch (object) {
        case RebootMaterializationMode.Reboot:
            return "Reboot";
        case RebootMaterializationMode.Cycle:
            return "Cycle";
        case RebootMaterializationMode.Reimage:
            return "Reimage";
        case RebootMaterializationMode.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.rebootMaterializationModeToJSON = rebootMaterializationModeToJSON;
function createBaseMzParameters() {
    return {
        infrapodServer: "",
        infrapodPhy: "",
        infranetAddr: "",
        infranetSubnet: "",
        infranetGw: "",
        infranetVni: 0,
        resolveExpnet: false
    };
}
exports.MzParameters = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.infrapodServer !== "") {
            writer.uint32(10).string(message.infrapodServer);
        }
        if (message.infrapodPhy !== "") {
            writer.uint32(18).string(message.infrapodPhy);
        }
        if (message.infranetAddr !== "") {
            writer.uint32(26).string(message.infranetAddr);
        }
        if (message.infranetSubnet !== "") {
            writer.uint32(34).string(message.infranetSubnet);
        }
        if (message.infranetGw !== "") {
            writer.uint32(42).string(message.infranetGw);
        }
        if (message.infranetVni !== 0) {
            writer.uint32(48).uint32(message.infranetVni);
        }
        if (message.resolveExpnet === true) {
            writer.uint32(56).bool(message.resolveExpnet);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMzParameters();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.infrapodServer = reader.string();
                    break;
                case 2:
                    message.infrapodPhy = reader.string();
                    break;
                case 3:
                    message.infranetAddr = reader.string();
                    break;
                case 4:
                    message.infranetSubnet = reader.string();
                    break;
                case 5:
                    message.infranetGw = reader.string();
                    break;
                case 6:
                    message.infranetVni = reader.uint32();
                    break;
                case 7:
                    message.resolveExpnet = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            infrapodServer: isSet(object.infrapodServer) ? String(object.infrapodServer) : "",
            infrapodPhy: isSet(object.infrapodPhy) ? String(object.infrapodPhy) : "",
            infranetAddr: isSet(object.infranetAddr) ? String(object.infranetAddr) : "",
            infranetSubnet: isSet(object.infranetSubnet) ? String(object.infranetSubnet) : "",
            infranetGw: isSet(object.infranetGw) ? String(object.infranetGw) : "",
            infranetVni: isSet(object.infranetVni) ? Number(object.infranetVni) : 0,
            resolveExpnet: isSet(object.resolveExpnet) ? Boolean(object.resolveExpnet) : false
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.infrapodServer !== undefined && (obj.infrapodServer = message.infrapodServer);
        message.infrapodPhy !== undefined && (obj.infrapodPhy = message.infrapodPhy);
        message.infranetAddr !== undefined && (obj.infranetAddr = message.infranetAddr);
        message.infranetSubnet !== undefined && (obj.infranetSubnet = message.infranetSubnet);
        message.infranetGw !== undefined && (obj.infranetGw = message.infranetGw);
        message.infranetVni !== undefined && (obj.infranetVni = Math.round(message.infranetVni));
        message.resolveExpnet !== undefined && (obj.resolveExpnet = message.resolveExpnet);
        return obj;
    },
    create: function (base) {
        return exports.MzParameters.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseMzParameters();
        message.infrapodServer = (_a = object.infrapodServer) !== null && _a !== void 0 ? _a : "";
        message.infrapodPhy = (_b = object.infrapodPhy) !== null && _b !== void 0 ? _b : "";
        message.infranetAddr = (_c = object.infranetAddr) !== null && _c !== void 0 ? _c : "";
        message.infranetSubnet = (_d = object.infranetSubnet) !== null && _d !== void 0 ? _d : "";
        message.infranetGw = (_e = object.infranetGw) !== null && _e !== void 0 ? _e : "";
        message.infranetVni = (_f = object.infranetVni) !== null && _f !== void 0 ? _f : 0;
        message.resolveExpnet = (_g = object.resolveExpnet) !== null && _g !== void 0 ? _g : false;
        return message;
    }
};
function createBaseMaterialization() {
    return {
        rid: "",
        eid: "",
        pid: "",
        params: undefined,
        metal: [],
        vms: [],
        links: [],
        phyos: [],
        bonds: [],
        sensors: [],
        actuators: [],
        linkEmulation: undefined
    };
}
exports.Materialization = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.rid !== "") {
            writer.uint32(10).string(message.rid);
        }
        if (message.eid !== "") {
            writer.uint32(18).string(message.eid);
        }
        if (message.pid !== "") {
            writer.uint32(26).string(message.pid);
        }
        if (message.params !== undefined) {
            exports.MzParameters.encode(message.params, writer.uint32(34).fork()).ldelim();
        }
        for (var _i = 0, _a = message.metal; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.BareMetal.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (var _b = 0, _c = message.vms; _b < _c.length; _b++) {
            var v = _c[_b];
            exports.VirtualMachine.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (var _d = 0, _e = message.links; _d < _e.length; _d++) {
            var v = _e[_d];
            exports.Link.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (var _f = 0, _g = message.phyos; _f < _g.length; _f++) {
            var v = _g[_f];
            exports.Phyo.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (var _h = 0, _j = message.bonds; _h < _j.length; _h++) {
            var v = _j[_h];
            exports.Bond.encode(v, writer.uint32(74).fork()).ldelim();
        }
        for (var _k = 0, _l = message.sensors; _k < _l.length; _k++) {
            var v = _l[_k];
            exports.Sensor.encode(v, writer.uint32(82).fork()).ldelim();
        }
        for (var _m = 0, _o = message.actuators; _m < _o.length; _m++) {
            var v = _o[_m];
            exports.Actuator.encode(v, writer.uint32(90).fork()).ldelim();
        }
        if (message.linkEmulation !== undefined) {
            realize_types_1.LinkEmulationParams.encode(message.linkEmulation, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMaterialization();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rid = reader.string();
                    break;
                case 2:
                    message.eid = reader.string();
                    break;
                case 3:
                    message.pid = reader.string();
                    break;
                case 4:
                    message.params = exports.MzParameters.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.metal.push(exports.BareMetal.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.vms.push(exports.VirtualMachine.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.links.push(exports.Link.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.phyos.push(exports.Phyo.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.bonds.push(exports.Bond.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.sensors.push(exports.Sensor.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.actuators.push(exports.Actuator.decode(reader, reader.uint32()));
                    break;
                case 12:
                    message.linkEmulation = realize_types_1.LinkEmulationParams.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            rid: isSet(object.rid) ? String(object.rid) : "",
            eid: isSet(object.eid) ? String(object.eid) : "",
            pid: isSet(object.pid) ? String(object.pid) : "",
            params: isSet(object.params) ? exports.MzParameters.fromJSON(object.params) : undefined,
            metal: Array.isArray(object === null || object === void 0 ? void 0 : object.metal) ? object.metal.map(function (e) { return exports.BareMetal.fromJSON(e); }) : [],
            vms: Array.isArray(object === null || object === void 0 ? void 0 : object.vms) ? object.vms.map(function (e) { return exports.VirtualMachine.fromJSON(e); }) : [],
            links: Array.isArray(object === null || object === void 0 ? void 0 : object.links) ? object.links.map(function (e) { return exports.Link.fromJSON(e); }) : [],
            phyos: Array.isArray(object === null || object === void 0 ? void 0 : object.phyos) ? object.phyos.map(function (e) { return exports.Phyo.fromJSON(e); }) : [],
            bonds: Array.isArray(object === null || object === void 0 ? void 0 : object.bonds) ? object.bonds.map(function (e) { return exports.Bond.fromJSON(e); }) : [],
            sensors: Array.isArray(object === null || object === void 0 ? void 0 : object.sensors) ? object.sensors.map(function (e) { return exports.Sensor.fromJSON(e); }) : [],
            actuators: Array.isArray(object === null || object === void 0 ? void 0 : object.actuators) ? object.actuators.map(function (e) { return exports.Actuator.fromJSON(e); }) : [],
            linkEmulation: isSet(object.linkEmulation) ? realize_types_1.LinkEmulationParams.fromJSON(object.linkEmulation) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.rid !== undefined && (obj.rid = message.rid);
        message.eid !== undefined && (obj.eid = message.eid);
        message.pid !== undefined && (obj.pid = message.pid);
        message.params !== undefined && (obj.params = message.params ? exports.MzParameters.toJSON(message.params) : undefined);
        if (message.metal) {
            obj.metal = message.metal.map(function (e) { return e ? exports.BareMetal.toJSON(e) : undefined; });
        }
        else {
            obj.metal = [];
        }
        if (message.vms) {
            obj.vms = message.vms.map(function (e) { return e ? exports.VirtualMachine.toJSON(e) : undefined; });
        }
        else {
            obj.vms = [];
        }
        if (message.links) {
            obj.links = message.links.map(function (e) { return e ? exports.Link.toJSON(e) : undefined; });
        }
        else {
            obj.links = [];
        }
        if (message.phyos) {
            obj.phyos = message.phyos.map(function (e) { return e ? exports.Phyo.toJSON(e) : undefined; });
        }
        else {
            obj.phyos = [];
        }
        if (message.bonds) {
            obj.bonds = message.bonds.map(function (e) { return e ? exports.Bond.toJSON(e) : undefined; });
        }
        else {
            obj.bonds = [];
        }
        if (message.sensors) {
            obj.sensors = message.sensors.map(function (e) { return e ? exports.Sensor.toJSON(e) : undefined; });
        }
        else {
            obj.sensors = [];
        }
        if (message.actuators) {
            obj.actuators = message.actuators.map(function (e) { return e ? exports.Actuator.toJSON(e) : undefined; });
        }
        else {
            obj.actuators = [];
        }
        message.linkEmulation !== undefined &&
            (obj.linkEmulation = message.linkEmulation ? realize_types_1.LinkEmulationParams.toJSON(message.linkEmulation) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Materialization.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseMaterialization();
        message.rid = (_a = object.rid) !== null && _a !== void 0 ? _a : "";
        message.eid = (_b = object.eid) !== null && _b !== void 0 ? _b : "";
        message.pid = (_c = object.pid) !== null && _c !== void 0 ? _c : "";
        message.params = (object.params !== undefined && object.params !== null)
            ? exports.MzParameters.fromPartial(object.params)
            : undefined;
        message.metal = ((_d = object.metal) === null || _d === void 0 ? void 0 : _d.map(function (e) { return exports.BareMetal.fromPartial(e); })) || [];
        message.vms = ((_e = object.vms) === null || _e === void 0 ? void 0 : _e.map(function (e) { return exports.VirtualMachine.fromPartial(e); })) || [];
        message.links = ((_f = object.links) === null || _f === void 0 ? void 0 : _f.map(function (e) { return exports.Link.fromPartial(e); })) || [];
        message.phyos = ((_g = object.phyos) === null || _g === void 0 ? void 0 : _g.map(function (e) { return exports.Phyo.fromPartial(e); })) || [];
        message.bonds = ((_h = object.bonds) === null || _h === void 0 ? void 0 : _h.map(function (e) { return exports.Bond.fromPartial(e); })) || [];
        message.sensors = ((_j = object.sensors) === null || _j === void 0 ? void 0 : _j.map(function (e) { return exports.Sensor.fromPartial(e); })) || [];
        message.actuators = ((_k = object.actuators) === null || _k === void 0 ? void 0 : _k.map(function (e) { return exports.Actuator.fromPartial(e); })) || [];
        message.linkEmulation = (object.linkEmulation !== undefined && object.linkEmulation !== null)
            ? realize_types_1.LinkEmulationParams.fromPartial(object.linkEmulation)
            : undefined;
        return message;
    }
};
function createBaseUserInfo() {
    return { name: "", groups: [], pubkeys: [], privkeys: [] };
}
exports.UserInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        for (var _i = 0, _a = message.groups; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(18).string(v);
        }
        for (var _b = 0, _c = message.pubkeys; _b < _c.length; _b++) {
            var v = _c[_b];
            writer.uint32(26).string(v);
        }
        for (var _d = 0, _e = message.privkeys; _d < _e.length; _d++) {
            var v = _e[_d];
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseUserInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.groups.push(reader.string());
                    break;
                case 3:
                    message.pubkeys.push(reader.string());
                    break;
                case 4:
                    message.privkeys.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            groups: Array.isArray(object === null || object === void 0 ? void 0 : object.groups) ? object.groups.map(function (e) { return String(e); }) : [],
            pubkeys: Array.isArray(object === null || object === void 0 ? void 0 : object.pubkeys) ? object.pubkeys.map(function (e) { return String(e); }) : [],
            privkeys: Array.isArray(object === null || object === void 0 ? void 0 : object.privkeys) ? object.privkeys.map(function (e) { return String(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        if (message.groups) {
            obj.groups = message.groups.map(function (e) { return e; });
        }
        else {
            obj.groups = [];
        }
        if (message.pubkeys) {
            obj.pubkeys = message.pubkeys.map(function (e) { return e; });
        }
        else {
            obj.pubkeys = [];
        }
        if (message.privkeys) {
            obj.privkeys = message.privkeys.map(function (e) { return e; });
        }
        else {
            obj.privkeys = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.UserInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseUserInfo();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.groups = ((_b = object.groups) === null || _b === void 0 ? void 0 : _b.map(function (e) { return e; })) || [];
        message.pubkeys = ((_c = object.pubkeys) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        message.privkeys = ((_d = object.privkeys) === null || _d === void 0 ? void 0 : _d.map(function (e) { return e; })) || [];
        return message;
    }
};
function createBaseBareMetal() {
    return {
        facility: "",
        resource: "",
        model: undefined,
        users: [],
        inframac: "",
        infravid: 0,
        infraport: "",
        infranetAddr: "",
        rootdev: ""
    };
}
exports.BareMetal = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.facility !== "") {
            writer.uint32(10).string(message.facility);
        }
        if (message.resource !== "") {
            writer.uint32(18).string(message.resource);
        }
        if (message.model !== undefined) {
            core_1.Node.encode(message.model, writer.uint32(26).fork()).ldelim();
        }
        for (var _i = 0, _a = message.users; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.UserInfo.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.inframac !== "") {
            writer.uint32(42).string(message.inframac);
        }
        if (message.infravid !== 0) {
            writer.uint32(48).uint32(message.infravid);
        }
        if (message.infraport !== "") {
            writer.uint32(58).string(message.infraport);
        }
        if (message.infranetAddr !== "") {
            writer.uint32(66).string(message.infranetAddr);
        }
        if (message.rootdev !== "") {
            writer.uint32(74).string(message.rootdev);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBareMetal();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.facility = reader.string();
                    break;
                case 2:
                    message.resource = reader.string();
                    break;
                case 3:
                    message.model = core_1.Node.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.users.push(exports.UserInfo.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.inframac = reader.string();
                    break;
                case 6:
                    message.infravid = reader.uint32();
                    break;
                case 7:
                    message.infraport = reader.string();
                    break;
                case 8:
                    message.infranetAddr = reader.string();
                    break;
                case 9:
                    message.rootdev = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            facility: isSet(object.facility) ? String(object.facility) : "",
            resource: isSet(object.resource) ? String(object.resource) : "",
            model: isSet(object.model) ? core_1.Node.fromJSON(object.model) : undefined,
            users: Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map(function (e) { return exports.UserInfo.fromJSON(e); }) : [],
            inframac: isSet(object.inframac) ? String(object.inframac) : "",
            infravid: isSet(object.infravid) ? Number(object.infravid) : 0,
            infraport: isSet(object.infraport) ? String(object.infraport) : "",
            infranetAddr: isSet(object.infranetAddr) ? String(object.infranetAddr) : "",
            rootdev: isSet(object.rootdev) ? String(object.rootdev) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.facility !== undefined && (obj.facility = message.facility);
        message.resource !== undefined && (obj.resource = message.resource);
        message.model !== undefined && (obj.model = message.model ? core_1.Node.toJSON(message.model) : undefined);
        if (message.users) {
            obj.users = message.users.map(function (e) { return e ? exports.UserInfo.toJSON(e) : undefined; });
        }
        else {
            obj.users = [];
        }
        message.inframac !== undefined && (obj.inframac = message.inframac);
        message.infravid !== undefined && (obj.infravid = Math.round(message.infravid));
        message.infraport !== undefined && (obj.infraport = message.infraport);
        message.infranetAddr !== undefined && (obj.infranetAddr = message.infranetAddr);
        message.rootdev !== undefined && (obj.rootdev = message.rootdev);
        return obj;
    },
    create: function (base) {
        return exports.BareMetal.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseBareMetal();
        message.facility = (_a = object.facility) !== null && _a !== void 0 ? _a : "";
        message.resource = (_b = object.resource) !== null && _b !== void 0 ? _b : "";
        message.model = (object.model !== undefined && object.model !== null) ? core_1.Node.fromPartial(object.model) : undefined;
        message.users = ((_c = object.users) === null || _c === void 0 ? void 0 : _c.map(function (e) { return exports.UserInfo.fromPartial(e); })) || [];
        message.inframac = (_d = object.inframac) !== null && _d !== void 0 ? _d : "";
        message.infravid = (_e = object.infravid) !== null && _e !== void 0 ? _e : 0;
        message.infraport = (_f = object.infraport) !== null && _f !== void 0 ? _f : "";
        message.infranetAddr = (_g = object.infranetAddr) !== null && _g !== void 0 ? _g : "";
        message.rootdev = (_h = object.rootdev) !== null && _h !== void 0 ? _h : "";
        return message;
    }
};
function createBaseVirtualMachine() {
    return { vmAlloc: undefined, users: [], inframac: "", infranetAddr: "" };
}
exports.VirtualMachine = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.vmAlloc !== undefined) {
            core_1.ResourceAllocation.encode(message.vmAlloc, writer.uint32(10).fork()).ldelim();
        }
        for (var _i = 0, _a = message.users; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.UserInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.inframac !== "") {
            writer.uint32(26).string(message.inframac);
        }
        if (message.infranetAddr !== "") {
            writer.uint32(34).string(message.infranetAddr);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVirtualMachine();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.vmAlloc = core_1.ResourceAllocation.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.users.push(exports.UserInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.inframac = reader.string();
                    break;
                case 4:
                    message.infranetAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            vmAlloc: isSet(object.vmAlloc) ? core_1.ResourceAllocation.fromJSON(object.vmAlloc) : undefined,
            users: Array.isArray(object === null || object === void 0 ? void 0 : object.users) ? object.users.map(function (e) { return exports.UserInfo.fromJSON(e); }) : [],
            inframac: isSet(object.inframac) ? String(object.inframac) : "",
            infranetAddr: isSet(object.infranetAddr) ? String(object.infranetAddr) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.vmAlloc !== undefined &&
            (obj.vmAlloc = message.vmAlloc ? core_1.ResourceAllocation.toJSON(message.vmAlloc) : undefined);
        if (message.users) {
            obj.users = message.users.map(function (e) { return e ? exports.UserInfo.toJSON(e) : undefined; });
        }
        else {
            obj.users = [];
        }
        message.inframac !== undefined && (obj.inframac = message.inframac);
        message.infranetAddr !== undefined && (obj.infranetAddr = message.infranetAddr);
        return obj;
    },
    create: function (base) {
        return exports.VirtualMachine.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseVirtualMachine();
        message.vmAlloc = (object.vmAlloc !== undefined && object.vmAlloc !== null)
            ? core_1.ResourceAllocation.fromPartial(object.vmAlloc)
            : undefined;
        message.users = ((_a = object.users) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.UserInfo.fromPartial(e); })) || [];
        message.inframac = (_b = object.inframac) !== null && _b !== void 0 ? _b : "";
        message.infranetAddr = (_c = object.infranetAddr) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseLink() {
    return { realization: undefined };
}
exports.Link = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            realize_types_1.LinkRealization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLink();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = realize_types_1.LinkRealization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { realization: isSet(object.realization) ? realize_types_1.LinkRealization.fromJSON(object.realization) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? realize_types_1.LinkRealization.toJSON(message.realization) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Link.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseLink();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? realize_types_1.LinkRealization.fromPartial(object.realization)
            : undefined;
        return message;
    }
};
function createBasePhyo() {
    return { realization: undefined, model: undefined };
}
exports.Phyo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            realize_types_1.PhyoRealization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        if (message.model !== undefined) {
            core_1.Phyo.encode(message.model, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePhyo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = realize_types_1.PhyoRealization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.model = core_1.Phyo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            realization: isSet(object.realization) ? realize_types_1.PhyoRealization.fromJSON(object.realization) : undefined,
            model: isSet(object.model) ? core_1.Phyo.fromJSON(object.model) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? realize_types_1.PhyoRealization.toJSON(message.realization) : undefined);
        message.model !== undefined && (obj.model = message.model ? core_1.Phyo.toJSON(message.model) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Phyo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBasePhyo();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? realize_types_1.PhyoRealization.fromPartial(object.realization)
            : undefined;
        message.model = (object.model !== undefined && object.model !== null) ? core_1.Phyo.fromPartial(object.model) : undefined;
        return message;
    }
};
function createBaseSensor() {
    return { realization: undefined, model: undefined };
}
exports.Sensor = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            realize_types_1.SensorRealization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        if (message.model !== undefined) {
            core_1.Sensor.encode(message.model, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSensor();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = realize_types_1.SensorRealization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.model = core_1.Sensor.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            realization: isSet(object.realization) ? realize_types_1.SensorRealization.fromJSON(object.realization) : undefined,
            model: isSet(object.model) ? core_1.Sensor.fromJSON(object.model) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? realize_types_1.SensorRealization.toJSON(message.realization) : undefined);
        message.model !== undefined && (obj.model = message.model ? core_1.Sensor.toJSON(message.model) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Sensor.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseSensor();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? realize_types_1.SensorRealization.fromPartial(object.realization)
            : undefined;
        message.model = (object.model !== undefined && object.model !== null)
            ? core_1.Sensor.fromPartial(object.model)
            : undefined;
        return message;
    }
};
function createBaseBond() {
    return { realization: undefined, model: undefined };
}
exports.Bond = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            realize_types_1.BondRealization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        if (message.model !== undefined) {
            core_1.Bond.encode(message.model, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseBond();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = realize_types_1.BondRealization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.model = core_1.Bond.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            realization: isSet(object.realization) ? realize_types_1.BondRealization.fromJSON(object.realization) : undefined,
            model: isSet(object.model) ? core_1.Bond.fromJSON(object.model) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? realize_types_1.BondRealization.toJSON(message.realization) : undefined);
        message.model !== undefined && (obj.model = message.model ? core_1.Bond.toJSON(message.model) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Bond.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseBond();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? realize_types_1.BondRealization.fromPartial(object.realization)
            : undefined;
        message.model = (object.model !== undefined && object.model !== null) ? core_1.Bond.fromPartial(object.model) : undefined;
        return message;
    }
};
function createBaseActuator() {
    return { realization: undefined, model: undefined };
}
exports.Actuator = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.realization !== undefined) {
            realize_types_1.ActuatorRealization.encode(message.realization, writer.uint32(10).fork()).ldelim();
        }
        if (message.model !== undefined) {
            core_1.Actuator.encode(message.model, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseActuator();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.realization = realize_types_1.ActuatorRealization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.model = core_1.Actuator.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            realization: isSet(object.realization) ? realize_types_1.ActuatorRealization.fromJSON(object.realization) : undefined,
            model: isSet(object.model) ? core_1.Actuator.fromJSON(object.model) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.realization !== undefined &&
            (obj.realization = message.realization ? realize_types_1.ActuatorRealization.toJSON(message.realization) : undefined);
        message.model !== undefined && (obj.model = message.model ? core_1.Actuator.toJSON(message.model) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.Actuator.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseActuator();
        message.realization = (object.realization !== undefined && object.realization !== null)
            ? realize_types_1.ActuatorRealization.fromPartial(object.realization)
            : undefined;
        message.model = (object.model !== undefined && object.model !== null)
            ? core_1.Actuator.fromPartial(object.model)
            : undefined;
        return message;
    }
};
function createBaseRebootMaterializationRequest() {
    return { mode: 0, project: "", experiment: "", realization: "", hostnames: [], allNodes: false, ver: 0 };
}
exports.RebootMaterializationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mode !== 0) {
            writer.uint32(8).int32(message.mode);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(26).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(34).string(message.realization);
        }
        for (var _i = 0, _a = message.hostnames; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint32(42).string(v);
        }
        if (message.allNodes === true) {
            writer.uint32(48).bool(message.allNodes);
        }
        if (message.ver !== 0) {
            writer.uint32(56).int64(message.ver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRebootMaterializationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mode = reader.int32();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                case 3:
                    message.experiment = reader.string();
                    break;
                case 4:
                    message.realization = reader.string();
                    break;
                case 5:
                    message.hostnames.push(reader.string());
                    break;
                case 6:
                    message.allNodes = reader.bool();
                    break;
                case 7:
                    message.ver = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            mode: isSet(object.mode) ? rebootMaterializationModeFromJSON(object.mode) : 0,
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            hostnames: Array.isArray(object === null || object === void 0 ? void 0 : object.hostnames) ? object.hostnames.map(function (e) { return String(e); }) : [],
            allNodes: isSet(object.allNodes) ? Boolean(object.allNodes) : false,
            ver: isSet(object.ver) ? Number(object.ver) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.mode !== undefined && (obj.mode = rebootMaterializationModeToJSON(message.mode));
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        if (message.hostnames) {
            obj.hostnames = message.hostnames.map(function (e) { return e; });
        }
        else {
            obj.hostnames = [];
        }
        message.allNodes !== undefined && (obj.allNodes = message.allNodes);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        return obj;
    },
    create: function (base) {
        return exports.RebootMaterializationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseRebootMaterializationRequest();
        message.mode = (_a = object.mode) !== null && _a !== void 0 ? _a : 0;
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        message.experiment = (_c = object.experiment) !== null && _c !== void 0 ? _c : "";
        message.realization = (_d = object.realization) !== null && _d !== void 0 ? _d : "";
        message.hostnames = ((_e = object.hostnames) === null || _e === void 0 ? void 0 : _e.map(function (e) { return e; })) || [];
        message.allNodes = (_f = object.allNodes) !== null && _f !== void 0 ? _f : false;
        message.ver = (_g = object.ver) !== null && _g !== void 0 ? _g : 0;
        return message;
    }
};
function createBaseRebootMaterializationResponse() {
    return {};
}
exports.RebootMaterializationResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseRebootMaterializationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.RebootMaterializationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseRebootMaterializationResponse();
        return message;
    }
};
function createBaseGetMaterializationsRequest() {
    return { project: "", experiment: "", filter: 0 };
}
exports.GetMaterializationsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.filter !== 0) {
            writer.uint32(24).int32(message.filter);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.filter = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            filter: isSet(object.filter) ? (0, workspace_types_1.filterModeFromJSON)(object.filter) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.filter !== undefined && (obj.filter = (0, workspace_types_1.filterModeToJSON)(message.filter));
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGetMaterializationsRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.filter = (_c = object.filter) !== null && _c !== void 0 ? _c : 0;
        return message;
    }
};
function createBaseIngress() {
    return { mzid: "", protocol: "", hostname: "", hostport: 0, hostaddr: "", gateway: "", gatewayport: 0, ingress: "" };
}
exports.Ingress = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.mzid !== "") {
            writer.uint32(10).string(message.mzid);
        }
        if (message.protocol !== "") {
            writer.uint32(18).string(message.protocol);
        }
        if (message.hostname !== "") {
            writer.uint32(26).string(message.hostname);
        }
        if (message.hostport !== 0) {
            writer.uint32(32).uint32(message.hostport);
        }
        if (message.hostaddr !== "") {
            writer.uint32(42).string(message.hostaddr);
        }
        if (message.gateway !== "") {
            writer.uint32(50).string(message.gateway);
        }
        if (message.gatewayport !== 0) {
            writer.uint32(56).uint32(message.gatewayport);
        }
        if (message.ingress !== "") {
            writer.uint32(66).string(message.ingress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseIngress();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mzid = reader.string();
                    break;
                case 2:
                    message.protocol = reader.string();
                    break;
                case 3:
                    message.hostname = reader.string();
                    break;
                case 4:
                    message.hostport = reader.uint32();
                    break;
                case 5:
                    message.hostaddr = reader.string();
                    break;
                case 6:
                    message.gateway = reader.string();
                    break;
                case 7:
                    message.gatewayport = reader.uint32();
                    break;
                case 8:
                    message.ingress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            mzid: isSet(object.mzid) ? String(object.mzid) : "",
            protocol: isSet(object.protocol) ? String(object.protocol) : "",
            hostname: isSet(object.hostname) ? String(object.hostname) : "",
            hostport: isSet(object.hostport) ? Number(object.hostport) : 0,
            hostaddr: isSet(object.hostaddr) ? String(object.hostaddr) : "",
            gateway: isSet(object.gateway) ? String(object.gateway) : "",
            gatewayport: isSet(object.gatewayport) ? Number(object.gatewayport) : 0,
            ingress: isSet(object.ingress) ? String(object.ingress) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.mzid !== undefined && (obj.mzid = message.mzid);
        message.protocol !== undefined && (obj.protocol = message.protocol);
        message.hostname !== undefined && (obj.hostname = message.hostname);
        message.hostport !== undefined && (obj.hostport = Math.round(message.hostport));
        message.hostaddr !== undefined && (obj.hostaddr = message.hostaddr);
        message.gateway !== undefined && (obj.gateway = message.gateway);
        message.gatewayport !== undefined && (obj.gatewayport = Math.round(message.gatewayport));
        message.ingress !== undefined && (obj.ingress = message.ingress);
        return obj;
    },
    create: function (base) {
        return exports.Ingress.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseIngress();
        message.mzid = (_a = object.mzid) !== null && _a !== void 0 ? _a : "";
        message.protocol = (_b = object.protocol) !== null && _b !== void 0 ? _b : "";
        message.hostname = (_c = object.hostname) !== null && _c !== void 0 ? _c : "";
        message.hostport = (_d = object.hostport) !== null && _d !== void 0 ? _d : 0;
        message.hostaddr = (_e = object.hostaddr) !== null && _e !== void 0 ? _e : "";
        message.gateway = (_f = object.gateway) !== null && _f !== void 0 ? _f : "";
        message.gatewayport = (_g = object.gatewayport) !== null && _g !== void 0 ? _g : 0;
        message.ingress = (_h = object.ingress) !== null && _h !== void 0 ? _h : "";
        return message;
    }
};
function createBaseIngresses() {
    return { ingresses: [] };
}
exports.Ingresses = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.ingresses; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Ingress.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseIngresses();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ingresses.push(exports.Ingress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { ingresses: Array.isArray(object === null || object === void 0 ? void 0 : object.ingresses) ? object.ingresses.map(function (e) { return exports.Ingress.fromJSON(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.ingresses) {
            obj.ingresses = message.ingresses.map(function (e) { return e ? exports.Ingress.toJSON(e) : undefined; });
        }
        else {
            obj.ingresses = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.Ingresses.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseIngresses();
        message.ingresses = ((_a = object.ingresses) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Ingress.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetMaterializationsResponse() {
    return { materializations: [], statuses: [], ingresses: [] };
}
exports.GetMaterializationsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.materializations; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Materialization.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (var _b = 0, _c = message.statuses; _b < _c.length; _b++) {
            var v = _c[_b];
            taskstatus_1.TaskSummary.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (var _d = 0, _e = message.ingresses; _d < _e.length; _d++) {
            var v = _e[_d];
            exports.Ingresses.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.materializations.push(exports.Materialization.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.statuses.push(taskstatus_1.TaskSummary.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.ingresses.push(exports.Ingresses.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            materializations: Array.isArray(object === null || object === void 0 ? void 0 : object.materializations)
                ? object.materializations.map(function (e) { return exports.Materialization.fromJSON(e); })
                : [],
            statuses: Array.isArray(object === null || object === void 0 ? void 0 : object.statuses) ? object.statuses.map(function (e) { return taskstatus_1.TaskSummary.fromJSON(e); }) : [],
            ingresses: Array.isArray(object === null || object === void 0 ? void 0 : object.ingresses) ? object.ingresses.map(function (e) { return exports.Ingresses.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.materializations) {
            obj.materializations = message.materializations.map(function (e) { return e ? exports.Materialization.toJSON(e) : undefined; });
        }
        else {
            obj.materializations = [];
        }
        if (message.statuses) {
            obj.statuses = message.statuses.map(function (e) { return e ? taskstatus_1.TaskSummary.toJSON(e) : undefined; });
        }
        else {
            obj.statuses = [];
        }
        if (message.ingresses) {
            obj.ingresses = message.ingresses.map(function (e) { return e ? exports.Ingresses.toJSON(e) : undefined; });
        }
        else {
            obj.ingresses = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGetMaterializationsResponse();
        message.materializations = ((_a = object.materializations) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Materialization.fromPartial(e); })) || [];
        message.statuses = ((_b = object.statuses) === null || _b === void 0 ? void 0 : _b.map(function (e) { return taskstatus_1.TaskSummary.fromPartial(e); })) || [];
        message.ingresses = ((_c = object.ingresses) === null || _c === void 0 ? void 0 : _c.map(function (e) { return exports.Ingresses.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetMaterializationRequest() {
    return { project: "", experiment: "", realization: "" };
}
exports.GetMaterializationRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGetMaterializationRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseGetMaterializationResponse() {
    return { materialization: undefined, status: undefined, ingresses: undefined };
}
exports.GetMaterializationResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.materialization !== undefined) {
            exports.Materialization.encode(message.materialization, writer.uint32(10).fork()).ldelim();
        }
        if (message.status !== undefined) {
            taskstatus_1.TaskSummary.encode(message.status, writer.uint32(18).fork()).ldelim();
        }
        if (message.ingresses !== undefined) {
            exports.Ingresses.encode(message.ingresses, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.materialization = exports.Materialization.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.status = taskstatus_1.TaskSummary.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.ingresses = exports.Ingresses.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            materialization: isSet(object.materialization) ? exports.Materialization.fromJSON(object.materialization) : undefined,
            status: isSet(object.status) ? taskstatus_1.TaskSummary.fromJSON(object.status) : undefined,
            ingresses: isSet(object.ingresses) ? exports.Ingresses.fromJSON(object.ingresses) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.materialization !== undefined &&
            (obj.materialization = message.materialization ? exports.Materialization.toJSON(message.materialization) : undefined);
        message.status !== undefined && (obj.status = message.status ? taskstatus_1.TaskSummary.toJSON(message.status) : undefined);
        message.ingresses !== undefined &&
            (obj.ingresses = message.ingresses ? exports.Ingresses.toJSON(message.ingresses) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseGetMaterializationResponse();
        message.materialization = (object.materialization !== undefined && object.materialization !== null)
            ? exports.Materialization.fromPartial(object.materialization)
            : undefined;
        message.status = (object.status !== undefined && object.status !== null)
            ? taskstatus_1.TaskSummary.fromPartial(object.status)
            : undefined;
        message.ingresses = (object.ingresses !== undefined && object.ingresses !== null)
            ? exports.Ingresses.fromPartial(object.ingresses)
            : undefined;
        return message;
    }
};
function createBaseGetMaterializationStatusRequest() {
    return { project: "", experiment: "", realization: "" };
}
exports.GetMaterializationStatusRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationStatusRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationStatusRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGetMaterializationStatusRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseGetMaterializationStatusResponse() {
    return { status: undefined };
}
exports.GetMaterializationStatusResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.status !== undefined) {
            taskstatus_1.TaskForest.encode(message.status, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetMaterializationStatusResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.status = taskstatus_1.TaskForest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { status: isSet(object.status) ? taskstatus_1.TaskForest.fromJSON(object.status) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.status !== undefined && (obj.status = message.status ? taskstatus_1.TaskForest.toJSON(message.status) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.GetMaterializationStatusResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseGetMaterializationStatusResponse();
        message.status = (object.status !== undefined && object.status !== null)
            ? taskstatus_1.TaskForest.fromPartial(object.status)
            : undefined;
        return message;
    }
};
function createBaseMaterializeRequest() {
    return { project: "", experiment: "", realization: "", ver: 0 };
}
exports.MaterializeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        if (message.ver !== 0) {
            writer.uint32(32).int64(message.ver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMaterializeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                case 4:
                    message.ver = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        return obj;
    },
    create: function (base) {
        return exports.MaterializeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMaterializeRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        message.ver = (_d = object.ver) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
};
function createBaseMaterializeResponse() {
    return { materialization: undefined };
}
exports.MaterializeResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.materialization !== undefined) {
            exports.Materialization.encode(message.materialization, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMaterializeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.materialization = exports.Materialization.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            materialization: isSet(object.materialization) ? exports.Materialization.fromJSON(object.materialization) : undefined
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.materialization !== undefined &&
            (obj.materialization = message.materialization ? exports.Materialization.toJSON(message.materialization) : undefined);
        return obj;
    },
    create: function (base) {
        return exports.MaterializeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var message = createBaseMaterializeResponse();
        message.materialization = (object.materialization !== undefined && object.materialization !== null)
            ? exports.Materialization.fromPartial(object.materialization)
            : undefined;
        return message;
    }
};
function createBaseDematerializeRequest() {
    return { project: "", experiment: "", realization: "" };
}
exports.DematerializeRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDematerializeRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.DematerializeRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseDematerializeRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseDematerializeResponse() {
    return {};
}
exports.DematerializeResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDematerializeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.DematerializeResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseDematerializeResponse();
        return message;
    }
};
function createBaseNewIngressRequest() {
    return { project: "", experiment: "", realization: "", protocol: 0, host: "", port: 0 };
}
exports.NewIngressRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        if (message.protocol !== 0) {
            writer.uint32(32).int32(message.protocol);
        }
        if (message.host !== "") {
            writer.uint32(42).string(message.host);
        }
        if (message.port !== 0) {
            writer.uint32(48).uint32(message.port);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNewIngressRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                case 4:
                    message.protocol = reader.int32();
                    break;
                case 5:
                    message.host = reader.string();
                    break;
                case 6:
                    message.port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            protocol: isSet(object.protocol) ? (0, core_1.protocolFromJSON)(object.protocol) : 0,
            host: isSet(object.host) ? String(object.host) : "",
            port: isSet(object.port) ? Number(object.port) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        message.protocol !== undefined && (obj.protocol = (0, core_1.protocolToJSON)(message.protocol));
        message.host !== undefined && (obj.host = message.host);
        message.port !== undefined && (obj.port = Math.round(message.port));
        return obj;
    },
    create: function (base) {
        return exports.NewIngressRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseNewIngressRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        message.protocol = (_d = object.protocol) !== null && _d !== void 0 ? _d : 0;
        message.host = (_e = object.host) !== null && _e !== void 0 ? _e : "";
        message.port = (_f = object.port) !== null && _f !== void 0 ? _f : 0;
        return message;
    }
};
function createBaseNewIngressResponse() {
    return {};
}
exports.NewIngressResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNewIngressResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.NewIngressResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseNewIngressResponse();
        return message;
    }
};
function createBaseDeleteIngressRequest() {
    return { project: "", experiment: "", realization: "", protocol: 0, host: "", port: 0 };
}
exports.DeleteIngressRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(18).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(26).string(message.realization);
        }
        if (message.protocol !== 0) {
            writer.uint32(32).int32(message.protocol);
        }
        if (message.host !== "") {
            writer.uint32(42).string(message.host);
        }
        if (message.port !== 0) {
            writer.uint32(48).uint32(message.port);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeleteIngressRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.experiment = reader.string();
                    break;
                case 3:
                    message.realization = reader.string();
                    break;
                case 4:
                    message.protocol = reader.int32();
                    break;
                case 5:
                    message.host = reader.string();
                    break;
                case 6:
                    message.port = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : "",
            protocol: isSet(object.protocol) ? (0, core_1.protocolFromJSON)(object.protocol) : 0,
            host: isSet(object.host) ? String(object.host) : "",
            port: isSet(object.port) ? Number(object.port) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        message.protocol !== undefined && (obj.protocol = (0, core_1.protocolToJSON)(message.protocol));
        message.host !== undefined && (obj.host = message.host);
        message.port !== undefined && (obj.port = Math.round(message.port));
        return obj;
    },
    create: function (base) {
        return exports.DeleteIngressRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseDeleteIngressRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.experiment = (_b = object.experiment) !== null && _b !== void 0 ? _b : "";
        message.realization = (_c = object.realization) !== null && _c !== void 0 ? _c : "";
        message.protocol = (_d = object.protocol) !== null && _d !== void 0 ? _d : 0;
        message.host = (_e = object.host) !== null && _e !== void 0 ? _e : "";
        message.port = (_f = object.port) !== null && _f !== void 0 ? _f : 0;
        return message;
    }
};
function createBaseDeleteIngressResponse() {
    return {};
}
exports.DeleteIngressResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeleteIngressResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.DeleteIngressResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseDeleteIngressResponse();
        return message;
    }
};
var tsProtoGlobalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
