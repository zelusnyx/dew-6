"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.PatchStrategy = exports.patchStrategy_StrategyToJSON = exports.patchStrategy_StrategyFromJSON = exports.PatchStrategy_Strategy = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "portal.v1";
var PatchStrategy_Strategy;
(function (PatchStrategy_Strategy) {
    /** replace - Replace the entity entirely. */
    PatchStrategy_Strategy[PatchStrategy_Strategy["replace"] = 0] = "replace";
    /** remove - Non nil entities are removed (i.e. remove all entries) */
    PatchStrategy_Strategy[PatchStrategy_Strategy["remove"] = 1] = "remove";
    /** expand - Add things to the entity */
    PatchStrategy_Strategy[PatchStrategy_Strategy["expand"] = 2] = "expand";
    /** subtract - Remove things from the entity */
    PatchStrategy_Strategy[PatchStrategy_Strategy["subtract"] = 3] = "subtract";
    PatchStrategy_Strategy[PatchStrategy_Strategy["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PatchStrategy_Strategy = exports.PatchStrategy_Strategy || (exports.PatchStrategy_Strategy = {}));
function patchStrategy_StrategyFromJSON(object) {
    switch (object) {
        case 0:
        case "replace":
            return PatchStrategy_Strategy.replace;
        case 1:
        case "remove":
            return PatchStrategy_Strategy.remove;
        case 2:
        case "expand":
            return PatchStrategy_Strategy.expand;
        case 3:
        case "subtract":
            return PatchStrategy_Strategy.subtract;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PatchStrategy_Strategy.UNRECOGNIZED;
    }
}
exports.patchStrategy_StrategyFromJSON = patchStrategy_StrategyFromJSON;
function patchStrategy_StrategyToJSON(object) {
    switch (object) {
        case PatchStrategy_Strategy.replace:
            return "replace";
        case PatchStrategy_Strategy.remove:
            return "remove";
        case PatchStrategy_Strategy.expand:
            return "expand";
        case PatchStrategy_Strategy.subtract:
            return "subtract";
        case PatchStrategy_Strategy.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
exports.patchStrategy_StrategyToJSON = patchStrategy_StrategyToJSON;
function createBasePatchStrategy() {
    return { strategy: 0 };
}
exports.PatchStrategy = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.strategy !== 0) {
            writer.uint32(8).int32(message.strategy);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePatchStrategy();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.strategy = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { strategy: isSet(object.strategy) ? patchStrategy_StrategyFromJSON(object.strategy) : 0 };
    },
    toJSON: function (message) {
        var obj = {};
        message.strategy !== undefined && (obj.strategy = patchStrategy_StrategyToJSON(message.strategy));
        return obj;
    },
    create: function (base) {
        return exports.PatchStrategy.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBasePatchStrategy();
        message.strategy = (_a = object.strategy) !== null && _a !== void 0 ? _a : 0;
        return message;
    }
};
function isSet(value) {
    return value !== null && value !== undefined;
}
