/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "portal.v1";

export interface CompileRequest {
  model: string;
}

export interface CompileResponse {
  success: boolean;
  errors: string[];
  network: string;
}

export interface PushRequest {
  model: string;
  branch: string;
  experiment: string;
  project: string;
  tag: string;
}

export interface PushResponse {
  revision: string;
}

function createBaseCompileRequest(): CompileRequest {
  return { model: "" };
}

export const CompileRequest = {
  encode(message: CompileRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompileRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.model = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CompileRequest {
    return { model: isSet(object.model) ? String(object.model) : "" };
  },

  toJSON(message: CompileRequest): unknown {
    const obj: any = {};
    message.model !== undefined && (obj.model = message.model);
    return obj;
  },

  create<I extends Exact<DeepPartial<CompileRequest>, I>>(base?: I): CompileRequest {
    return CompileRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CompileRequest>, I>>(object: I): CompileRequest {
    const message = createBaseCompileRequest();
    message.model = object.model ?? "";
    return message;
  },
};

function createBaseCompileResponse(): CompileResponse {
  return { success: false, errors: [], network: "" };
}

export const CompileResponse = {
  encode(message: CompileResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.success === true) {
      writer.uint32(8).bool(message.success);
    }
    for (const v of message.errors) {
      writer.uint32(18).string(v!);
    }
    if (message.network !== "") {
      writer.uint32(26).string(message.network);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CompileResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCompileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.success = reader.bool();
          break;
        case 2:
          message.errors.push(reader.string());
          break;
        case 3:
          message.network = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CompileResponse {
    return {
      success: isSet(object.success) ? Boolean(object.success) : false,
      errors: Array.isArray(object?.errors) ? object.errors.map((e: any) => String(e)) : [],
      network: isSet(object.network) ? String(object.network) : "",
    };
  },

  toJSON(message: CompileResponse): unknown {
    const obj: any = {};
    message.success !== undefined && (obj.success = message.success);
    if (message.errors) {
      obj.errors = message.errors.map((e) => e);
    } else {
      obj.errors = [];
    }
    message.network !== undefined && (obj.network = message.network);
    return obj;
  },

  create<I extends Exact<DeepPartial<CompileResponse>, I>>(base?: I): CompileResponse {
    return CompileResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<CompileResponse>, I>>(object: I): CompileResponse {
    const message = createBaseCompileResponse();
    message.success = object.success ?? false;
    message.errors = object.errors?.map((e) => e) || [];
    message.network = object.network ?? "";
    return message;
  },
};

function createBasePushRequest(): PushRequest {
  return { model: "", branch: "", experiment: "", project: "", tag: "" };
}

export const PushRequest = {
  encode(message: PushRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.model !== "") {
      writer.uint32(10).string(message.model);
    }
    if (message.branch !== "") {
      writer.uint32(18).string(message.branch);
    }
    if (message.experiment !== "") {
      writer.uint32(26).string(message.experiment);
    }
    if (message.project !== "") {
      writer.uint32(34).string(message.project);
    }
    if (message.tag !== "") {
      writer.uint32(42).string(message.tag);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PushRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.model = reader.string();
          break;
        case 2:
          message.branch = reader.string();
          break;
        case 3:
          message.experiment = reader.string();
          break;
        case 4:
          message.project = reader.string();
          break;
        case 5:
          message.tag = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PushRequest {
    return {
      model: isSet(object.model) ? String(object.model) : "",
      branch: isSet(object.branch) ? String(object.branch) : "",
      experiment: isSet(object.experiment) ? String(object.experiment) : "",
      project: isSet(object.project) ? String(object.project) : "",
      tag: isSet(object.tag) ? String(object.tag) : "",
    };
  },

  toJSON(message: PushRequest): unknown {
    const obj: any = {};
    message.model !== undefined && (obj.model = message.model);
    message.branch !== undefined && (obj.branch = message.branch);
    message.experiment !== undefined && (obj.experiment = message.experiment);
    message.project !== undefined && (obj.project = message.project);
    message.tag !== undefined && (obj.tag = message.tag);
    return obj;
  },

  create<I extends Exact<DeepPartial<PushRequest>, I>>(base?: I): PushRequest {
    return PushRequest.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PushRequest>, I>>(object: I): PushRequest {
    const message = createBasePushRequest();
    message.model = object.model ?? "";
    message.branch = object.branch ?? "";
    message.experiment = object.experiment ?? "";
    message.project = object.project ?? "";
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBasePushResponse(): PushResponse {
  return { revision: "" };
}

export const PushResponse = {
  encode(message: PushResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.revision !== "") {
      writer.uint32(10).string(message.revision);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PushResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.revision = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PushResponse {
    return { revision: isSet(object.revision) ? String(object.revision) : "" };
  },

  toJSON(message: PushResponse): unknown {
    const obj: any = {};
    message.revision !== undefined && (obj.revision = message.revision);
    return obj;
  },

  create<I extends Exact<DeepPartial<PushResponse>, I>>(base?: I): PushResponse {
    return PushResponse.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PushResponse>, I>>(object: I): PushResponse {
    const message = createBasePushResponse();
    message.revision = object.revision ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
