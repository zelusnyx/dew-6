/* eslint-disable */
import _m0 from "protobufjs/minimal";

export const protobufPackage = "portal.v1";

export interface PatchStrategy {
  strategy: PatchStrategy_Strategy;
}

export enum PatchStrategy_Strategy {
  /** replace - Replace the entity entirely. */
  replace = 0,
  /** remove - Non nil entities are removed (i.e. remove all entries) */
  remove = 1,
  /** expand - Add things to the entity */
  expand = 2,
  /** subtract - Remove things from the entity */
  subtract = 3,
  UNRECOGNIZED = -1,
}

export function patchStrategy_StrategyFromJSON(object: any): PatchStrategy_Strategy {
  switch (object) {
    case 0:
    case "replace":
      return PatchStrategy_Strategy.replace;
    case 1:
    case "remove":
      return PatchStrategy_Strategy.remove;
    case 2:
    case "expand":
      return PatchStrategy_Strategy.expand;
    case 3:
    case "subtract":
      return PatchStrategy_Strategy.subtract;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PatchStrategy_Strategy.UNRECOGNIZED;
  }
}

export function patchStrategy_StrategyToJSON(object: PatchStrategy_Strategy): string {
  switch (object) {
    case PatchStrategy_Strategy.replace:
      return "replace";
    case PatchStrategy_Strategy.remove:
      return "remove";
    case PatchStrategy_Strategy.expand:
      return "expand";
    case PatchStrategy_Strategy.subtract:
      return "subtract";
    case PatchStrategy_Strategy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBasePatchStrategy(): PatchStrategy {
  return { strategy: 0 };
}

export const PatchStrategy = {
  encode(message: PatchStrategy, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.strategy !== 0) {
      writer.uint32(8).int32(message.strategy);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PatchStrategy {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchStrategy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.strategy = reader.int32() as any;
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): PatchStrategy {
    return { strategy: isSet(object.strategy) ? patchStrategy_StrategyFromJSON(object.strategy) : 0 };
  },

  toJSON(message: PatchStrategy): unknown {
    const obj: any = {};
    message.strategy !== undefined && (obj.strategy = patchStrategy_StrategyToJSON(message.strategy));
    return obj;
  },

  create<I extends Exact<DeepPartial<PatchStrategy>, I>>(base?: I): PatchStrategy {
    return PatchStrategy.fromPartial(base ?? {});
  },

  fromPartial<I extends Exact<DeepPartial<PatchStrategy>, I>>(object: I): PatchStrategy {
    const message = createBasePatchStrategy();
    message.strategy = object.strategy ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
