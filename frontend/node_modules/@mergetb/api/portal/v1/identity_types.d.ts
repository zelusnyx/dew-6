import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "portal.v1";
export interface IdentityInfo {
    /** The identity of the user. */
    username: string;
    /** The user's email. */
    email: string;
    /**
     * This is an administrator account. Can only be set by existing admins.
     *
     * @deprecated
     */
    admin: boolean;
    traits: {
        [key: string]: string;
    };
}
export interface IdentityInfo_TraitsEntry {
    key: string;
    value: string;
}
export interface ListIdentityRequest {
}
export interface ListIdentityResponse {
    identities: IdentityInfo[];
}
export interface GetIdentityRequest {
    /** The identity of the user. */
    username: string;
}
export interface GetIdentityResponse {
    identity: IdentityInfo | undefined;
}
export interface RegisterRequest {
    /** The identity of the user. */
    username: string;
    /** The user's email. */
    email: string;
    /** The user's password. */
    password: string;
    /** This is an administrator account. Can only be set by existing admins. */
    admin: boolean;
    /**
     * Traits not explicity specified by this API.
     * Depreciated.
     *
     * @deprecated
     */
    traits: {
        [key: string]: string;
    };
    /** User data */
    institution: string;
    category: string;
    country: string;
    usstate: string;
    name: string;
}
export interface RegisterRequest_TraitsEntry {
    key: string;
    value: string;
}
export interface RegisterResponse {
}
export interface LoginRequest {
    /** The identity of the user. */
    username: string;
    /** The user's password. */
    password: string;
}
export interface LoginResponse {
    /** An OAuth2 access token. */
    token: string;
}
export interface LogoutRequest {
    /** The identity of the user. */
    username: string;
}
export interface LogoutResponse {
}
export interface UnregisterRequest {
    /** The identity of the user. */
    username: string;
}
export interface UnregisterResponse {
}
export declare const IdentityInfo: {
    encode(message: IdentityInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IdentityInfo;
    fromJSON(object: any): IdentityInfo;
    toJSON(message: IdentityInfo): unknown;
    create<I extends {
        username?: string;
        email?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        };
    } & {
        username?: string;
        email?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K in Exclude<keyof I["traits"], string | number>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof IdentityInfo>]: never; }>(base?: I): IdentityInfo;
    fromPartial<I_1 extends {
        username?: string;
        email?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        };
    } & {
        username?: string;
        email?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_2 in Exclude<keyof I_1["traits"], string | number>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof IdentityInfo>]: never; }>(object: I_1): IdentityInfo;
};
export declare const IdentityInfo_TraitsEntry: {
    encode(message: IdentityInfo_TraitsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): IdentityInfo_TraitsEntry;
    fromJSON(object: any): IdentityInfo_TraitsEntry;
    toJSON(message: IdentityInfo_TraitsEntry): unknown;
    create<I extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K in Exclude<keyof I, keyof IdentityInfo_TraitsEntry>]: never; }>(base?: I): IdentityInfo_TraitsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof IdentityInfo_TraitsEntry>]: never; }>(object: I_1): IdentityInfo_TraitsEntry;
};
export declare const ListIdentityRequest: {
    encode(_: ListIdentityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListIdentityRequest;
    fromJSON(_: any): ListIdentityRequest;
    toJSON(_: ListIdentityRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ListIdentityRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ListIdentityRequest;
};
export declare const ListIdentityResponse: {
    encode(message: ListIdentityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ListIdentityResponse;
    fromJSON(object: any): ListIdentityResponse;
    toJSON(message: ListIdentityResponse): unknown;
    create<I extends {
        identities?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[];
    } & {
        identities?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[] & ({
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        } & {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K in Exclude<keyof I["identities"][number]["traits"], string | number>]: never; };
        } & { [K_1 in Exclude<keyof I["identities"][number], keyof IdentityInfo>]: never; })[] & { [K_2 in Exclude<keyof I["identities"], keyof {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "identities">]: never; }>(base?: I): ListIdentityResponse;
    fromPartial<I_1 extends {
        identities?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[];
    } & {
        identities?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[] & ({
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        } & {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_4 in Exclude<keyof I_1["identities"][number]["traits"], string | number>]: never; };
        } & { [K_5 in Exclude<keyof I_1["identities"][number], keyof IdentityInfo>]: never; })[] & { [K_6 in Exclude<keyof I_1["identities"], keyof {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "identities">]: never; }>(object: I_1): ListIdentityResponse;
};
export declare const GetIdentityRequest: {
    encode(message: GetIdentityRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetIdentityRequest;
    fromJSON(object: any): GetIdentityRequest;
    toJSON(message: GetIdentityRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): GetIdentityRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): GetIdentityRequest;
};
export declare const GetIdentityResponse: {
    encode(message: GetIdentityResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetIdentityResponse;
    fromJSON(object: any): GetIdentityResponse;
    toJSON(message: GetIdentityResponse): unknown;
    create<I extends {
        identity?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        };
    } & {
        identity?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        } & {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K in Exclude<keyof I["identity"]["traits"], string | number>]: never; };
        } & { [K_1 in Exclude<keyof I["identity"], keyof IdentityInfo>]: never; };
    } & { [K_2 in Exclude<keyof I, "identity">]: never; }>(base?: I): GetIdentityResponse;
    fromPartial<I_1 extends {
        identity?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        };
    } & {
        identity?: {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            };
        } & {
            username?: string;
            email?: string;
            admin?: boolean;
            traits?: {
                [x: string]: string;
            } & {
                [x: string]: string;
            } & { [K_3 in Exclude<keyof I_1["identity"]["traits"], string | number>]: never; };
        } & { [K_4 in Exclude<keyof I_1["identity"], keyof IdentityInfo>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "identity">]: never; }>(object: I_1): GetIdentityResponse;
};
export declare const RegisterRequest: {
    encode(message: RegisterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterRequest;
    fromJSON(object: any): RegisterRequest;
    toJSON(message: RegisterRequest): unknown;
    create<I extends {
        username?: string;
        email?: string;
        password?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        };
        institution?: string;
        category?: string;
        country?: string;
        usstate?: string;
        name?: string;
    } & {
        username?: string;
        email?: string;
        password?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K in Exclude<keyof I["traits"], string | number>]: never; };
        institution?: string;
        category?: string;
        country?: string;
        usstate?: string;
        name?: string;
    } & { [K_1 in Exclude<keyof I, keyof RegisterRequest>]: never; }>(base?: I): RegisterRequest;
    fromPartial<I_1 extends {
        username?: string;
        email?: string;
        password?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        };
        institution?: string;
        category?: string;
        country?: string;
        usstate?: string;
        name?: string;
    } & {
        username?: string;
        email?: string;
        password?: string;
        admin?: boolean;
        traits?: {
            [x: string]: string;
        } & {
            [x: string]: string;
        } & { [K_2 in Exclude<keyof I_1["traits"], string | number>]: never; };
        institution?: string;
        category?: string;
        country?: string;
        usstate?: string;
        name?: string;
    } & { [K_3 in Exclude<keyof I_1, keyof RegisterRequest>]: never; }>(object: I_1): RegisterRequest;
};
export declare const RegisterRequest_TraitsEntry: {
    encode(message: RegisterRequest_TraitsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterRequest_TraitsEntry;
    fromJSON(object: any): RegisterRequest_TraitsEntry;
    toJSON(message: RegisterRequest_TraitsEntry): unknown;
    create<I extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K in Exclude<keyof I, keyof RegisterRequest_TraitsEntry>]: never; }>(base?: I): RegisterRequest_TraitsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: string;
    } & {
        key?: string;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RegisterRequest_TraitsEntry>]: never; }>(object: I_1): RegisterRequest_TraitsEntry;
};
export declare const RegisterResponse: {
    encode(_: RegisterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RegisterResponse;
    fromJSON(_: any): RegisterResponse;
    toJSON(_: RegisterResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): RegisterResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): RegisterResponse;
};
export declare const LoginRequest: {
    encode(message: LoginRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginRequest;
    fromJSON(object: any): LoginRequest;
    toJSON(message: LoginRequest): unknown;
    create<I extends {
        username?: string;
        password?: string;
    } & {
        username?: string;
        password?: string;
    } & { [K in Exclude<keyof I, keyof LoginRequest>]: never; }>(base?: I): LoginRequest;
    fromPartial<I_1 extends {
        username?: string;
        password?: string;
    } & {
        username?: string;
        password?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof LoginRequest>]: never; }>(object: I_1): LoginRequest;
};
export declare const LoginResponse: {
    encode(message: LoginResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LoginResponse;
    fromJSON(object: any): LoginResponse;
    toJSON(message: LoginResponse): unknown;
    create<I extends {
        token?: string;
    } & {
        token?: string;
    } & { [K in Exclude<keyof I, "token">]: never; }>(base?: I): LoginResponse;
    fromPartial<I_1 extends {
        token?: string;
    } & {
        token?: string;
    } & { [K_1 in Exclude<keyof I_1, "token">]: never; }>(object: I_1): LoginResponse;
};
export declare const LogoutRequest: {
    encode(message: LogoutRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogoutRequest;
    fromJSON(object: any): LogoutRequest;
    toJSON(message: LogoutRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): LogoutRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): LogoutRequest;
};
export declare const LogoutResponse: {
    encode(_: LogoutResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LogoutResponse;
    fromJSON(_: any): LogoutResponse;
    toJSON(_: LogoutResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): LogoutResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): LogoutResponse;
};
export declare const UnregisterRequest: {
    encode(message: UnregisterRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterRequest;
    fromJSON(object: any): UnregisterRequest;
    toJSON(message: UnregisterRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): UnregisterRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): UnregisterRequest;
};
export declare const UnregisterResponse: {
    encode(_: UnregisterResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UnregisterResponse;
    fromJSON(_: any): UnregisterResponse;
    toJSON(_: UnregisterResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UnregisterResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UnregisterResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
