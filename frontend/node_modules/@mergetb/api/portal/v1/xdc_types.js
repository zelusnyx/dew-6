"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.JupyterCfg = exports.SSHJump = exports.GetXDCJumpHostsResponse = exports.GetXDCJumpHostsRequest = exports.XDCTunnelGatewayResponse = exports.XDCTunnelGateway = exports.XDCTunnelGatewayRequest = exports.DetachXDCResponse = exports.DetachXDCRequest = exports.AttachXDCResponse = exports.AttachXDCRequest = exports.DeleteXDCResponse = exports.DeleteXDCRequest = exports.CreateXDCResponse = exports.CreateXDCRequest = exports.ListXDCsResponse = exports.ListXDCsRequest = exports.XDCInfo = exports.XDCStorage = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "portal.v1";
function createBaseXDCStorage() {
    return { name: "", project: "", creator: "", memLimit: 0, cpuLimit: 0, image: "", ver: 0, materialization: "" };
}
exports.XDCStorage = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        if (message.creator !== "") {
            writer.uint32(26).string(message.creator);
        }
        if (message.memLimit !== 0) {
            writer.uint32(32).int32(message.memLimit);
        }
        if (message.cpuLimit !== 0) {
            writer.uint32(40).int32(message.cpuLimit);
        }
        if (message.image !== "") {
            writer.uint32(50).string(message.image);
        }
        if (message.ver !== 0) {
            writer.uint32(64).int64(message.ver);
        }
        if (message.materialization !== "") {
            writer.uint32(74).string(message.materialization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseXDCStorage();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                case 3:
                    message.creator = reader.string();
                    break;
                case 4:
                    message.memLimit = reader.int32();
                    break;
                case 5:
                    message.cpuLimit = reader.int32();
                    break;
                case 6:
                    message.image = reader.string();
                    break;
                case 8:
                    message.ver = longToNumber(reader.int64());
                    break;
                case 9:
                    message.materialization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            project: isSet(object.project) ? String(object.project) : "",
            creator: isSet(object.creator) ? String(object.creator) : "",
            memLimit: isSet(object.memLimit) ? Number(object.memLimit) : 0,
            cpuLimit: isSet(object.cpuLimit) ? Number(object.cpuLimit) : 0,
            image: isSet(object.image) ? String(object.image) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0,
            materialization: isSet(object.materialization) ? String(object.materialization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.project !== undefined && (obj.project = message.project);
        message.creator !== undefined && (obj.creator = message.creator);
        message.memLimit !== undefined && (obj.memLimit = Math.round(message.memLimit));
        message.cpuLimit !== undefined && (obj.cpuLimit = Math.round(message.cpuLimit));
        message.image !== undefined && (obj.image = message.image);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        message.materialization !== undefined && (obj.materialization = message.materialization);
        return obj;
    },
    create: function (base) {
        return exports.XDCStorage.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseXDCStorage();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        message.creator = (_c = object.creator) !== null && _c !== void 0 ? _c : "";
        message.memLimit = (_d = object.memLimit) !== null && _d !== void 0 ? _d : 0;
        message.cpuLimit = (_e = object.cpuLimit) !== null && _e !== void 0 ? _e : 0;
        message.image = (_f = object.image) !== null && _f !== void 0 ? _f : "";
        message.ver = (_g = object.ver) !== null && _g !== void 0 ? _g : 0;
        message.materialization = (_h = object.materialization) !== null && _h !== void 0 ? _h : "";
        return message;
    }
};
function createBaseXDCInfo() {
    return { name: "", url: "", fqdn: "", creator: "", memlimit: 0, cpulimit: 0, image: "", materialization: "" };
}
exports.XDCInfo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        if (message.fqdn !== "") {
            writer.uint32(26).string(message.fqdn);
        }
        if (message.creator !== "") {
            writer.uint32(34).string(message.creator);
        }
        if (message.memlimit !== 0) {
            writer.uint32(40).int32(message.memlimit);
        }
        if (message.cpulimit !== 0) {
            writer.uint32(48).int32(message.cpulimit);
        }
        if (message.image !== "") {
            writer.uint32(58).string(message.image);
        }
        if (message.materialization !== "") {
            writer.uint32(66).string(message.materialization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseXDCInfo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.fqdn = reader.string();
                    break;
                case 4:
                    message.creator = reader.string();
                    break;
                case 5:
                    message.memlimit = reader.int32();
                    break;
                case 6:
                    message.cpulimit = reader.int32();
                    break;
                case 7:
                    message.image = reader.string();
                    break;
                case 8:
                    message.materialization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            url: isSet(object.url) ? String(object.url) : "",
            fqdn: isSet(object.fqdn) ? String(object.fqdn) : "",
            creator: isSet(object.creator) ? String(object.creator) : "",
            memlimit: isSet(object.memlimit) ? Number(object.memlimit) : 0,
            cpulimit: isSet(object.cpulimit) ? Number(object.cpulimit) : 0,
            image: isSet(object.image) ? String(object.image) : "",
            materialization: isSet(object.materialization) ? String(object.materialization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.url !== undefined && (obj.url = message.url);
        message.fqdn !== undefined && (obj.fqdn = message.fqdn);
        message.creator !== undefined && (obj.creator = message.creator);
        message.memlimit !== undefined && (obj.memlimit = Math.round(message.memlimit));
        message.cpulimit !== undefined && (obj.cpulimit = Math.round(message.cpulimit));
        message.image !== undefined && (obj.image = message.image);
        message.materialization !== undefined && (obj.materialization = message.materialization);
        return obj;
    },
    create: function (base) {
        return exports.XDCInfo.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseXDCInfo();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : "";
        message.fqdn = (_c = object.fqdn) !== null && _c !== void 0 ? _c : "";
        message.creator = (_d = object.creator) !== null && _d !== void 0 ? _d : "";
        message.memlimit = (_e = object.memlimit) !== null && _e !== void 0 ? _e : 0;
        message.cpulimit = (_f = object.cpulimit) !== null && _f !== void 0 ? _f : 0;
        message.image = (_g = object.image) !== null && _g !== void 0 ? _g : "";
        message.materialization = (_h = object.materialization) !== null && _h !== void 0 ? _h : "";
        return message;
    }
};
function createBaseListXDCsRequest() {
    return { project: "" };
}
exports.ListXDCsRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseListXDCsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { project: isSet(object.project) ? String(object.project) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        return obj;
    },
    create: function (base) {
        return exports.ListXDCsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseListXDCsRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseListXDCsResponse() {
    return { XDCs: [] };
}
exports.ListXDCsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.XDCs; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.XDCInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseListXDCsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.XDCs.push(exports.XDCInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { XDCs: Array.isArray(object === null || object === void 0 ? void 0 : object.XDCs) ? object.XDCs.map(function (e) { return exports.XDCInfo.fromJSON(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.XDCs) {
            obj.XDCs = message.XDCs.map(function (e) { return e ? exports.XDCInfo.toJSON(e) : undefined; });
        }
        else {
            obj.XDCs = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.ListXDCsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseListXDCsResponse();
        message.XDCs = ((_a = object.XDCs) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.XDCInfo.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseCreateXDCRequest() {
    return { project: "", xdc: "", image: "", memlimit: 0, cpulimit: 0 };
}
exports.CreateXDCRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.xdc !== "") {
            writer.uint32(18).string(message.xdc);
        }
        if (message.image !== "") {
            writer.uint32(26).string(message.image);
        }
        if (message.memlimit !== 0) {
            writer.uint32(32).int32(message.memlimit);
        }
        if (message.cpulimit !== 0) {
            writer.uint32(40).int32(message.cpulimit);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateXDCRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.xdc = reader.string();
                    break;
                case 3:
                    message.image = reader.string();
                    break;
                case 4:
                    message.memlimit = reader.int32();
                    break;
                case 5:
                    message.cpulimit = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            xdc: isSet(object.xdc) ? String(object.xdc) : "",
            image: isSet(object.image) ? String(object.image) : "",
            memlimit: isSet(object.memlimit) ? Number(object.memlimit) : 0,
            cpulimit: isSet(object.cpulimit) ? Number(object.cpulimit) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.xdc !== undefined && (obj.xdc = message.xdc);
        message.image !== undefined && (obj.image = message.image);
        message.memlimit !== undefined && (obj.memlimit = Math.round(message.memlimit));
        message.cpulimit !== undefined && (obj.cpulimit = Math.round(message.cpulimit));
        return obj;
    },
    create: function (base) {
        return exports.CreateXDCRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseCreateXDCRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.xdc = (_b = object.xdc) !== null && _b !== void 0 ? _b : "";
        message.image = (_c = object.image) !== null && _c !== void 0 ? _c : "";
        message.memlimit = (_d = object.memlimit) !== null && _d !== void 0 ? _d : 0;
        message.cpulimit = (_e = object.cpulimit) !== null && _e !== void 0 ? _e : 0;
        return message;
    }
};
function createBaseCreateXDCResponse() {
    return {};
}
exports.CreateXDCResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCreateXDCResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.CreateXDCResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseCreateXDCResponse();
        return message;
    }
};
function createBaseDeleteXDCRequest() {
    return { project: "", xdc: "" };
}
exports.DeleteXDCRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.project !== "") {
            writer.uint32(10).string(message.project);
        }
        if (message.xdc !== "") {
            writer.uint32(18).string(message.xdc);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeleteXDCRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.project = reader.string();
                    break;
                case 2:
                    message.xdc = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            project: isSet(object.project) ? String(object.project) : "",
            xdc: isSet(object.xdc) ? String(object.xdc) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.project !== undefined && (obj.project = message.project);
        message.xdc !== undefined && (obj.xdc = message.xdc);
        return obj;
    },
    create: function (base) {
        return exports.DeleteXDCRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseDeleteXDCRequest();
        message.project = (_a = object.project) !== null && _a !== void 0 ? _a : "";
        message.xdc = (_b = object.xdc) !== null && _b !== void 0 ? _b : "";
        return message;
    }
};
function createBaseDeleteXDCResponse() {
    return {};
}
exports.DeleteXDCResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDeleteXDCResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.DeleteXDCResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseDeleteXDCResponse();
        return message;
    }
};
function createBaseAttachXDCRequest() {
    return { xdc: "", project: "", experiment: "", realization: "" };
}
exports.AttachXDCRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.xdc !== "") {
            writer.uint32(10).string(message.xdc);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(26).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(34).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAttachXDCRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.xdc = reader.string();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                case 3:
                    message.experiment = reader.string();
                    break;
                case 4:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            xdc: isSet(object.xdc) ? String(object.xdc) : "",
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.xdc !== undefined && (obj.xdc = message.xdc);
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.AttachXDCRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseAttachXDCRequest();
        message.xdc = (_a = object.xdc) !== null && _a !== void 0 ? _a : "";
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        message.experiment = (_c = object.experiment) !== null && _c !== void 0 ? _c : "";
        message.realization = (_d = object.realization) !== null && _d !== void 0 ? _d : "";
        return message;
    }
};
function createBaseAttachXDCResponse() {
    return {};
}
exports.AttachXDCResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAttachXDCResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.AttachXDCResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseAttachXDCResponse();
        return message;
    }
};
function createBaseDetachXDCRequest() {
    return { xdc: "", project: "", experiment: "", realization: "" };
}
exports.DetachXDCRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.xdc !== "") {
            writer.uint32(10).string(message.xdc);
        }
        if (message.project !== "") {
            writer.uint32(18).string(message.project);
        }
        if (message.experiment !== "") {
            writer.uint32(26).string(message.experiment);
        }
        if (message.realization !== "") {
            writer.uint32(34).string(message.realization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDetachXDCRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.xdc = reader.string();
                    break;
                case 2:
                    message.project = reader.string();
                    break;
                case 3:
                    message.experiment = reader.string();
                    break;
                case 4:
                    message.realization = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            xdc: isSet(object.xdc) ? String(object.xdc) : "",
            project: isSet(object.project) ? String(object.project) : "",
            experiment: isSet(object.experiment) ? String(object.experiment) : "",
            realization: isSet(object.realization) ? String(object.realization) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.xdc !== undefined && (obj.xdc = message.xdc);
        message.project !== undefined && (obj.project = message.project);
        message.experiment !== undefined && (obj.experiment = message.experiment);
        message.realization !== undefined && (obj.realization = message.realization);
        return obj;
    },
    create: function (base) {
        return exports.DetachXDCRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseDetachXDCRequest();
        message.xdc = (_a = object.xdc) !== null && _a !== void 0 ? _a : "";
        message.project = (_b = object.project) !== null && _b !== void 0 ? _b : "";
        message.experiment = (_c = object.experiment) !== null && _c !== void 0 ? _c : "";
        message.realization = (_d = object.realization) !== null && _d !== void 0 ? _d : "";
        return message;
    }
};
function createBaseDetachXDCResponse() {
    return {};
}
exports.DetachXDCResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseDetachXDCResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.DetachXDCResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseDetachXDCResponse();
        return message;
    }
};
function createBaseXDCTunnelGatewayRequest() {
    return { site: "" };
}
exports.XDCTunnelGatewayRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.site !== "") {
            writer.uint32(10).string(message.site);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseXDCTunnelGatewayRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.site = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { site: isSet(object.site) ? String(object.site) : "" };
    },
    toJSON: function (message) {
        var obj = {};
        message.site !== undefined && (obj.site = message.site);
        return obj;
    },
    create: function (base) {
        return exports.XDCTunnelGatewayRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseXDCTunnelGatewayRequest();
        message.site = (_a = object.site) !== null && _a !== void 0 ? _a : "";
        return message;
    }
};
function createBaseXDCTunnelGateway() {
    return { key: "", endpoint: "", allowedips: "" };
}
exports.XDCTunnelGateway = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.endpoint !== "") {
            writer.uint32(18).string(message.endpoint);
        }
        if (message.allowedips !== "") {
            writer.uint32(26).string(message.allowedips);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseXDCTunnelGateway();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.endpoint = reader.string();
                    break;
                case 3:
                    message.allowedips = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            endpoint: isSet(object.endpoint) ? String(object.endpoint) : "",
            allowedips: isSet(object.allowedips) ? String(object.allowedips) : ""
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.endpoint !== undefined && (obj.endpoint = message.endpoint);
        message.allowedips !== undefined && (obj.allowedips = message.allowedips);
        return obj;
    },
    create: function (base) {
        return exports.XDCTunnelGateway.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseXDCTunnelGateway();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.endpoint = (_b = object.endpoint) !== null && _b !== void 0 ? _b : "";
        message.allowedips = (_c = object.allowedips) !== null && _c !== void 0 ? _c : "";
        return message;
    }
};
function createBaseXDCTunnelGatewayResponse() {
    return { Gateways: [] };
}
exports.XDCTunnelGatewayResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.Gateways; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.XDCTunnelGateway.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseXDCTunnelGatewayResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.Gateways.push(exports.XDCTunnelGateway.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            Gateways: Array.isArray(object === null || object === void 0 ? void 0 : object.Gateways) ? object.Gateways.map(function (e) { return exports.XDCTunnelGateway.fromJSON(e); }) : []
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.Gateways) {
            obj.Gateways = message.Gateways.map(function (e) { return e ? exports.XDCTunnelGateway.toJSON(e) : undefined; });
        }
        else {
            obj.Gateways = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.XDCTunnelGatewayResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseXDCTunnelGatewayResponse();
        message.Gateways = ((_a = object.Gateways) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.XDCTunnelGateway.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseGetXDCJumpHostsRequest() {
    return {};
}
exports.GetXDCJumpHostsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetXDCJumpHostsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.GetXDCJumpHostsRequest.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseGetXDCJumpHostsRequest();
        return message;
    }
};
function createBaseGetXDCJumpHostsResponse() {
    return { JumpHosts: [] };
}
exports.GetXDCJumpHostsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        for (var _i = 0, _a = message.JumpHosts; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.SSHJump.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGetXDCJumpHostsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.JumpHosts.push(exports.SSHJump.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { JumpHosts: Array.isArray(object === null || object === void 0 ? void 0 : object.JumpHosts) ? object.JumpHosts.map(function (e) { return exports.SSHJump.fromJSON(e); }) : [] };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.JumpHosts) {
            obj.JumpHosts = message.JumpHosts.map(function (e) { return e ? exports.SSHJump.toJSON(e) : undefined; });
        }
        else {
            obj.JumpHosts = [];
        }
        return obj;
    },
    create: function (base) {
        return exports.GetXDCJumpHostsResponse.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGetXDCJumpHostsResponse();
        message.JumpHosts = ((_a = object.JumpHosts) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.SSHJump.fromPartial(e); })) || [];
        return message;
    }
};
function createBaseSSHJump() {
    return { name: "", port: 0, fqdn: "", ver: 0 };
}
exports.SSHJump = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.port !== 0) {
            writer.uint32(16).uint32(message.port);
        }
        if (message.fqdn !== "") {
            writer.uint32(26).string(message.fqdn);
        }
        if (message.ver !== 0) {
            writer.uint32(32).int64(message.ver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseSSHJump();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.port = reader.uint32();
                    break;
                case 3:
                    message.fqdn = reader.string();
                    break;
                case 4:
                    message.ver = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? String(object.name) : "",
            port: isSet(object.port) ? Number(object.port) : 0,
            fqdn: isSet(object.fqdn) ? String(object.fqdn) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.port !== undefined && (obj.port = Math.round(message.port));
        message.fqdn !== undefined && (obj.fqdn = message.fqdn);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        return obj;
    },
    create: function (base) {
        return exports.SSHJump.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseSSHJump();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.port = (_b = object.port) !== null && _b !== void 0 ? _b : 0;
        message.fqdn = (_c = object.fqdn) !== null && _c !== void 0 ? _c : "";
        message.ver = (_d = object.ver) !== null && _d !== void 0 ? _d : 0;
        return message;
    }
};
function createBaseJupyterCfg() {
    return { token: "", url: "", host: "", domain: "", ver: 0 };
}
exports.JupyterCfg = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1["default"].Writer.create(); }
        if (message.token !== "") {
            writer.uint32(10).string(message.token);
        }
        if (message.url !== "") {
            writer.uint32(18).string(message.url);
        }
        if (message.host !== "") {
            writer.uint32(26).string(message.host);
        }
        if (message.domain !== "") {
            writer.uint32(34).string(message.domain);
        }
        if (message.ver !== 0) {
            writer.uint32(40).int64(message.ver);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1["default"].Reader ? input : new minimal_1["default"].Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseJupyterCfg();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.token = reader.string();
                    break;
                case 2:
                    message.url = reader.string();
                    break;
                case 3:
                    message.host = reader.string();
                    break;
                case 4:
                    message.domain = reader.string();
                    break;
                case 5:
                    message.ver = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            token: isSet(object.token) ? String(object.token) : "",
            url: isSet(object.url) ? String(object.url) : "",
            host: isSet(object.host) ? String(object.host) : "",
            domain: isSet(object.domain) ? String(object.domain) : "",
            ver: isSet(object.ver) ? Number(object.ver) : 0
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.token !== undefined && (obj.token = message.token);
        message.url !== undefined && (obj.url = message.url);
        message.host !== undefined && (obj.host = message.host);
        message.domain !== undefined && (obj.domain = message.domain);
        message.ver !== undefined && (obj.ver = Math.round(message.ver));
        return obj;
    },
    create: function (base) {
        return exports.JupyterCfg.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseJupyterCfg();
        message.token = (_a = object.token) !== null && _a !== void 0 ? _a : "";
        message.url = (_b = object.url) !== null && _b !== void 0 ? _b : "";
        message.host = (_c = object.host) !== null && _c !== void 0 ? _c : "";
        message.domain = (_d = object.domain) !== null && _d !== void 0 ? _d : "";
        message.ver = (_e = object.ver) !== null && _e !== void 0 ? _e : 0;
        return message;
    }
};
var tsProtoGlobalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new tsProtoGlobalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1["default"].util.Long !== long_1["default"]) {
    minimal_1["default"].util.Long = long_1["default"];
    minimal_1["default"].configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
