import _m0 from "protobufjs/minimal";
import { TaskForest } from "../../mergetb/tech/reconcile/taskstatus";
import { Network } from "../../mergetb/xir/v0.3/core";
import { PatchStrategy } from "./patch_types";
export declare const protobufPackage = "portal.v1";
export declare enum AccessMode {
    Public = 0,
    Protected = 1,
    Private = 2,
    UNRECOGNIZED = -1
}
export declare function accessModeFromJSON(object: any): AccessMode;
export declare function accessModeToJSON(object: AccessMode): string;
/** NOTE: FilterMode supports bitwise ORing options together. */
export declare enum FilterMode {
    ByUser = 0,
    ByAll = 1,
    UNRECOGNIZED = -1
}
export declare function filterModeFromJSON(object: any): FilterMode;
export declare function filterModeToJSON(object: FilterMode): string;
export declare enum MembershipType {
    UserMember = 0,
    ProjectMember = 1,
    UNRECOGNIZED = -1
}
export declare function membershipTypeFromJSON(object: any): MembershipType;
export declare function membershipTypeToJSON(object: MembershipType): string;
/** A users state broadly determines what they are authorized to do. */
export declare enum UserState {
    /**
     * NotSet - We need a NotSet state for updates, which may not include state and
     * we need to distinguish between 0 = Pending and 0 = not included in
     * messages which use this enum.
     */
    NotSet = 0,
    /**
     * Pending - User has not been activated yet. Most API calls are not available to
     * users in this state.
     */
    Pending = 1,
    /**
     * Frozen - User has been frozen by a organization maintainer or portal admin. All
     * API calls are forbidden to users in this state.
     */
    Frozen = 2,
    /**
     * Active - User is active. API calls are governed by the portal's policy
     * definitions.
     */
    Active = 3,
    UNRECOGNIZED = -1
}
export declare function userStateFromJSON(object: any): UserState;
export declare function userStateToJSON(object: UserState): string;
export interface AccessModeUpdate {
    value: AccessMode;
}
export interface UserStateUpdate {
    value: UserState;
}
export interface Member {
    role: Member_Role;
    state: Member_State;
}
export declare enum Member_Role {
    Member = 0,
    Maintainer = 1,
    Creator = 2,
    UNRECOGNIZED = -1
}
export declare function member_RoleFromJSON(object: any): Member_Role;
export declare function member_RoleToJSON(object: Member_Role): string;
export declare enum Member_State {
    Pending = 0,
    Active = 1,
    MemberRequested = 2,
    EntityRequested = 3,
    UNRECOGNIZED = -1
}
export declare function member_StateFromJSON(object: any): Member_State;
export declare function member_StateToJSON(object: Member_State): string;
export interface MembershipUpdate {
    /** A list of entities to remove a member from. */
    remove: string[];
    /**
     * A set of entities to add a member to. If the member is already present
     * within the entity, their membership status is overwritten with the
     * provided value.
     */
    set: {
        [key: string]: Member;
    };
}
export interface MembershipUpdate_SetEntry {
    key: string;
    value: Member | undefined;
}
/**
 * This is the definition of a user in MergeTB that is used for storage of
 * record and messaging between applications.
 */
export interface User {
    /** The users unique identifier. */
    username: string;
    /** Full name of the user. */
    name: string;
    /** What state the user account is in. */
    state: UserState;
    /** The visibility of the user account. */
    accessMode: AccessMode;
    /** MergeFS user id. */
    uid: number;
    /** MergeFS group id. */
    gid: number;
    /** Projects the user is a member of. */
    projects: {
        [key: string]: Member;
    };
    /** Experiments the user is a creator or maintainer of. */
    experiments: string[];
    /** Organizations the user is a member of. */
    organizations: {
        [key: string]: Member;
    };
    /** Facilities this user is a member of. */
    facilities: {
        [key: string]: Member;
    };
    admin: boolean;
    /** Revision counter for this object. */
    ver: number;
    /** User Traits. */
    institution: string;
    category: string;
    email: string;
    country: string;
    usstate: string;
}
export interface User_ProjectsEntry {
    key: string;
    value: Member | undefined;
}
export interface User_OrganizationsEntry {
    key: string;
    value: Member | undefined;
}
export interface User_FacilitiesEntry {
    key: string;
    value: Member | undefined;
}
export interface InitUserRequest {
    /** The user to initialize. */
    username: string;
    status: boolean;
}
export interface InitUserResponse {
    status: TaskForest | undefined;
}
export interface ActivateUserRequest {
    username: string;
}
export interface ActivateUserResponse {
}
export interface FreezeUserRequest {
    username: string;
}
export interface FreezeUserResponse {
}
export interface GetUsersRequest {
    filter: FilterMode;
}
export interface GetUsersResponse {
    /** A list of users. */
    users: User[];
}
export interface GetUserRequest {
    /** The identity of the user. */
    username: string;
}
export interface GetUserResponse {
    /** The requested user. */
    user: User | undefined;
}
export interface UpdateUserRequest {
    /** The id of the user to update. */
    username: string;
    /** The colloquial name of the user. */
    name: string;
    /** Optional state update */
    state: UserStateUpdate | undefined;
    /** Optional access mode update. */
    accessMode: AccessModeUpdate | undefined;
    /** Optional organization membership update. */
    organizations: MembershipUpdate | undefined;
    /** Optional project membership update. */
    projects: MembershipUpdate | undefined;
    /** Optional facility membership update. */
    facilities: MembershipUpdate | undefined;
    /** Optional experiment membership update. */
    experiments: string[];
    /** If true, toggle the user's admin state. */
    toggleAdmin: boolean;
}
export interface UpdateUserResponse {
}
export interface DeleteUserRequest {
    /** The identity of the user. */
    user: string;
}
export interface DeleteUserResponse {
}
/** UserStatus - keeps track of active user status on the portal (currently just if they are logged in or not) */
export interface UserStatus {
    username: string;
    loggedin: boolean;
    ver: number;
}
export interface PublicKey {
    /** SHA256 fingerprint of the SSH key. */
    fingerprint: string;
    /** The ssh-rsa key. */
    key: string;
}
export interface GetUserPublicKeysRequest {
    /** The user to fetch keys for. */
    user: string;
}
export interface GetUserPublicKeysResponse {
    /** The public keys for the specified user. */
    keys: PublicKey[];
}
export interface AddUserPublicKeyRequest {
    /** The user to add a new public key for. */
    user: string;
    /** An ssh-rsa public key. */
    key: string;
}
export interface AddUserPublicKeyResponse {
}
export interface DeleteUserPublicKeyRequest {
    /** The user to remove the public key from. */
    user: string;
    /** The SHA256 fingerprint of the key to remove. */
    fingerprint: string;
}
export interface DeleteUserPublicKeyResponse {
}
export interface DeleteUserPublicKeysRequest {
    /** User to delete to remove public keys for. */
    user: string;
}
export interface DeleteUserPublicKeysResponse {
}
export interface Project {
    name: string;
    description: string;
    members: {
        [key: string]: Member;
    };
    experiments: string[];
    accessMode: AccessMode;
    gid: number;
    /** here for backwards compatibility */
    deprecated: string[];
    ver: number;
    organization: string;
    orgMembership: Member | undefined;
    category: string;
    subcategory: string;
}
export interface Project_MembersEntry {
    key: string;
    value: Member | undefined;
}
export interface GetProjectsRequest {
    filter: FilterMode;
}
export interface GetProjectsResponse {
    projects: Project[];
}
export interface GetProjectRequest {
    name: string;
}
export interface GetProjectResponse {
    project: Project | undefined;
}
export interface DeleteProjectRequest {
    user: string;
    name: string;
}
export interface DeleteProjectResponse {
}
export interface CreateProjectRequest {
    user: string;
    project: Project | undefined;
    /** if given, ask for status of any tasks created by a previous request. */
    status: boolean;
}
export interface CreateProjectResponse {
    status: TaskForest | undefined;
}
export interface DescriptionUpdate {
    value: string;
}
export interface UpdateProjectRequest {
    /** Name of the project to update. */
    name: string;
    /** Optional description update. */
    description: DescriptionUpdate | undefined;
    /** Optional access mode update. */
    accessMode: AccessModeUpdate | undefined;
    /** Optional project membership update. */
    members: MembershipUpdate | undefined;
    /** Optional organization membership update. */
    organization: MembershipUpdate | undefined;
}
export interface UpdateProjectResponse {
}
export interface GetProjectMembersRequest {
    name: string;
}
export interface GetProjectMembersResponse {
    members: Member[];
}
export interface GetProjectMemberRequest {
    project: string;
    member: string;
}
export interface GetProjectMemberResponse {
    member: Member | undefined;
}
export interface AddProjectMemberRequest {
    project: string;
    username: string;
    member: Member | undefined;
}
export interface AddProjectMemberResponse {
}
export interface UpdateProjectMemberRequest {
    project: string;
    username: string;
    member: Member | undefined;
}
export interface UpdateProjectMemberResponse {
}
export interface DeleteProjectMemberRequest {
    project: string;
    member: string;
}
export interface DeleteProjectMemberResponse {
}
export interface ExperimentModel {
    compiled: boolean;
    msg: string;
    realizations: string[];
    compileTime: Date | undefined;
}
export interface Experiment {
    /** Name of the experiment. */
    name: string;
    /** Project this experiment belongs to. */
    project: string;
    /** A short description. */
    description: string;
    /** A map of source revisions to their model and realization status */
    models: {
        [key: string]: ExperimentModel;
    };
    /** Visibility of this experiment. */
    accessMode: AccessMode;
    /** Git repository where this experiments source is held. */
    repository: string;
    creator: string;
    maintainers: string[];
    /** Experiment version, increments each time experiment metadata is updated. */
    ver: number;
}
export interface Experiment_ModelsEntry {
    key: string;
    value: ExperimentModel | undefined;
}
export interface GetExperimentsRequest {
    filter: FilterMode;
}
export interface GetExperimentsResponse {
    experiments: Experiment[];
}
export interface GetProjectExperimentsRequest {
    project: string;
}
export interface GetProjectExperimentsResponse {
    experiments: Experiment[];
}
export interface GetExperimentRequest {
    project: string;
    experiment: string;
    withModels: boolean;
}
export interface XpNetModel {
    compiled: boolean;
    model: Network | undefined;
}
export interface GetExperimentResponse {
    experiment: Experiment | undefined;
    models: {
        [key: string]: XpNetModel;
    };
}
export interface GetExperimentResponse_ModelsEntry {
    key: string;
    value: XpNetModel | undefined;
}
export interface UpdateExperimentRequest {
    /** Name of the experiment to update */
    name: string;
    /** Name of the project the experiment is in */
    project: string;
    /** Optional description update. */
    description: DescriptionUpdate | undefined;
    /** Optional access mode update. */
    accessMode: AccessModeUpdate | undefined;
    /** set experiment creator */
    creator: string;
    /** experiment maintainers have some privledges depending on the active policy */
    maintainers: string[];
}
export interface UpdateExperimentResponse {
}
export interface CreateExperimentRequest {
    experiment: Experiment | undefined;
}
export interface CreateExperimentResponse {
}
export interface DeleteExperimentRequest {
    project: string;
    experiment: string;
}
export interface DeleteExperimentResponse {
}
export interface GetRevisionRequest {
    project: string;
    experiment: string;
    revision: string;
    encoding: GetRevisionRequest_Encoding;
}
export declare enum GetRevisionRequest_Encoding {
    NONE = 0,
    /** XIRB64 - base 64 encoded xir.Network */
    XIRB64 = 1,
    /** DOT - graphviz DOT format */
    DOT = 2,
    UNRECOGNIZED = -1
}
export declare function getRevisionRequest_EncodingFromJSON(object: any): GetRevisionRequest_Encoding;
export declare function getRevisionRequest_EncodingToJSON(object: GetRevisionRequest_Encoding): string;
export interface GetRevisionResponse {
    model: XpNetModel | undefined;
    encoding: string;
    ModelFile: string;
}
export interface Organization {
    name: string;
    description: string;
    oid: number;
    members: {
        [key: string]: Member;
    };
    projects: {
        [key: string]: Member;
    };
    state: UserState;
    accessMode: AccessMode;
    /** Revision counter for this object. */
    ver: number;
    category: string;
    subcategory: string;
}
export interface Organization_MembersEntry {
    key: string;
    value: Member | undefined;
}
export interface Organization_ProjectsEntry {
    key: string;
    value: Member | undefined;
}
export interface ActivateOrganizationRequest {
    organization: string;
}
export interface ActivateOrganizationResponse {
}
export interface FreezeOrganizationRequest {
    organization: string;
}
export interface FreezeOrganizationResponse {
}
export interface GetOrganizationsRequest {
    filter: FilterMode;
}
export interface GetOrganizationsResponse {
    organizations: Organization[];
}
export interface GetOrganizationRequest {
    name: string;
}
export interface GetOrganizationResponse {
    organization: Organization | undefined;
}
export interface DeleteOrganizationRequest {
    user: string;
    name: string;
}
export interface DeleteOrganizationResponse {
}
export interface CreateOrganizationRequest {
    user: string;
    organization: Organization | undefined;
}
export interface CreateOrganizationResponse {
}
export interface UpdateOrganizationRequest {
    /** Name of the organization to update. */
    name: string;
    /** Optional description update. */
    description: DescriptionUpdate | undefined;
    /** Optional state update */
    state: UserStateUpdate | undefined;
    /** Optional access mode update. */
    accessMode: AccessModeUpdate | undefined;
    /** Optional user membership update. */
    members: MembershipUpdate | undefined;
    /** Optional project membership update. */
    projects: MembershipUpdate | undefined;
}
export interface UpdateOrganizationResponse {
}
export interface GetOrganizationMembersRequest {
    organization: string;
}
export interface GetOrganizationMembersResponse {
    members: Member[];
}
export interface GetOrganizationMemberRequest {
    organization: string;
    username: string;
}
export interface GetOrganizationMemberResponse {
    member: Member | undefined;
}
export interface RequestOrganizationMembershipRequest {
    organization: string;
    id: string;
    kind: MembershipType;
    member: Member | undefined;
}
export interface RequestOrganizationMembershipResponse {
    member: Member | undefined;
}
export interface ConfirmOrganizationMembershipRequest {
    organization: string;
    id: string;
    kind: MembershipType;
}
export interface ConfirmOrganizationMembershipResponse {
    member: Member | undefined;
}
export interface UpdateOrganizationMemberRequest {
    organization: string;
    username: string;
    member: Member | undefined;
}
export interface UpdateOrganizationMemberResponse {
    member: Member | undefined;
}
export interface DeleteOrganizationMemberRequest {
    organization: string;
    username: string;
}
export interface DeleteOrganizationMemberResponse {
}
export interface GetOrganizationProjectsRequest {
    name: string;
}
export interface GetOrganizationProjectsResponse {
    projects: Member[];
}
export interface GetOrganizationProjectRequest {
    organization: string;
    project: string;
}
export interface GetOrganizationProjectResponse {
    member: Member | undefined;
}
export interface AddOrganizationProjectRequest {
    organization: string;
    project: string;
    member: Member | undefined;
}
export interface AddOrganizationProjectResponse {
}
export interface UpdateOrganizationProjectRequest {
    organization: string;
    project: string;
    member: Member | undefined;
}
export interface UpdateOrganizationProjectResponse {
}
export interface DeleteOrganizationProjectRequest {
    organization: string;
    project: string;
}
export interface DeleteOrganizationProjectResponse {
}
export interface GetUserConfigurationsRequest {
}
export interface GetUserConfigurationsResponse {
    institutions: string[];
    countries: GetUserConfigurationsResponse_Country[];
    usstates: GetUserConfigurationsResponse_USState[];
    categories: string[];
}
export interface GetUserConfigurationsResponse_Country {
    name: string;
    ISO2: string;
}
export interface GetUserConfigurationsResponse_USState {
    name: string;
    USPS2: string;
}
export interface UpdateUserConfigurationsRequest {
    institutions: string[];
    categories: string[];
    patchstrategy: PatchStrategy | undefined;
}
export interface UpdateUserConfigurationsResponse {
}
export interface GetEntityTypeConfigurationsRequest {
}
export interface EntityType {
    etype: string;
    subtypes: string[];
}
export interface GetEntityTypeConfigurationsResponse {
    Types: EntityType[];
}
export interface UpdateEntityTypeConfigurationsRequest {
    Types: EntityType[];
    /** How to update types */
    patchstrategy: PatchStrategy | undefined;
}
export interface UpdateEntityTypeConfigurationsResponse {
}
export interface GetPolicyRequest {
}
export interface GetPolicyResponse {
    policy: string;
}
/** Health ===================================================================== */
export interface HealthRequest {
}
export interface HealthResponse {
    status: string;
}
export declare const AccessModeUpdate: {
    encode(message: AccessModeUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AccessModeUpdate;
    fromJSON(object: any): AccessModeUpdate;
    toJSON(message: AccessModeUpdate): unknown;
    create<I extends {
        value?: AccessMode;
    } & {
        value?: AccessMode;
    } & { [K in Exclude<keyof I, "value">]: never; }>(base?: I): AccessModeUpdate;
    fromPartial<I_1 extends {
        value?: AccessMode;
    } & {
        value?: AccessMode;
    } & { [K_1 in Exclude<keyof I_1, "value">]: never; }>(object: I_1): AccessModeUpdate;
};
export declare const UserStateUpdate: {
    encode(message: UserStateUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserStateUpdate;
    fromJSON(object: any): UserStateUpdate;
    toJSON(message: UserStateUpdate): unknown;
    create<I extends {
        value?: UserState;
    } & {
        value?: UserState;
    } & { [K in Exclude<keyof I, "value">]: never; }>(base?: I): UserStateUpdate;
    fromPartial<I_1 extends {
        value?: UserState;
    } & {
        value?: UserState;
    } & { [K_1 in Exclude<keyof I_1, "value">]: never; }>(object: I_1): UserStateUpdate;
};
export declare const Member: {
    encode(message: Member, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Member;
    fromJSON(object: any): Member;
    toJSON(message: Member): unknown;
    create<I extends {
        role?: Member_Role;
        state?: Member_State;
    } & {
        role?: Member_Role;
        state?: Member_State;
    } & { [K in Exclude<keyof I, keyof Member>]: never; }>(base?: I): Member;
    fromPartial<I_1 extends {
        role?: Member_Role;
        state?: Member_State;
    } & {
        role?: Member_Role;
        state?: Member_State;
    } & { [K_1 in Exclude<keyof I_1, keyof Member>]: never; }>(object: I_1): Member;
};
export declare const MembershipUpdate: {
    encode(message: MembershipUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MembershipUpdate;
    fromJSON(object: any): MembershipUpdate;
    toJSON(message: MembershipUpdate): unknown;
    create<I extends {
        remove?: string[];
        set?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
    } & {
        remove?: string[] & string[] & { [K in Exclude<keyof I["remove"], keyof string[]>]: never; };
        set?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_1 in Exclude<keyof I["set"][string], keyof Member>]: never; };
        } & { [K_2 in Exclude<keyof I["set"], string | number>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof MembershipUpdate>]: never; }>(base?: I): MembershipUpdate;
    fromPartial<I_1 extends {
        remove?: string[];
        set?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
    } & {
        remove?: string[] & string[] & { [K_4 in Exclude<keyof I_1["remove"], keyof string[]>]: never; };
        set?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_5 in Exclude<keyof I_1["set"][string], keyof Member>]: never; };
        } & { [K_6 in Exclude<keyof I_1["set"], string | number>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof MembershipUpdate>]: never; }>(object: I_1): MembershipUpdate;
};
export declare const MembershipUpdate_SetEntry: {
    encode(message: MembershipUpdate_SetEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MembershipUpdate_SetEntry;
    fromJSON(object: any): MembershipUpdate_SetEntry;
    toJSON(message: MembershipUpdate_SetEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof MembershipUpdate_SetEntry>]: never; }>(base?: I): MembershipUpdate_SetEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof MembershipUpdate_SetEntry>]: never; }>(object: I_1): MembershipUpdate_SetEntry;
};
export declare const User: {
    encode(message: User, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User;
    fromJSON(object: any): User;
    toJSON(message: User): unknown;
    create<I extends {
        username?: string;
        name?: string;
        state?: UserState;
        accessMode?: AccessMode;
        uid?: number;
        gid?: number;
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        experiments?: string[];
        organizations?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        facilities?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        admin?: boolean;
        ver?: number;
        institution?: string;
        category?: string;
        email?: string;
        country?: string;
        usstate?: string;
    } & {
        username?: string;
        name?: string;
        state?: UserState;
        accessMode?: AccessMode;
        uid?: number;
        gid?: number;
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K in Exclude<keyof I["projects"][string], keyof Member>]: never; };
        } & { [K_1 in Exclude<keyof I["projects"], string | number>]: never; };
        experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["experiments"], keyof string[]>]: never; };
        organizations?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_3 in Exclude<keyof I["organizations"][string], keyof Member>]: never; };
        } & { [K_4 in Exclude<keyof I["organizations"], string | number>]: never; };
        facilities?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_5 in Exclude<keyof I["facilities"][string], keyof Member>]: never; };
        } & { [K_6 in Exclude<keyof I["facilities"], string | number>]: never; };
        admin?: boolean;
        ver?: number;
        institution?: string;
        category?: string;
        email?: string;
        country?: string;
        usstate?: string;
    } & { [K_7 in Exclude<keyof I, keyof User>]: never; }>(base?: I): User;
    fromPartial<I_1 extends {
        username?: string;
        name?: string;
        state?: UserState;
        accessMode?: AccessMode;
        uid?: number;
        gid?: number;
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        experiments?: string[];
        organizations?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        facilities?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        admin?: boolean;
        ver?: number;
        institution?: string;
        category?: string;
        email?: string;
        country?: string;
        usstate?: string;
    } & {
        username?: string;
        name?: string;
        state?: UserState;
        accessMode?: AccessMode;
        uid?: number;
        gid?: number;
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_8 in Exclude<keyof I_1["projects"][string], keyof Member>]: never; };
        } & { [K_9 in Exclude<keyof I_1["projects"], string | number>]: never; };
        experiments?: string[] & string[] & { [K_10 in Exclude<keyof I_1["experiments"], keyof string[]>]: never; };
        organizations?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_11 in Exclude<keyof I_1["organizations"][string], keyof Member>]: never; };
        } & { [K_12 in Exclude<keyof I_1["organizations"], string | number>]: never; };
        facilities?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_13 in Exclude<keyof I_1["facilities"][string], keyof Member>]: never; };
        } & { [K_14 in Exclude<keyof I_1["facilities"], string | number>]: never; };
        admin?: boolean;
        ver?: number;
        institution?: string;
        category?: string;
        email?: string;
        country?: string;
        usstate?: string;
    } & { [K_15 in Exclude<keyof I_1, keyof User>]: never; }>(object: I_1): User;
};
export declare const User_ProjectsEntry: {
    encode(message: User_ProjectsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User_ProjectsEntry;
    fromJSON(object: any): User_ProjectsEntry;
    toJSON(message: User_ProjectsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof User_ProjectsEntry>]: never; }>(base?: I): User_ProjectsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof User_ProjectsEntry>]: never; }>(object: I_1): User_ProjectsEntry;
};
export declare const User_OrganizationsEntry: {
    encode(message: User_OrganizationsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User_OrganizationsEntry;
    fromJSON(object: any): User_OrganizationsEntry;
    toJSON(message: User_OrganizationsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof User_OrganizationsEntry>]: never; }>(base?: I): User_OrganizationsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof User_OrganizationsEntry>]: never; }>(object: I_1): User_OrganizationsEntry;
};
export declare const User_FacilitiesEntry: {
    encode(message: User_FacilitiesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): User_FacilitiesEntry;
    fromJSON(object: any): User_FacilitiesEntry;
    toJSON(message: User_FacilitiesEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof User_FacilitiesEntry>]: never; }>(base?: I): User_FacilitiesEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof User_FacilitiesEntry>]: never; }>(object: I_1): User_FacilitiesEntry;
};
export declare const InitUserRequest: {
    encode(message: InitUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitUserRequest;
    fromJSON(object: any): InitUserRequest;
    toJSON(message: InitUserRequest): unknown;
    create<I extends {
        username?: string;
        status?: boolean;
    } & {
        username?: string;
        status?: boolean;
    } & { [K in Exclude<keyof I, keyof InitUserRequest>]: never; }>(base?: I): InitUserRequest;
    fromPartial<I_1 extends {
        username?: string;
        status?: boolean;
    } & {
        username?: string;
        status?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof InitUserRequest>]: never; }>(object: I_1): InitUserRequest;
};
export declare const InitUserResponse: {
    encode(message: InitUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InitUserResponse;
    fromJSON(object: any): InitUserResponse;
    toJSON(message: InitUserResponse): unknown;
    create<I extends {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        };
    } & {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        } & {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            } & {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[] & string[] & { [K in Exclude<keyof I["status"]["Goal"]["Subkeys"], keyof string[]>]: never; };
            } & { [K_1 in Exclude<keyof I["status"]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[] & ({
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[];
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[];
            } & {
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                } & {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[] & string[] & { [K_2 in Exclude<keyof I["status"]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                } & { [K_3 in Exclude<keyof I["status"]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[] & ({
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[];
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[];
                } & {
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    } & {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[] & string[] & { [K_4 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                    } & { [K_5 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[] & ({
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[];
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[];
                    } & {
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        } & {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[] & string[] & { [K_6 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                        } & { [K_7 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[] & ({
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[];
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[];
                        } & {
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            } & {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[] & string[] & { [K_8 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                            } & { [K_9 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[] & ({
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[];
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[];
                            } & {
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                } & {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[] & string[] & { [K_10 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                } & { [K_11 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[] & ({
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[];
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[];
                                } & {
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    } & {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[] & string[] & { [K_12 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                    } & { [K_13 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[] & ({
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[];
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[];
                                    } & {
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        } & {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[] & string[] & { [K_14 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                        } & { [K_15 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[] & ({
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[];
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[];
                                        } & {
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            } & {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[] & string[] & { [K_16 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                            } & { [K_17 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[] & ({
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[];
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[];
                                            } & {
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                } & any & { [K_18 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[] & ({
                                                    Goal?: {
                                                        SelfKey?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                        SelfVersion?: number;
                                                        Creation?: Date;
                                                        When?: Date;
                                                        Subkeys?: string[];
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subgoals?: any[];
                                                    Subtasks?: {
                                                        Task?: {
                                                            Manager?: string;
                                                            Name?: string;
                                                            Desc?: string;
                                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            SelfVersion?: number;
                                                            TaskVersion?: number;
                                                            PrevValue?: Uint8Array;
                                                            Duration?: {
                                                                seconds?: number;
                                                                nanos?: number;
                                                            };
                                                            When?: Date;
                                                            TaskKey?: string;
                                                            SubtaskKeys?: string[];
                                                            Messages?: {
                                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                                Message?: string;
                                                            }[];
                                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            TaskRevision?: number;
                                                        };
                                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        LastUpdated?: Date;
                                                        NumChildTasks?: number;
                                                        Subtasks?: any[];
                                                    }[];
                                                } & any & { [K_19 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_20 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_21 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_22 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_23 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_24 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_25 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_26 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_27 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_28 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_29 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_30 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_31 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_32 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_33 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_34 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_35 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_36 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_37 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_38 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_39 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_40 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_41 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_42 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_43 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_44 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_45 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_46 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_47 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_48 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_49 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_50 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_51 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_52 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_53 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_54 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_55 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_56 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_57 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_58 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_59 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_60 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_61 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_62 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_63 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_64 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_65 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_66 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_67 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_68 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_69 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_70 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_71 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_72 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_73 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_74 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_75 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_76 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_77 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_78 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_79 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_80 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_81 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_82 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_83 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_84 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_85 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_86 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_87 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_88 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_89 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_90 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_91 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_92 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_93 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_94 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_95 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_96 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_97 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_98 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_99 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_100 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_101 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_102 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_103 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_104 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_105 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_106 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_107 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_108 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_109 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_110 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_111 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_112 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_113 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_114 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_115 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_116 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_117 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_118 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_119 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_120 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_121 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_122 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_123 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_124 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_125 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_126 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_127 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_128 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_129 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_130 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_131 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_132 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_133 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_134 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_135 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_136 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_137 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_138 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_139 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_140 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_141 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_142 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_143 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_144 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_145 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_146 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_147 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_148 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_149 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_150 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_151 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_152 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_153 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_154 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_155 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_156 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_157 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_158 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_159 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_160 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_161 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_162 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_163 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_164 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_165 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_166 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_167 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_168 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_169 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_170 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_171 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_172 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_173 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_174 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_175 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_176 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_177 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_178 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_179 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_180 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_181 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_182 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_183 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_184 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_185 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_186 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_187 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_188 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_189 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_190 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_191 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_192 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_193 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_194 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_195 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_196 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_197 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_198 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_199 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_200 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_201 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_202 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_203 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_204 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_205 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_206 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_207 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_208 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_209 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_210 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_211 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_212 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_213 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_214 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_215 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_216 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_217 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_218 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_219 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_220 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_221 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_222 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_223 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_224 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_225 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_226 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_227 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_228 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_229 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_230 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_231 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_232 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_233 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_234 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_235 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_236 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_237 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_238 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_239 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_240 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_241 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_242 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_243 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_244 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_245 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_246 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_247 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_248 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_249 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_250 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_251 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_252 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_253 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_254 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_255 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_256 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_257 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_258 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_259 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_260 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_261 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_262 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_263 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_264 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_265 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_266 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_267 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_268 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_269 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_270 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_271 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_272 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_273 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_274 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_275 in Exclude<keyof I["status"]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_276 in Exclude<keyof I["status"]["Subgoals"], keyof any[]>]: never; };
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[] & ({
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            } & {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    } & {
                        seconds?: number;
                        nanos?: number;
                    } & { [K_277 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[] & string[] & { [K_278 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[] & ({
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & { [K_279 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_280 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Messages"], keyof {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[]>]: never; };
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & { [K_281 in Exclude<keyof I["status"]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_282 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_283 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_284 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_285 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_286 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_287 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_288 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_289 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_290 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_291 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_292 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_293 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_294 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_295 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_296 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_297 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_298 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_299 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_300 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_301 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_302 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_303 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_304 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_305 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_306 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_307 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_308 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_309 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_310 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_311 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_312 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_313 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_314 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_315 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_316 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_317 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_318 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_319 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_320 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_321 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_322 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_323 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_324 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_325 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_326 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_327 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_328 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_329 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_330 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_331 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_332 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_333 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_334 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_335 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_336 in Exclude<keyof I["status"]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_337 in Exclude<keyof I["status"]["Subtasks"], keyof {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[]>]: never; };
        } & { [K_338 in Exclude<keyof I["status"], keyof TaskForest>]: never; };
    } & { [K_339 in Exclude<keyof I, "status">]: never; }>(base?: I): InitUserResponse;
    fromPartial<I_1 extends {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        };
    } & {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        } & {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            } & {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[] & string[] & { [K_340 in Exclude<keyof I_1["status"]["Goal"]["Subkeys"], keyof string[]>]: never; };
            } & { [K_341 in Exclude<keyof I_1["status"]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[] & ({
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[];
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[];
            } & {
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                } & {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[] & string[] & { [K_342 in Exclude<keyof I_1["status"]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                } & { [K_343 in Exclude<keyof I_1["status"]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[] & ({
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[];
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[];
                } & {
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    } & {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[] & string[] & { [K_344 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                    } & { [K_345 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[] & ({
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[];
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[];
                    } & {
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        } & {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[] & string[] & { [K_346 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                        } & { [K_347 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[] & ({
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[];
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[];
                        } & {
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            } & {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[] & string[] & { [K_348 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                            } & { [K_349 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[] & ({
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[];
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[];
                            } & {
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                } & {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[] & string[] & { [K_350 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                } & { [K_351 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[] & ({
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[];
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[];
                                } & {
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    } & {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[] & string[] & { [K_352 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                    } & { [K_353 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[] & ({
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[];
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[];
                                    } & {
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        } & {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[] & string[] & { [K_354 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                        } & { [K_355 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[] & ({
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[];
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[];
                                        } & {
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            } & {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[] & string[] & { [K_356 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                            } & { [K_357 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[] & ({
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[];
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[];
                                            } & {
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                } & any & { [K_358 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[] & ({
                                                    Goal?: {
                                                        SelfKey?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                        SelfVersion?: number;
                                                        Creation?: Date;
                                                        When?: Date;
                                                        Subkeys?: string[];
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subgoals?: any[];
                                                    Subtasks?: {
                                                        Task?: {
                                                            Manager?: string;
                                                            Name?: string;
                                                            Desc?: string;
                                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            SelfVersion?: number;
                                                            TaskVersion?: number;
                                                            PrevValue?: Uint8Array;
                                                            Duration?: {
                                                                seconds?: number;
                                                                nanos?: number;
                                                            };
                                                            When?: Date;
                                                            TaskKey?: string;
                                                            SubtaskKeys?: string[];
                                                            Messages?: {
                                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                                Message?: string;
                                                            }[];
                                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            TaskRevision?: number;
                                                        };
                                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        LastUpdated?: Date;
                                                        NumChildTasks?: number;
                                                        Subtasks?: any[];
                                                    }[];
                                                } & any & { [K_359 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_360 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_361 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_362 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_363 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_364 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_365 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_366 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_367 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_368 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_369 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_370 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_371 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_372 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_373 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_374 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_375 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_376 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_377 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_378 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_379 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_380 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_381 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_382 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_383 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_384 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_385 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_386 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_387 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_388 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_389 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_390 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_391 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_392 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_393 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_394 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_395 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_396 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_397 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_398 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_399 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_400 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_401 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_402 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_403 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_404 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_405 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_406 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_407 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_408 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_409 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_410 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_411 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_412 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_413 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_414 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_415 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_416 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_417 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_418 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_419 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_420 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_421 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_422 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_423 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_424 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_425 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_426 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_427 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_428 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_429 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_430 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_431 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_432 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_433 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_434 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_435 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_436 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_437 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_438 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_439 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_440 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_441 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_442 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_443 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_444 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_445 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_446 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_447 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_448 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_449 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_450 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_451 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_452 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_453 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_454 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_455 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_456 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_457 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_458 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_459 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_460 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_461 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_462 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_463 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_464 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_465 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_466 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_467 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_468 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_469 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_470 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_471 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_472 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_473 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_474 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_475 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_476 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_477 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_478 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_479 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_480 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_481 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_482 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_483 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_484 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_485 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_486 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_487 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_488 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_489 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_490 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_491 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_492 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_493 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_494 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_495 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_496 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_497 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_498 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_499 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_500 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_501 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_502 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_503 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_504 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_505 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_506 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_507 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_508 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_509 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_510 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_511 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_512 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_513 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_514 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_515 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_516 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_517 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_518 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_519 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_520 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_521 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_522 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_523 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_524 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_525 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_526 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_527 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_528 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_529 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_530 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_531 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_532 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_533 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_534 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_535 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_536 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_537 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_538 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_539 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_540 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_541 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_542 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_543 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_544 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_545 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_546 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_547 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_548 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_549 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_550 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_551 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_552 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_553 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_554 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_555 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_556 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_557 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_558 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_559 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_560 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_561 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_562 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_563 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_564 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_565 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_566 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_567 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_568 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_569 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_570 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_571 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_572 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_573 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_574 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_575 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_576 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_577 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_578 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_579 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_580 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_581 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_582 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_583 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_584 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_585 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_586 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_587 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_588 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_589 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_590 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_591 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_592 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_593 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_594 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_595 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_596 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_597 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_598 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_599 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_600 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_601 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_602 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_603 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_604 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_605 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_606 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_607 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_608 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_609 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_610 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_611 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_612 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_613 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_614 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_615 in Exclude<keyof I_1["status"]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_616 in Exclude<keyof I_1["status"]["Subgoals"], keyof any[]>]: never; };
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[] & ({
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            } & {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    } & {
                        seconds?: number;
                        nanos?: number;
                    } & { [K_617 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[] & string[] & { [K_618 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[] & ({
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & { [K_619 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_620 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Messages"], keyof {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[]>]: never; };
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & { [K_621 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_622 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_623 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_624 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_625 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_626 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_627 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_628 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_629 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_630 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_631 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_632 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_633 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_634 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_635 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_636 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_637 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_638 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_639 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_640 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_641 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_642 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_643 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_644 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_645 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_646 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_647 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_648 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_649 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_650 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_651 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_652 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_653 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_654 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_655 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_656 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_657 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_658 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_659 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_660 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_661 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_662 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_663 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_664 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_665 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_666 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_667 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_668 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_669 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_670 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_671 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_672 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_673 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_674 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_675 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_676 in Exclude<keyof I_1["status"]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_677 in Exclude<keyof I_1["status"]["Subtasks"], keyof {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[]>]: never; };
        } & { [K_678 in Exclude<keyof I_1["status"], keyof TaskForest>]: never; };
    } & { [K_679 in Exclude<keyof I_1, "status">]: never; }>(object: I_1): InitUserResponse;
};
export declare const ActivateUserRequest: {
    encode(message: ActivateUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateUserRequest;
    fromJSON(object: any): ActivateUserRequest;
    toJSON(message: ActivateUserRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): ActivateUserRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): ActivateUserRequest;
};
export declare const ActivateUserResponse: {
    encode(_: ActivateUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateUserResponse;
    fromJSON(_: any): ActivateUserResponse;
    toJSON(_: ActivateUserResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ActivateUserResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ActivateUserResponse;
};
export declare const FreezeUserRequest: {
    encode(message: FreezeUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreezeUserRequest;
    fromJSON(object: any): FreezeUserRequest;
    toJSON(message: FreezeUserRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): FreezeUserRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): FreezeUserRequest;
};
export declare const FreezeUserResponse: {
    encode(_: FreezeUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreezeUserResponse;
    fromJSON(_: any): FreezeUserResponse;
    toJSON(_: FreezeUserResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): FreezeUserResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): FreezeUserResponse;
};
export declare const GetUsersRequest: {
    encode(message: GetUsersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUsersRequest;
    fromJSON(object: any): GetUsersRequest;
    toJSON(message: GetUsersRequest): unknown;
    create<I extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K in Exclude<keyof I, "filter">]: never; }>(base?: I): GetUsersRequest;
    fromPartial<I_1 extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K_1 in Exclude<keyof I_1, "filter">]: never; }>(object: I_1): GetUsersRequest;
};
export declare const GetUsersResponse: {
    encode(message: GetUsersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUsersResponse;
    fromJSON(object: any): GetUsersResponse;
    toJSON(message: GetUsersResponse): unknown;
    create<I extends {
        users?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[];
    } & {
        users?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[] & ({
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["users"][number]["projects"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["users"][number]["projects"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["users"][number]["experiments"], keyof string[]>]: never; };
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_3 in Exclude<keyof I["users"][number]["organizations"][string], keyof Member>]: never; };
            } & { [K_4 in Exclude<keyof I["users"][number]["organizations"], string | number>]: never; };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_5 in Exclude<keyof I["users"][number]["facilities"][string], keyof Member>]: never; };
            } & { [K_6 in Exclude<keyof I["users"][number]["facilities"], string | number>]: never; };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & { [K_7 in Exclude<keyof I["users"][number], keyof User>]: never; })[] & { [K_8 in Exclude<keyof I["users"], keyof {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I, "users">]: never; }>(base?: I): GetUsersResponse;
    fromPartial<I_1 extends {
        users?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[];
    } & {
        users?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[] & ({
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_10 in Exclude<keyof I_1["users"][number]["projects"][string], keyof Member>]: never; };
            } & { [K_11 in Exclude<keyof I_1["users"][number]["projects"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_12 in Exclude<keyof I_1["users"][number]["experiments"], keyof string[]>]: never; };
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_13 in Exclude<keyof I_1["users"][number]["organizations"][string], keyof Member>]: never; };
            } & { [K_14 in Exclude<keyof I_1["users"][number]["organizations"], string | number>]: never; };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_15 in Exclude<keyof I_1["users"][number]["facilities"][string], keyof Member>]: never; };
            } & { [K_16 in Exclude<keyof I_1["users"][number]["facilities"], string | number>]: never; };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & { [K_17 in Exclude<keyof I_1["users"][number], keyof User>]: never; })[] & { [K_18 in Exclude<keyof I_1["users"], keyof {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        }[]>]: never; };
    } & { [K_19 in Exclude<keyof I_1, "users">]: never; }>(object: I_1): GetUsersResponse;
};
export declare const GetUserRequest: {
    encode(message: GetUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserRequest;
    fromJSON(object: any): GetUserRequest;
    toJSON(message: GetUserRequest): unknown;
    create<I extends {
        username?: string;
    } & {
        username?: string;
    } & { [K in Exclude<keyof I, "username">]: never; }>(base?: I): GetUserRequest;
    fromPartial<I_1 extends {
        username?: string;
    } & {
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, "username">]: never; }>(object: I_1): GetUserRequest;
};
export declare const GetUserResponse: {
    encode(message: GetUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserResponse;
    fromJSON(object: any): GetUserResponse;
    toJSON(message: GetUserResponse): unknown;
    create<I extends {
        user?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        };
    } & {
        user?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["user"]["projects"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["user"]["projects"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["user"]["experiments"], keyof string[]>]: never; };
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_3 in Exclude<keyof I["user"]["organizations"][string], keyof Member>]: never; };
            } & { [K_4 in Exclude<keyof I["user"]["organizations"], string | number>]: never; };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_5 in Exclude<keyof I["user"]["facilities"][string], keyof Member>]: never; };
            } & { [K_6 in Exclude<keyof I["user"]["facilities"], string | number>]: never; };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & { [K_7 in Exclude<keyof I["user"], keyof User>]: never; };
    } & { [K_8 in Exclude<keyof I, "user">]: never; }>(base?: I): GetUserResponse;
    fromPartial<I_1 extends {
        user?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        };
    } & {
        user?: {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & {
            username?: string;
            name?: string;
            state?: UserState;
            accessMode?: AccessMode;
            uid?: number;
            gid?: number;
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_9 in Exclude<keyof I_1["user"]["projects"][string], keyof Member>]: never; };
            } & { [K_10 in Exclude<keyof I_1["user"]["projects"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_11 in Exclude<keyof I_1["user"]["experiments"], keyof string[]>]: never; };
            organizations?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_12 in Exclude<keyof I_1["user"]["organizations"][string], keyof Member>]: never; };
            } & { [K_13 in Exclude<keyof I_1["user"]["organizations"], string | number>]: never; };
            facilities?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_14 in Exclude<keyof I_1["user"]["facilities"][string], keyof Member>]: never; };
            } & { [K_15 in Exclude<keyof I_1["user"]["facilities"], string | number>]: never; };
            admin?: boolean;
            ver?: number;
            institution?: string;
            category?: string;
            email?: string;
            country?: string;
            usstate?: string;
        } & { [K_16 in Exclude<keyof I_1["user"], keyof User>]: never; };
    } & { [K_17 in Exclude<keyof I_1, "user">]: never; }>(object: I_1): GetUserResponse;
};
export declare const UpdateUserRequest: {
    encode(message: UpdateUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserRequest;
    fromJSON(object: any): UpdateUserRequest;
    toJSON(message: UpdateUserRequest): unknown;
    create<I extends {
        username?: string;
        name?: string;
        state?: {
            value?: UserState;
        };
        accessMode?: {
            value?: AccessMode;
        };
        organizations?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        facilities?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        experiments?: string[];
        toggleAdmin?: boolean;
    } & {
        username?: string;
        name?: string;
        state?: {
            value?: UserState;
        } & {
            value?: UserState;
        } & { [K in Exclude<keyof I["state"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_1 in Exclude<keyof I["accessMode"], "value">]: never; };
        organizations?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_2 in Exclude<keyof I["organizations"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_3 in Exclude<keyof I["organizations"]["set"][string], keyof Member>]: never; };
            } & { [K_4 in Exclude<keyof I["organizations"]["set"], string | number>]: never; };
        } & { [K_5 in Exclude<keyof I["organizations"], keyof MembershipUpdate>]: never; };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_6 in Exclude<keyof I["projects"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_7 in Exclude<keyof I["projects"]["set"][string], keyof Member>]: never; };
            } & { [K_8 in Exclude<keyof I["projects"]["set"], string | number>]: never; };
        } & { [K_9 in Exclude<keyof I["projects"], keyof MembershipUpdate>]: never; };
        facilities?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_10 in Exclude<keyof I["facilities"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_11 in Exclude<keyof I["facilities"]["set"][string], keyof Member>]: never; };
            } & { [K_12 in Exclude<keyof I["facilities"]["set"], string | number>]: never; };
        } & { [K_13 in Exclude<keyof I["facilities"], keyof MembershipUpdate>]: never; };
        experiments?: string[] & string[] & { [K_14 in Exclude<keyof I["experiments"], keyof string[]>]: never; };
        toggleAdmin?: boolean;
    } & { [K_15 in Exclude<keyof I, keyof UpdateUserRequest>]: never; }>(base?: I): UpdateUserRequest;
    fromPartial<I_1 extends {
        username?: string;
        name?: string;
        state?: {
            value?: UserState;
        };
        accessMode?: {
            value?: AccessMode;
        };
        organizations?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        facilities?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        experiments?: string[];
        toggleAdmin?: boolean;
    } & {
        username?: string;
        name?: string;
        state?: {
            value?: UserState;
        } & {
            value?: UserState;
        } & { [K_16 in Exclude<keyof I_1["state"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_17 in Exclude<keyof I_1["accessMode"], "value">]: never; };
        organizations?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_18 in Exclude<keyof I_1["organizations"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_19 in Exclude<keyof I_1["organizations"]["set"][string], keyof Member>]: never; };
            } & { [K_20 in Exclude<keyof I_1["organizations"]["set"], string | number>]: never; };
        } & { [K_21 in Exclude<keyof I_1["organizations"], keyof MembershipUpdate>]: never; };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_22 in Exclude<keyof I_1["projects"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_23 in Exclude<keyof I_1["projects"]["set"][string], keyof Member>]: never; };
            } & { [K_24 in Exclude<keyof I_1["projects"]["set"], string | number>]: never; };
        } & { [K_25 in Exclude<keyof I_1["projects"], keyof MembershipUpdate>]: never; };
        facilities?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_26 in Exclude<keyof I_1["facilities"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_27 in Exclude<keyof I_1["facilities"]["set"][string], keyof Member>]: never; };
            } & { [K_28 in Exclude<keyof I_1["facilities"]["set"], string | number>]: never; };
        } & { [K_29 in Exclude<keyof I_1["facilities"], keyof MembershipUpdate>]: never; };
        experiments?: string[] & string[] & { [K_30 in Exclude<keyof I_1["experiments"], keyof string[]>]: never; };
        toggleAdmin?: boolean;
    } & { [K_31 in Exclude<keyof I_1, keyof UpdateUserRequest>]: never; }>(object: I_1): UpdateUserRequest;
};
export declare const UpdateUserResponse: {
    encode(_: UpdateUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserResponse;
    fromJSON(_: any): UpdateUserResponse;
    toJSON(_: UpdateUserResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateUserResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateUserResponse;
};
export declare const DeleteUserRequest: {
    encode(message: DeleteUserRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserRequest;
    fromJSON(object: any): DeleteUserRequest;
    toJSON(message: DeleteUserRequest): unknown;
    create<I extends {
        user?: string;
    } & {
        user?: string;
    } & { [K in Exclude<keyof I, "user">]: never; }>(base?: I): DeleteUserRequest;
    fromPartial<I_1 extends {
        user?: string;
    } & {
        user?: string;
    } & { [K_1 in Exclude<keyof I_1, "user">]: never; }>(object: I_1): DeleteUserRequest;
};
export declare const DeleteUserResponse: {
    encode(_: DeleteUserResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserResponse;
    fromJSON(_: any): DeleteUserResponse;
    toJSON(_: DeleteUserResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteUserResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteUserResponse;
};
export declare const UserStatus: {
    encode(message: UserStatus, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserStatus;
    fromJSON(object: any): UserStatus;
    toJSON(message: UserStatus): unknown;
    create<I extends {
        username?: string;
        loggedin?: boolean;
        ver?: number;
    } & {
        username?: string;
        loggedin?: boolean;
        ver?: number;
    } & { [K in Exclude<keyof I, keyof UserStatus>]: never; }>(base?: I): UserStatus;
    fromPartial<I_1 extends {
        username?: string;
        loggedin?: boolean;
        ver?: number;
    } & {
        username?: string;
        loggedin?: boolean;
        ver?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof UserStatus>]: never; }>(object: I_1): UserStatus;
};
export declare const PublicKey: {
    encode(message: PublicKey, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PublicKey;
    fromJSON(object: any): PublicKey;
    toJSON(message: PublicKey): unknown;
    create<I extends {
        fingerprint?: string;
        key?: string;
    } & {
        fingerprint?: string;
        key?: string;
    } & { [K in Exclude<keyof I, keyof PublicKey>]: never; }>(base?: I): PublicKey;
    fromPartial<I_1 extends {
        fingerprint?: string;
        key?: string;
    } & {
        fingerprint?: string;
        key?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof PublicKey>]: never; }>(object: I_1): PublicKey;
};
export declare const GetUserPublicKeysRequest: {
    encode(message: GetUserPublicKeysRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserPublicKeysRequest;
    fromJSON(object: any): GetUserPublicKeysRequest;
    toJSON(message: GetUserPublicKeysRequest): unknown;
    create<I extends {
        user?: string;
    } & {
        user?: string;
    } & { [K in Exclude<keyof I, "user">]: never; }>(base?: I): GetUserPublicKeysRequest;
    fromPartial<I_1 extends {
        user?: string;
    } & {
        user?: string;
    } & { [K_1 in Exclude<keyof I_1, "user">]: never; }>(object: I_1): GetUserPublicKeysRequest;
};
export declare const GetUserPublicKeysResponse: {
    encode(message: GetUserPublicKeysResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserPublicKeysResponse;
    fromJSON(object: any): GetUserPublicKeysResponse;
    toJSON(message: GetUserPublicKeysResponse): unknown;
    create<I extends {
        keys?: {
            fingerprint?: string;
            key?: string;
        }[];
    } & {
        keys?: {
            fingerprint?: string;
            key?: string;
        }[] & ({
            fingerprint?: string;
            key?: string;
        } & {
            fingerprint?: string;
            key?: string;
        } & { [K in Exclude<keyof I["keys"][number], keyof PublicKey>]: never; })[] & { [K_1 in Exclude<keyof I["keys"], keyof {
            fingerprint?: string;
            key?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "keys">]: never; }>(base?: I): GetUserPublicKeysResponse;
    fromPartial<I_1 extends {
        keys?: {
            fingerprint?: string;
            key?: string;
        }[];
    } & {
        keys?: {
            fingerprint?: string;
            key?: string;
        }[] & ({
            fingerprint?: string;
            key?: string;
        } & {
            fingerprint?: string;
            key?: string;
        } & { [K_3 in Exclude<keyof I_1["keys"][number], keyof PublicKey>]: never; })[] & { [K_4 in Exclude<keyof I_1["keys"], keyof {
            fingerprint?: string;
            key?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "keys">]: never; }>(object: I_1): GetUserPublicKeysResponse;
};
export declare const AddUserPublicKeyRequest: {
    encode(message: AddUserPublicKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddUserPublicKeyRequest;
    fromJSON(object: any): AddUserPublicKeyRequest;
    toJSON(message: AddUserPublicKeyRequest): unknown;
    create<I extends {
        user?: string;
        key?: string;
    } & {
        user?: string;
        key?: string;
    } & { [K in Exclude<keyof I, keyof AddUserPublicKeyRequest>]: never; }>(base?: I): AddUserPublicKeyRequest;
    fromPartial<I_1 extends {
        user?: string;
        key?: string;
    } & {
        user?: string;
        key?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof AddUserPublicKeyRequest>]: never; }>(object: I_1): AddUserPublicKeyRequest;
};
export declare const AddUserPublicKeyResponse: {
    encode(_: AddUserPublicKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddUserPublicKeyResponse;
    fromJSON(_: any): AddUserPublicKeyResponse;
    toJSON(_: AddUserPublicKeyResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddUserPublicKeyResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddUserPublicKeyResponse;
};
export declare const DeleteUserPublicKeyRequest: {
    encode(message: DeleteUserPublicKeyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserPublicKeyRequest;
    fromJSON(object: any): DeleteUserPublicKeyRequest;
    toJSON(message: DeleteUserPublicKeyRequest): unknown;
    create<I extends {
        user?: string;
        fingerprint?: string;
    } & {
        user?: string;
        fingerprint?: string;
    } & { [K in Exclude<keyof I, keyof DeleteUserPublicKeyRequest>]: never; }>(base?: I): DeleteUserPublicKeyRequest;
    fromPartial<I_1 extends {
        user?: string;
        fingerprint?: string;
    } & {
        user?: string;
        fingerprint?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteUserPublicKeyRequest>]: never; }>(object: I_1): DeleteUserPublicKeyRequest;
};
export declare const DeleteUserPublicKeyResponse: {
    encode(_: DeleteUserPublicKeyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserPublicKeyResponse;
    fromJSON(_: any): DeleteUserPublicKeyResponse;
    toJSON(_: DeleteUserPublicKeyResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteUserPublicKeyResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteUserPublicKeyResponse;
};
export declare const DeleteUserPublicKeysRequest: {
    encode(message: DeleteUserPublicKeysRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserPublicKeysRequest;
    fromJSON(object: any): DeleteUserPublicKeysRequest;
    toJSON(message: DeleteUserPublicKeysRequest): unknown;
    create<I extends {
        user?: string;
    } & {
        user?: string;
    } & { [K in Exclude<keyof I, "user">]: never; }>(base?: I): DeleteUserPublicKeysRequest;
    fromPartial<I_1 extends {
        user?: string;
    } & {
        user?: string;
    } & { [K_1 in Exclude<keyof I_1, "user">]: never; }>(object: I_1): DeleteUserPublicKeysRequest;
};
export declare const DeleteUserPublicKeysResponse: {
    encode(_: DeleteUserPublicKeysResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteUserPublicKeysResponse;
    fromJSON(_: any): DeleteUserPublicKeysResponse;
    toJSON(_: DeleteUserPublicKeysResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteUserPublicKeysResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteUserPublicKeysResponse;
};
export declare const Project: {
    encode(message: Project, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Project;
    fromJSON(object: any): Project;
    toJSON(message: Project): unknown;
    create<I extends {
        name?: string;
        description?: string;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        experiments?: string[];
        accessMode?: AccessMode;
        gid?: number;
        deprecated?: string[];
        ver?: number;
        organization?: string;
        orgMembership?: {
            role?: Member_Role;
            state?: Member_State;
        };
        category?: string;
        subcategory?: string;
    } & {
        name?: string;
        description?: string;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K in Exclude<keyof I["members"][string], keyof Member>]: never; };
        } & { [K_1 in Exclude<keyof I["members"], string | number>]: never; };
        experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["experiments"], keyof string[]>]: never; };
        accessMode?: AccessMode;
        gid?: number;
        deprecated?: string[] & string[] & { [K_3 in Exclude<keyof I["deprecated"], keyof string[]>]: never; };
        ver?: number;
        organization?: string;
        orgMembership?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_4 in Exclude<keyof I["orgMembership"], keyof Member>]: never; };
        category?: string;
        subcategory?: string;
    } & { [K_5 in Exclude<keyof I, keyof Project>]: never; }>(base?: I): Project;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        experiments?: string[];
        accessMode?: AccessMode;
        gid?: number;
        deprecated?: string[];
        ver?: number;
        organization?: string;
        orgMembership?: {
            role?: Member_Role;
            state?: Member_State;
        };
        category?: string;
        subcategory?: string;
    } & {
        name?: string;
        description?: string;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_6 in Exclude<keyof I_1["members"][string], keyof Member>]: never; };
        } & { [K_7 in Exclude<keyof I_1["members"], string | number>]: never; };
        experiments?: string[] & string[] & { [K_8 in Exclude<keyof I_1["experiments"], keyof string[]>]: never; };
        accessMode?: AccessMode;
        gid?: number;
        deprecated?: string[] & string[] & { [K_9 in Exclude<keyof I_1["deprecated"], keyof string[]>]: never; };
        ver?: number;
        organization?: string;
        orgMembership?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_10 in Exclude<keyof I_1["orgMembership"], keyof Member>]: never; };
        category?: string;
        subcategory?: string;
    } & { [K_11 in Exclude<keyof I_1, keyof Project>]: never; }>(object: I_1): Project;
};
export declare const Project_MembersEntry: {
    encode(message: Project_MembersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Project_MembersEntry;
    fromJSON(object: any): Project_MembersEntry;
    toJSON(message: Project_MembersEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Project_MembersEntry>]: never; }>(base?: I): Project_MembersEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Project_MembersEntry>]: never; }>(object: I_1): Project_MembersEntry;
};
export declare const GetProjectsRequest: {
    encode(message: GetProjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectsRequest;
    fromJSON(object: any): GetProjectsRequest;
    toJSON(message: GetProjectsRequest): unknown;
    create<I extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K in Exclude<keyof I, "filter">]: never; }>(base?: I): GetProjectsRequest;
    fromPartial<I_1 extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K_1 in Exclude<keyof I_1, "filter">]: never; }>(object: I_1): GetProjectsRequest;
};
export declare const GetProjectsResponse: {
    encode(message: GetProjectsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectsResponse;
    fromJSON(object: any): GetProjectsResponse;
    toJSON(message: GetProjectsResponse): unknown;
    create<I extends {
        projects?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[];
    } & {
        projects?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[] & ({
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["projects"][number]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["projects"][number]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["projects"][number]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_3 in Exclude<keyof I["projects"][number]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_4 in Exclude<keyof I["projects"][number]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_5 in Exclude<keyof I["projects"][number], keyof Project>]: never; })[] & { [K_6 in Exclude<keyof I["projects"], keyof {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I, "projects">]: never; }>(base?: I): GetProjectsResponse;
    fromPartial<I_1 extends {
        projects?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[];
    } & {
        projects?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[] & ({
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_8 in Exclude<keyof I_1["projects"][number]["members"][string], keyof Member>]: never; };
            } & { [K_9 in Exclude<keyof I_1["projects"][number]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_10 in Exclude<keyof I_1["projects"][number]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_11 in Exclude<keyof I_1["projects"][number]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_12 in Exclude<keyof I_1["projects"][number]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_13 in Exclude<keyof I_1["projects"][number], keyof Project>]: never; })[] & { [K_14 in Exclude<keyof I_1["projects"], keyof {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        }[]>]: never; };
    } & { [K_15 in Exclude<keyof I_1, "projects">]: never; }>(object: I_1): GetProjectsResponse;
};
export declare const GetProjectRequest: {
    encode(message: GetProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectRequest;
    fromJSON(object: any): GetProjectRequest;
    toJSON(message: GetProjectRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetProjectRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetProjectRequest;
};
export declare const GetProjectResponse: {
    encode(message: GetProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectResponse;
    fromJSON(object: any): GetProjectResponse;
    toJSON(message: GetProjectResponse): unknown;
    create<I extends {
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        };
    } & {
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["project"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["project"]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["project"]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_3 in Exclude<keyof I["project"]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_4 in Exclude<keyof I["project"]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_5 in Exclude<keyof I["project"], keyof Project>]: never; };
    } & { [K_6 in Exclude<keyof I, "project">]: never; }>(base?: I): GetProjectResponse;
    fromPartial<I_1 extends {
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        };
    } & {
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_7 in Exclude<keyof I_1["project"]["members"][string], keyof Member>]: never; };
            } & { [K_8 in Exclude<keyof I_1["project"]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_9 in Exclude<keyof I_1["project"]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_10 in Exclude<keyof I_1["project"]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_11 in Exclude<keyof I_1["project"]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_12 in Exclude<keyof I_1["project"], keyof Project>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "project">]: never; }>(object: I_1): GetProjectResponse;
};
export declare const DeleteProjectRequest: {
    encode(message: DeleteProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProjectRequest;
    fromJSON(object: any): DeleteProjectRequest;
    toJSON(message: DeleteProjectRequest): unknown;
    create<I extends {
        user?: string;
        name?: string;
    } & {
        user?: string;
        name?: string;
    } & { [K in Exclude<keyof I, keyof DeleteProjectRequest>]: never; }>(base?: I): DeleteProjectRequest;
    fromPartial<I_1 extends {
        user?: string;
        name?: string;
    } & {
        user?: string;
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteProjectRequest>]: never; }>(object: I_1): DeleteProjectRequest;
};
export declare const DeleteProjectResponse: {
    encode(_: DeleteProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProjectResponse;
    fromJSON(_: any): DeleteProjectResponse;
    toJSON(_: DeleteProjectResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteProjectResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteProjectResponse;
};
export declare const CreateProjectRequest: {
    encode(message: CreateProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProjectRequest;
    fromJSON(object: any): CreateProjectRequest;
    toJSON(message: CreateProjectRequest): unknown;
    create<I extends {
        user?: string;
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        };
        status?: boolean;
    } & {
        user?: string;
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["project"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["project"]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_2 in Exclude<keyof I["project"]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_3 in Exclude<keyof I["project"]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_4 in Exclude<keyof I["project"]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_5 in Exclude<keyof I["project"], keyof Project>]: never; };
        status?: boolean;
    } & { [K_6 in Exclude<keyof I, keyof CreateProjectRequest>]: never; }>(base?: I): CreateProjectRequest;
    fromPartial<I_1 extends {
        user?: string;
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        };
        status?: boolean;
    } & {
        user?: string;
        project?: {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            experiments?: string[];
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[];
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            };
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_7 in Exclude<keyof I_1["project"]["members"][string], keyof Member>]: never; };
            } & { [K_8 in Exclude<keyof I_1["project"]["members"], string | number>]: never; };
            experiments?: string[] & string[] & { [K_9 in Exclude<keyof I_1["project"]["experiments"], keyof string[]>]: never; };
            accessMode?: AccessMode;
            gid?: number;
            deprecated?: string[] & string[] & { [K_10 in Exclude<keyof I_1["project"]["deprecated"], keyof string[]>]: never; };
            ver?: number;
            organization?: string;
            orgMembership?: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_11 in Exclude<keyof I_1["project"]["orgMembership"], keyof Member>]: never; };
            category?: string;
            subcategory?: string;
        } & { [K_12 in Exclude<keyof I_1["project"], keyof Project>]: never; };
        status?: boolean;
    } & { [K_13 in Exclude<keyof I_1, keyof CreateProjectRequest>]: never; }>(object: I_1): CreateProjectRequest;
};
export declare const CreateProjectResponse: {
    encode(message: CreateProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateProjectResponse;
    fromJSON(object: any): CreateProjectResponse;
    toJSON(message: CreateProjectResponse): unknown;
    create<I extends {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        };
    } & {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        } & {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            } & {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[] & string[] & { [K in Exclude<keyof I["status"]["Goal"]["Subkeys"], keyof string[]>]: never; };
            } & { [K_1 in Exclude<keyof I["status"]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[] & ({
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[];
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[];
            } & {
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                } & {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[] & string[] & { [K_2 in Exclude<keyof I["status"]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                } & { [K_3 in Exclude<keyof I["status"]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[] & ({
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[];
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[];
                } & {
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    } & {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[] & string[] & { [K_4 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                    } & { [K_5 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[] & ({
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[];
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[];
                    } & {
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        } & {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[] & string[] & { [K_6 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                        } & { [K_7 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[] & ({
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[];
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[];
                        } & {
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            } & {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[] & string[] & { [K_8 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                            } & { [K_9 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[] & ({
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[];
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[];
                            } & {
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                } & {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[] & string[] & { [K_10 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                } & { [K_11 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[] & ({
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[];
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[];
                                } & {
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    } & {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[] & string[] & { [K_12 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                    } & { [K_13 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[] & ({
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[];
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[];
                                    } & {
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        } & {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[] & string[] & { [K_14 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                        } & { [K_15 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[] & ({
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[];
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[];
                                        } & {
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            } & {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[] & string[] & { [K_16 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                            } & { [K_17 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[] & ({
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[];
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[];
                                            } & {
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                } & any & { [K_18 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[] & ({
                                                    Goal?: {
                                                        SelfKey?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                        SelfVersion?: number;
                                                        Creation?: Date;
                                                        When?: Date;
                                                        Subkeys?: string[];
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subgoals?: any[];
                                                    Subtasks?: {
                                                        Task?: {
                                                            Manager?: string;
                                                            Name?: string;
                                                            Desc?: string;
                                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            SelfVersion?: number;
                                                            TaskVersion?: number;
                                                            PrevValue?: Uint8Array;
                                                            Duration?: {
                                                                seconds?: number;
                                                                nanos?: number;
                                                            };
                                                            When?: Date;
                                                            TaskKey?: string;
                                                            SubtaskKeys?: string[];
                                                            Messages?: {
                                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                                Message?: string;
                                                            }[];
                                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            TaskRevision?: number;
                                                        };
                                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        LastUpdated?: Date;
                                                        NumChildTasks?: number;
                                                        Subtasks?: any[];
                                                    }[];
                                                } & any & { [K_19 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_20 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_21 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_22 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_23 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_24 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_25 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_26 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_27 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_28 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_29 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_30 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_31 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_32 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_33 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_34 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_35 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_36 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_37 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_38 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_39 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_40 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_41 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_42 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_43 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_44 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_45 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_46 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_47 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_48 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_49 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_50 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_51 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_52 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_53 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_54 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_55 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_56 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_57 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_58 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_59 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_60 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_61 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_62 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_63 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_64 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_65 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_66 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_67 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_68 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_69 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_70 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_71 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_72 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_73 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_74 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_75 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_76 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_77 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_78 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_79 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_80 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_81 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_82 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_83 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_84 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_85 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_86 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_87 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_88 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_89 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_90 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_91 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_92 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_93 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_94 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_95 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_96 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_97 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_98 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_99 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_100 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_101 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_102 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_103 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_104 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_105 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_106 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_107 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_108 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_109 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_110 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_111 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_112 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_113 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_114 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_115 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_116 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_117 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_118 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_119 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_120 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_121 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_122 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_123 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_124 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_125 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_126 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_127 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_128 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_129 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_130 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_131 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_132 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_133 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_134 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_135 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_136 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_137 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_138 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_139 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_140 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_141 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_142 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_143 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_144 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_145 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_146 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_147 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_148 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_149 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_150 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_151 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_152 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_153 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_154 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_155 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_156 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_157 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_158 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_159 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_160 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_161 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_162 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_163 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_164 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_165 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_166 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_167 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_168 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_169 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_170 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_171 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_172 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_173 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_174 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_175 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_176 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_177 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_178 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_179 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_180 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_181 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_182 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_183 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_184 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_185 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_186 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_187 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_188 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_189 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_190 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_191 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_192 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_193 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_194 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_195 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_196 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_197 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_198 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_199 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_200 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_201 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_202 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_203 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_204 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_205 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_206 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_207 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_208 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_209 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_210 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_211 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_212 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_213 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_214 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_215 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_216 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_217 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_218 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_219 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_220 in Exclude<keyof I["status"]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_221 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_222 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_223 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_224 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_225 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_226 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_227 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_228 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_229 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_230 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_231 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_232 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_233 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_234 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_235 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_236 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_237 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_238 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_239 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_240 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_241 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_242 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_243 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_244 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_245 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_246 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_247 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_248 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_249 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_250 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_251 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_252 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_253 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_254 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_255 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_256 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_257 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_258 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_259 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_260 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_261 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_262 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_263 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_264 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_265 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_266 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_267 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_268 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_269 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_270 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_271 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_272 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_273 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_274 in Exclude<keyof I["status"]["Subgoals"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_275 in Exclude<keyof I["status"]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_276 in Exclude<keyof I["status"]["Subgoals"], keyof any[]>]: never; };
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[] & ({
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            } & {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    } & {
                        seconds?: number;
                        nanos?: number;
                    } & { [K_277 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[] & string[] & { [K_278 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[] & ({
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & { [K_279 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_280 in Exclude<keyof I["status"]["Subtasks"][number]["Task"]["Messages"], keyof {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[]>]: never; };
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & { [K_281 in Exclude<keyof I["status"]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_282 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_283 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_284 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_285 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_286 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_287 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_288 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_289 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_290 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_291 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_292 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_293 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_294 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_295 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_296 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_297 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_298 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_299 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_300 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_301 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_302 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_303 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_304 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_305 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_306 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_307 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_308 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_309 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_310 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_311 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_312 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_313 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_314 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_315 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_316 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_317 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_318 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_319 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_320 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_321 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_322 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_323 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_324 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_325 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_326 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_327 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_328 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_329 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_330 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_331 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_332 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_333 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_334 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_335 in Exclude<keyof I["status"]["Subtasks"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_336 in Exclude<keyof I["status"]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_337 in Exclude<keyof I["status"]["Subtasks"], keyof {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[]>]: never; };
        } & { [K_338 in Exclude<keyof I["status"], keyof TaskForest>]: never; };
    } & { [K_339 in Exclude<keyof I, "status">]: never; }>(base?: I): CreateProjectResponse;
    fromPartial<I_1 extends {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        };
    } & {
        status?: {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[];
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[];
        } & {
            Goal?: {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[];
            } & {
                SelfKey?: string;
                Name?: string;
                Desc?: string;
                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                SelfVersion?: number;
                Creation?: Date;
                When?: Date;
                Subkeys?: string[] & string[] & { [K_340 in Exclude<keyof I_1["status"]["Goal"]["Subkeys"], keyof string[]>]: never; };
            } & { [K_341 in Exclude<keyof I_1["status"]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
            LastUpdated?: Date;
            NumChildTasks?: number;
            Subgoals?: any[] & ({
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[];
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[];
            } & {
                Goal?: {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[];
                } & {
                    SelfKey?: string;
                    Name?: string;
                    Desc?: string;
                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                    SelfVersion?: number;
                    Creation?: Date;
                    When?: Date;
                    Subkeys?: string[] & string[] & { [K_342 in Exclude<keyof I_1["status"]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                } & { [K_343 in Exclude<keyof I_1["status"]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subgoals?: any[] & ({
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[];
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[];
                } & {
                    Goal?: {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[];
                    } & {
                        SelfKey?: string;
                        Name?: string;
                        Desc?: string;
                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                        SelfVersion?: number;
                        Creation?: Date;
                        When?: Date;
                        Subkeys?: string[] & string[] & { [K_344 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                    } & { [K_345 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subgoals?: any[] & ({
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[];
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[];
                    } & {
                        Goal?: {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[];
                        } & {
                            SelfKey?: string;
                            Name?: string;
                            Desc?: string;
                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                            SelfVersion?: number;
                            Creation?: Date;
                            When?: Date;
                            Subkeys?: string[] & string[] & { [K_346 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                        } & { [K_347 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subgoals?: any[] & ({
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[];
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[];
                        } & {
                            Goal?: {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[];
                            } & {
                                SelfKey?: string;
                                Name?: string;
                                Desc?: string;
                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                SelfVersion?: number;
                                Creation?: Date;
                                When?: Date;
                                Subkeys?: string[] & string[] & { [K_348 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                            } & { [K_349 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subgoals?: any[] & ({
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[];
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[];
                            } & {
                                Goal?: {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[];
                                } & {
                                    SelfKey?: string;
                                    Name?: string;
                                    Desc?: string;
                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                    SelfVersion?: number;
                                    Creation?: Date;
                                    When?: Date;
                                    Subkeys?: string[] & string[] & { [K_350 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                } & { [K_351 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subgoals?: any[] & ({
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[];
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[];
                                } & {
                                    Goal?: {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[];
                                    } & {
                                        SelfKey?: string;
                                        Name?: string;
                                        Desc?: string;
                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                        SelfVersion?: number;
                                        Creation?: Date;
                                        When?: Date;
                                        Subkeys?: string[] & string[] & { [K_352 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                    } & { [K_353 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subgoals?: any[] & ({
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[];
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[];
                                    } & {
                                        Goal?: {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[];
                                        } & {
                                            SelfKey?: string;
                                            Name?: string;
                                            Desc?: string;
                                            Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                            SelfVersion?: number;
                                            Creation?: Date;
                                            When?: Date;
                                            Subkeys?: string[] & string[] & { [K_354 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                        } & { [K_355 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subgoals?: any[] & ({
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[];
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[];
                                        } & {
                                            Goal?: {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[];
                                            } & {
                                                SelfKey?: string;
                                                Name?: string;
                                                Desc?: string;
                                                Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                SelfVersion?: number;
                                                Creation?: Date;
                                                When?: Date;
                                                Subkeys?: string[] & string[] & { [K_356 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"]["Subkeys"], keyof string[]>]: never; };
                                            } & { [K_357 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subgoals?: any[] & ({
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[];
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[];
                                            } & {
                                                Goal?: {
                                                    SelfKey?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                    SelfVersion?: number;
                                                    Creation?: Date;
                                                    When?: Date;
                                                    Subkeys?: string[];
                                                } & any & { [K_358 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Goal"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskGoal>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subgoals?: any[] & ({
                                                    Goal?: {
                                                        SelfKey?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        Type?: import("../../mergetb/tech/reconcile/taskstatus").TaskGoal_GoalType;
                                                        SelfVersion?: number;
                                                        Creation?: Date;
                                                        When?: Date;
                                                        Subkeys?: string[];
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subgoals?: any[];
                                                    Subtasks?: {
                                                        Task?: {
                                                            Manager?: string;
                                                            Name?: string;
                                                            Desc?: string;
                                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            SelfVersion?: number;
                                                            TaskVersion?: number;
                                                            PrevValue?: Uint8Array;
                                                            Duration?: {
                                                                seconds?: number;
                                                                nanos?: number;
                                                            };
                                                            When?: Date;
                                                            TaskKey?: string;
                                                            SubtaskKeys?: string[];
                                                            Messages?: {
                                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                                Message?: string;
                                                            }[];
                                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                            TaskRevision?: number;
                                                        };
                                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        LastUpdated?: Date;
                                                        NumChildTasks?: number;
                                                        Subtasks?: any[];
                                                    }[];
                                                } & any & { [K_359 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_360 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_361 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_362 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_363 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_364 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_365 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_366 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_367 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_368 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_369 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_370 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_371 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_372 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_373 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_374 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_375 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_376 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_377 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_378 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_379 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_380 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_381 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_382 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_383 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_384 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_385 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_386 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_387 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_388 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_389 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_390 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_391 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_392 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_393 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_394 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_395 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_396 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_397 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_398 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_399 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_400 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_401 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_402 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_403 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_404 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_405 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_406 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_407 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_408 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_409 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_410 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_411 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_412 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_413 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_414 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_415 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_416 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_417 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_418 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_419 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_420 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_421 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_422 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_423 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_424 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_425 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_426 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_427 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_428 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_429 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_430 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_431 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_432 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_433 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_434 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_435 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_436 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_437 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_438 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_439 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_440 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_441 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_442 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_443 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_444 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_445 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_446 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_447 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_448 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_449 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_450 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_451 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_452 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_453 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_454 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_455 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_456 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_457 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_458 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_459 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_460 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_461 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_462 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_463 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_464 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_465 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_466 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_467 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_468 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_469 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_470 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_471 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_472 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_473 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_474 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_475 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_476 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_477 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_478 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_479 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_480 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_481 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_482 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_483 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_484 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_485 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_486 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_487 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_488 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_489 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_490 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_491 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_492 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_493 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_494 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_495 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_496 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_497 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_498 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_499 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_500 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_501 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_502 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_503 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_504 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_505 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_506 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_507 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_508 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_509 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_510 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_511 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_512 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_513 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_514 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_515 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_516 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_517 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_518 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_519 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_520 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_521 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_522 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_523 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_524 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_525 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_526 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_527 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_528 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_529 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_530 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_531 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_532 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_533 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_534 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_535 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_536 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_537 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_538 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_539 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_540 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_541 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_542 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_543 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_544 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_545 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_546 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_547 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_548 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_549 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_550 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_551 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_552 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_553 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_554 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_555 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_556 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_557 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_558 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_559 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_560 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subgoals"], keyof any[]>]: never; };
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_561 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_562 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_563 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_564 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_565 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_566 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_567 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_568 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_569 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_570 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_571 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_572 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_573 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_574 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_575 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_576 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_577 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_578 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_579 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_580 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_581 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_582 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_583 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_584 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_585 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_586 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_587 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_588 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_589 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_590 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_591 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_592 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_593 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_594 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_595 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_596 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_597 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_598 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_599 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_600 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_601 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_602 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_603 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_604 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_605 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_606 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_607 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_608 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_609 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_610 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_611 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_612 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_613 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_614 in Exclude<keyof I_1["status"]["Subgoals"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_615 in Exclude<keyof I_1["status"]["Subgoals"][number], keyof TaskForest>]: never; })[] & { [K_616 in Exclude<keyof I_1["status"]["Subgoals"], keyof any[]>]: never; };
            Subtasks?: {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[] & ({
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            } & {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    } & {
                        seconds?: number;
                        nanos?: number;
                    } & { [K_617 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[] & string[] & { [K_618 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[] & ({
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    } & { [K_619 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_620 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"]["Messages"], keyof {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[]>]: never; };
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                } & { [K_621 in Exclude<keyof I_1["status"]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[] & ({
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                } & {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        } & {
                            seconds?: number;
                            nanos?: number;
                        } & { [K_622 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[] & string[] & { [K_623 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[] & ({
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        } & { [K_624 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_625 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[]>]: never; };
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    } & { [K_626 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[] & ({
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    } & {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            } & {
                                seconds?: number;
                                nanos?: number;
                            } & { [K_627 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[] & string[] & { [K_628 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[] & ({
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            } & { [K_629 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_630 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[]>]: never; };
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        } & { [K_631 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[] & ({
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        } & {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                } & {
                                    seconds?: number;
                                    nanos?: number;
                                } & { [K_632 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[] & string[] & { [K_633 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[] & ({
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                } & { [K_634 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_635 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[]>]: never; };
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            } & { [K_636 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[] & ({
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            } & {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    } & {
                                        seconds?: number;
                                        nanos?: number;
                                    } & { [K_637 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[] & string[] & { [K_638 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[] & ({
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    } & { [K_639 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_640 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[]>]: never; };
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                } & { [K_641 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[] & ({
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                } & {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        } & {
                                            seconds?: number;
                                            nanos?: number;
                                        } & { [K_642 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[] & string[] & { [K_643 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[] & ({
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        } & { [K_644 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_645 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[]>]: never; };
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    } & { [K_646 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[] & ({
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    } & {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            } & {
                                                seconds?: number;
                                                nanos?: number;
                                            } & { [K_647 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[] & string[] & { [K_648 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[] & ({
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            } & { [K_649 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_650 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[]>]: never; };
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        } & { [K_651 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[] & ({
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        } & {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                } & any & { [K_652 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Duration"], keyof import("../../google/protobuf/duration").Duration>]: never; };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[] & string[] & { [K_653 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["SubtaskKeys"], keyof string[]>]: never; };
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[] & ({
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                } & any & { [K_654 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskMessage>]: never; })[] & { [K_655 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"]["Messages"], keyof {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[]>]: never; };
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            } & { [K_656 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[] & ({
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            } & {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                } & any & { [K_657 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Task"], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskStatus>]: never; };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[] & ({
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                } & any & { [K_658 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_659 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                    Task?: {
                                                        Manager?: string;
                                                        Name?: string;
                                                        Desc?: string;
                                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        SelfVersion?: number;
                                                        TaskVersion?: number;
                                                        PrevValue?: Uint8Array;
                                                        Duration?: {
                                                            seconds?: number;
                                                            nanos?: number;
                                                        };
                                                        When?: Date;
                                                        TaskKey?: string;
                                                        SubtaskKeys?: string[];
                                                        Messages?: {
                                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                            Message?: string;
                                                        }[];
                                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                        TaskRevision?: number;
                                                    };
                                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    LastUpdated?: Date;
                                                    NumChildTasks?: number;
                                                    Subtasks?: any[];
                                                }[]>]: never; };
                                            } & { [K_660 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_661 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                                Task?: {
                                                    Manager?: string;
                                                    Name?: string;
                                                    Desc?: string;
                                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    SelfVersion?: number;
                                                    TaskVersion?: number;
                                                    PrevValue?: Uint8Array;
                                                    Duration?: {
                                                        seconds?: number;
                                                        nanos?: number;
                                                    };
                                                    When?: Date;
                                                    TaskKey?: string;
                                                    SubtaskKeys?: string[];
                                                    Messages?: {
                                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                        Message?: string;
                                                    }[];
                                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                    TaskRevision?: number;
                                                };
                                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                LastUpdated?: Date;
                                                NumChildTasks?: number;
                                                Subtasks?: any[];
                                            }[]>]: never; };
                                        } & { [K_662 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_663 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                            Task?: {
                                                Manager?: string;
                                                Name?: string;
                                                Desc?: string;
                                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                SelfVersion?: number;
                                                TaskVersion?: number;
                                                PrevValue?: Uint8Array;
                                                Duration?: {
                                                    seconds?: number;
                                                    nanos?: number;
                                                };
                                                When?: Date;
                                                TaskKey?: string;
                                                SubtaskKeys?: string[];
                                                Messages?: {
                                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                    Message?: string;
                                                }[];
                                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                                TaskRevision?: number;
                                            };
                                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            LastUpdated?: Date;
                                            NumChildTasks?: number;
                                            Subtasks?: any[];
                                        }[]>]: never; };
                                    } & { [K_664 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_665 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                        Task?: {
                                            Manager?: string;
                                            Name?: string;
                                            Desc?: string;
                                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            SelfVersion?: number;
                                            TaskVersion?: number;
                                            PrevValue?: Uint8Array;
                                            Duration?: {
                                                seconds?: number;
                                                nanos?: number;
                                            };
                                            When?: Date;
                                            TaskKey?: string;
                                            SubtaskKeys?: string[];
                                            Messages?: {
                                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                                Message?: string;
                                            }[];
                                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                            TaskRevision?: number;
                                        };
                                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        LastUpdated?: Date;
                                        NumChildTasks?: number;
                                        Subtasks?: any[];
                                    }[]>]: never; };
                                } & { [K_666 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_667 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                    Task?: {
                                        Manager?: string;
                                        Name?: string;
                                        Desc?: string;
                                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        SelfVersion?: number;
                                        TaskVersion?: number;
                                        PrevValue?: Uint8Array;
                                        Duration?: {
                                            seconds?: number;
                                            nanos?: number;
                                        };
                                        When?: Date;
                                        TaskKey?: string;
                                        SubtaskKeys?: string[];
                                        Messages?: {
                                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                            Message?: string;
                                        }[];
                                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                        TaskRevision?: number;
                                    };
                                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    LastUpdated?: Date;
                                    NumChildTasks?: number;
                                    Subtasks?: any[];
                                }[]>]: never; };
                            } & { [K_668 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_669 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                                Task?: {
                                    Manager?: string;
                                    Name?: string;
                                    Desc?: string;
                                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    SelfVersion?: number;
                                    TaskVersion?: number;
                                    PrevValue?: Uint8Array;
                                    Duration?: {
                                        seconds?: number;
                                        nanos?: number;
                                    };
                                    When?: Date;
                                    TaskKey?: string;
                                    SubtaskKeys?: string[];
                                    Messages?: {
                                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                        Message?: string;
                                    }[];
                                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                    TaskRevision?: number;
                                };
                                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                LastUpdated?: Date;
                                NumChildTasks?: number;
                                Subtasks?: any[];
                            }[]>]: never; };
                        } & { [K_670 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_671 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                            Task?: {
                                Manager?: string;
                                Name?: string;
                                Desc?: string;
                                LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                SelfVersion?: number;
                                TaskVersion?: number;
                                PrevValue?: Uint8Array;
                                Duration?: {
                                    seconds?: number;
                                    nanos?: number;
                                };
                                When?: Date;
                                TaskKey?: string;
                                SubtaskKeys?: string[];
                                Messages?: {
                                    Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                    Message?: string;
                                }[];
                                CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                                TaskRevision?: number;
                            };
                            HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            LastUpdated?: Date;
                            NumChildTasks?: number;
                            Subtasks?: any[];
                        }[]>]: never; };
                    } & { [K_672 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_673 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number]["Subtasks"], keyof {
                        Task?: {
                            Manager?: string;
                            Name?: string;
                            Desc?: string;
                            LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            SelfVersion?: number;
                            TaskVersion?: number;
                            PrevValue?: Uint8Array;
                            Duration?: {
                                seconds?: number;
                                nanos?: number;
                            };
                            When?: Date;
                            TaskKey?: string;
                            SubtaskKeys?: string[];
                            Messages?: {
                                Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                                Message?: string;
                            }[];
                            CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                            TaskRevision?: number;
                        };
                        HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        LastUpdated?: Date;
                        NumChildTasks?: number;
                        Subtasks?: any[];
                    }[]>]: never; };
                } & { [K_674 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_675 in Exclude<keyof I_1["status"]["Subtasks"][number]["Subtasks"], keyof {
                    Task?: {
                        Manager?: string;
                        Name?: string;
                        Desc?: string;
                        LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        SelfVersion?: number;
                        TaskVersion?: number;
                        PrevValue?: Uint8Array;
                        Duration?: {
                            seconds?: number;
                            nanos?: number;
                        };
                        When?: Date;
                        TaskKey?: string;
                        SubtaskKeys?: string[];
                        Messages?: {
                            Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                            Message?: string;
                        }[];
                        CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                        TaskRevision?: number;
                    };
                    HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    LastUpdated?: Date;
                    NumChildTasks?: number;
                    Subtasks?: any[];
                }[]>]: never; };
            } & { [K_676 in Exclude<keyof I_1["status"]["Subtasks"][number], keyof import("../../mergetb/tech/reconcile/taskstatus").TaskTree>]: never; })[] & { [K_677 in Exclude<keyof I_1["status"]["Subtasks"], keyof {
                Task?: {
                    Manager?: string;
                    Name?: string;
                    Desc?: string;
                    LastStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    SelfVersion?: number;
                    TaskVersion?: number;
                    PrevValue?: Uint8Array;
                    Duration?: {
                        seconds?: number;
                        nanos?: number;
                    };
                    When?: Date;
                    TaskKey?: string;
                    SubtaskKeys?: string[];
                    Messages?: {
                        Level?: import("../../mergetb/tech/reconcile/taskstatus").TaskMessage_Type;
                        Message?: string;
                    }[];
                    CurrentStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                    TaskRevision?: number;
                };
                HighestStatus?: import("../../mergetb/tech/reconcile/taskstatus").TaskStatus_StatusType;
                LastUpdated?: Date;
                NumChildTasks?: number;
                Subtasks?: any[];
            }[]>]: never; };
        } & { [K_678 in Exclude<keyof I_1["status"], keyof TaskForest>]: never; };
    } & { [K_679 in Exclude<keyof I_1, "status">]: never; }>(object: I_1): CreateProjectResponse;
};
export declare const DescriptionUpdate: {
    encode(message: DescriptionUpdate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DescriptionUpdate;
    fromJSON(object: any): DescriptionUpdate;
    toJSON(message: DescriptionUpdate): unknown;
    create<I extends {
        value?: string;
    } & {
        value?: string;
    } & { [K in Exclude<keyof I, "value">]: never; }>(base?: I): DescriptionUpdate;
    fromPartial<I_1 extends {
        value?: string;
    } & {
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, "value">]: never; }>(object: I_1): DescriptionUpdate;
};
export declare const UpdateProjectRequest: {
    encode(message: UpdateProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectRequest;
    fromJSON(object: any): UpdateProjectRequest;
    toJSON(message: UpdateProjectRequest): unknown;
    create<I extends {
        name?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        organization?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
    } & {
        name?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K in Exclude<keyof I["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_1 in Exclude<keyof I["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_2 in Exclude<keyof I["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_3 in Exclude<keyof I["members"]["set"][string], keyof Member>]: never; };
            } & { [K_4 in Exclude<keyof I["members"]["set"], string | number>]: never; };
        } & { [K_5 in Exclude<keyof I["members"], keyof MembershipUpdate>]: never; };
        organization?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_6 in Exclude<keyof I["organization"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_7 in Exclude<keyof I["organization"]["set"][string], keyof Member>]: never; };
            } & { [K_8 in Exclude<keyof I["organization"]["set"], string | number>]: never; };
        } & { [K_9 in Exclude<keyof I["organization"], keyof MembershipUpdate>]: never; };
    } & { [K_10 in Exclude<keyof I, keyof UpdateProjectRequest>]: never; }>(base?: I): UpdateProjectRequest;
    fromPartial<I_1 extends {
        name?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        organization?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
    } & {
        name?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K_11 in Exclude<keyof I_1["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_12 in Exclude<keyof I_1["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_13 in Exclude<keyof I_1["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_14 in Exclude<keyof I_1["members"]["set"][string], keyof Member>]: never; };
            } & { [K_15 in Exclude<keyof I_1["members"]["set"], string | number>]: never; };
        } & { [K_16 in Exclude<keyof I_1["members"], keyof MembershipUpdate>]: never; };
        organization?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_17 in Exclude<keyof I_1["organization"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_18 in Exclude<keyof I_1["organization"]["set"][string], keyof Member>]: never; };
            } & { [K_19 in Exclude<keyof I_1["organization"]["set"], string | number>]: never; };
        } & { [K_20 in Exclude<keyof I_1["organization"], keyof MembershipUpdate>]: never; };
    } & { [K_21 in Exclude<keyof I_1, keyof UpdateProjectRequest>]: never; }>(object: I_1): UpdateProjectRequest;
};
export declare const UpdateProjectResponse: {
    encode(_: UpdateProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectResponse;
    fromJSON(_: any): UpdateProjectResponse;
    toJSON(_: UpdateProjectResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateProjectResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateProjectResponse;
};
export declare const GetProjectMembersRequest: {
    encode(message: GetProjectMembersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectMembersRequest;
    fromJSON(object: any): GetProjectMembersRequest;
    toJSON(message: GetProjectMembersRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetProjectMembersRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetProjectMembersRequest;
};
export declare const GetProjectMembersResponse: {
    encode(message: GetProjectMembersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectMembersResponse;
    fromJSON(object: any): GetProjectMembersResponse;
    toJSON(message: GetProjectMembersResponse): unknown;
    create<I extends {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["members"][number], keyof Member>]: never; })[] & { [K_1 in Exclude<keyof I["members"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "members">]: never; }>(base?: I): GetProjectMembersResponse;
    fromPartial<I_1 extends {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_3 in Exclude<keyof I_1["members"][number], keyof Member>]: never; })[] & { [K_4 in Exclude<keyof I_1["members"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "members">]: never; }>(object: I_1): GetProjectMembersResponse;
};
export declare const GetProjectMemberRequest: {
    encode(message: GetProjectMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectMemberRequest;
    fromJSON(object: any): GetProjectMemberRequest;
    toJSON(message: GetProjectMemberRequest): unknown;
    create<I extends {
        project?: string;
        member?: string;
    } & {
        project?: string;
        member?: string;
    } & { [K in Exclude<keyof I, keyof GetProjectMemberRequest>]: never; }>(base?: I): GetProjectMemberRequest;
    fromPartial<I_1 extends {
        project?: string;
        member?: string;
    } & {
        project?: string;
        member?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetProjectMemberRequest>]: never; }>(object: I_1): GetProjectMemberRequest;
};
export declare const GetProjectMemberResponse: {
    encode(message: GetProjectMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectMemberResponse;
    fromJSON(object: any): GetProjectMemberResponse;
    toJSON(message: GetProjectMemberResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): GetProjectMemberResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): GetProjectMemberResponse;
};
export declare const AddProjectMemberRequest: {
    encode(message: AddProjectMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberRequest;
    fromJSON(object: any): AddProjectMemberRequest;
    toJSON(message: AddProjectMemberRequest): unknown;
    create<I extends {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof AddProjectMemberRequest>]: never; }>(base?: I): AddProjectMemberRequest;
    fromPartial<I_1 extends {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof AddProjectMemberRequest>]: never; }>(object: I_1): AddProjectMemberRequest;
};
export declare const AddProjectMemberResponse: {
    encode(_: AddProjectMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddProjectMemberResponse;
    fromJSON(_: any): AddProjectMemberResponse;
    toJSON(_: AddProjectMemberResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddProjectMemberResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddProjectMemberResponse;
};
export declare const UpdateProjectMemberRequest: {
    encode(message: UpdateProjectMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberRequest;
    fromJSON(object: any): UpdateProjectMemberRequest;
    toJSON(message: UpdateProjectMemberRequest): unknown;
    create<I extends {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof UpdateProjectMemberRequest>]: never; }>(base?: I): UpdateProjectMemberRequest;
    fromPartial<I_1 extends {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        project?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof UpdateProjectMemberRequest>]: never; }>(object: I_1): UpdateProjectMemberRequest;
};
export declare const UpdateProjectMemberResponse: {
    encode(_: UpdateProjectMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateProjectMemberResponse;
    fromJSON(_: any): UpdateProjectMemberResponse;
    toJSON(_: UpdateProjectMemberResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateProjectMemberResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateProjectMemberResponse;
};
export declare const DeleteProjectMemberRequest: {
    encode(message: DeleteProjectMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProjectMemberRequest;
    fromJSON(object: any): DeleteProjectMemberRequest;
    toJSON(message: DeleteProjectMemberRequest): unknown;
    create<I extends {
        project?: string;
        member?: string;
    } & {
        project?: string;
        member?: string;
    } & { [K in Exclude<keyof I, keyof DeleteProjectMemberRequest>]: never; }>(base?: I): DeleteProjectMemberRequest;
    fromPartial<I_1 extends {
        project?: string;
        member?: string;
    } & {
        project?: string;
        member?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteProjectMemberRequest>]: never; }>(object: I_1): DeleteProjectMemberRequest;
};
export declare const DeleteProjectMemberResponse: {
    encode(_: DeleteProjectMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteProjectMemberResponse;
    fromJSON(_: any): DeleteProjectMemberResponse;
    toJSON(_: DeleteProjectMemberResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteProjectMemberResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteProjectMemberResponse;
};
export declare const ExperimentModel: {
    encode(message: ExperimentModel, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExperimentModel;
    fromJSON(object: any): ExperimentModel;
    toJSON(message: ExperimentModel): unknown;
    create<I extends {
        compiled?: boolean;
        msg?: string;
        realizations?: string[];
        compileTime?: Date | undefined;
    } & {
        compiled?: boolean;
        msg?: string;
        realizations?: string[] & string[] & { [K in Exclude<keyof I["realizations"], keyof string[]>]: never; };
        compileTime?: Date | undefined;
    } & { [K_1 in Exclude<keyof I, keyof ExperimentModel>]: never; }>(base?: I): ExperimentModel;
    fromPartial<I_1 extends {
        compiled?: boolean;
        msg?: string;
        realizations?: string[];
        compileTime?: Date | undefined;
    } & {
        compiled?: boolean;
        msg?: string;
        realizations?: string[] & string[] & { [K_2 in Exclude<keyof I_1["realizations"], keyof string[]>]: never; };
        compileTime?: Date | undefined;
    } & { [K_3 in Exclude<keyof I_1, keyof ExperimentModel>]: never; }>(object: I_1): ExperimentModel;
};
export declare const Experiment: {
    encode(message: Experiment, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Experiment;
    fromJSON(object: any): Experiment;
    toJSON(message: Experiment): unknown;
    create<I extends {
        name?: string;
        project?: string;
        description?: string;
        models?: {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            };
        };
        accessMode?: AccessMode;
        repository?: string;
        creator?: string;
        maintainers?: string[];
        ver?: number;
    } & {
        name?: string;
        project?: string;
        description?: string;
        models?: {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            };
        } & {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            } & {
                compiled?: boolean;
                msg?: string;
                realizations?: string[] & string[] & { [K in Exclude<keyof I["models"][string]["realizations"], keyof string[]>]: never; };
                compileTime?: Date | undefined;
            } & { [K_1 in Exclude<keyof I["models"][string], keyof ExperimentModel>]: never; };
        } & { [K_2 in Exclude<keyof I["models"], string | number>]: never; };
        accessMode?: AccessMode;
        repository?: string;
        creator?: string;
        maintainers?: string[] & string[] & { [K_3 in Exclude<keyof I["maintainers"], keyof string[]>]: never; };
        ver?: number;
    } & { [K_4 in Exclude<keyof I, keyof Experiment>]: never; }>(base?: I): Experiment;
    fromPartial<I_1 extends {
        name?: string;
        project?: string;
        description?: string;
        models?: {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            };
        };
        accessMode?: AccessMode;
        repository?: string;
        creator?: string;
        maintainers?: string[];
        ver?: number;
    } & {
        name?: string;
        project?: string;
        description?: string;
        models?: {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            };
        } & {
            [x: string]: {
                compiled?: boolean;
                msg?: string;
                realizations?: string[];
                compileTime?: Date | undefined;
            } & {
                compiled?: boolean;
                msg?: string;
                realizations?: string[] & string[] & { [K_5 in Exclude<keyof I_1["models"][string]["realizations"], keyof string[]>]: never; };
                compileTime?: Date | undefined;
            } & { [K_6 in Exclude<keyof I_1["models"][string], keyof ExperimentModel>]: never; };
        } & { [K_7 in Exclude<keyof I_1["models"], string | number>]: never; };
        accessMode?: AccessMode;
        repository?: string;
        creator?: string;
        maintainers?: string[] & string[] & { [K_8 in Exclude<keyof I_1["maintainers"], keyof string[]>]: never; };
        ver?: number;
    } & { [K_9 in Exclude<keyof I_1, keyof Experiment>]: never; }>(object: I_1): Experiment;
};
export declare const Experiment_ModelsEntry: {
    encode(message: Experiment_ModelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Experiment_ModelsEntry;
    fromJSON(object: any): Experiment_ModelsEntry;
    toJSON(message: Experiment_ModelsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            compiled?: boolean;
            msg?: string;
            realizations?: string[];
            compileTime?: Date | undefined;
        };
    } & {
        key?: string;
        value?: {
            compiled?: boolean;
            msg?: string;
            realizations?: string[];
            compileTime?: Date | undefined;
        } & {
            compiled?: boolean;
            msg?: string;
            realizations?: string[] & string[] & { [K in Exclude<keyof I["value"]["realizations"], keyof string[]>]: never; };
            compileTime?: Date | undefined;
        } & { [K_1 in Exclude<keyof I["value"], keyof ExperimentModel>]: never; };
    } & { [K_2 in Exclude<keyof I, keyof Experiment_ModelsEntry>]: never; }>(base?: I): Experiment_ModelsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            compiled?: boolean;
            msg?: string;
            realizations?: string[];
            compileTime?: Date | undefined;
        };
    } & {
        key?: string;
        value?: {
            compiled?: boolean;
            msg?: string;
            realizations?: string[];
            compileTime?: Date | undefined;
        } & {
            compiled?: boolean;
            msg?: string;
            realizations?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["realizations"], keyof string[]>]: never; };
            compileTime?: Date | undefined;
        } & { [K_4 in Exclude<keyof I_1["value"], keyof ExperimentModel>]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof Experiment_ModelsEntry>]: never; }>(object: I_1): Experiment_ModelsEntry;
};
export declare const GetExperimentsRequest: {
    encode(message: GetExperimentsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetExperimentsRequest;
    fromJSON(object: any): GetExperimentsRequest;
    toJSON(message: GetExperimentsRequest): unknown;
    create<I extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K in Exclude<keyof I, "filter">]: never; }>(base?: I): GetExperimentsRequest;
    fromPartial<I_1 extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K_1 in Exclude<keyof I_1, "filter">]: never; }>(object: I_1): GetExperimentsRequest;
};
export declare const GetExperimentsResponse: {
    encode(message: GetExperimentsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetExperimentsResponse;
    fromJSON(object: any): GetExperimentsResponse;
    toJSON(message: GetExperimentsResponse): unknown;
    create<I extends {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[];
    } & {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[] & ({
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K in Exclude<keyof I["experiments"][number]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_1 in Exclude<keyof I["experiments"][number]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_2 in Exclude<keyof I["experiments"][number]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_3 in Exclude<keyof I["experiments"][number]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_4 in Exclude<keyof I["experiments"][number], keyof Experiment>]: never; })[] & { [K_5 in Exclude<keyof I["experiments"], keyof {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, "experiments">]: never; }>(base?: I): GetExperimentsResponse;
    fromPartial<I_1 extends {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[];
    } & {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[] & ({
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K_7 in Exclude<keyof I_1["experiments"][number]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_8 in Exclude<keyof I_1["experiments"][number]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_9 in Exclude<keyof I_1["experiments"][number]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_10 in Exclude<keyof I_1["experiments"][number]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_11 in Exclude<keyof I_1["experiments"][number], keyof Experiment>]: never; })[] & { [K_12 in Exclude<keyof I_1["experiments"], keyof {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "experiments">]: never; }>(object: I_1): GetExperimentsResponse;
};
export declare const GetProjectExperimentsRequest: {
    encode(message: GetProjectExperimentsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectExperimentsRequest;
    fromJSON(object: any): GetProjectExperimentsRequest;
    toJSON(message: GetProjectExperimentsRequest): unknown;
    create<I extends {
        project?: string;
    } & {
        project?: string;
    } & { [K in Exclude<keyof I, "project">]: never; }>(base?: I): GetProjectExperimentsRequest;
    fromPartial<I_1 extends {
        project?: string;
    } & {
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, "project">]: never; }>(object: I_1): GetProjectExperimentsRequest;
};
export declare const GetProjectExperimentsResponse: {
    encode(message: GetProjectExperimentsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetProjectExperimentsResponse;
    fromJSON(object: any): GetProjectExperimentsResponse;
    toJSON(message: GetProjectExperimentsResponse): unknown;
    create<I extends {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[];
    } & {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[] & ({
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K in Exclude<keyof I["experiments"][number]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_1 in Exclude<keyof I["experiments"][number]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_2 in Exclude<keyof I["experiments"][number]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_3 in Exclude<keyof I["experiments"][number]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_4 in Exclude<keyof I["experiments"][number], keyof Experiment>]: never; })[] & { [K_5 in Exclude<keyof I["experiments"], keyof {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, "experiments">]: never; }>(base?: I): GetProjectExperimentsResponse;
    fromPartial<I_1 extends {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[];
    } & {
        experiments?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[] & ({
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K_7 in Exclude<keyof I_1["experiments"][number]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_8 in Exclude<keyof I_1["experiments"][number]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_9 in Exclude<keyof I_1["experiments"][number]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_10 in Exclude<keyof I_1["experiments"][number]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_11 in Exclude<keyof I_1["experiments"][number], keyof Experiment>]: never; })[] & { [K_12 in Exclude<keyof I_1["experiments"], keyof {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "experiments">]: never; }>(object: I_1): GetProjectExperimentsResponse;
};
export declare const GetExperimentRequest: {
    encode(message: GetExperimentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetExperimentRequest;
    fromJSON(object: any): GetExperimentRequest;
    toJSON(message: GetExperimentRequest): unknown;
    create<I extends {
        project?: string;
        experiment?: string;
        withModels?: boolean;
    } & {
        project?: string;
        experiment?: string;
        withModels?: boolean;
    } & { [K in Exclude<keyof I, keyof GetExperimentRequest>]: never; }>(base?: I): GetExperimentRequest;
    fromPartial<I_1 extends {
        project?: string;
        experiment?: string;
        withModels?: boolean;
    } & {
        project?: string;
        experiment?: string;
        withModels?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof GetExperimentRequest>]: never; }>(object: I_1): GetExperimentRequest;
};
export declare const XpNetModel: {
    encode(message: XpNetModel, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): XpNetModel;
    fromJSON(object: any): XpNetModel;
    toJSON(message: XpNetModel): unknown;
    create<I extends {
        compiled?: boolean;
        model?: {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[];
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[];
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            };
        };
    } & {
        compiled?: boolean;
        model?: {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[];
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[];
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            };
        } & {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[] & ({
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            } & {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[] & ({
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                } & {
                    index?: number;
                    addrs?: string[] & string[] & { [K in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_1 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                    } & { [K_2 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_3 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_4 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_5 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_6 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_7 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_8 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_9 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_10 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                } & { [K_11 in Exclude<keyof I["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_12 in Exclude<keyof I["model"]["nodes"][number]["sockets"], keyof {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[]>]: never; };
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                } & {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & { [K_13 in Exclude<keyof I["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_14 in Exclude<keyof I["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_15 in Exclude<keyof I["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_16 in Exclude<keyof I["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_17 in Exclude<keyof I["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_18 in Exclude<keyof I["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_19 in Exclude<keyof I["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_20 in Exclude<keyof I["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_21 in Exclude<keyof I["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                } & { [K_22 in Exclude<keyof I["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & { [K_23 in Exclude<keyof I["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_24 in Exclude<keyof I["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_25 in Exclude<keyof I["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_26 in Exclude<keyof I["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_27 in Exclude<keyof I["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                } & {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[] & ({
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_28 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_29 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_30 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_31 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_32 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_33 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_34 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_35 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_36 in Exclude<keyof I["model"]["nodes"][number]["NIC"]["ports"], keyof {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[]>]: never; };
                } & { [K_37 in Exclude<keyof I["model"]["nodes"][number]["NIC"], "ports">]: never; };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_38 in Exclude<keyof I["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & { [K_39 in Exclude<keyof I["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & { [K_40 in Exclude<keyof I["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_41 in Exclude<keyof I["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_42 in Exclude<keyof I["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_43 in Exclude<keyof I["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_44 in Exclude<keyof I["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_45 in Exclude<keyof I["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_46 in Exclude<keyof I["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                viz?: {
                    color?: string;
                    size?: number;
                } & {
                    color?: string;
                    size?: number;
                } & { [K_47 in Exclude<keyof I["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                } & {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[] & ({
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & { [K_48 in Exclude<keyof I["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_49 in Exclude<keyof I["model"]["nodes"][number]["conf"]["routes"], keyof {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[]>]: never; };
                } & { [K_50 in Exclude<keyof I["model"]["nodes"][number]["conf"], "routes">]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_51 in Exclude<keyof I["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_52 in Exclude<keyof I["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_53 in Exclude<keyof I["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_54 in Exclude<keyof I["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_55 in Exclude<keyof I["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
            } & { [K_56 in Exclude<keyof I["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_57 in Exclude<keyof I["model"]["nodes"], keyof {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[]>]: never; };
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[] & ({
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            } & {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_58 in Exclude<keyof I["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_59 in Exclude<keyof I["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_60 in Exclude<keyof I["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[] & ({
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                } & {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_61 in Exclude<keyof I["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                    } & { [K_62 in Exclude<keyof I["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    } & {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_63 in Exclude<keyof I["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_64 in Exclude<keyof I["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                    } & { [K_65 in Exclude<keyof I["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                } & { [K_66 in Exclude<keyof I["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_67 in Exclude<keyof I["model"]["links"][number]["endpoints"], keyof {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[]>]: never; };
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                } & { [K_68 in Exclude<keyof I["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_69 in Exclude<keyof I["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_70 in Exclude<keyof I["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_71 in Exclude<keyof I["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_72 in Exclude<keyof I["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_73 in Exclude<keyof I["model"]["links"][number]["properties"], "keyvalues">]: never; };
            } & { [K_74 in Exclude<keyof I["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_75 in Exclude<keyof I["model"]["links"], keyof {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[]>]: never; };
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            } & {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                } & { [K_76 in Exclude<keyof I["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                } & { [K_77 in Exclude<keyof I["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                hypervisors?: string[] & string[] & { [K_78 in Exclude<keyof I["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                simulators?: string[] & string[] & { [K_79 in Exclude<keyof I["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                emulators?: string[] & string[] & { [K_80 in Exclude<keyof I["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                } & { [K_81 in Exclude<keyof I["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
            } & { [K_82 in Exclude<keyof I["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
        } & { [K_83 in Exclude<keyof I["model"], keyof Network>]: never; };
    } & { [K_84 in Exclude<keyof I, keyof XpNetModel>]: never; }>(base?: I): XpNetModel;
    fromPartial<I_1 extends {
        compiled?: boolean;
        model?: {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[];
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[];
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            };
        };
    } & {
        compiled?: boolean;
        model?: {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[];
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[];
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            };
        } & {
            id?: string;
            nodes?: {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[] & ({
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            } & {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[] & ({
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                } & {
                    index?: number;
                    addrs?: string[] & string[] & { [K_85 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_86 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                    } & { [K_87 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_88 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_89 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_90 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_91 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_92 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_93 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_94 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_95 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                } & { [K_96 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_97 in Exclude<keyof I_1["model"]["nodes"][number]["sockets"], keyof {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[]>]: never; };
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                } & {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    } & { [K_98 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_99 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_100 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_101 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_102 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_103 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_104 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_105 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_106 in Exclude<keyof I_1["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                } & { [K_107 in Exclude<keyof I_1["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    } & { [K_108 in Exclude<keyof I_1["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_109 in Exclude<keyof I_1["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_110 in Exclude<keyof I_1["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_111 in Exclude<keyof I_1["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_112 in Exclude<keyof I_1["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                } & {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[] & ({
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_113 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_114 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_115 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_116 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        } & { [K_117 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_118 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_119 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_120 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_121 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"]["ports"], keyof {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[]>]: never; };
                } & { [K_122 in Exclude<keyof I_1["model"]["nodes"][number]["NIC"], "ports">]: never; };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                } & {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_123 in Exclude<keyof I_1["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    } & { [K_124 in Exclude<keyof I_1["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    } & { [K_125 in Exclude<keyof I_1["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_126 in Exclude<keyof I_1["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                } & { [K_127 in Exclude<keyof I_1["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_128 in Exclude<keyof I_1["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                } & { [K_129 in Exclude<keyof I_1["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_130 in Exclude<keyof I_1["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_131 in Exclude<keyof I_1["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                viz?: {
                    color?: string;
                    size?: number;
                } & {
                    color?: string;
                    size?: number;
                } & { [K_132 in Exclude<keyof I_1["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                } & {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[] & ({
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    } & { [K_133 in Exclude<keyof I_1["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_134 in Exclude<keyof I_1["model"]["nodes"][number]["conf"]["routes"], keyof {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[]>]: never; };
                } & { [K_135 in Exclude<keyof I_1["model"]["nodes"][number]["conf"], "routes">]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_136 in Exclude<keyof I_1["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_137 in Exclude<keyof I_1["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_138 in Exclude<keyof I_1["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_139 in Exclude<keyof I_1["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                } & { [K_140 in Exclude<keyof I_1["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
            } & { [K_141 in Exclude<keyof I_1["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_142 in Exclude<keyof I_1["model"]["nodes"], keyof {
                id?: string;
                sockets?: {
                    index?: number;
                    addrs?: string[];
                    endpoint?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    port?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                }[];
                proc?: {
                    isa?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").ISA;
                    };
                    family?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    BaseFrequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    L2?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    cores?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    threads?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    tdp?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    sockets?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    hyperthreaded?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                };
                memory?: {
                    type?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    frequency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    modules?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                NIC?: {
                    ports?: {
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        queues?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        model?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").NICModel;
                        };
                        DPDK?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        SriovVF?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    }[];
                };
                disks?: {
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                    };
                    diskInterface?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                    };
                    disks?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                };
                metal?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                virt?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: boolean;
                };
                image?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                platform?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
                viz?: {
                    color?: string;
                    size?: number;
                };
                conf?: {
                    routes?: {
                        src?: string;
                        gw?: string;
                        dst?: string;
                    }[];
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
                host?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: string;
                };
            }[]>]: never; };
            links?: {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[] & ({
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            } & {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_143 in Exclude<keyof I_1["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_144 in Exclude<keyof I_1["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_145 in Exclude<keyof I_1["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[] & ({
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                } & {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_146 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                    } & { [K_147 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    } & {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        } & { [K_148 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_149 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                        capacity?: number;
                    } & { [K_150 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                } & { [K_151 in Exclude<keyof I_1["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_152 in Exclude<keyof I_1["model"]["links"][number]["endpoints"], keyof {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[]>]: never; };
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                } & { [K_153 in Exclude<keyof I_1["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                } & { [K_154 in Exclude<keyof I_1["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                } & {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    } & {
                        [x: string]: {
                            values?: string[];
                        } & {
                            values?: string[] & string[] & { [K_155 in Exclude<keyof I_1["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                        } & { [K_156 in Exclude<keyof I_1["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                    } & { [K_157 in Exclude<keyof I_1["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                } & { [K_158 in Exclude<keyof I_1["model"]["links"][number]["properties"], "keyvalues">]: never; };
            } & { [K_159 in Exclude<keyof I_1["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_160 in Exclude<keyof I_1["model"]["links"], keyof {
                id?: string;
                latency?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                capacity?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                loss?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                endpoints?: {
                    index?: number;
                    socket?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    connector?: {
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                        };
                        protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                        capacity?: number;
                    };
                }[];
                kind?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                };
                layer?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: number;
                };
                properties?: {
                    keyvalues?: {
                        [x: string]: {
                            values?: string[];
                        };
                    };
                };
            }[]>]: never; };
            parameters?: {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                };
                hypervisors?: string[];
                simulators?: string[];
                emulators?: string[];
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                };
            } & {
                routing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Routing;
                } & { [K_161 in Exclude<keyof I_1["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                addressing?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Addressing;
                } & { [K_162 in Exclude<keyof I_1["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                hypervisors?: string[] & string[] & { [K_163 in Exclude<keyof I_1["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                simulators?: string[] & string[] & { [K_164 in Exclude<keyof I_1["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                emulators?: string[] & string[] & { [K_165 in Exclude<keyof I_1["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                experimentnetresolution?: boolean;
                emulation?: {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                } & {
                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                    value?: import("../../mergetb/xir/v0.3/core").Emulation;
                } & { [K_166 in Exclude<keyof I_1["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
            } & { [K_167 in Exclude<keyof I_1["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
        } & { [K_168 in Exclude<keyof I_1["model"], keyof Network>]: never; };
    } & { [K_169 in Exclude<keyof I_1, keyof XpNetModel>]: never; }>(object: I_1): XpNetModel;
};
export declare const GetExperimentResponse: {
    encode(message: GetExperimentResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetExperimentResponse;
    fromJSON(object: any): GetExperimentResponse;
    toJSON(message: GetExperimentResponse): unknown;
    create<I extends {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        };
        models?: {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            };
        };
    } & {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K in Exclude<keyof I["experiment"]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_1 in Exclude<keyof I["experiment"]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_2 in Exclude<keyof I["experiment"]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_3 in Exclude<keyof I["experiment"]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_4 in Exclude<keyof I["experiment"], keyof Experiment>]: never; };
        models?: {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            };
        } & {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            } & {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                } & {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[] & ({
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    } & {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[] & ({
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        } & {
                            index?: number;
                            addrs?: string[] & string[] & { [K_5 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_6 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                            } & { [K_7 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_8 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_9 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_10 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_11 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_12 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_13 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_14 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_15 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                        } & { [K_16 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_17 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["sockets"], keyof {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[]>]: never; };
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & { [K_18 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_19 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_20 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_21 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_22 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_23 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_24 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_25 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_26 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_27 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & { [K_28 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_29 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_30 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_31 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_32 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        } & {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[] & ({
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_33 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_34 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_35 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_36 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_37 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_38 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_39 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_40 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_41 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[]>]: never; };
                        } & { [K_42 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_43 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & { [K_44 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & { [K_45 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_46 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_47 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_48 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_49 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_50 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_51 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        viz?: {
                            color?: string;
                            size?: number;
                        } & {
                            color?: string;
                            size?: number;
                        } & { [K_52 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        } & {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[] & ({
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & { [K_53 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_54 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["conf"]["routes"], keyof {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[]>]: never; };
                        } & { [K_55 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["conf"], "routes">]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_56 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_57 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_58 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_59 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_60 in Exclude<keyof I["models"][string]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    } & { [K_61 in Exclude<keyof I["models"][string]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_62 in Exclude<keyof I["models"][string]["model"]["nodes"], keyof {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[]>]: never; };
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[] & ({
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    } & {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_63 in Exclude<keyof I["models"][string]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_64 in Exclude<keyof I["models"][string]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_65 in Exclude<keyof I["models"][string]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[] & ({
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        } & {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_66 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                            } & { [K_67 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            } & {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_68 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_69 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: number;
                            } & { [K_70 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                        } & { [K_71 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_72 in Exclude<keyof I["models"][string]["model"]["links"][number]["endpoints"], keyof {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[]>]: never; };
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        } & { [K_73 in Exclude<keyof I["models"][string]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_74 in Exclude<keyof I["models"][string]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_75 in Exclude<keyof I["models"][string]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_76 in Exclude<keyof I["models"][string]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_77 in Exclude<keyof I["models"][string]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_78 in Exclude<keyof I["models"][string]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                    } & { [K_79 in Exclude<keyof I["models"][string]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_80 in Exclude<keyof I["models"][string]["model"]["links"], keyof {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[]>]: never; };
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    } & {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        } & { [K_81 in Exclude<keyof I["models"][string]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        } & { [K_82 in Exclude<keyof I["models"][string]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                        hypervisors?: string[] & string[] & { [K_83 in Exclude<keyof I["models"][string]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                        simulators?: string[] & string[] & { [K_84 in Exclude<keyof I["models"][string]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                        emulators?: string[] & string[] & { [K_85 in Exclude<keyof I["models"][string]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        } & { [K_86 in Exclude<keyof I["models"][string]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                    } & { [K_87 in Exclude<keyof I["models"][string]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
                } & { [K_88 in Exclude<keyof I["models"][string]["model"], keyof Network>]: never; };
            } & { [K_89 in Exclude<keyof I["models"][string], keyof XpNetModel>]: never; };
        } & { [K_90 in Exclude<keyof I["models"], string | number>]: never; };
    } & { [K_91 in Exclude<keyof I, keyof GetExperimentResponse>]: never; }>(base?: I): GetExperimentResponse;
    fromPartial<I_1 extends {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        };
        models?: {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            };
        };
    } & {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K_92 in Exclude<keyof I_1["experiment"]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_93 in Exclude<keyof I_1["experiment"]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_94 in Exclude<keyof I_1["experiment"]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_95 in Exclude<keyof I_1["experiment"]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_96 in Exclude<keyof I_1["experiment"], keyof Experiment>]: never; };
        models?: {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            };
        } & {
            [x: string]: {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                };
            } & {
                compiled?: boolean;
                model?: {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[];
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[];
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    };
                } & {
                    id?: string;
                    nodes?: {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[] & ({
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    } & {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[] & ({
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        } & {
                            index?: number;
                            addrs?: string[] & string[] & { [K_97 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_98 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                            } & { [K_99 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_100 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_101 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_102 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_103 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_104 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_105 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_106 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_107 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                        } & { [K_108 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_109 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["sockets"], keyof {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[]>]: never; };
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            } & { [K_110 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            } & { [K_111 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_112 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_113 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_114 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_115 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_116 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_117 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_118 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_119 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            } & { [K_120 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_121 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_122 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_123 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_124 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        } & {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[] & ({
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            } & {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_125 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_126 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_127 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                } & { [K_128 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                } & { [K_129 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_130 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                } & { [K_131 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            } & { [K_132 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_133 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[]>]: never; };
                        } & { [K_134 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        } & {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_135 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            } & { [K_136 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            } & { [K_137 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_138 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        } & { [K_139 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_140 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_141 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_142 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_143 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        viz?: {
                            color?: string;
                            size?: number;
                        } & {
                            color?: string;
                            size?: number;
                        } & { [K_144 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        } & {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[] & ({
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            } & { [K_145 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_146 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["conf"]["routes"], keyof {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[]>]: never; };
                        } & { [K_147 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["conf"], "routes">]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_148 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_149 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_150 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_151 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_152 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    } & { [K_153 in Exclude<keyof I_1["models"][string]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_154 in Exclude<keyof I_1["models"][string]["model"]["nodes"], keyof {
                        id?: string;
                        sockets?: {
                            index?: number;
                            addrs?: string[];
                            endpoint?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            port?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            };
                        }[];
                        proc?: {
                            isa?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ISA;
                            };
                            family?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: string;
                            };
                            BaseFrequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            L2?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            cores?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            threads?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            tdp?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            sockets?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            hyperthreaded?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                        memory?: {
                            type?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                            };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            frequency?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            modules?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        NIC?: {
                            ports?: {
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                formFactor?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                queues?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: number;
                                };
                                model?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").NICModel;
                                };
                                DPDK?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                                SriovVF?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: boolean;
                                };
                            }[];
                        };
                        disks?: {
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                            };
                            diskInterface?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                            };
                            disks?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                        };
                        metal?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        virt?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                        image?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        platform?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        viz?: {
                            color?: string;
                            size?: number;
                        };
                        conf?: {
                            routes?: {
                                src?: string;
                                gw?: string;
                                dst?: string;
                            }[];
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                        host?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                    }[]>]: never; };
                    links?: {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[] & ({
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    } & {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_155 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_156 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_157 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[] & ({
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        } & {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            } & {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                } & {
                                    index?: number;
                                } & { [K_158 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                            } & { [K_159 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            } & {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                } & { [K_160 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_161 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                                capacity?: number;
                            } & { [K_162 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                        } & { [K_163 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_164 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["endpoints"], keyof {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[]>]: never; };
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        } & { [K_165 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_166 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        } & {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            } & {
                                [x: string]: {
                                    values?: string[];
                                } & {
                                    values?: string[] & string[] & { [K_167 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                                } & { [K_168 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                            } & { [K_169 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                        } & { [K_170 in Exclude<keyof I_1["models"][string]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                    } & { [K_171 in Exclude<keyof I_1["models"][string]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_172 in Exclude<keyof I_1["models"][string]["model"]["links"], keyof {
                        id?: string;
                        latency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        loss?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        endpoints?: {
                            index?: number;
                            socket?: {
                                element?: string;
                                index?: number;
                                subref?: {
                                    index?: number;
                                };
                            };
                            connector?: {
                                kind?: {
                                    op?: import("../../mergetb/xir/v0.3/core").Operator;
                                    value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                                };
                                protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                                capacity?: number;
                            };
                        }[];
                        kind?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                        };
                        layer?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        properties?: {
                            keyvalues?: {
                                [x: string]: {
                                    values?: string[];
                                };
                            };
                        };
                    }[]>]: never; };
                    parameters?: {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        };
                        hypervisors?: string[];
                        simulators?: string[];
                        emulators?: string[];
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        };
                    } & {
                        routing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Routing;
                        } & { [K_173 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                        addressing?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Addressing;
                        } & { [K_174 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                        hypervisors?: string[] & string[] & { [K_175 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                        simulators?: string[] & string[] & { [K_176 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                        emulators?: string[] & string[] & { [K_177 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                        experimentnetresolution?: boolean;
                        emulation?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").Emulation;
                        } & { [K_178 in Exclude<keyof I_1["models"][string]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                    } & { [K_179 in Exclude<keyof I_1["models"][string]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
                } & { [K_180 in Exclude<keyof I_1["models"][string]["model"], keyof Network>]: never; };
            } & { [K_181 in Exclude<keyof I_1["models"][string], keyof XpNetModel>]: never; };
        } & { [K_182 in Exclude<keyof I_1["models"], string | number>]: never; };
    } & { [K_183 in Exclude<keyof I_1, keyof GetExperimentResponse>]: never; }>(object: I_1): GetExperimentResponse;
};
export declare const GetExperimentResponse_ModelsEntry: {
    encode(message: GetExperimentResponse_ModelsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetExperimentResponse_ModelsEntry;
    fromJSON(object: any): GetExperimentResponse_ModelsEntry;
    toJSON(message: GetExperimentResponse_ModelsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        };
    } & {
        key?: string;
        value?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        } & {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            } & {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[] & ({
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_1 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_2 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_3 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_4 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_5 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_6 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_7 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_8 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_9 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_10 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_11 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_12 in Exclude<keyof I["value"]["model"]["nodes"][number]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_13 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_14 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_15 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_16 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_17 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_18 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_19 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_20 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_21 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_22 in Exclude<keyof I["value"]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_23 in Exclude<keyof I["value"]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_24 in Exclude<keyof I["value"]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_25 in Exclude<keyof I["value"]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_26 in Exclude<keyof I["value"]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_27 in Exclude<keyof I["value"]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_28 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_29 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_30 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_31 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_32 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_33 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_34 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_35 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_36 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_37 in Exclude<keyof I["value"]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_38 in Exclude<keyof I["value"]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_39 in Exclude<keyof I["value"]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_40 in Exclude<keyof I["value"]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_41 in Exclude<keyof I["value"]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_42 in Exclude<keyof I["value"]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_43 in Exclude<keyof I["value"]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_44 in Exclude<keyof I["value"]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_45 in Exclude<keyof I["value"]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_46 in Exclude<keyof I["value"]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_47 in Exclude<keyof I["value"]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_48 in Exclude<keyof I["value"]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_49 in Exclude<keyof I["value"]["model"]["nodes"][number]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_50 in Exclude<keyof I["value"]["model"]["nodes"][number]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_51 in Exclude<keyof I["value"]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_52 in Exclude<keyof I["value"]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_53 in Exclude<keyof I["value"]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_54 in Exclude<keyof I["value"]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_55 in Exclude<keyof I["value"]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_56 in Exclude<keyof I["value"]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_57 in Exclude<keyof I["value"]["model"]["nodes"], keyof {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[]>]: never; };
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[] & ({
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                } & {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_58 in Exclude<keyof I["value"]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_59 in Exclude<keyof I["value"]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_60 in Exclude<keyof I["value"]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[] & ({
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    } & {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_61 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                        } & { [K_62 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        } & {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_63 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_64 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: number;
                        } & { [K_65 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                    } & { [K_66 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_67 in Exclude<keyof I["value"]["model"]["links"][number]["endpoints"], keyof {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[]>]: never; };
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & { [K_68 in Exclude<keyof I["value"]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_69 in Exclude<keyof I["value"]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_70 in Exclude<keyof I["value"]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_71 in Exclude<keyof I["value"]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_72 in Exclude<keyof I["value"]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_73 in Exclude<keyof I["value"]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                } & { [K_74 in Exclude<keyof I["value"]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_75 in Exclude<keyof I["value"]["model"]["links"], keyof {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[]>]: never; };
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                } & {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & { [K_76 in Exclude<keyof I["value"]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & { [K_77 in Exclude<keyof I["value"]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                    hypervisors?: string[] & string[] & { [K_78 in Exclude<keyof I["value"]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                    simulators?: string[] & string[] & { [K_79 in Exclude<keyof I["value"]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                    emulators?: string[] & string[] & { [K_80 in Exclude<keyof I["value"]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & { [K_81 in Exclude<keyof I["value"]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                } & { [K_82 in Exclude<keyof I["value"]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
            } & { [K_83 in Exclude<keyof I["value"]["model"], keyof Network>]: never; };
        } & { [K_84 in Exclude<keyof I["value"], keyof XpNetModel>]: never; };
    } & { [K_85 in Exclude<keyof I, keyof GetExperimentResponse_ModelsEntry>]: never; }>(base?: I): GetExperimentResponse_ModelsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        };
    } & {
        key?: string;
        value?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        } & {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            } & {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[] & ({
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K_86 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_87 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_88 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_89 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_90 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_91 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_92 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_93 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_94 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_95 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_96 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_97 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_98 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_99 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_100 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_101 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_102 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_103 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_104 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_105 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_106 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_107 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_108 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_109 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_110 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_111 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_112 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_113 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_114 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_115 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_116 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_117 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_118 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_119 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_120 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_121 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_122 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_123 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_124 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_125 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_126 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_127 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_128 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_129 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_130 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_131 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_132 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_133 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_134 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_135 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_136 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_137 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_138 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_139 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_140 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_141 in Exclude<keyof I_1["value"]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_142 in Exclude<keyof I_1["value"]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_143 in Exclude<keyof I_1["value"]["model"]["nodes"], keyof {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[]>]: never; };
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[] & ({
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                } & {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_144 in Exclude<keyof I_1["value"]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_145 in Exclude<keyof I_1["value"]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_146 in Exclude<keyof I_1["value"]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[] & ({
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    } & {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_147 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                        } & { [K_148 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        } & {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_149 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_150 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: number;
                        } & { [K_151 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                    } & { [K_152 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_153 in Exclude<keyof I_1["value"]["model"]["links"][number]["endpoints"], keyof {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[]>]: never; };
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & { [K_154 in Exclude<keyof I_1["value"]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_155 in Exclude<keyof I_1["value"]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_156 in Exclude<keyof I_1["value"]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_157 in Exclude<keyof I_1["value"]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_158 in Exclude<keyof I_1["value"]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_159 in Exclude<keyof I_1["value"]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                } & { [K_160 in Exclude<keyof I_1["value"]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_161 in Exclude<keyof I_1["value"]["model"]["links"], keyof {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[]>]: never; };
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                } & {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & { [K_162 in Exclude<keyof I_1["value"]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & { [K_163 in Exclude<keyof I_1["value"]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                    hypervisors?: string[] & string[] & { [K_164 in Exclude<keyof I_1["value"]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                    simulators?: string[] & string[] & { [K_165 in Exclude<keyof I_1["value"]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                    emulators?: string[] & string[] & { [K_166 in Exclude<keyof I_1["value"]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & { [K_167 in Exclude<keyof I_1["value"]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                } & { [K_168 in Exclude<keyof I_1["value"]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
            } & { [K_169 in Exclude<keyof I_1["value"]["model"], keyof Network>]: never; };
        } & { [K_170 in Exclude<keyof I_1["value"], keyof XpNetModel>]: never; };
    } & { [K_171 in Exclude<keyof I_1, keyof GetExperimentResponse_ModelsEntry>]: never; }>(object: I_1): GetExperimentResponse_ModelsEntry;
};
export declare const UpdateExperimentRequest: {
    encode(message: UpdateExperimentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateExperimentRequest;
    fromJSON(object: any): UpdateExperimentRequest;
    toJSON(message: UpdateExperimentRequest): unknown;
    create<I extends {
        name?: string;
        project?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        creator?: string;
        maintainers?: string[];
    } & {
        name?: string;
        project?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K in Exclude<keyof I["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_1 in Exclude<keyof I["accessMode"], "value">]: never; };
        creator?: string;
        maintainers?: string[] & string[] & { [K_2 in Exclude<keyof I["maintainers"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I, keyof UpdateExperimentRequest>]: never; }>(base?: I): UpdateExperimentRequest;
    fromPartial<I_1 extends {
        name?: string;
        project?: string;
        description?: {
            value?: string;
        };
        accessMode?: {
            value?: AccessMode;
        };
        creator?: string;
        maintainers?: string[];
    } & {
        name?: string;
        project?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K_4 in Exclude<keyof I_1["description"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_5 in Exclude<keyof I_1["accessMode"], "value">]: never; };
        creator?: string;
        maintainers?: string[] & string[] & { [K_6 in Exclude<keyof I_1["maintainers"], keyof string[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof UpdateExperimentRequest>]: never; }>(object: I_1): UpdateExperimentRequest;
};
export declare const UpdateExperimentResponse: {
    encode(_: UpdateExperimentResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateExperimentResponse;
    fromJSON(_: any): UpdateExperimentResponse;
    toJSON(_: UpdateExperimentResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateExperimentResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateExperimentResponse;
};
export declare const CreateExperimentRequest: {
    encode(message: CreateExperimentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateExperimentRequest;
    fromJSON(object: any): CreateExperimentRequest;
    toJSON(message: CreateExperimentRequest): unknown;
    create<I extends {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        };
    } & {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K in Exclude<keyof I["experiment"]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_1 in Exclude<keyof I["experiment"]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_2 in Exclude<keyof I["experiment"]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_3 in Exclude<keyof I["experiment"]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_4 in Exclude<keyof I["experiment"], keyof Experiment>]: never; };
    } & { [K_5 in Exclude<keyof I, "experiment">]: never; }>(base?: I): CreateExperimentRequest;
    fromPartial<I_1 extends {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        };
    } & {
        experiment?: {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[];
            ver?: number;
        } & {
            name?: string;
            project?: string;
            description?: string;
            models?: {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                };
            } & {
                [x: string]: {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[];
                    compileTime?: Date | undefined;
                } & {
                    compiled?: boolean;
                    msg?: string;
                    realizations?: string[] & string[] & { [K_6 in Exclude<keyof I_1["experiment"]["models"][string]["realizations"], keyof string[]>]: never; };
                    compileTime?: Date | undefined;
                } & { [K_7 in Exclude<keyof I_1["experiment"]["models"][string], keyof ExperimentModel>]: never; };
            } & { [K_8 in Exclude<keyof I_1["experiment"]["models"], string | number>]: never; };
            accessMode?: AccessMode;
            repository?: string;
            creator?: string;
            maintainers?: string[] & string[] & { [K_9 in Exclude<keyof I_1["experiment"]["maintainers"], keyof string[]>]: never; };
            ver?: number;
        } & { [K_10 in Exclude<keyof I_1["experiment"], keyof Experiment>]: never; };
    } & { [K_11 in Exclude<keyof I_1, "experiment">]: never; }>(object: I_1): CreateExperimentRequest;
};
export declare const CreateExperimentResponse: {
    encode(_: CreateExperimentResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateExperimentResponse;
    fromJSON(_: any): CreateExperimentResponse;
    toJSON(_: CreateExperimentResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CreateExperimentResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CreateExperimentResponse;
};
export declare const DeleteExperimentRequest: {
    encode(message: DeleteExperimentRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExperimentRequest;
    fromJSON(object: any): DeleteExperimentRequest;
    toJSON(message: DeleteExperimentRequest): unknown;
    create<I extends {
        project?: string;
        experiment?: string;
    } & {
        project?: string;
        experiment?: string;
    } & { [K in Exclude<keyof I, keyof DeleteExperimentRequest>]: never; }>(base?: I): DeleteExperimentRequest;
    fromPartial<I_1 extends {
        project?: string;
        experiment?: string;
    } & {
        project?: string;
        experiment?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteExperimentRequest>]: never; }>(object: I_1): DeleteExperimentRequest;
};
export declare const DeleteExperimentResponse: {
    encode(_: DeleteExperimentResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExperimentResponse;
    fromJSON(_: any): DeleteExperimentResponse;
    toJSON(_: DeleteExperimentResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteExperimentResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteExperimentResponse;
};
export declare const GetRevisionRequest: {
    encode(message: GetRevisionRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetRevisionRequest;
    fromJSON(object: any): GetRevisionRequest;
    toJSON(message: GetRevisionRequest): unknown;
    create<I extends {
        project?: string;
        experiment?: string;
        revision?: string;
        encoding?: GetRevisionRequest_Encoding;
    } & {
        project?: string;
        experiment?: string;
        revision?: string;
        encoding?: GetRevisionRequest_Encoding;
    } & { [K in Exclude<keyof I, keyof GetRevisionRequest>]: never; }>(base?: I): GetRevisionRequest;
    fromPartial<I_1 extends {
        project?: string;
        experiment?: string;
        revision?: string;
        encoding?: GetRevisionRequest_Encoding;
    } & {
        project?: string;
        experiment?: string;
        revision?: string;
        encoding?: GetRevisionRequest_Encoding;
    } & { [K_1 in Exclude<keyof I_1, keyof GetRevisionRequest>]: never; }>(object: I_1): GetRevisionRequest;
};
export declare const GetRevisionResponse: {
    encode(message: GetRevisionResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetRevisionResponse;
    fromJSON(object: any): GetRevisionResponse;
    toJSON(message: GetRevisionResponse): unknown;
    create<I extends {
        model?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        };
        encoding?: string;
        ModelFile?: string;
    } & {
        model?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        } & {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            } & {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[] & ({
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_1 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_2 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_3 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_4 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_5 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_6 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_7 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_8 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_9 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_10 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_11 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_12 in Exclude<keyof I["model"]["model"]["nodes"][number]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_13 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_14 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_15 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_16 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_17 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_18 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_19 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_20 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_21 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_22 in Exclude<keyof I["model"]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_23 in Exclude<keyof I["model"]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_24 in Exclude<keyof I["model"]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_25 in Exclude<keyof I["model"]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_26 in Exclude<keyof I["model"]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_27 in Exclude<keyof I["model"]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_28 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_29 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_30 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_31 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_32 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_33 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_34 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_35 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_36 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_37 in Exclude<keyof I["model"]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_38 in Exclude<keyof I["model"]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_39 in Exclude<keyof I["model"]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_40 in Exclude<keyof I["model"]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_41 in Exclude<keyof I["model"]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_42 in Exclude<keyof I["model"]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_43 in Exclude<keyof I["model"]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_44 in Exclude<keyof I["model"]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_45 in Exclude<keyof I["model"]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_46 in Exclude<keyof I["model"]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_47 in Exclude<keyof I["model"]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_48 in Exclude<keyof I["model"]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_49 in Exclude<keyof I["model"]["model"]["nodes"][number]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_50 in Exclude<keyof I["model"]["model"]["nodes"][number]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_51 in Exclude<keyof I["model"]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_52 in Exclude<keyof I["model"]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_53 in Exclude<keyof I["model"]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_54 in Exclude<keyof I["model"]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_55 in Exclude<keyof I["model"]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_56 in Exclude<keyof I["model"]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_57 in Exclude<keyof I["model"]["model"]["nodes"], keyof {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[]>]: never; };
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[] & ({
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                } & {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_58 in Exclude<keyof I["model"]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_59 in Exclude<keyof I["model"]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_60 in Exclude<keyof I["model"]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[] & ({
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    } & {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_61 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                        } & { [K_62 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        } & {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_63 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_64 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: number;
                        } & { [K_65 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                    } & { [K_66 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_67 in Exclude<keyof I["model"]["model"]["links"][number]["endpoints"], keyof {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[]>]: never; };
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & { [K_68 in Exclude<keyof I["model"]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_69 in Exclude<keyof I["model"]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_70 in Exclude<keyof I["model"]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_71 in Exclude<keyof I["model"]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_72 in Exclude<keyof I["model"]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_73 in Exclude<keyof I["model"]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                } & { [K_74 in Exclude<keyof I["model"]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_75 in Exclude<keyof I["model"]["model"]["links"], keyof {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[]>]: never; };
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                } & {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & { [K_76 in Exclude<keyof I["model"]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & { [K_77 in Exclude<keyof I["model"]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                    hypervisors?: string[] & string[] & { [K_78 in Exclude<keyof I["model"]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                    simulators?: string[] & string[] & { [K_79 in Exclude<keyof I["model"]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                    emulators?: string[] & string[] & { [K_80 in Exclude<keyof I["model"]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & { [K_81 in Exclude<keyof I["model"]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                } & { [K_82 in Exclude<keyof I["model"]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
            } & { [K_83 in Exclude<keyof I["model"]["model"], keyof Network>]: never; };
        } & { [K_84 in Exclude<keyof I["model"], keyof XpNetModel>]: never; };
        encoding?: string;
        ModelFile?: string;
    } & { [K_85 in Exclude<keyof I, keyof GetRevisionResponse>]: never; }>(base?: I): GetRevisionResponse;
    fromPartial<I_1 extends {
        model?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        };
        encoding?: string;
        ModelFile?: string;
    } & {
        model?: {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            };
        } & {
            compiled?: boolean;
            model?: {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[];
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[];
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                };
            } & {
                id?: string;
                nodes?: {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[] & ({
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                } & {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[] & ({
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    } & {
                        index?: number;
                        addrs?: string[] & string[] & { [K_86 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_87 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                        } & { [K_88 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["endpoint"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_89 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_90 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_91 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_92 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_93 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_94 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_95 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_96 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number]["port"], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; };
                    } & { [K_97 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"][number], keyof import("../../mergetb/xir/v0.3/core").Socket>]: never; })[] & { [K_98 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["sockets"], keyof {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[]>]: never; };
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    } & {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        } & { [K_99 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["isa"], keyof import("../../mergetb/xir/v0.3/core").ISAConstraint>]: never; };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        } & { [K_100 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["family"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_101 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["BaseFrequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_102 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["L2"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_103 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["cores"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_104 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["threads"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_105 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["tdp"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_106 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["sockets"], keyof import("../../mergetb/xir/v0.3/core").Uint32Constraint>]: never; };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        } & { [K_107 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"]["hyperthreaded"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    } & { [K_108 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["proc"], keyof import("../../mergetb/xir/v0.3/core").ProcSpec>]: never; };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        } & { [K_109 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["memory"]["type"], keyof import("../../mergetb/xir/v0.3/core").MemoryTypeConstraint>]: never; };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_110 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["memory"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_111 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["memory"]["frequency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_112 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["memory"]["modules"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_113 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["memory"], keyof import("../../mergetb/xir/v0.3/core").MemorySpec>]: never; };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    } & {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[] & ({
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        } & {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_114 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_115 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_116 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            } & { [K_117 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["queues"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            } & { [K_118 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["model"], keyof import("../../mergetb/xir/v0.3/core").NICModelConstraint>]: never; };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_119 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            } & { [K_120 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                        } & { [K_121 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"][number], keyof import("../../mergetb/xir/v0.3/core").PortSpec>]: never; })[] & { [K_122 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"]["ports"], keyof {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[]>]: never; };
                    } & { [K_123 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["NIC"], "ports">]: never; };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    } & {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_124 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["disks"]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        } & { [K_125 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["disks"]["formFactor"], keyof import("../../mergetb/xir/v0.3/core").DiskFormFactorConstraint>]: never; };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        } & { [K_126 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["disks"]["diskInterface"], keyof import("../../mergetb/xir/v0.3/core").DiskInterfaceConstraint>]: never; };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        } & { [K_127 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["disks"]["disks"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    } & { [K_128 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["disks"], keyof import("../../mergetb/xir/v0.3/core").DiskSpec>]: never; };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_129 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["metal"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    } & { [K_130 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["virt"], keyof import("../../mergetb/xir/v0.3/core").BoolConstraint>]: never; };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_131 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["image"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_132 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["platform"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                    viz?: {
                        color?: string;
                        size?: number;
                    } & {
                        color?: string;
                        size?: number;
                    } & { [K_133 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["viz"], keyof import("../../mergetb/xir/v0.3/core").Visualization>]: never; };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    } & {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[] & ({
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        } & { [K_134 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["conf"]["routes"][number], keyof import("../../mergetb/xir/v0.3/core").RouteConfig>]: never; })[] & { [K_135 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["conf"]["routes"], keyof {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[]>]: never; };
                    } & { [K_136 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["conf"], "routes">]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_137 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_138 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_139 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_140 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["properties"], "keyvalues">]: never; };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    } & { [K_141 in Exclude<keyof I_1["model"]["model"]["nodes"][number]["host"], keyof import("../../mergetb/xir/v0.3/core").StringConstraint>]: never; };
                } & { [K_142 in Exclude<keyof I_1["model"]["model"]["nodes"][number], keyof import("../../mergetb/xir/v0.3/core").Node>]: never; })[] & { [K_143 in Exclude<keyof I_1["model"]["model"]["nodes"], keyof {
                    id?: string;
                    sockets?: {
                        index?: number;
                        addrs?: string[];
                        endpoint?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        port?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        };
                    }[];
                    proc?: {
                        isa?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").ISA;
                        };
                        family?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: string;
                        };
                        BaseFrequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        L2?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        cores?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        threads?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        tdp?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        sockets?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        hyperthreaded?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: boolean;
                        };
                    };
                    memory?: {
                        type?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").MemoryType;
                        };
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        frequency?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        modules?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    NIC?: {
                        ports?: {
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            formFactor?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            queues?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: number;
                            };
                            model?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").NICModel;
                            };
                            DPDK?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                            SriovVF?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: boolean;
                            };
                        }[];
                    };
                    disks?: {
                        capacity?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                        formFactor?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskFormFactor;
                        };
                        diskInterface?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: import("../../mergetb/xir/v0.3/core").DiskInterface;
                        };
                        disks?: {
                            op?: import("../../mergetb/xir/v0.3/core").Operator;
                            value?: number;
                        };
                    };
                    metal?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    virt?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: boolean;
                    };
                    image?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    platform?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                    viz?: {
                        color?: string;
                        size?: number;
                    };
                    conf?: {
                        routes?: {
                            src?: string;
                            gw?: string;
                            dst?: string;
                        }[];
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                    host?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: string;
                    };
                }[]>]: never; };
                links?: {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[] & ({
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                } & {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_144 in Exclude<keyof I_1["model"]["model"]["links"][number]["latency"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_145 in Exclude<keyof I_1["model"]["model"]["links"][number]["capacity"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_146 in Exclude<keyof I_1["model"]["model"]["links"][number]["loss"], keyof import("../../mergetb/xir/v0.3/core").FloatConstraint>]: never; };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[] & ({
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    } & {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        } & {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            } & {
                                index?: number;
                            } & { [K_147 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                        } & { [K_148 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number]["socket"], keyof import("../../mergetb/xir/v0.3/core").Ref>]: never; };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        } & {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            } & { [K_149 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number]["connector"]["kind"], keyof import("../../mergetb/xir/v0.3/core").ConnectorKindConstraint>]: never; };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[] & import("../../mergetb/xir/v0.3/core").Layer1[] & { [K_150 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number]["connector"]["protocols"], keyof import("../../mergetb/xir/v0.3/core").Layer1[]>]: never; };
                            capacity?: number;
                        } & { [K_151 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number]["connector"], keyof import("../../mergetb/xir/v0.3/core").ConnectorSpec>]: never; };
                    } & { [K_152 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"][number], keyof import("../../mergetb/xir/v0.3/core").Endpoint>]: never; })[] & { [K_153 in Exclude<keyof I_1["model"]["model"]["links"][number]["endpoints"], keyof {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[]>]: never; };
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    } & { [K_154 in Exclude<keyof I_1["model"]["model"]["links"][number]["kind"], keyof import("../../mergetb/xir/v0.3/core").LinkKindConstraint>]: never; };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    } & { [K_155 in Exclude<keyof I_1["model"]["model"]["links"][number]["layer"], keyof import("../../mergetb/xir/v0.3/core").Uint64Constraint>]: never; };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    } & {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        } & {
                            [x: string]: {
                                values?: string[];
                            } & {
                                values?: string[] & string[] & { [K_156 in Exclude<keyof I_1["model"]["model"]["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                            } & { [K_157 in Exclude<keyof I_1["model"]["model"]["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                        } & { [K_158 in Exclude<keyof I_1["model"]["model"]["links"][number]["properties"]["keyvalues"], string | number>]: never; };
                    } & { [K_159 in Exclude<keyof I_1["model"]["model"]["links"][number]["properties"], "keyvalues">]: never; };
                } & { [K_160 in Exclude<keyof I_1["model"]["model"]["links"][number], keyof import("../../mergetb/xir/v0.3/core").Link>]: never; })[] & { [K_161 in Exclude<keyof I_1["model"]["model"]["links"], keyof {
                    id?: string;
                    latency?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    capacity?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    loss?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    endpoints?: {
                        index?: number;
                        socket?: {
                            element?: string;
                            index?: number;
                            subref?: {
                                index?: number;
                            };
                        };
                        connector?: {
                            kind?: {
                                op?: import("../../mergetb/xir/v0.3/core").Operator;
                                value?: import("../../mergetb/xir/v0.3/core").ConnectorKind;
                            };
                            protocols?: import("../../mergetb/xir/v0.3/core").Layer1[];
                            capacity?: number;
                        };
                    }[];
                    kind?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Link_Kind;
                    };
                    layer?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: number;
                    };
                    properties?: {
                        keyvalues?: {
                            [x: string]: {
                                values?: string[];
                            };
                        };
                    };
                }[]>]: never; };
                parameters?: {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    };
                    hypervisors?: string[];
                    simulators?: string[];
                    emulators?: string[];
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    };
                } & {
                    routing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Routing;
                    } & { [K_162 in Exclude<keyof I_1["model"]["model"]["parameters"]["routing"], keyof import("../../mergetb/xir/v0.3/core").RoutingConstraint>]: never; };
                    addressing?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Addressing;
                    } & { [K_163 in Exclude<keyof I_1["model"]["model"]["parameters"]["addressing"], keyof import("../../mergetb/xir/v0.3/core").AddressingConstraint>]: never; };
                    hypervisors?: string[] & string[] & { [K_164 in Exclude<keyof I_1["model"]["model"]["parameters"]["hypervisors"], keyof string[]>]: never; };
                    simulators?: string[] & string[] & { [K_165 in Exclude<keyof I_1["model"]["model"]["parameters"]["simulators"], keyof string[]>]: never; };
                    emulators?: string[] & string[] & { [K_166 in Exclude<keyof I_1["model"]["model"]["parameters"]["emulators"], keyof string[]>]: never; };
                    experimentnetresolution?: boolean;
                    emulation?: {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & {
                        op?: import("../../mergetb/xir/v0.3/core").Operator;
                        value?: import("../../mergetb/xir/v0.3/core").Emulation;
                    } & { [K_167 in Exclude<keyof I_1["model"]["model"]["parameters"]["emulation"], keyof import("../../mergetb/xir/v0.3/core").EmulationConstraint>]: never; };
                } & { [K_168 in Exclude<keyof I_1["model"]["model"]["parameters"], keyof import("../../mergetb/xir/v0.3/core").ExperimentParameters>]: never; };
            } & { [K_169 in Exclude<keyof I_1["model"]["model"], keyof Network>]: never; };
        } & { [K_170 in Exclude<keyof I_1["model"], keyof XpNetModel>]: never; };
        encoding?: string;
        ModelFile?: string;
    } & { [K_171 in Exclude<keyof I_1, keyof GetRevisionResponse>]: never; }>(object: I_1): GetRevisionResponse;
};
export declare const Organization: {
    encode(message: Organization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization;
    fromJSON(object: any): Organization;
    toJSON(message: Organization): unknown;
    create<I extends {
        name?: string;
        description?: string;
        oid?: number;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        state?: UserState;
        accessMode?: AccessMode;
        ver?: number;
        category?: string;
        subcategory?: string;
    } & {
        name?: string;
        description?: string;
        oid?: number;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K in Exclude<keyof I["members"][string], keyof Member>]: never; };
        } & { [K_1 in Exclude<keyof I["members"], string | number>]: never; };
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_2 in Exclude<keyof I["projects"][string], keyof Member>]: never; };
        } & { [K_3 in Exclude<keyof I["projects"], string | number>]: never; };
        state?: UserState;
        accessMode?: AccessMode;
        ver?: number;
        category?: string;
        subcategory?: string;
    } & { [K_4 in Exclude<keyof I, keyof Organization>]: never; }>(base?: I): Organization;
    fromPartial<I_1 extends {
        name?: string;
        description?: string;
        oid?: number;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        };
        state?: UserState;
        accessMode?: AccessMode;
        ver?: number;
        category?: string;
        subcategory?: string;
    } & {
        name?: string;
        description?: string;
        oid?: number;
        members?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_5 in Exclude<keyof I_1["members"][string], keyof Member>]: never; };
        } & { [K_6 in Exclude<keyof I_1["members"], string | number>]: never; };
        projects?: {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            };
        } & {
            [x: string]: {
                role?: Member_Role;
                state?: Member_State;
            } & {
                role?: Member_Role;
                state?: Member_State;
            } & { [K_7 in Exclude<keyof I_1["projects"][string], keyof Member>]: never; };
        } & { [K_8 in Exclude<keyof I_1["projects"], string | number>]: never; };
        state?: UserState;
        accessMode?: AccessMode;
        ver?: number;
        category?: string;
        subcategory?: string;
    } & { [K_9 in Exclude<keyof I_1, keyof Organization>]: never; }>(object: I_1): Organization;
};
export declare const Organization_MembersEntry: {
    encode(message: Organization_MembersEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization_MembersEntry;
    fromJSON(object: any): Organization_MembersEntry;
    toJSON(message: Organization_MembersEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Organization_MembersEntry>]: never; }>(base?: I): Organization_MembersEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Organization_MembersEntry>]: never; }>(object: I_1): Organization_MembersEntry;
};
export declare const Organization_ProjectsEntry: {
    encode(message: Organization_ProjectsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Organization_ProjectsEntry;
    fromJSON(object: any): Organization_ProjectsEntry;
    toJSON(message: Organization_ProjectsEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["value"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Organization_ProjectsEntry>]: never; }>(base?: I): Organization_ProjectsEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        key?: string;
        value?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Organization_ProjectsEntry>]: never; }>(object: I_1): Organization_ProjectsEntry;
};
export declare const ActivateOrganizationRequest: {
    encode(message: ActivateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateOrganizationRequest;
    fromJSON(object: any): ActivateOrganizationRequest;
    toJSON(message: ActivateOrganizationRequest): unknown;
    create<I extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K in Exclude<keyof I, "organization">]: never; }>(base?: I): ActivateOrganizationRequest;
    fromPartial<I_1 extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K_1 in Exclude<keyof I_1, "organization">]: never; }>(object: I_1): ActivateOrganizationRequest;
};
export declare const ActivateOrganizationResponse: {
    encode(_: ActivateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ActivateOrganizationResponse;
    fromJSON(_: any): ActivateOrganizationResponse;
    toJSON(_: ActivateOrganizationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): ActivateOrganizationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): ActivateOrganizationResponse;
};
export declare const FreezeOrganizationRequest: {
    encode(message: FreezeOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreezeOrganizationRequest;
    fromJSON(object: any): FreezeOrganizationRequest;
    toJSON(message: FreezeOrganizationRequest): unknown;
    create<I extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K in Exclude<keyof I, "organization">]: never; }>(base?: I): FreezeOrganizationRequest;
    fromPartial<I_1 extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K_1 in Exclude<keyof I_1, "organization">]: never; }>(object: I_1): FreezeOrganizationRequest;
};
export declare const FreezeOrganizationResponse: {
    encode(_: FreezeOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FreezeOrganizationResponse;
    fromJSON(_: any): FreezeOrganizationResponse;
    toJSON(_: FreezeOrganizationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): FreezeOrganizationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): FreezeOrganizationResponse;
};
export declare const GetOrganizationsRequest: {
    encode(message: GetOrganizationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationsRequest;
    fromJSON(object: any): GetOrganizationsRequest;
    toJSON(message: GetOrganizationsRequest): unknown;
    create<I extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K in Exclude<keyof I, "filter">]: never; }>(base?: I): GetOrganizationsRequest;
    fromPartial<I_1 extends {
        filter?: FilterMode;
    } & {
        filter?: FilterMode;
    } & { [K_1 in Exclude<keyof I_1, "filter">]: never; }>(object: I_1): GetOrganizationsRequest;
};
export declare const GetOrganizationsResponse: {
    encode(message: GetOrganizationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationsResponse;
    fromJSON(object: any): GetOrganizationsResponse;
    toJSON(message: GetOrganizationsResponse): unknown;
    create<I extends {
        organizations?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[];
    } & {
        organizations?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[] & ({
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["organizations"][number]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["organizations"][number]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_2 in Exclude<keyof I["organizations"][number]["projects"][string], keyof Member>]: never; };
            } & { [K_3 in Exclude<keyof I["organizations"][number]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_4 in Exclude<keyof I["organizations"][number], keyof Organization>]: never; })[] & { [K_5 in Exclude<keyof I["organizations"], keyof {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, "organizations">]: never; }>(base?: I): GetOrganizationsResponse;
    fromPartial<I_1 extends {
        organizations?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[];
    } & {
        organizations?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[] & ({
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_7 in Exclude<keyof I_1["organizations"][number]["members"][string], keyof Member>]: never; };
            } & { [K_8 in Exclude<keyof I_1["organizations"][number]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_9 in Exclude<keyof I_1["organizations"][number]["projects"][string], keyof Member>]: never; };
            } & { [K_10 in Exclude<keyof I_1["organizations"][number]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_11 in Exclude<keyof I_1["organizations"][number], keyof Organization>]: never; })[] & { [K_12 in Exclude<keyof I_1["organizations"], keyof {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "organizations">]: never; }>(object: I_1): GetOrganizationsResponse;
};
export declare const GetOrganizationRequest: {
    encode(message: GetOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationRequest;
    fromJSON(object: any): GetOrganizationRequest;
    toJSON(message: GetOrganizationRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetOrganizationRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetOrganizationRequest;
};
export declare const GetOrganizationResponse: {
    encode(message: GetOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationResponse;
    fromJSON(object: any): GetOrganizationResponse;
    toJSON(message: GetOrganizationResponse): unknown;
    create<I extends {
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        };
    } & {
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["organization"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["organization"]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_2 in Exclude<keyof I["organization"]["projects"][string], keyof Member>]: never; };
            } & { [K_3 in Exclude<keyof I["organization"]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_4 in Exclude<keyof I["organization"], keyof Organization>]: never; };
    } & { [K_5 in Exclude<keyof I, "organization">]: never; }>(base?: I): GetOrganizationResponse;
    fromPartial<I_1 extends {
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        };
    } & {
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_6 in Exclude<keyof I_1["organization"]["members"][string], keyof Member>]: never; };
            } & { [K_7 in Exclude<keyof I_1["organization"]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_8 in Exclude<keyof I_1["organization"]["projects"][string], keyof Member>]: never; };
            } & { [K_9 in Exclude<keyof I_1["organization"]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_10 in Exclude<keyof I_1["organization"], keyof Organization>]: never; };
    } & { [K_11 in Exclude<keyof I_1, "organization">]: never; }>(object: I_1): GetOrganizationResponse;
};
export declare const DeleteOrganizationRequest: {
    encode(message: DeleteOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationRequest;
    fromJSON(object: any): DeleteOrganizationRequest;
    toJSON(message: DeleteOrganizationRequest): unknown;
    create<I extends {
        user?: string;
        name?: string;
    } & {
        user?: string;
        name?: string;
    } & { [K in Exclude<keyof I, keyof DeleteOrganizationRequest>]: never; }>(base?: I): DeleteOrganizationRequest;
    fromPartial<I_1 extends {
        user?: string;
        name?: string;
    } & {
        user?: string;
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteOrganizationRequest>]: never; }>(object: I_1): DeleteOrganizationRequest;
};
export declare const DeleteOrganizationResponse: {
    encode(_: DeleteOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationResponse;
    fromJSON(_: any): DeleteOrganizationResponse;
    toJSON(_: DeleteOrganizationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteOrganizationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteOrganizationResponse;
};
export declare const CreateOrganizationRequest: {
    encode(message: CreateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrganizationRequest;
    fromJSON(object: any): CreateOrganizationRequest;
    toJSON(message: CreateOrganizationRequest): unknown;
    create<I extends {
        user?: string;
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        };
    } & {
        user?: string;
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K in Exclude<keyof I["organization"]["members"][string], keyof Member>]: never; };
            } & { [K_1 in Exclude<keyof I["organization"]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_2 in Exclude<keyof I["organization"]["projects"][string], keyof Member>]: never; };
            } & { [K_3 in Exclude<keyof I["organization"]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_4 in Exclude<keyof I["organization"], keyof Organization>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof CreateOrganizationRequest>]: never; }>(base?: I): CreateOrganizationRequest;
    fromPartial<I_1 extends {
        user?: string;
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        };
    } & {
        user?: string;
        organization?: {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & {
            name?: string;
            description?: string;
            oid?: number;
            members?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_6 in Exclude<keyof I_1["organization"]["members"][string], keyof Member>]: never; };
            } & { [K_7 in Exclude<keyof I_1["organization"]["members"], string | number>]: never; };
            projects?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_8 in Exclude<keyof I_1["organization"]["projects"][string], keyof Member>]: never; };
            } & { [K_9 in Exclude<keyof I_1["organization"]["projects"], string | number>]: never; };
            state?: UserState;
            accessMode?: AccessMode;
            ver?: number;
            category?: string;
            subcategory?: string;
        } & { [K_10 in Exclude<keyof I_1["organization"], keyof Organization>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof CreateOrganizationRequest>]: never; }>(object: I_1): CreateOrganizationRequest;
};
export declare const CreateOrganizationResponse: {
    encode(_: CreateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CreateOrganizationResponse;
    fromJSON(_: any): CreateOrganizationResponse;
    toJSON(_: CreateOrganizationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): CreateOrganizationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): CreateOrganizationResponse;
};
export declare const UpdateOrganizationRequest: {
    encode(message: UpdateOrganizationRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationRequest;
    fromJSON(object: any): UpdateOrganizationRequest;
    toJSON(message: UpdateOrganizationRequest): unknown;
    create<I extends {
        name?: string;
        description?: {
            value?: string;
        };
        state?: {
            value?: UserState;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
    } & {
        name?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K in Exclude<keyof I["description"], "value">]: never; };
        state?: {
            value?: UserState;
        } & {
            value?: UserState;
        } & { [K_1 in Exclude<keyof I["state"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_2 in Exclude<keyof I["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_3 in Exclude<keyof I["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_4 in Exclude<keyof I["members"]["set"][string], keyof Member>]: never; };
            } & { [K_5 in Exclude<keyof I["members"]["set"], string | number>]: never; };
        } & { [K_6 in Exclude<keyof I["members"], keyof MembershipUpdate>]: never; };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_7 in Exclude<keyof I["projects"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_8 in Exclude<keyof I["projects"]["set"][string], keyof Member>]: never; };
            } & { [K_9 in Exclude<keyof I["projects"]["set"], string | number>]: never; };
        } & { [K_10 in Exclude<keyof I["projects"], keyof MembershipUpdate>]: never; };
    } & { [K_11 in Exclude<keyof I, keyof UpdateOrganizationRequest>]: never; }>(base?: I): UpdateOrganizationRequest;
    fromPartial<I_1 extends {
        name?: string;
        description?: {
            value?: string;
        };
        state?: {
            value?: UserState;
        };
        accessMode?: {
            value?: AccessMode;
        };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        };
    } & {
        name?: string;
        description?: {
            value?: string;
        } & {
            value?: string;
        } & { [K_12 in Exclude<keyof I_1["description"], "value">]: never; };
        state?: {
            value?: UserState;
        } & {
            value?: UserState;
        } & { [K_13 in Exclude<keyof I_1["state"], "value">]: never; };
        accessMode?: {
            value?: AccessMode;
        } & {
            value?: AccessMode;
        } & { [K_14 in Exclude<keyof I_1["accessMode"], "value">]: never; };
        members?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_15 in Exclude<keyof I_1["members"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_16 in Exclude<keyof I_1["members"]["set"][string], keyof Member>]: never; };
            } & { [K_17 in Exclude<keyof I_1["members"]["set"], string | number>]: never; };
        } & { [K_18 in Exclude<keyof I_1["members"], keyof MembershipUpdate>]: never; };
        projects?: {
            remove?: string[];
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            };
        } & {
            remove?: string[] & string[] & { [K_19 in Exclude<keyof I_1["projects"]["remove"], keyof string[]>]: never; };
            set?: {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                };
            } & {
                [x: string]: {
                    role?: Member_Role;
                    state?: Member_State;
                } & {
                    role?: Member_Role;
                    state?: Member_State;
                } & { [K_20 in Exclude<keyof I_1["projects"]["set"][string], keyof Member>]: never; };
            } & { [K_21 in Exclude<keyof I_1["projects"]["set"], string | number>]: never; };
        } & { [K_22 in Exclude<keyof I_1["projects"], keyof MembershipUpdate>]: never; };
    } & { [K_23 in Exclude<keyof I_1, keyof UpdateOrganizationRequest>]: never; }>(object: I_1): UpdateOrganizationRequest;
};
export declare const UpdateOrganizationResponse: {
    encode(_: UpdateOrganizationResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationResponse;
    fromJSON(_: any): UpdateOrganizationResponse;
    toJSON(_: UpdateOrganizationResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateOrganizationResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateOrganizationResponse;
};
export declare const GetOrganizationMembersRequest: {
    encode(message: GetOrganizationMembersRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationMembersRequest;
    fromJSON(object: any): GetOrganizationMembersRequest;
    toJSON(message: GetOrganizationMembersRequest): unknown;
    create<I extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K in Exclude<keyof I, "organization">]: never; }>(base?: I): GetOrganizationMembersRequest;
    fromPartial<I_1 extends {
        organization?: string;
    } & {
        organization?: string;
    } & { [K_1 in Exclude<keyof I_1, "organization">]: never; }>(object: I_1): GetOrganizationMembersRequest;
};
export declare const GetOrganizationMembersResponse: {
    encode(message: GetOrganizationMembersResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationMembersResponse;
    fromJSON(object: any): GetOrganizationMembersResponse;
    toJSON(message: GetOrganizationMembersResponse): unknown;
    create<I extends {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["members"][number], keyof Member>]: never; })[] & { [K_1 in Exclude<keyof I["members"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "members">]: never; }>(base?: I): GetOrganizationMembersResponse;
    fromPartial<I_1 extends {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        members?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_3 in Exclude<keyof I_1["members"][number], keyof Member>]: never; })[] & { [K_4 in Exclude<keyof I_1["members"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "members">]: never; }>(object: I_1): GetOrganizationMembersResponse;
};
export declare const GetOrganizationMemberRequest: {
    encode(message: GetOrganizationMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationMemberRequest;
    fromJSON(object: any): GetOrganizationMemberRequest;
    toJSON(message: GetOrganizationMemberRequest): unknown;
    create<I extends {
        organization?: string;
        username?: string;
    } & {
        organization?: string;
        username?: string;
    } & { [K in Exclude<keyof I, keyof GetOrganizationMemberRequest>]: never; }>(base?: I): GetOrganizationMemberRequest;
    fromPartial<I_1 extends {
        organization?: string;
        username?: string;
    } & {
        organization?: string;
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetOrganizationMemberRequest>]: never; }>(object: I_1): GetOrganizationMemberRequest;
};
export declare const GetOrganizationMemberResponse: {
    encode(message: GetOrganizationMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationMemberResponse;
    fromJSON(object: any): GetOrganizationMemberResponse;
    toJSON(message: GetOrganizationMemberResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): GetOrganizationMemberResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): GetOrganizationMemberResponse;
};
export declare const RequestOrganizationMembershipRequest: {
    encode(message: RequestOrganizationMembershipRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestOrganizationMembershipRequest;
    fromJSON(object: any): RequestOrganizationMembershipRequest;
    toJSON(message: RequestOrganizationMembershipRequest): unknown;
    create<I extends {
        organization?: string;
        id?: string;
        kind?: MembershipType;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        id?: string;
        kind?: MembershipType;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof RequestOrganizationMembershipRequest>]: never; }>(base?: I): RequestOrganizationMembershipRequest;
    fromPartial<I_1 extends {
        organization?: string;
        id?: string;
        kind?: MembershipType;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        id?: string;
        kind?: MembershipType;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof RequestOrganizationMembershipRequest>]: never; }>(object: I_1): RequestOrganizationMembershipRequest;
};
export declare const RequestOrganizationMembershipResponse: {
    encode(message: RequestOrganizationMembershipResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RequestOrganizationMembershipResponse;
    fromJSON(object: any): RequestOrganizationMembershipResponse;
    toJSON(message: RequestOrganizationMembershipResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): RequestOrganizationMembershipResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): RequestOrganizationMembershipResponse;
};
export declare const ConfirmOrganizationMembershipRequest: {
    encode(message: ConfirmOrganizationMembershipRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfirmOrganizationMembershipRequest;
    fromJSON(object: any): ConfirmOrganizationMembershipRequest;
    toJSON(message: ConfirmOrganizationMembershipRequest): unknown;
    create<I extends {
        organization?: string;
        id?: string;
        kind?: MembershipType;
    } & {
        organization?: string;
        id?: string;
        kind?: MembershipType;
    } & { [K in Exclude<keyof I, keyof ConfirmOrganizationMembershipRequest>]: never; }>(base?: I): ConfirmOrganizationMembershipRequest;
    fromPartial<I_1 extends {
        organization?: string;
        id?: string;
        kind?: MembershipType;
    } & {
        organization?: string;
        id?: string;
        kind?: MembershipType;
    } & { [K_1 in Exclude<keyof I_1, keyof ConfirmOrganizationMembershipRequest>]: never; }>(object: I_1): ConfirmOrganizationMembershipRequest;
};
export declare const ConfirmOrganizationMembershipResponse: {
    encode(message: ConfirmOrganizationMembershipResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConfirmOrganizationMembershipResponse;
    fromJSON(object: any): ConfirmOrganizationMembershipResponse;
    toJSON(message: ConfirmOrganizationMembershipResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): ConfirmOrganizationMembershipResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): ConfirmOrganizationMembershipResponse;
};
export declare const UpdateOrganizationMemberRequest: {
    encode(message: UpdateOrganizationMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationMemberRequest;
    fromJSON(object: any): UpdateOrganizationMemberRequest;
    toJSON(message: UpdateOrganizationMemberRequest): unknown;
    create<I extends {
        organization?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof UpdateOrganizationMemberRequest>]: never; }>(base?: I): UpdateOrganizationMemberRequest;
    fromPartial<I_1 extends {
        organization?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        username?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof UpdateOrganizationMemberRequest>]: never; }>(object: I_1): UpdateOrganizationMemberRequest;
};
export declare const UpdateOrganizationMemberResponse: {
    encode(message: UpdateOrganizationMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationMemberResponse;
    fromJSON(object: any): UpdateOrganizationMemberResponse;
    toJSON(message: UpdateOrganizationMemberResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): UpdateOrganizationMemberResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): UpdateOrganizationMemberResponse;
};
export declare const DeleteOrganizationMemberRequest: {
    encode(message: DeleteOrganizationMemberRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationMemberRequest;
    fromJSON(object: any): DeleteOrganizationMemberRequest;
    toJSON(message: DeleteOrganizationMemberRequest): unknown;
    create<I extends {
        organization?: string;
        username?: string;
    } & {
        organization?: string;
        username?: string;
    } & { [K in Exclude<keyof I, keyof DeleteOrganizationMemberRequest>]: never; }>(base?: I): DeleteOrganizationMemberRequest;
    fromPartial<I_1 extends {
        organization?: string;
        username?: string;
    } & {
        organization?: string;
        username?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteOrganizationMemberRequest>]: never; }>(object: I_1): DeleteOrganizationMemberRequest;
};
export declare const DeleteOrganizationMemberResponse: {
    encode(_: DeleteOrganizationMemberResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationMemberResponse;
    fromJSON(_: any): DeleteOrganizationMemberResponse;
    toJSON(_: DeleteOrganizationMemberResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteOrganizationMemberResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteOrganizationMemberResponse;
};
export declare const GetOrganizationProjectsRequest: {
    encode(message: GetOrganizationProjectsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationProjectsRequest;
    fromJSON(object: any): GetOrganizationProjectsRequest;
    toJSON(message: GetOrganizationProjectsRequest): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): GetOrganizationProjectsRequest;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): GetOrganizationProjectsRequest;
};
export declare const GetOrganizationProjectsResponse: {
    encode(message: GetOrganizationProjectsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationProjectsResponse;
    fromJSON(object: any): GetOrganizationProjectsResponse;
    toJSON(message: GetOrganizationProjectsResponse): unknown;
    create<I extends {
        projects?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        projects?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["projects"][number], keyof Member>]: never; })[] & { [K_1 in Exclude<keyof I["projects"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "projects">]: never; }>(base?: I): GetOrganizationProjectsResponse;
    fromPartial<I_1 extends {
        projects?: {
            role?: Member_Role;
            state?: Member_State;
        }[];
    } & {
        projects?: {
            role?: Member_Role;
            state?: Member_State;
        }[] & ({
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_3 in Exclude<keyof I_1["projects"][number], keyof Member>]: never; })[] & { [K_4 in Exclude<keyof I_1["projects"], keyof {
            role?: Member_Role;
            state?: Member_State;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "projects">]: never; }>(object: I_1): GetOrganizationProjectsResponse;
};
export declare const GetOrganizationProjectRequest: {
    encode(message: GetOrganizationProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationProjectRequest;
    fromJSON(object: any): GetOrganizationProjectRequest;
    toJSON(message: GetOrganizationProjectRequest): unknown;
    create<I extends {
        organization?: string;
        project?: string;
    } & {
        organization?: string;
        project?: string;
    } & { [K in Exclude<keyof I, keyof GetOrganizationProjectRequest>]: never; }>(base?: I): GetOrganizationProjectRequest;
    fromPartial<I_1 extends {
        organization?: string;
        project?: string;
    } & {
        organization?: string;
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetOrganizationProjectRequest>]: never; }>(object: I_1): GetOrganizationProjectRequest;
};
export declare const GetOrganizationProjectResponse: {
    encode(message: GetOrganizationProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetOrganizationProjectResponse;
    fromJSON(object: any): GetOrganizationProjectResponse;
    toJSON(message: GetOrganizationProjectResponse): unknown;
    create<I extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, "member">]: never; }>(base?: I): GetOrganizationProjectResponse;
    fromPartial<I_1 extends {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "member">]: never; }>(object: I_1): GetOrganizationProjectResponse;
};
export declare const AddOrganizationProjectRequest: {
    encode(message: AddOrganizationProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrganizationProjectRequest;
    fromJSON(object: any): AddOrganizationProjectRequest;
    toJSON(message: AddOrganizationProjectRequest): unknown;
    create<I extends {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof AddOrganizationProjectRequest>]: never; }>(base?: I): AddOrganizationProjectRequest;
    fromPartial<I_1 extends {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof AddOrganizationProjectRequest>]: never; }>(object: I_1): AddOrganizationProjectRequest;
};
export declare const AddOrganizationProjectResponse: {
    encode(_: AddOrganizationProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddOrganizationProjectResponse;
    fromJSON(_: any): AddOrganizationProjectResponse;
    toJSON(_: AddOrganizationProjectResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): AddOrganizationProjectResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): AddOrganizationProjectResponse;
};
export declare const UpdateOrganizationProjectRequest: {
    encode(message: UpdateOrganizationProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationProjectRequest;
    fromJSON(object: any): UpdateOrganizationProjectRequest;
    toJSON(message: UpdateOrganizationProjectRequest): unknown;
    create<I extends {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K in Exclude<keyof I["member"], keyof Member>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof UpdateOrganizationProjectRequest>]: never; }>(base?: I): UpdateOrganizationProjectRequest;
    fromPartial<I_1 extends {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        };
    } & {
        organization?: string;
        project?: string;
        member?: {
            role?: Member_Role;
            state?: Member_State;
        } & {
            role?: Member_Role;
            state?: Member_State;
        } & { [K_2 in Exclude<keyof I_1["member"], keyof Member>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof UpdateOrganizationProjectRequest>]: never; }>(object: I_1): UpdateOrganizationProjectRequest;
};
export declare const UpdateOrganizationProjectResponse: {
    encode(_: UpdateOrganizationProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateOrganizationProjectResponse;
    fromJSON(_: any): UpdateOrganizationProjectResponse;
    toJSON(_: UpdateOrganizationProjectResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateOrganizationProjectResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateOrganizationProjectResponse;
};
export declare const DeleteOrganizationProjectRequest: {
    encode(message: DeleteOrganizationProjectRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationProjectRequest;
    fromJSON(object: any): DeleteOrganizationProjectRequest;
    toJSON(message: DeleteOrganizationProjectRequest): unknown;
    create<I extends {
        organization?: string;
        project?: string;
    } & {
        organization?: string;
        project?: string;
    } & { [K in Exclude<keyof I, keyof DeleteOrganizationProjectRequest>]: never; }>(base?: I): DeleteOrganizationProjectRequest;
    fromPartial<I_1 extends {
        organization?: string;
        project?: string;
    } & {
        organization?: string;
        project?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof DeleteOrganizationProjectRequest>]: never; }>(object: I_1): DeleteOrganizationProjectRequest;
};
export declare const DeleteOrganizationProjectResponse: {
    encode(_: DeleteOrganizationProjectResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DeleteOrganizationProjectResponse;
    fromJSON(_: any): DeleteOrganizationProjectResponse;
    toJSON(_: DeleteOrganizationProjectResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): DeleteOrganizationProjectResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): DeleteOrganizationProjectResponse;
};
export declare const GetUserConfigurationsRequest: {
    encode(_: GetUserConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserConfigurationsRequest;
    fromJSON(_: any): GetUserConfigurationsRequest;
    toJSON(_: GetUserConfigurationsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetUserConfigurationsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetUserConfigurationsRequest;
};
export declare const GetUserConfigurationsResponse: {
    encode(message: GetUserConfigurationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserConfigurationsResponse;
    fromJSON(object: any): GetUserConfigurationsResponse;
    toJSON(message: GetUserConfigurationsResponse): unknown;
    create<I extends {
        institutions?: string[];
        countries?: {
            name?: string;
            ISO2?: string;
        }[];
        usstates?: {
            name?: string;
            USPS2?: string;
        }[];
        categories?: string[];
    } & {
        institutions?: string[] & string[] & { [K in Exclude<keyof I["institutions"], keyof string[]>]: never; };
        countries?: {
            name?: string;
            ISO2?: string;
        }[] & ({
            name?: string;
            ISO2?: string;
        } & {
            name?: string;
            ISO2?: string;
        } & { [K_1 in Exclude<keyof I["countries"][number], keyof GetUserConfigurationsResponse_Country>]: never; })[] & { [K_2 in Exclude<keyof I["countries"], keyof {
            name?: string;
            ISO2?: string;
        }[]>]: never; };
        usstates?: {
            name?: string;
            USPS2?: string;
        }[] & ({
            name?: string;
            USPS2?: string;
        } & {
            name?: string;
            USPS2?: string;
        } & { [K_3 in Exclude<keyof I["usstates"][number], keyof GetUserConfigurationsResponse_USState>]: never; })[] & { [K_4 in Exclude<keyof I["usstates"], keyof {
            name?: string;
            USPS2?: string;
        }[]>]: never; };
        categories?: string[] & string[] & { [K_5 in Exclude<keyof I["categories"], keyof string[]>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof GetUserConfigurationsResponse>]: never; }>(base?: I): GetUserConfigurationsResponse;
    fromPartial<I_1 extends {
        institutions?: string[];
        countries?: {
            name?: string;
            ISO2?: string;
        }[];
        usstates?: {
            name?: string;
            USPS2?: string;
        }[];
        categories?: string[];
    } & {
        institutions?: string[] & string[] & { [K_7 in Exclude<keyof I_1["institutions"], keyof string[]>]: never; };
        countries?: {
            name?: string;
            ISO2?: string;
        }[] & ({
            name?: string;
            ISO2?: string;
        } & {
            name?: string;
            ISO2?: string;
        } & { [K_8 in Exclude<keyof I_1["countries"][number], keyof GetUserConfigurationsResponse_Country>]: never; })[] & { [K_9 in Exclude<keyof I_1["countries"], keyof {
            name?: string;
            ISO2?: string;
        }[]>]: never; };
        usstates?: {
            name?: string;
            USPS2?: string;
        }[] & ({
            name?: string;
            USPS2?: string;
        } & {
            name?: string;
            USPS2?: string;
        } & { [K_10 in Exclude<keyof I_1["usstates"][number], keyof GetUserConfigurationsResponse_USState>]: never; })[] & { [K_11 in Exclude<keyof I_1["usstates"], keyof {
            name?: string;
            USPS2?: string;
        }[]>]: never; };
        categories?: string[] & string[] & { [K_12 in Exclude<keyof I_1["categories"], keyof string[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof GetUserConfigurationsResponse>]: never; }>(object: I_1): GetUserConfigurationsResponse;
};
export declare const GetUserConfigurationsResponse_Country: {
    encode(message: GetUserConfigurationsResponse_Country, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserConfigurationsResponse_Country;
    fromJSON(object: any): GetUserConfigurationsResponse_Country;
    toJSON(message: GetUserConfigurationsResponse_Country): unknown;
    create<I extends {
        name?: string;
        ISO2?: string;
    } & {
        name?: string;
        ISO2?: string;
    } & { [K in Exclude<keyof I, keyof GetUserConfigurationsResponse_Country>]: never; }>(base?: I): GetUserConfigurationsResponse_Country;
    fromPartial<I_1 extends {
        name?: string;
        ISO2?: string;
    } & {
        name?: string;
        ISO2?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetUserConfigurationsResponse_Country>]: never; }>(object: I_1): GetUserConfigurationsResponse_Country;
};
export declare const GetUserConfigurationsResponse_USState: {
    encode(message: GetUserConfigurationsResponse_USState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetUserConfigurationsResponse_USState;
    fromJSON(object: any): GetUserConfigurationsResponse_USState;
    toJSON(message: GetUserConfigurationsResponse_USState): unknown;
    create<I extends {
        name?: string;
        USPS2?: string;
    } & {
        name?: string;
        USPS2?: string;
    } & { [K in Exclude<keyof I, keyof GetUserConfigurationsResponse_USState>]: never; }>(base?: I): GetUserConfigurationsResponse_USState;
    fromPartial<I_1 extends {
        name?: string;
        USPS2?: string;
    } & {
        name?: string;
        USPS2?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof GetUserConfigurationsResponse_USState>]: never; }>(object: I_1): GetUserConfigurationsResponse_USState;
};
export declare const UpdateUserConfigurationsRequest: {
    encode(message: UpdateUserConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserConfigurationsRequest;
    fromJSON(object: any): UpdateUserConfigurationsRequest;
    toJSON(message: UpdateUserConfigurationsRequest): unknown;
    create<I extends {
        institutions?: string[];
        categories?: string[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        institutions?: string[] & string[] & { [K in Exclude<keyof I["institutions"], keyof string[]>]: never; };
        categories?: string[] & string[] & { [K_1 in Exclude<keyof I["categories"], keyof string[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_2 in Exclude<keyof I["patchstrategy"], "strategy">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof UpdateUserConfigurationsRequest>]: never; }>(base?: I): UpdateUserConfigurationsRequest;
    fromPartial<I_1 extends {
        institutions?: string[];
        categories?: string[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        institutions?: string[] & string[] & { [K_4 in Exclude<keyof I_1["institutions"], keyof string[]>]: never; };
        categories?: string[] & string[] & { [K_5 in Exclude<keyof I_1["categories"], keyof string[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_6 in Exclude<keyof I_1["patchstrategy"], "strategy">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof UpdateUserConfigurationsRequest>]: never; }>(object: I_1): UpdateUserConfigurationsRequest;
};
export declare const UpdateUserConfigurationsResponse: {
    encode(_: UpdateUserConfigurationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserConfigurationsResponse;
    fromJSON(_: any): UpdateUserConfigurationsResponse;
    toJSON(_: UpdateUserConfigurationsResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateUserConfigurationsResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateUserConfigurationsResponse;
};
export declare const GetEntityTypeConfigurationsRequest: {
    encode(_: GetEntityTypeConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetEntityTypeConfigurationsRequest;
    fromJSON(_: any): GetEntityTypeConfigurationsRequest;
    toJSON(_: GetEntityTypeConfigurationsRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetEntityTypeConfigurationsRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetEntityTypeConfigurationsRequest;
};
export declare const EntityType: {
    encode(message: EntityType, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EntityType;
    fromJSON(object: any): EntityType;
    toJSON(message: EntityType): unknown;
    create<I extends {
        etype?: string;
        subtypes?: string[];
    } & {
        etype?: string;
        subtypes?: string[] & string[] & { [K in Exclude<keyof I["subtypes"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof EntityType>]: never; }>(base?: I): EntityType;
    fromPartial<I_1 extends {
        etype?: string;
        subtypes?: string[];
    } & {
        etype?: string;
        subtypes?: string[] & string[] & { [K_2 in Exclude<keyof I_1["subtypes"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof EntityType>]: never; }>(object: I_1): EntityType;
};
export declare const GetEntityTypeConfigurationsResponse: {
    encode(message: GetEntityTypeConfigurationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetEntityTypeConfigurationsResponse;
    fromJSON(object: any): GetEntityTypeConfigurationsResponse;
    toJSON(message: GetEntityTypeConfigurationsResponse): unknown;
    create<I extends {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[];
    } & {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[] & ({
            etype?: string;
            subtypes?: string[];
        } & {
            etype?: string;
            subtypes?: string[] & string[] & { [K in Exclude<keyof I["Types"][number]["subtypes"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["Types"][number], keyof EntityType>]: never; })[] & { [K_2 in Exclude<keyof I["Types"], keyof {
            etype?: string;
            subtypes?: string[];
        }[]>]: never; };
    } & { [K_3 in Exclude<keyof I, "Types">]: never; }>(base?: I): GetEntityTypeConfigurationsResponse;
    fromPartial<I_1 extends {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[];
    } & {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[] & ({
            etype?: string;
            subtypes?: string[];
        } & {
            etype?: string;
            subtypes?: string[] & string[] & { [K_4 in Exclude<keyof I_1["Types"][number]["subtypes"], keyof string[]>]: never; };
        } & { [K_5 in Exclude<keyof I_1["Types"][number], keyof EntityType>]: never; })[] & { [K_6 in Exclude<keyof I_1["Types"], keyof {
            etype?: string;
            subtypes?: string[];
        }[]>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "Types">]: never; }>(object: I_1): GetEntityTypeConfigurationsResponse;
};
export declare const UpdateEntityTypeConfigurationsRequest: {
    encode(message: UpdateEntityTypeConfigurationsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEntityTypeConfigurationsRequest;
    fromJSON(object: any): UpdateEntityTypeConfigurationsRequest;
    toJSON(message: UpdateEntityTypeConfigurationsRequest): unknown;
    create<I extends {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[] & ({
            etype?: string;
            subtypes?: string[];
        } & {
            etype?: string;
            subtypes?: string[] & string[] & { [K in Exclude<keyof I["Types"][number]["subtypes"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["Types"][number], keyof EntityType>]: never; })[] & { [K_2 in Exclude<keyof I["Types"], keyof {
            etype?: string;
            subtypes?: string[];
        }[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_3 in Exclude<keyof I["patchstrategy"], "strategy">]: never; };
    } & { [K_4 in Exclude<keyof I, keyof UpdateEntityTypeConfigurationsRequest>]: never; }>(base?: I): UpdateEntityTypeConfigurationsRequest;
    fromPartial<I_1 extends {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[];
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        };
    } & {
        Types?: {
            etype?: string;
            subtypes?: string[];
        }[] & ({
            etype?: string;
            subtypes?: string[];
        } & {
            etype?: string;
            subtypes?: string[] & string[] & { [K_5 in Exclude<keyof I_1["Types"][number]["subtypes"], keyof string[]>]: never; };
        } & { [K_6 in Exclude<keyof I_1["Types"][number], keyof EntityType>]: never; })[] & { [K_7 in Exclude<keyof I_1["Types"], keyof {
            etype?: string;
            subtypes?: string[];
        }[]>]: never; };
        patchstrategy?: {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & {
            strategy?: import("./patch_types").PatchStrategy_Strategy;
        } & { [K_8 in Exclude<keyof I_1["patchstrategy"], "strategy">]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof UpdateEntityTypeConfigurationsRequest>]: never; }>(object: I_1): UpdateEntityTypeConfigurationsRequest;
};
export declare const UpdateEntityTypeConfigurationsResponse: {
    encode(_: UpdateEntityTypeConfigurationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UpdateEntityTypeConfigurationsResponse;
    fromJSON(_: any): UpdateEntityTypeConfigurationsResponse;
    toJSON(_: UpdateEntityTypeConfigurationsResponse): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): UpdateEntityTypeConfigurationsResponse;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): UpdateEntityTypeConfigurationsResponse;
};
export declare const GetPolicyRequest: {
    encode(_: GetPolicyRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPolicyRequest;
    fromJSON(_: any): GetPolicyRequest;
    toJSON(_: GetPolicyRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): GetPolicyRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): GetPolicyRequest;
};
export declare const GetPolicyResponse: {
    encode(message: GetPolicyResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GetPolicyResponse;
    fromJSON(object: any): GetPolicyResponse;
    toJSON(message: GetPolicyResponse): unknown;
    create<I extends {
        policy?: string;
    } & {
        policy?: string;
    } & { [K in Exclude<keyof I, "policy">]: never; }>(base?: I): GetPolicyResponse;
    fromPartial<I_1 extends {
        policy?: string;
    } & {
        policy?: string;
    } & { [K_1 in Exclude<keyof I_1, "policy">]: never; }>(object: I_1): GetPolicyResponse;
};
export declare const HealthRequest: {
    encode(_: HealthRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HealthRequest;
    fromJSON(_: any): HealthRequest;
    toJSON(_: HealthRequest): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): HealthRequest;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): HealthRequest;
};
export declare const HealthResponse: {
    encode(message: HealthResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): HealthResponse;
    fromJSON(object: any): HealthResponse;
    toJSON(message: HealthResponse): unknown;
    create<I extends {
        status?: string;
    } & {
        status?: string;
    } & { [K in Exclude<keyof I, "status">]: never; }>(base?: I): HealthResponse;
    fromPartial<I_1 extends {
        status?: string;
    } & {
        status?: string;
    } & { [K_1 in Exclude<keyof I_1, "status">]: never; }>(object: I_1): HealthResponse;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
