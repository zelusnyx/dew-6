import { AddFacilityToPoolRequest, AddFacilityToPoolResponse, AddOrganizationToPoolRequest, AddOrganizationToPoolResponse, AddProjectToPoolRequest, AddProjectToPoolResponse, AllocationRequest, AllocationResponse, CreatePoolRequest, CreatePoolResponse, DeletePoolRequest, DeletePoolResponse, FetchAllocationTableRequest, FetchAllocationTableResponse, FreeRequest, FreeResponse, GetPoolRequest, GetPoolResponse, GetPoolsRequest, GetPoolsResponse, RemoveFacilityFromPoolRequest, RemoveFacilityFromPoolResponse, RemoveOrganizationFromPoolRequest, RemoveOrganizationFromPoolResponse, RemoveProjectFromPoolRequest, RemoveProjectFromPoolResponse, UpdatePoolResourcesRequest, UpdatePoolResourcesResponse } from "./alloc_types";
import { ActivateResourcesRequest, ActivateResourcesResponse, DeactivateResourcesRequest, DeactivateResourcesResponse, DeinitHarborRequest, DeinitHarborResponse, DeleteFacilityRequest, DeleteFacilityResponse, GetFacilitiesRequest, GetFacilitiesResponse, GetFacilityRequest, GetFacilityResponse, InitHarborRequest, InitHarborResponse, ListBlockPoolsRequest, ListBlockPoolsResponse, RegisterFacilityRequest, RegisterFacilityResponse, UpdateFacilityRequest, UpdateFacilityResponse } from "./commission_types";
import { GetUserSSHCertRequest, GetUserSSHCertResponse, GetUserSSHKeysRequest, GetUserSSHKeysResponse } from "./cred_types";
import { GetIdentityRequest, GetIdentityResponse, ListIdentityRequest, ListIdentityResponse, LoginRequest, LoginResponse, LogoutRequest, LogoutResponse, RegisterRequest, RegisterResponse, UnregisterRequest, UnregisterResponse } from "./identity_types";
import { DeleteIngressRequest, DeleteIngressResponse, DematerializeRequest, DematerializeResponse, GetMaterializationRequest, GetMaterializationResponse, GetMaterializationsRequest, GetMaterializationsResponse, GetMaterializationStatusRequest, GetMaterializationStatusResponse, MaterializeRequest, MaterializeResponse, NewIngressRequest, NewIngressResponse, RebootMaterializationRequest, RebootMaterializationResponse } from "./materialize_types";
import { CompileRequest, CompileResponse, PushRequest, PushResponse } from "./model_types";
import { GetRealizationRequest, GetRealizationResponse, GetRealizationsRequest, GetRealizationsResponse, GetResourcesRequest, GetResourcesResponse, RealizeRequest, RealizeResponse, RelinquishRequest, RelinquishResponse, UpdateRealizationRequest, UpdateRealizationResponse } from "./realize_types";
import { AddWgIfConfigRequest, AddWgIfConfigResponse, DelWgIfConfigRequest, DelWgIfConfigResponse, GetWgEnclaveRequest, GetWgEnclaveResponse, GetWgIfConfigRequest, GetWgIfConfigResponse } from "./wg_types";
import { ActivateOrganizationRequest, ActivateOrganizationResponse, ActivateUserRequest, ActivateUserResponse, AddOrganizationProjectRequest, AddOrganizationProjectResponse, AddProjectMemberRequest, AddProjectMemberResponse, AddUserPublicKeyRequest, AddUserPublicKeyResponse, ConfirmOrganizationMembershipRequest, ConfirmOrganizationMembershipResponse, CreateExperimentRequest, CreateExperimentResponse, CreateOrganizationRequest, CreateOrganizationResponse, CreateProjectRequest, CreateProjectResponse, DeleteExperimentRequest, DeleteExperimentResponse, DeleteOrganizationMemberRequest, DeleteOrganizationMemberResponse, DeleteOrganizationProjectRequest, DeleteOrganizationProjectResponse, DeleteOrganizationRequest, DeleteOrganizationResponse, DeleteProjectMemberRequest, DeleteProjectMemberResponse, DeleteProjectRequest, DeleteProjectResponse, DeleteUserPublicKeyRequest, DeleteUserPublicKeyResponse, DeleteUserPublicKeysRequest, DeleteUserPublicKeysResponse, DeleteUserRequest, DeleteUserResponse, FreezeOrganizationRequest, FreezeOrganizationResponse, FreezeUserRequest, FreezeUserResponse, GetEntityTypeConfigurationsRequest, GetEntityTypeConfigurationsResponse, GetExperimentRequest, GetExperimentResponse, GetExperimentsRequest, GetExperimentsResponse, GetOrganizationMemberRequest, GetOrganizationMemberResponse, GetOrganizationMembersRequest, GetOrganizationMembersResponse, GetOrganizationProjectRequest, GetOrganizationProjectResponse, GetOrganizationProjectsRequest, GetOrganizationProjectsResponse, GetOrganizationRequest, GetOrganizationResponse, GetOrganizationsRequest, GetOrganizationsResponse, GetPolicyRequest, GetPolicyResponse, GetProjectExperimentsRequest, GetProjectExperimentsResponse, GetProjectMemberRequest, GetProjectMemberResponse, GetProjectMembersRequest, GetProjectMembersResponse, GetProjectRequest, GetProjectResponse, GetProjectsRequest, GetProjectsResponse, GetRevisionRequest, GetRevisionResponse, GetUserConfigurationsRequest, GetUserConfigurationsResponse, GetUserPublicKeysRequest, GetUserPublicKeysResponse, GetUserRequest, GetUserResponse, GetUsersRequest, GetUsersResponse, HealthRequest, HealthResponse, InitUserRequest, InitUserResponse, RequestOrganizationMembershipRequest, RequestOrganizationMembershipResponse, UpdateEntityTypeConfigurationsRequest, UpdateEntityTypeConfigurationsResponse, UpdateExperimentRequest, UpdateExperimentResponse, UpdateOrganizationMemberRequest, UpdateOrganizationMemberResponse, UpdateOrganizationProjectRequest, UpdateOrganizationProjectResponse, UpdateOrganizationRequest, UpdateOrganizationResponse, UpdateProjectMemberRequest, UpdateProjectMemberResponse, UpdateProjectRequest, UpdateProjectResponse, UpdateUserConfigurationsRequest, UpdateUserConfigurationsResponse, UpdateUserRequest, UpdateUserResponse } from "./workspace_types";
import { AttachXDCRequest, AttachXDCResponse, CreateXDCRequest, CreateXDCResponse, DeleteXDCRequest, DeleteXDCResponse, DetachXDCRequest, DetachXDCResponse, GetXDCJumpHostsRequest, GetXDCJumpHostsResponse, ListXDCsRequest, ListXDCsResponse } from "./xdc_types";
export declare const protobufPackage = "portal.v1";
export interface Workspace {
    /**
     * Activate User
     *
     * Activate a user. When new users are created they are initialized to an
     * inactive state. This API call can be used to activate new users. This API
     * call can also be used to re-activate users that have been frozen.
     */
    ActivateUser(request: ActivateUserRequest): Promise<ActivateUserResponse>;
    /**
     * Freeze User
     *
     * Freeze a user. This prevents the user from using the API in any way. This
     * is typically used for users that violate terms of service. Users can be
     * unfrozen with the [ActivateUser](#operation/User_ActivateUser) method.
     */
    FreezeUser(request: FreezeUserRequest): Promise<FreezeUserResponse>;
    /**
     * Init User
     *
     * Initialize a user. This ensures that the user account exists and has all
     * the basics including.
     *  - User storage in MergeFS
     *  - MergeFS user and group ids
     *  - A personal project
     *  - Personal project storage
     *
     * At this time the user information provided must be the same as the user
     * being initialized e.g., users can only initialize themselves and not on
     * behalf of other users.
     *
     * Initializing a user does not imply that the user account is activated.
     * That must be done by a portal administrator or a member of a project that
     * the user has joined with sufficient permissions (as determined by the
     * policy of the Portal administrators) to initilize the user account.
     */
    InitUser(request: InitUserRequest): Promise<InitUserResponse>;
    /**
     * Get Users
     *
     * Get all users visible to the calling user.
     */
    GetUsers(request: GetUsersRequest): Promise<GetUsersResponse>;
    /**
     * Get User
     *
     * Get a user's account information.
     */
    GetUser(request: GetUserRequest): Promise<GetUserResponse>;
    /**
     * Update User
     *
     * Update a user's account information. Empty/zero value fields ignored.
     */
    UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
    /**
     * Delete User
     *
     * Delete a user's account. **This will delete all data associated with a
     * user, including:**
     * - Personal storage
     * - All projects created by the user
     * - All project storage belonging to projects created by the user
     * - Recycling of users uid/gid
     * - All XDCs belonging to the user
     * - All resource pools created by the user
     * - All facilities created by the user
     *
     * **If any of the above need to be retained, such as a project, the project
     * must be transferred to another user in the `Creator` role before the
     * outgoing user account is deleted.**
     */
    DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
    /**
     * Get User Public Keys
     *
     * Retrieve the public keys a user has uploaded for accessing XDCs and
     * testbed nodes.
     */
    GetUserPublicKeys(request: GetUserPublicKeysRequest): Promise<GetUserPublicKeysResponse>;
    /**
     * Add User Public Key
     *
     * Add a public key for the specified user
     */
    AddUserPublicKey(request: AddUserPublicKeyRequest): Promise<AddUserPublicKeyResponse>;
    /**
     * Delete User Public Key
     *
     * Remove a public key from a users repertoire.
     */
    DeleteUserPublicKey(request: DeleteUserPublicKeyRequest): Promise<DeleteUserPublicKeyResponse>;
    /**
     * Delete User Public Keys
     *
     * Remove all a users public keys
     */
    DeleteUserPublicKeys(request: DeleteUserPublicKeysRequest): Promise<DeleteUserPublicKeysResponse>;
    /**
     * Get Projects
     *
     * Get all projects visible to the calling user.
     */
    GetProjects(request: GetProjectsRequest): Promise<GetProjectsResponse>;
    /**
     * Get Project
     *
     * Get the specified project's information.
     */
    GetProject(request: GetProjectRequest): Promise<GetProjectResponse>;
    /**
     * Create Project
     *
     * Create a new project.
     *
     * The most common case is a user creating a project
     * for themself. In this case `user` can be omitted. In the case that one
     * user is creating a project on behalf of another, such as a bot account or
     * an organization maintainer creating projects on behalf of organization
     * members. What exactly is allowed depends on the policy in place for the
     * specific portal. In the reference portal implementation
     * (portal.mergetb.net), only organization maintainers or above may act on
     * behalf of organization users.
     */
    CreateProject(request: CreateProjectRequest): Promise<CreateProjectResponse>;
    /**
     * Update Project
     *
     * Update a project's information. Empty/zero fields are ignored.
     */
    UpdateProject(request: UpdateProjectRequest): Promise<UpdateProjectResponse>;
    /**
     * Delete Project
     *
     * Delete a project.
     *
     * **Warning: deleting a project will also delete the following:**
     *  - All experiments in the project
     *      - All realizations for experiments in the project
     *      - All materializations for realizations in the project
     *  - All source revisions for experiments in the project
     *  - All XDCs launched for this project
     *  - The project's MergeFS storage
     */
    DeleteProject(request: DeleteProjectRequest): Promise<DeleteProjectResponse>;
    /**
     * Get Project Members
     *
     * Get all members of a project.
     */
    GetProjectMembers(request: GetProjectMembersRequest): Promise<GetProjectMembersResponse>;
    /**
     * Get Project Member
     *
     * Get info about a project member
     */
    GetProjectMember(request: GetProjectMemberRequest): Promise<GetProjectMemberResponse>;
    /**
     * Add Project Member
     *
     * Add a member to a project.
     */
    AddProjectMember(request: AddProjectMemberRequest): Promise<AddProjectMemberResponse>;
    /**
     * Update Project Member
     *
     * Update project member
     */
    UpdateProjectMember(request: UpdateProjectMemberRequest): Promise<UpdateProjectMemberResponse>;
    /**
     * Delete Project Member
     *
     * Remove a member from a project
     */
    DeleteProjectMember(request: DeleteProjectMemberRequest): Promise<DeleteProjectMemberResponse>;
    /**
     * Activate Organization
     *
     * Activate an organization. When new organizations are created they are
     * initialized to an inactive state. This API call can be used to activate
     * new organizations. This API call can also be used to re-activate
     * organizations that have been frozen.
     */
    ActivateOrganization(request: ActivateOrganizationRequest): Promise<ActivateOrganizationResponse>;
    /**
     * Freeze Organization
     *
     * Freeze a organization. This prevents organization members from using the
     * API in any way. This is typically used for organizations that violate
     * terms of service. Organizations can be unfrozen with the
     * [ActivateOrganization](#operation/Organization_ActivateOrganization method.
     */
    FreezeOrganization(request: FreezeOrganizationRequest): Promise<FreezeOrganizationResponse>;
    /**
     * Get Organizations
     *
     * Get all organizations visible to the calling user.
     */
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    /**
     * Get Organization
     *
     * Get the specified organization's information.
     */
    GetOrganization(request: GetOrganizationRequest): Promise<GetOrganizationResponse>;
    /**
     * Create Organization
     *
     * Create a new organization.
     */
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    /**
     * Update Organization
     *
     * Update an organization's information. Empty/zero fields are ignored.
     */
    UpdateOrganization(request: UpdateOrganizationRequest): Promise<UpdateOrganizationResponse>;
    /**
     * Delete Organization
     *
     * Delete an organization.
     *
     * **Warning: deleting an organization will also do the following:**
     *  - Delete all projects that are owned by the organization
     *  - Freeze accounts of all users who are members of the organization
     */
    DeleteOrganization(request: DeleteOrganizationRequest): Promise<DeleteOrganizationResponse>;
    /**
     * Get Organization Users
     *
     * Get all users of an organization.
     */
    GetOrganizationMembers(request: GetOrganizationMembersRequest): Promise<GetOrganizationMembersResponse>;
    /**
     * Get Organization Member
     *
     * Get info about an organization member
     */
    GetOrganizationMember(request: GetOrganizationMemberRequest): Promise<GetOrganizationMemberResponse>;
    /**
     * Request Organization Membership
     *
     * Request membership in an organization
     */
    RequestOrganizationMembership(request: RequestOrganizationMembershipRequest): Promise<RequestOrganizationMembershipResponse>;
    /**
     * Confirm Organization Membership
     *
     * Confirms membership in an organization
     */
    ConfirmOrganizationMembership(request: ConfirmOrganizationMembershipRequest): Promise<ConfirmOrganizationMembershipResponse>;
    /**
     * Update Organization Member
     *
     * Update organization member
     */
    UpdateOrganizationMember(request: UpdateOrganizationMemberRequest): Promise<UpdateOrganizationMemberResponse>;
    /**
     * Delete Organization Member
     *
     * Remove a member from an organization
     */
    DeleteOrganizationMember(request: DeleteOrganizationMemberRequest): Promise<DeleteOrganizationMemberResponse>;
    /**
     * Get Organization Projects
     *
     * Get all projects of an organization.
     */
    GetOrganizationProjects(request: GetOrganizationProjectsRequest): Promise<GetOrganizationProjectsResponse>;
    /**
     * Get Organization Project
     *
     * Get info about an organization project
     */
    GetOrganizationProject(request: GetOrganizationProjectRequest): Promise<GetOrganizationProjectResponse>;
    /**
     * Add Organization Project
     *
     * Add a project to an organization.
     */
    AddOrganizationProject(request: AddOrganizationProjectRequest): Promise<AddOrganizationProjectResponse>;
    /**
     * Update Organization Project
     *
     * Update organization project
     */
    UpdateOrganizationProject(request: UpdateOrganizationProjectRequest): Promise<UpdateOrganizationProjectResponse>;
    /**
     * Delete Organization Project
     *
     * Remove a project from an organization
     */
    DeleteOrganizationProject(request: DeleteOrganizationProjectRequest): Promise<DeleteOrganizationProjectResponse>;
    /**
     * Get Experiments
     *
     * Get all experiments the caller has access to.
     */
    GetExperiments(request: GetExperimentsRequest): Promise<GetExperimentsResponse>;
    /**
     * Get Project Experiments
     *
     * Get the experiments for the given project.
     */
    GetProjectExperiments(request: GetProjectExperimentsRequest): Promise<GetProjectExperimentsResponse>;
    /**
     * Get Experiment
     *
     * Get the descriptor for a particular experiment
     */
    GetExperiment(request: GetExperimentRequest): Promise<GetExperimentResponse>;
    /**
     * Create Experiment
     *
     * Create a new experiment in the given project with the provided experiment
     * descriptor parameters.
     */
    CreateExperiment(request: CreateExperimentRequest): Promise<CreateExperimentResponse>;
    /**
     * Update Experiment
     *
     * Update an existing experiment.
     */
    UpdateExperiment(request: UpdateExperimentRequest): Promise<UpdateExperimentResponse>;
    /**
     * Delete Experiment
     *
     * Delete an experiment
     *
     * **Warning: deleting a project will also delete the following:**
     *  - All realizations for the experiment
     *  - All materializations for realizations in the experiment
     *  - All source revisions for experiments in the experiment
     */
    DeleteExperiment(request: DeleteExperimentRequest): Promise<DeleteExperimentResponse>;
    /**
     * Read Experiment Revision
     *
     * Get a specific experiment revision in different formats.
     */
    GetRevision(request: GetRevisionRequest): Promise<GetRevisionResponse>;
    /**
     * Get Policy
     *
     * Get the current policy governing portal authorization. Returns policy as
     * JSON blob.
     */
    GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse>;
    /** GetUserConfigurations - return information about possible user configuations. */
    GetUserConfigurations(request: GetUserConfigurationsRequest): Promise<GetUserConfigurationsResponse>;
    /** UpdateUserConfiguration - if authorized, update user configurations */
    UpdateUserConfigurations(request: UpdateUserConfigurationsRequest): Promise<UpdateUserConfigurationsResponse>;
    /** GetEntityTypeConfigurations - returns the types and subtypes of projects and organizations. */
    GetEntityTypeConfigurations(request: GetEntityTypeConfigurationsRequest): Promise<GetEntityTypeConfigurationsResponse>;
    /** UpdateEntityTypeConfigurations - if authorized, update entity types and sub type. */
    UpdateEntityTypeConfigurations(request: UpdateEntityTypeConfigurationsRequest): Promise<UpdateEntityTypeConfigurationsResponse>;
    /**
     * Health Check
     *
     * Check the health of the workspace service
     */
    Health(request: HealthRequest): Promise<HealthResponse>;
}
export declare class WorkspaceClientImpl implements Workspace {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ActivateUser(request: ActivateUserRequest): Promise<ActivateUserResponse>;
    FreezeUser(request: FreezeUserRequest): Promise<FreezeUserResponse>;
    InitUser(request: InitUserRequest): Promise<InitUserResponse>;
    GetUsers(request: GetUsersRequest): Promise<GetUsersResponse>;
    GetUser(request: GetUserRequest): Promise<GetUserResponse>;
    UpdateUser(request: UpdateUserRequest): Promise<UpdateUserResponse>;
    DeleteUser(request: DeleteUserRequest): Promise<DeleteUserResponse>;
    GetUserPublicKeys(request: GetUserPublicKeysRequest): Promise<GetUserPublicKeysResponse>;
    AddUserPublicKey(request: AddUserPublicKeyRequest): Promise<AddUserPublicKeyResponse>;
    DeleteUserPublicKey(request: DeleteUserPublicKeyRequest): Promise<DeleteUserPublicKeyResponse>;
    DeleteUserPublicKeys(request: DeleteUserPublicKeysRequest): Promise<DeleteUserPublicKeysResponse>;
    GetProjects(request: GetProjectsRequest): Promise<GetProjectsResponse>;
    GetProject(request: GetProjectRequest): Promise<GetProjectResponse>;
    CreateProject(request: CreateProjectRequest): Promise<CreateProjectResponse>;
    UpdateProject(request: UpdateProjectRequest): Promise<UpdateProjectResponse>;
    DeleteProject(request: DeleteProjectRequest): Promise<DeleteProjectResponse>;
    GetProjectMembers(request: GetProjectMembersRequest): Promise<GetProjectMembersResponse>;
    GetProjectMember(request: GetProjectMemberRequest): Promise<GetProjectMemberResponse>;
    AddProjectMember(request: AddProjectMemberRequest): Promise<AddProjectMemberResponse>;
    UpdateProjectMember(request: UpdateProjectMemberRequest): Promise<UpdateProjectMemberResponse>;
    DeleteProjectMember(request: DeleteProjectMemberRequest): Promise<DeleteProjectMemberResponse>;
    ActivateOrganization(request: ActivateOrganizationRequest): Promise<ActivateOrganizationResponse>;
    FreezeOrganization(request: FreezeOrganizationRequest): Promise<FreezeOrganizationResponse>;
    GetOrganizations(request: GetOrganizationsRequest): Promise<GetOrganizationsResponse>;
    GetOrganization(request: GetOrganizationRequest): Promise<GetOrganizationResponse>;
    CreateOrganization(request: CreateOrganizationRequest): Promise<CreateOrganizationResponse>;
    UpdateOrganization(request: UpdateOrganizationRequest): Promise<UpdateOrganizationResponse>;
    DeleteOrganization(request: DeleteOrganizationRequest): Promise<DeleteOrganizationResponse>;
    GetOrganizationMembers(request: GetOrganizationMembersRequest): Promise<GetOrganizationMembersResponse>;
    GetOrganizationMember(request: GetOrganizationMemberRequest): Promise<GetOrganizationMemberResponse>;
    RequestOrganizationMembership(request: RequestOrganizationMembershipRequest): Promise<RequestOrganizationMembershipResponse>;
    ConfirmOrganizationMembership(request: ConfirmOrganizationMembershipRequest): Promise<ConfirmOrganizationMembershipResponse>;
    UpdateOrganizationMember(request: UpdateOrganizationMemberRequest): Promise<UpdateOrganizationMemberResponse>;
    DeleteOrganizationMember(request: DeleteOrganizationMemberRequest): Promise<DeleteOrganizationMemberResponse>;
    GetOrganizationProjects(request: GetOrganizationProjectsRequest): Promise<GetOrganizationProjectsResponse>;
    GetOrganizationProject(request: GetOrganizationProjectRequest): Promise<GetOrganizationProjectResponse>;
    AddOrganizationProject(request: AddOrganizationProjectRequest): Promise<AddOrganizationProjectResponse>;
    UpdateOrganizationProject(request: UpdateOrganizationProjectRequest): Promise<UpdateOrganizationProjectResponse>;
    DeleteOrganizationProject(request: DeleteOrganizationProjectRequest): Promise<DeleteOrganizationProjectResponse>;
    GetExperiments(request: GetExperimentsRequest): Promise<GetExperimentsResponse>;
    GetProjectExperiments(request: GetProjectExperimentsRequest): Promise<GetProjectExperimentsResponse>;
    GetExperiment(request: GetExperimentRequest): Promise<GetExperimentResponse>;
    CreateExperiment(request: CreateExperimentRequest): Promise<CreateExperimentResponse>;
    UpdateExperiment(request: UpdateExperimentRequest): Promise<UpdateExperimentResponse>;
    DeleteExperiment(request: DeleteExperimentRequest): Promise<DeleteExperimentResponse>;
    GetRevision(request: GetRevisionRequest): Promise<GetRevisionResponse>;
    GetPolicy(request: GetPolicyRequest): Promise<GetPolicyResponse>;
    GetUserConfigurations(request: GetUserConfigurationsRequest): Promise<GetUserConfigurationsResponse>;
    UpdateUserConfigurations(request: UpdateUserConfigurationsRequest): Promise<UpdateUserConfigurationsResponse>;
    GetEntityTypeConfigurations(request: GetEntityTypeConfigurationsRequest): Promise<GetEntityTypeConfigurationsResponse>;
    UpdateEntityTypeConfigurations(request: UpdateEntityTypeConfigurationsRequest): Promise<UpdateEntityTypeConfigurationsResponse>;
    Health(request: HealthRequest): Promise<HealthResponse>;
}
export interface Realize {
    /** GetRealizations */
    GetRealizations(request: GetRealizationsRequest): Promise<GetRealizationsResponse>;
    /** GetRealization */
    GetRealization(request: GetRealizationRequest): Promise<GetRealizationResponse>;
    /** Realize */
    Realize(request: RealizeRequest): Promise<RealizeResponse>;
    /** Relinquish */
    Relinquish(request: RelinquishRequest): Promise<RelinquishResponse>;
    /**
     * GetResources
     *
     * Get status of all resources the caller has access to.
     */
    GetResources(request: GetResourcesRequest): Promise<GetResourcesResponse>;
    /**
     * UpdateRealization
     *
     * Update an existing realization.
     */
    UpdateRealization(request: UpdateRealizationRequest): Promise<UpdateRealizationResponse>;
}
export declare class RealizeClientImpl implements Realize {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetRealizations(request: GetRealizationsRequest): Promise<GetRealizationsResponse>;
    GetRealization(request: GetRealizationRequest): Promise<GetRealizationResponse>;
    Realize(request: RealizeRequest): Promise<RealizeResponse>;
    Relinquish(request: RelinquishRequest): Promise<RelinquishResponse>;
    GetResources(request: GetResourcesRequest): Promise<GetResourcesResponse>;
    UpdateRealization(request: UpdateRealizationRequest): Promise<UpdateRealizationResponse>;
}
export interface Materialize {
    GetMaterializations(request: GetMaterializationsRequest): Promise<GetMaterializationsResponse>;
    GetMaterialization(request: GetMaterializationRequest): Promise<GetMaterializationResponse>;
    GetMaterializationStatus(request: GetMaterializationStatusRequest): Promise<GetMaterializationStatusResponse>;
    Materialize(request: MaterializeRequest): Promise<MaterializeResponse>;
    Dematerialize(request: DematerializeRequest): Promise<DematerializeResponse>;
    RebootMaterialization(request: RebootMaterializationRequest): Promise<RebootMaterializationResponse>;
    /** Ingresses */
    NewIngress(request: NewIngressRequest): Promise<NewIngressResponse>;
    DeleteIngress(request: DeleteIngressRequest): Promise<DeleteIngressResponse>;
}
export declare class MaterializeClientImpl implements Materialize {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetMaterializations(request: GetMaterializationsRequest): Promise<GetMaterializationsResponse>;
    GetMaterialization(request: GetMaterializationRequest): Promise<GetMaterializationResponse>;
    GetMaterializationStatus(request: GetMaterializationStatusRequest): Promise<GetMaterializationStatusResponse>;
    Materialize(request: MaterializeRequest): Promise<MaterializeResponse>;
    Dematerialize(request: DematerializeRequest): Promise<DematerializeResponse>;
    RebootMaterialization(request: RebootMaterializationRequest): Promise<RebootMaterializationResponse>;
    NewIngress(request: NewIngressRequest): Promise<NewIngressResponse>;
    DeleteIngress(request: DeleteIngressRequest): Promise<DeleteIngressResponse>;
}
export interface Commission {
    /**
     * RegisterFacility
     *
     * Register a Facility with a Merge Portal.
     */
    RegisterFacility(request: RegisterFacilityRequest): Promise<RegisterFacilityResponse>;
    /**
     * GetFacilities
     *
     * Get all facilities in a Merge Portal
     */
    GetFacilities(request: GetFacilitiesRequest): Promise<GetFacilitiesResponse>;
    /**
     * GetFacility
     *
     * Get information about a specific facility in a Merge Portal.
     */
    GetFacility(request: GetFacilityRequest): Promise<GetFacilityResponse>;
    /**
     * UpdateFacility
     *
     * Update the given facility.
     */
    UpdateFacility(request: UpdateFacilityRequest): Promise<UpdateFacilityResponse>;
    /**
     * DeleteFacility
     *
     * Delete the given facility.
     */
    DeleteFacility(request: DeleteFacilityRequest): Promise<DeleteFacilityResponse>;
    /**
     * DeactivateResource
     *
     * Mark resources as not active and unallocable.
     */
    DeactivateResources(request: DeactivateResourcesRequest): Promise<DeactivateResourcesResponse>;
    /**
     * ActivateResource
     *
     * Mark resources as active and allocable.
     */
    ActivateResources(request: ActivateResourcesRequest): Promise<ActivateResourcesResponse>;
    /**
     * ListBlockPools
     *
     * List currently allocated address block pools
     */
    ListBlockPools(request: ListBlockPoolsRequest): Promise<ListBlockPoolsResponse>;
    /**
     * InitializeHarbor
     *
     * Establish "always on" system network embedding, to prepare the facility services
     * for materializations
     */
    InitializeHarbor(request: InitHarborRequest): Promise<InitHarborResponse>;
    /**
     * DeinitializeHarbor
     *
     * Tear down "always on" system network embedding
     */
    DeinitializeHarbor(request: DeinitHarborRequest): Promise<DeinitHarborResponse>;
}
export declare class CommissionClientImpl implements Commission {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    RegisterFacility(request: RegisterFacilityRequest): Promise<RegisterFacilityResponse>;
    GetFacilities(request: GetFacilitiesRequest): Promise<GetFacilitiesResponse>;
    GetFacility(request: GetFacilityRequest): Promise<GetFacilityResponse>;
    UpdateFacility(request: UpdateFacilityRequest): Promise<UpdateFacilityResponse>;
    DeleteFacility(request: DeleteFacilityRequest): Promise<DeleteFacilityResponse>;
    DeactivateResources(request: DeactivateResourcesRequest): Promise<DeactivateResourcesResponse>;
    ActivateResources(request: ActivateResourcesRequest): Promise<ActivateResourcesResponse>;
    ListBlockPools(request: ListBlockPoolsRequest): Promise<ListBlockPoolsResponse>;
    InitializeHarbor(request: InitHarborRequest): Promise<InitHarborResponse>;
    DeinitializeHarbor(request: DeinitHarborRequest): Promise<DeinitHarborResponse>;
}
export interface Alloc {
    /**
     * Allocate
     *
     * Allocate the provided set of resources.
     */
    Alloc(request: AllocationRequest): Promise<AllocationResponse>;
    /**
     * Free
     *
     * Free the specified set of resources, freeing them back into the pool for
     * allocation again.
     */
    Free(request: FreeRequest): Promise<FreeResponse>;
    /**
     * Fetch
     *
     * Fetch the current allocation table.
     */
    Fetch(request: FetchAllocationTableRequest): Promise<FetchAllocationTableResponse>;
    /**
     * GetPool
     *
     * Get details about a specific resource pool
     */
    GetPool(request: GetPoolRequest): Promise<GetPoolResponse>;
    /**
     * GetPools
     *
     * Get all pools
     */
    GetPools(request: GetPoolsRequest): Promise<GetPoolsResponse>;
    /**
     * CreatePool
     *
     * Create a new resource pool.
     */
    CreatePool(request: CreatePoolRequest): Promise<CreatePoolResponse>;
    /**
     * DeletePool
     *
     * Delete a resource pool. Projects assigned to the pool, will be put in the default pool.
     */
    DeletePool(request: DeletePoolRequest): Promise<DeletePoolResponse>;
    /**
     * AddProjectToPool
     *
     * Adds the given project to the given pool.
     */
    AddProject(request: AddProjectToPoolRequest): Promise<AddProjectToPoolResponse>;
    /**
     * RemoveProjectFromPool
     *
     * Removes the project from the pool and places it in the default pool.
     */
    RemoveProject(request: RemoveProjectFromPoolRequest): Promise<RemoveProjectFromPoolResponse>;
    /**
     * AddOrganizationToPool
     *
     * Adds the given organization to the given pool.
     */
    AddOrganization(request: AddOrganizationToPoolRequest): Promise<AddOrganizationToPoolResponse>;
    /**
     * RemoveOrganizationFromPool
     *
     * Removes the organization from the pool and places it in the default pool.
     */
    RemoveOrganization(request: RemoveOrganizationFromPoolRequest): Promise<RemoveOrganizationFromPoolResponse>;
    /**
     * AddFacilityToPool
     *
     * Adds the given facility to the resource pool. Optionally adds the given resources from
     * the facility to the pool.
     */
    AddFacility(request: AddFacilityToPoolRequest): Promise<AddFacilityToPoolResponse>;
    /**
     * RemoveFacilityFromPool
     *
     * Removes the given facility from the pool. Deletes all the given facility's resources from the pool.
     */
    RemoveFacility(request: RemoveFacilityFromPoolRequest): Promise<RemoveFacilityFromPoolResponse>;
    /**
     * UpdatePoolResources
     *
     * Adds or removes the given resources from the pool.
     */
    UpdatePoolResources(request: UpdatePoolResourcesRequest): Promise<UpdatePoolResourcesResponse>;
}
export declare class AllocClientImpl implements Alloc {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Alloc(request: AllocationRequest): Promise<AllocationResponse>;
    Free(request: FreeRequest): Promise<FreeResponse>;
    Fetch(request: FetchAllocationTableRequest): Promise<FetchAllocationTableResponse>;
    GetPool(request: GetPoolRequest): Promise<GetPoolResponse>;
    GetPools(request: GetPoolsRequest): Promise<GetPoolsResponse>;
    CreatePool(request: CreatePoolRequest): Promise<CreatePoolResponse>;
    DeletePool(request: DeletePoolRequest): Promise<DeletePoolResponse>;
    AddProject(request: AddProjectToPoolRequest): Promise<AddProjectToPoolResponse>;
    RemoveProject(request: RemoveProjectFromPoolRequest): Promise<RemoveProjectFromPoolResponse>;
    AddOrganization(request: AddOrganizationToPoolRequest): Promise<AddOrganizationToPoolResponse>;
    RemoveOrganization(request: RemoveOrganizationFromPoolRequest): Promise<RemoveOrganizationFromPoolResponse>;
    AddFacility(request: AddFacilityToPoolRequest): Promise<AddFacilityToPoolResponse>;
    RemoveFacility(request: RemoveFacilityFromPoolRequest): Promise<RemoveFacilityFromPoolResponse>;
    UpdatePoolResources(request: UpdatePoolResourcesRequest): Promise<UpdatePoolResourcesResponse>;
}
export interface Identity {
    /**
     * List Identities
     *
     * List identities registered with the portal. Portal admins and
     * organization maintainers only. Admins can see all identities.
     * Organization maintainers can see identities associated with accounts
     * within their organization.
     */
    ListIdentities(request: ListIdentityRequest): Promise<ListIdentityResponse>;
    /**
     * Get Identity
     *
     * Get an identity registered with the portal.
     */
    GetIdentity(request: GetIdentityRequest): Promise<GetIdentityResponse>;
    /**
     * Register
     *
     * Register a new identity with the portal.
     */
    Register(request: RegisterRequest): Promise<RegisterResponse>;
    /**
     * Unregister
     *
     * Remove an identity from the portal.
     */
    Unregister(request: UnregisterRequest): Promise<UnregisterResponse>;
    /**
     * Login
     *
     * Login to the portal with username and password credentials and receive an
     * access token.
     */
    Login(request: LoginRequest): Promise<LoginResponse>;
    /**
     * Logout
     *
     * Logout of the portal with the given username.
     */
    Logout(request: LogoutRequest): Promise<LogoutResponse>;
}
export declare class IdentityClientImpl implements Identity {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListIdentities(request: ListIdentityRequest): Promise<ListIdentityResponse>;
    GetIdentity(request: GetIdentityRequest): Promise<GetIdentityResponse>;
    Register(request: RegisterRequest): Promise<RegisterResponse>;
    Unregister(request: UnregisterRequest): Promise<UnregisterResponse>;
    Login(request: LoginRequest): Promise<LoginResponse>;
    Logout(request: LogoutRequest): Promise<LogoutResponse>;
}
export interface Cred {
    /**
     * GetUserSSHKeys
     *
     * Request keying material for the given user.
     */
    GetUserSSHKeys(request: GetUserSSHKeysRequest): Promise<GetUserSSHKeysResponse>;
    /**
     * GetSSHCert
     *
     * Request an SSH certifcate that authorizes the logged in user to ssh to Portal entities such as XDCs.
     */
    GetUserSSHCert(request: GetUserSSHCertRequest): Promise<GetUserSSHCertResponse>;
}
export declare class CredClientImpl implements Cred {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    GetUserSSHKeys(request: GetUserSSHKeysRequest): Promise<GetUserSSHKeysResponse>;
    GetUserSSHCert(request: GetUserSSHCertRequest): Promise<GetUserSSHCertResponse>;
}
export interface XDC {
    ListXDCs(request: ListXDCsRequest): Promise<ListXDCsResponse>;
    CreateXDC(request: CreateXDCRequest): Promise<CreateXDCResponse>;
    DeleteXDC(request: DeleteXDCRequest): Promise<DeleteXDCResponse>;
    AttachXDC(request: AttachXDCRequest): Promise<AttachXDCResponse>;
    DetachXDC(request: DetachXDCRequest): Promise<DetachXDCResponse>;
    GetXDCJumpHosts(request: GetXDCJumpHostsRequest): Promise<GetXDCJumpHostsResponse>;
}
export declare class XDCClientImpl implements XDC {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    ListXDCs(request: ListXDCsRequest): Promise<ListXDCsResponse>;
    CreateXDC(request: CreateXDCRequest): Promise<CreateXDCResponse>;
    DeleteXDC(request: DeleteXDCRequest): Promise<DeleteXDCResponse>;
    AttachXDC(request: AttachXDCRequest): Promise<AttachXDCResponse>;
    DetachXDC(request: DetachXDCRequest): Promise<DetachXDCResponse>;
    GetXDCJumpHosts(request: GetXDCJumpHostsRequest): Promise<GetXDCJumpHostsResponse>;
}
export interface Wireguard {
    /**
     * AddWgIfConfig
     *
     * Tell the portal to associate the given keying material and configuration information
     * with the Wireguard interface. If the interface is not a gateway, the configuration
     * will be added to the enclave gateway.
     */
    AddWgIfConfig(request: AddWgIfConfigRequest): Promise<AddWgIfConfigResponse>;
    /**
     * DelWgIfConfig
     *
     * Tell the portal to disassociate and delete the given keying material and configuration information
     * for the Wireguard interface. The configuration will be removed from the enclave gateway.
     */
    DelWgIfConfig(request: DelWgIfConfigRequest): Promise<DelWgIfConfigResponse>;
    /**
     * GetWgIfConfig
     *
     * Get the configuration associated with the given key in the given enclave.
     */
    GetWgIfConfig(request: GetWgIfConfigRequest): Promise<GetWgIfConfigResponse>;
    /**
     * GetWgEnclave
     *
     * List the keying material and configuration information for the interfaces within the
     * given wireguard enclave.
     */
    GetWgEnclave(request: GetWgEnclaveRequest): Promise<GetWgEnclaveResponse>;
}
export declare class WireguardClientImpl implements Wireguard {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    AddWgIfConfig(request: AddWgIfConfigRequest): Promise<AddWgIfConfigResponse>;
    DelWgIfConfig(request: DelWgIfConfigRequest): Promise<DelWgIfConfigResponse>;
    GetWgIfConfig(request: GetWgIfConfigRequest): Promise<GetWgIfConfigResponse>;
    GetWgEnclave(request: GetWgEnclaveRequest): Promise<GetWgEnclaveResponse>;
}
export interface Model {
    /**
     * Compile
     *
     * Take the given experiment model and compile it. If successful, the network model is returned.
     * Otherwise the compilation error stack is returned.
     */
    Compile(request: CompileRequest): Promise<CompileResponse>;
    /**
     * Push
     *
     * Push the model to the given experiment's repository on the given branch.
     */
    Push(request: PushRequest): Promise<PushResponse>;
}
export declare class ModelClientImpl implements Model {
    private readonly rpc;
    private readonly service;
    constructor(rpc: Rpc, opts?: {
        service?: string;
    });
    Compile(request: CompileRequest): Promise<CompileResponse>;
    Push(request: PushRequest): Promise<PushResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
export {};
