import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "xir";
export declare enum Routing {
    ManualRouting = 0,
    StaticRouting = 1,
    UNRECOGNIZED = -1
}
export declare function routingFromJSON(object: any): Routing;
export declare function routingToJSON(object: Routing): string;
export declare enum Addressing {
    ManualAddressing = 0,
    IPv4Addressing = 1,
    UNRECOGNIZED = -1
}
export declare function addressingFromJSON(object: any): Addressing;
export declare function addressingToJSON(object: Addressing): string;
export declare enum Emulation {
    /** Netem - default */
    Netem = 0,
    Click = 1,
    UNRECOGNIZED = -1
}
export declare function emulationFromJSON(object: any): Emulation;
export declare function emulationToJSON(object: Emulation): string;
export declare enum Protocol {
    http = 0,
    https = 1,
    tcp = 2,
    udp = 3,
    UNRECOGNIZED = -1
}
export declare function protocolFromJSON(object: any): Protocol;
export declare function protocolToJSON(object: Protocol): string;
export declare enum ISA {
    X86_64 = 0,
    UNRECOGNIZED = -1
}
export declare function iSAFromJSON(object: any): ISA;
export declare function iSAToJSON(object: ISA): string;
export declare enum MemoryType {
    DDR3 = 0,
    DDR4 = 1,
    UNRECOGNIZED = -1
}
export declare function memoryTypeFromJSON(object: any): MemoryType;
export declare function memoryTypeToJSON(object: MemoryType): string;
export declare enum NICModel {
    Intel200 = 0,
    Intel300 = 1,
    Intel500 = 2,
    Intel700 = 3,
    Intel800 = 4,
    Intel7000 = 50,
    Intel8000 = 51,
    Intel9000 = 52,
    ConnectX4 = 101,
    ConnectX5 = 102,
    ConnectX6 = 103,
    NetXtreme2 = 201,
    QCA9000 = 301,
    Virtio = 10001,
    E1000 = 10002,
    E1000E = 10003,
    UNRECOGNIZED = -1
}
export declare function nICModelFromJSON(object: any): NICModel;
export declare function nICModelToJSON(object: NICModel): string;
export declare enum NICKind {
    /** ETH - Ethernet */
    ETH = 0,
    /** ENP - Ethernet peripheral */
    ENP = 1,
    /** ENO - Ethernet onboard */
    ENO = 2,
    /** ENS - Ethernet peripheral hotplog slot */
    ENS = 3,
    /** WLP - WiFi peripheral */
    WLP = 4,
    /** SWP - Switch port */
    SWP = 5,
    /** IPMI - IPMI/BMC */
    IPMI = 6,
    /** Combo - IPMI/BMC + System Ethernet */
    Combo = 7,
    UNRECOGNIZED = -1
}
export declare function nICKindFromJSON(object: any): NICKind;
export declare function nICKindToJSON(object: NICKind): string;
export declare enum Layer1 {
    Layer1_Undefined = 0,
    /** Base100T - 100 mbps */
    Base100T = 1,
    /** Base1000T - 1 gbps */
    Base1000T = 2,
    Base1000X = 3,
    Base1000CX = 4,
    Base1000SX = 5,
    Base1000LX = 6,
    Base1000LX10 = 7,
    Base1000EX = 8,
    Base1000BX10 = 9,
    Base1000ZX = 10,
    /** GBase10T - 10 gbps */
    GBase10T = 11,
    GBase10CR = 12,
    GBase10SR = 13,
    GBase10LR = 14,
    GBase10LRM = 15,
    GBase10ER = 16,
    GBase10ZR = 17,
    GBase10LX4 = 18,
    GBase10PR = 19,
    /** GBase25CR - 25 gbps */
    GBase25CR = 20,
    GBase25SR = 21,
    GBase25LR = 22,
    GBase25ER = 23,
    /** GBase40CR4 - 40 gbps */
    GBase40CR4 = 24,
    GBase40SR4 = 25,
    GBase40LR4 = 26,
    GBase40ER4 = 27,
    /** GBase100CR4 - 100 gbps */
    GBase100CR4 = 28,
    GBase100SR4 = 29,
    GBase100SR10 = 30,
    GBase100LR4 = 31,
    GBase100ER4 = 32,
    /** RS232 - Console */
    RS232 = 33,
    Uart = 34,
    /** GBase50SR4 - 50 gbps */
    GBase50SR4 = 35,
    GBase50LR4 = 36,
    GBase50ER4 = 37,
    GBase50CR = 38,
    GBase50KR = 39,
    GBase50SR = 40,
    GBase50LR = 41,
    GBase50FR = 42,
    GBase50ER = 43,
    LAUI_2 = 44,
    GAUI50_1 = 45,
    GAUI50_2 = 46,
    /** GBase200CR4 - 200 gbps */
    GBase200CR4 = 47,
    GBase200KR4 = 48,
    GBase200SR4 = 49,
    GBase200DR4 = 50,
    GBase200FR4 = 51,
    GBase200LR4 = 52,
    GBase200ER4 = 53,
    GAUI200_4 = 54,
    GAUI200_8 = 55,
    /** GBase400SR16 - 400 gbps */
    GBase400SR16 = 56,
    GBase400SR8 = 57,
    GBase400SR4_2 = 58,
    GBase400DR4 = 59,
    GBase400FR8 = 60,
    GBase400ER8 = 61,
    GBase400ZR = 62,
    GAUI400_16 = 63,
    GAUI400_8 = 64,
    XBee = 65,
    ZWave = 66,
    Zigbee = 67,
    CXP100 = 68,
    CXP120 = 69,
    UNRECOGNIZED = -1
}
export declare function layer1FromJSON(object: any): Layer1;
export declare function layer1ToJSON(object: Layer1): string;
export declare enum ConnectorKind {
    ConnectorKind_Undefined = 0,
    RJ45 = 1,
    SFP = 2,
    QSFP = 3,
    SFPP = 4,
    QSFPP = 5,
    SFP28 = 6,
    QSFP28 = 7,
    CXP = 8,
    LC = 9,
    MPO = 10,
    SFP56 = 11,
    QSFP56 = 12,
    QSFPDD = 13,
    UNRECOGNIZED = -1
}
export declare function connectorKindFromJSON(object: any): ConnectorKind;
export declare function connectorKindToJSON(object: ConnectorKind): string;
export declare enum DiskFormFactor {
    DiskFormFactor_Undefined = 0,
    HDD35 = 1,
    HDD25 = 2,
    SSD35 = 3,
    SSD25 = 4,
    MSATA = 5,
    M2_2216 = 6,
    M2_2226 = 7,
    M2_2230 = 8,
    M2_2238 = 9,
    M2_2242 = 10,
    M2_2260 = 11,
    M2_2280 = 12,
    M2_22110 = 13,
    U2 = 14,
    EMMC = 15,
    EUSB = 16,
    UNRECOGNIZED = -1
}
export declare function diskFormFactorFromJSON(object: any): DiskFormFactor;
export declare function diskFormFactorToJSON(object: DiskFormFactor): string;
export declare enum DiskInterface {
    DiskInterface_Undefined = 0,
    SATA1 = 1,
    SATA2 = 2,
    SATA3 = 3,
    NVMEx2 = 4,
    NVMEx4 = 5,
    MMC = 6,
    SD = 7,
    USB = 8,
    SAS = 9,
    VirtioBlock = 10,
    UNRECOGNIZED = -1
}
export declare function diskInterfaceFromJSON(object: any): DiskInterface;
export declare function diskInterfaceToJSON(object: DiskInterface): string;
export declare enum CableKind {
    CableKind_Undefined = 0,
    Cat5 = 1,
    Cat5e = 2,
    Cat6 = 3,
    DAC = 4,
    DACBreakout = 5,
    FiberLC = 6,
    FiberMPOTrunk = 7,
    FiberMPOBreakout = 8,
    AOC = 9,
    AOCBreakout = 10,
    GenericBreakout = 11,
    UNRECOGNIZED = -1
}
export declare function cableKindFromJSON(object: any): CableKind;
export declare function cableKindToJSON(object: CableKind): string;
export declare enum AllocMode {
    AllocMode_Undefined = 0,
    NoAlloc = 1,
    Net = 2,
    NetEmu = 3,
    Filesystem = 4,
    BlockDevice = 5,
    Physical = 6,
    Virtual = 7,
    Infrapod = 8,
    Physim = 9,
    UNRECOGNIZED = -1
}
export declare function allocModeFromJSON(object: any): AllocMode;
export declare function allocModeToJSON(object: AllocMode): string;
export declare enum Role {
    Role_unknown = 0,
    TbNode = 1,
    InfraServer = 2,
    ConsoleServer = 3,
    PowerController = 4,
    NetworkEmulator = 5,
    XpSwitch = 6,
    InfraSwitch = 7,
    MgmtSwitch = 8,
    Gateway = 9,
    Leaf = 10,
    Fabric = 11,
    Spine = 12,
    StorageServer = 13,
    InfrapodServer = 14,
    EtcdHost = 15,
    MinIOHost = 16,
    RexHost = 17,
    DriverHost = 18,
    ManagerHost = 19,
    CommanderHost = 20,
    SledHost = 21,
    RallyHost = 22,
    PDU = 23,
    EmuSwitch = 24,
    Hypervisor = 25,
    PhysicsSimulator = 26,
    Stem = 27,
    BorderGateway = 28,
    OpsServer = 29,
    UNRECOGNIZED = -1
}
export declare function roleFromJSON(object: any): Role;
export declare function roleToJSON(object: Role): string;
export declare enum LinkRole {
    LinkRole_Unspecified = 0,
    InfraLink = 1,
    XpLink = 2,
    Tor = 3,
    EmuLink = 4,
    MgmtLink = 5,
    GatewayLink = 6,
    SimLink = 7,
    HarborEndpoint = 8,
    UNRECOGNIZED = -1
}
export declare function linkRoleFromJSON(object: any): LinkRole;
export declare function linkRoleToJSON(object: LinkRole): string;
export declare enum DiskRole {
    DiskRole_Unspecified = 0,
    System = 1,
    MinIO = 2,
    Etcd = 3,
    Rally = 4,
    Mariner = 5,
    UNRECOGNIZED = -1
}
export declare function diskRoleFromJSON(object: any): DiskRole;
export declare function diskRoleToJSON(object: DiskRole): string;
export declare enum Operator {
    Op_Undefined = 0,
    LT = 1,
    LE = 2,
    GT = 3,
    GE = 4,
    EQ = 5,
    NE = 6,
    UNRECOGNIZED = -1
}
export declare function operatorFromJSON(object: any): Operator;
export declare function operatorToJSON(object: Operator): string;
export interface Facility {
    id: string;
    fqdn: string;
    resources: Resource[];
    cables: Cable[];
}
export interface Network {
    id: string;
    nodes: Node[];
    links: Link[];
    parameters: ExperimentParameters | undefined;
}
export interface ExperimentParameters {
    routing: RoutingConstraint | undefined;
    addressing: AddressingConstraint | undefined;
    hypervisors: string[];
    simulators: string[];
    emulators: string[];
    /** If true, resolve experiment names before infra names */
    experimentnetresolution: boolean;
    emulation: EmulationConstraint | undefined;
}
export interface Properties {
    keyvalues: {
        [key: string]: Properties_Values;
    };
}
export interface Properties_Values {
    values: string[];
}
export interface Properties_KeyvaluesEntry {
    key: string;
    value: Properties_Values | undefined;
}
export interface Node {
    id: string;
    sockets: Socket[];
    proc: ProcSpec | undefined;
    memory: MemorySpec | undefined;
    NIC: NICSpec | undefined;
    disks: DiskSpec | undefined;
    metal: BoolConstraint | undefined;
    virt: BoolConstraint | undefined;
    image: StringConstraint | undefined;
    /** TODO: should be enum? */
    platform: StringConstraint | undefined;
    viz: Visualization | undefined;
    conf: NodeConfig | undefined;
    /** Run time and post-publish properties */
    properties: Properties | undefined;
    host: StringConstraint | undefined;
}
export interface NodeConfig {
    routes: RouteConfig[];
}
export interface RouteConfig {
    src: string;
    gw: string;
    dst: string;
}
export interface Visualization {
    color: string;
    size: number;
}
export interface Ref {
    element: string;
    index: number;
    subref: Subref | undefined;
}
export interface Subref {
    index: number;
}
export interface Socket {
    index: number;
    addrs: string[];
    endpoint: Ref | undefined;
    port: PortSpec | undefined;
}
export interface RouteConf {
    src: string;
    gw: string;
    dst: string;
}
export interface Link {
    id: string;
    latency: Uint64Constraint | undefined;
    capacity: Uint64Constraint | undefined;
    loss: FloatConstraint | undefined;
    endpoints: Endpoint[];
    kind: LinkKindConstraint | undefined;
    layer: Uint64Constraint | undefined;
    /** Run time and post-publish properties */
    properties: Properties | undefined;
}
export declare enum Link_Kind {
    unspec = 0,
    ethernet = 1,
    wifi = 2,
    wifi_ac = 3,
    wifi_ax = 4,
    lte_4g = 5,
    lte_5g = 6,
    UNRECOGNIZED = -1
}
export declare function link_KindFromJSON(object: any): Link_Kind;
export declare function link_KindToJSON(object: Link_Kind): string;
export interface Endpoint {
    index: number;
    socket: Ref | undefined;
    connector: ConnectorSpec | undefined;
}
export interface Phyo {
    id: string;
    eqtns: string[];
}
export interface Variable {
}
export interface Bond {
}
export interface Coupling {
}
export interface Sensor {
    id: string;
    var: string;
    rate: number;
    target: string;
    tag: number;
}
export interface Actuator {
    id: string;
    var: string;
    dynamicLimits: Limits | undefined;
    staticLimits: Limits | undefined;
    tag: number;
}
export interface Limits {
    lower: number;
    upper: number;
}
export interface ProductInfo {
    Manufacturer: string;
    Model: string;
    SKU: string;
    Integrated: boolean;
    cost: number;
}
export interface Resource {
    id: string;
    facility: string;
    procs: Proc[];
    memory: Dimm[];
    NICs: NIC[];
    disks: Disk[];
    alloc: AllocMode[];
    roles: Role[];
    firmware: Firmware | undefined;
    OS: OSConfig | undefined;
    productInfo: ProductInfo | undefined;
    TPA: number;
    ipmi?: BMC | undefined;
    relayboard?: RelayBoard | undefined;
    pdu?: PowerDistributionUnit | undefined;
    raven?: Raven | undefined;
    leafConfig: LeafConfig | undefined;
    /** indexed by vrf */
    infranetAddr: {
        [key: string]: AddressList;
    };
}
export interface Resource_InfranetAddrEntry {
    key: string;
    value: AddressList | undefined;
}
export interface BMC {
    host: string;
    kind: BMC_Kind;
}
export declare enum BMC_Kind {
    IPMI = 0,
    RedFish = 1,
    IPMIRedFish = 2,
    UNRECOGNIZED = -1
}
export declare function bMC_KindFromJSON(object: any): BMC_Kind;
export declare function bMC_KindToJSON(object: BMC_Kind): string;
export interface RelayBoard {
    host: string;
    index: number;
    kind: RelayBoard_Kind;
}
export declare enum RelayBoard_Kind {
    NCDFusion = 0,
    UNRECOGNIZED = -1
}
export declare function relayBoard_KindFromJSON(object: any): RelayBoard_Kind;
export declare function relayBoard_KindToJSON(object: RelayBoard_Kind): string;
export interface PowerDistributionUnit {
    host: string;
    outlets: number[];
    kind: PowerDistributionUnit_Kind;
}
export declare enum PowerDistributionUnit_Kind {
    APC = 0,
    UNRECOGNIZED = -1
}
export declare function powerDistributionUnit_KindFromJSON(object: any): PowerDistributionUnit_Kind;
export declare function powerDistributionUnit_KindToJSON(object: PowerDistributionUnit_Kind): string;
export interface Raven {
    host: string;
}
export interface Firmware {
    kind: Firmware_Kind;
}
export declare enum Firmware_Kind {
    Undefined = 0,
    UEFI = 1,
    BIOS = 2,
    UNRECOGNIZED = -1
}
export declare function firmware_KindFromJSON(object: any): Firmware_Kind;
export declare function firmware_KindToJSON(object: Firmware_Kind): string;
export interface ResourceAllocation {
    resource: string;
    facility: string;
    mzid: string;
    node: string;
    procs: ProcAllocation | undefined;
    memory: MemoryAllocation | undefined;
    NICs: NICsAllocation | undefined;
    disks: DisksAllocation | undefined;
    model: Node | undefined;
    revision: number;
    virtual: boolean;
}
export interface CableAllocation {
    cable: string;
    facility: string;
    mzid: string;
    link: string;
    capacity: number;
    revision: number;
}
export interface AddressList {
    list: string[];
}
export interface LeafConfig {
    serviceAddressBlocks: AddressList | undefined;
    tenantAddressBlocks: AddressList | undefined;
    /** interface -> address block */
    infrapodAddressBlocks: {
        [key: string]: AddressList;
    };
}
export interface LeafConfig_InfrapodAddressBlocksEntry {
    key: string;
    value: AddressList | undefined;
}
export interface OSConfig {
    BGP: BGPRouterConfig[];
    bridge: BridgeConfig[];
    VLAN: VLANConfig[];
    /** map key is VxLAN VNI */
    serviceEndpoints: {
        [key: number]: ServiceEndpoint;
    };
    append: string;
    rootdev: string;
    defaultImage: string;
}
export interface OSConfig_ServiceEndpointsEntry {
    key: number;
    value: ServiceEndpoint | undefined;
}
export interface ServiceEndpoint {
    address: string;
}
export interface VLANConfig {
    device: string;
    vid: number;
    addrs: string[];
    role: LinkRole;
}
export interface InterfaceConfig {
    address: string;
    interface: string;
    role: LinkRole;
}
export interface BGPRouterConfig {
    vrf: string;
    ASN: number;
    /** XXX this is not really the way of things */
    Interfaces: InterfaceConfig[];
    EVPN: EVPNConfig | undefined;
}
export interface EVPNConfig {
    TunnelEndpoints: InterfaceConfig[];
}
export interface BridgeConfig {
    name: string;
    vlanAware: boolean;
    addrs: string[];
    role: LinkRole;
}
export interface Breakout {
    index: number;
    radix: number;
}
export interface PortBond {
    name: string;
}
/** SRIOV data */
export interface sriovPf {
    MaxVFs: number;
}
export interface sriovVf {
    /** from 0 to PF's (maxVFs-1) */
    VfIndex: number;
}
export interface SRIOV {
    Pf?: sriovPf | undefined;
    Vf?: sriovVf | undefined;
    /**
     * the following two are for quick lookup of PF ports in:
     * Resource.NICs[PfNi].Ports[PfPi] -> Port
     * Node.Nic[PfNi][PfPi] -> PortSpec
     * ResourceAllocation.NICs.Alloc[PfNi].Alloc[PfPi] -> PortAllocation
     */
    PfNi: number;
    PfPi: number;
}
export interface Port {
    parent: string;
    /** starting from 0 for all ports (excl breakouts) of all NICs within a Resource */
    index: number;
    protocols: Layer1[];
    capacity: number;
    mac: string;
    formFactor: ConnectorKind;
    connector: Ref | undefined;
    role: LinkRole;
    TPA: number;
    queues: number;
    breakout: Breakout | undefined;
    bond: PortBond | undefined;
    name: string;
    sriov: SRIOV | undefined;
}
export interface PortAllocation {
    name: string;
    mac: string;
    /**
     * for VFs: the bandwidth allocated
     * for PFs: the aggregate allocated bandwidth (across all allocated vfs)
     */
    capacity: number;
    /** when describing VM, name can be eth0, eth1, etc. while VfName will be the host's actual vf dev */
    VfName: string;
    /** for PFs: this port has indirect (VF) allocations */
    VfAlloc: boolean;
}
export interface PortRef {
    mac: string;
}
export interface PortSpec {
    protocols: Layer1[];
    capacity: Uint64Constraint | undefined;
    formFactor: ConnectorKindConstraint | undefined;
    queues: Uint64Constraint | undefined;
    model: NICModelConstraint | undefined;
    DPDK: BoolConstraint | undefined;
    SriovVF: BoolConstraint | undefined;
}
export interface Cable {
    id: string;
    facility: string;
    kind: CableKind;
    ends: End[];
    productInfo: ProductInfo | undefined;
}
export interface End {
    connectors: Connector[];
}
export interface Connector {
    parent: string;
    index: number;
    kind: ConnectorKind;
    protocols: Layer1[];
    capacity: number;
    Port: Ref | undefined;
    breakout: Breakout | undefined;
}
export interface ConnectorSpec {
    kind: ConnectorKindConstraint | undefined;
    protocols: Layer1[];
    capacity: number;
}
export interface Proc {
    isa: ISA;
    family: string;
    BaseFrequency: number;
    L2: number;
    cores: number;
    threads: number;
    tdp: number;
    hyperthreaded: boolean;
    productInfo: ProductInfo | undefined;
    /** marked as not-available for the testbed use */
    reservedCores: number;
}
export interface SocketAllocation {
    cores: number;
}
export interface ProcAllocation {
    alloc: {
        [key: number]: SocketAllocation;
    };
}
export interface ProcAllocation_AllocEntry {
    key: number;
    value: SocketAllocation | undefined;
}
export interface ProcSpec {
    isa: ISAConstraint | undefined;
    family: StringConstraint | undefined;
    BaseFrequency: Uint64Constraint | undefined;
    L2: Uint64Constraint | undefined;
    cores: Uint32Constraint | undefined;
    threads: Uint32Constraint | undefined;
    tdp: Uint32Constraint | undefined;
    sockets: Uint32Constraint | undefined;
    hyperthreaded: BoolConstraint | undefined;
}
export interface Dimm {
    type: MemoryType;
    /** total */
    capacity: number;
    frequency: number;
    productInfo: ProductInfo | undefined;
    /** marked as not-available for the testbed use */
    reservedCapacity: number;
}
export interface DimmAllocation {
    capacity: number;
}
export interface MemoryAllocation {
    alloc: {
        [key: number]: DimmAllocation;
    };
}
export interface MemoryAllocation_AllocEntry {
    key: number;
    value: DimmAllocation | undefined;
}
export interface MemorySpec {
    type: MemoryTypeConstraint | undefined;
    capacity: Uint64Constraint | undefined;
    frequency: Uint64Constraint | undefined;
    modules: Uint64Constraint | undefined;
}
export interface NIC {
    ports: Port[];
    startingIndex: number;
    kind: NICKind;
    productInfo: ProductInfo | undefined;
    DPDK: boolean;
    model: NICModel;
}
export interface NICSpec {
    ports: PortSpec[];
}
export interface NICAllocation {
    alloc: {
        [key: number]: PortAllocation;
    };
}
export interface NICAllocation_AllocEntry {
    key: number;
    value: PortAllocation | undefined;
}
export interface NICsAllocation {
    alloc: {
        [key: number]: NICAllocation;
    };
}
export interface NICsAllocation_AllocEntry {
    key: number;
    value: NICAllocation | undefined;
}
export interface Disk {
    capacity: number;
    formFactor: DiskFormFactor;
    diskInterface: DiskInterface;
    productInfo: ProductInfo | undefined;
    roles: DiskRole[];
    NVMEControllerIndex: number;
}
export interface DiskAllocation {
    capacity: number;
}
export interface DisksAllocation {
    alloc: {
        [key: number]: DiskAllocation;
    };
}
export interface DisksAllocation_AllocEntry {
    key: number;
    value: DiskAllocation | undefined;
}
export interface DiskSpec {
    capacity: Uint64Constraint | undefined;
    formFactor: DiskFormFactorConstraint | undefined;
    diskInterface: DiskInterfaceConstraint | undefined;
    disks: Uint64Constraint | undefined;
}
export interface BoolConstraint {
    op: Operator;
    value: boolean;
}
export interface StringConstraint {
    op: Operator;
    value: string;
}
export interface Uint64Constraint {
    op: Operator;
    value: number;
}
export interface LinkKindConstraint {
    op: Operator;
    value: Link_Kind;
}
export interface Uint32Constraint {
    op: Operator;
    value: number;
}
export interface ISAConstraint {
    op: Operator;
    value: ISA;
}
export interface MemoryTypeConstraint {
    op: Operator;
    value: MemoryType;
}
export interface NICModelConstraint {
    op: Operator;
    value: NICModel;
}
export interface DiskFormFactorConstraint {
    op: Operator;
    value: DiskFormFactor;
}
export interface DiskInterfaceConstraint {
    op: Operator;
    value: DiskInterface;
}
export interface ConnectorKindConstraint {
    op: Operator;
    value: ConnectorKind;
}
export interface FloatConstraint {
    op: Operator;
    value: number;
}
export interface RoutingConstraint {
    op: Operator;
    value: Routing;
}
export interface AddressingConstraint {
    op: Operator;
    value: Addressing;
}
export interface EmulationConstraint {
    op: Operator;
    value: Emulation;
}
export declare const Facility: {
    encode(message: Facility, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Facility;
    fromJSON(object: any): Facility;
    toJSON(message: Facility): unknown;
    create<I extends {
        id?: string;
        fqdn?: string;
        resources?: {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[];
        cables?: {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[];
    } & {
        id?: string;
        fqdn?: string;
        resources?: {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[] & ({
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        } & {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[] & ({
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            } & {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K in Exclude<keyof I["resources"][number]["procs"][number]["productInfo"], keyof ProductInfo>]: never; };
                reservedCores?: number;
            } & { [K_1 in Exclude<keyof I["resources"][number]["procs"][number], keyof Proc>]: never; })[] & { [K_2 in Exclude<keyof I["resources"][number]["procs"], keyof {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[]>]: never; };
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[] & ({
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            } & {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_3 in Exclude<keyof I["resources"][number]["memory"][number]["productInfo"], keyof ProductInfo>]: never; };
                reservedCapacity?: number;
            } & { [K_4 in Exclude<keyof I["resources"][number]["memory"][number], keyof Dimm>]: never; })[] & { [K_5 in Exclude<keyof I["resources"][number]["memory"], keyof {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[]>]: never; };
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[] & ({
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            } & {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[] & ({
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                } & {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[] & Layer1[] & { [K_6 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_7 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                    } & { [K_8 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof Ref>]: never; };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    } & {
                        index?: number;
                        radix?: number;
                    } & { [K_9 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof Breakout>]: never; };
                    bond?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & { [K_10 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    } & {
                        Pf?: {
                            MaxVFs?: number;
                        } & {
                            MaxVFs?: number;
                        } & { [K_11 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                        Vf?: {
                            VfIndex?: number;
                        } & {
                            VfIndex?: number;
                        } & { [K_12 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                        PfNi?: number;
                        PfPi?: number;
                    } & { [K_13 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof SRIOV>]: never; };
                } & { [K_14 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"][number], keyof Port>]: never; })[] & { [K_15 in Exclude<keyof I["resources"][number]["NICs"][number]["ports"], keyof {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[]>]: never; };
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_16 in Exclude<keyof I["resources"][number]["NICs"][number]["productInfo"], keyof ProductInfo>]: never; };
                DPDK?: boolean;
                model?: NICModel;
            } & { [K_17 in Exclude<keyof I["resources"][number]["NICs"][number], keyof NIC>]: never; })[] & { [K_18 in Exclude<keyof I["resources"][number]["NICs"], keyof {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[]>]: never; };
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[] & ({
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            } & {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_19 in Exclude<keyof I["resources"][number]["disks"][number]["productInfo"], keyof ProductInfo>]: never; };
                roles?: DiskRole[] & DiskRole[] & { [K_20 in Exclude<keyof I["resources"][number]["disks"][number]["roles"], keyof DiskRole[]>]: never; };
                NVMEControllerIndex?: number;
            } & { [K_21 in Exclude<keyof I["resources"][number]["disks"][number], keyof Disk>]: never; })[] & { [K_22 in Exclude<keyof I["resources"][number]["disks"], keyof {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[]>]: never; };
            alloc?: AllocMode[] & AllocMode[] & { [K_23 in Exclude<keyof I["resources"][number]["alloc"], keyof AllocMode[]>]: never; };
            roles?: Role[] & Role[] & { [K_24 in Exclude<keyof I["resources"][number]["roles"], keyof Role[]>]: never; };
            firmware?: {
                kind?: Firmware_Kind;
            } & {
                kind?: Firmware_Kind;
            } & { [K_25 in Exclude<keyof I["resources"][number]["firmware"], "kind">]: never; };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            } & {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[] & ({
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                } & {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[] & ({
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & { [K_26 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_27 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[]>]: never; };
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    } & {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        } & { [K_28 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_29 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[]>]: never; };
                    } & { [K_30 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                } & { [K_31 in Exclude<keyof I["resources"][number]["OS"]["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_32 in Exclude<keyof I["resources"][number]["OS"]["BGP"], keyof {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[]>]: never; };
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[] & ({
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                } & {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[] & string[] & { [K_33 in Exclude<keyof I["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                    role?: LinkRole;
                } & { [K_34 in Exclude<keyof I["resources"][number]["OS"]["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_35 in Exclude<keyof I["resources"][number]["OS"]["bridge"], keyof {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[]>]: never; };
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[] & ({
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                } & {
                    device?: string;
                    vid?: number;
                    addrs?: string[] & string[] & { [K_36 in Exclude<keyof I["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                    role?: LinkRole;
                } & { [K_37 in Exclude<keyof I["resources"][number]["OS"]["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_38 in Exclude<keyof I["resources"][number]["OS"]["VLAN"], keyof {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[]>]: never; };
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                } & {
                    [x: number]: {
                        address?: string;
                    } & {
                        address?: string;
                    } & { [K_39 in Exclude<keyof I["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                } & { [K_40 in Exclude<keyof I["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            } & { [K_41 in Exclude<keyof I["resources"][number]["OS"], keyof OSConfig>]: never; };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_42 in Exclude<keyof I["resources"][number]["productInfo"], keyof ProductInfo>]: never; };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            } & {
                host?: string;
                kind?: BMC_Kind;
            } & { [K_43 in Exclude<keyof I["resources"][number]["ipmi"], keyof BMC>]: never; };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            } & {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            } & { [K_44 in Exclude<keyof I["resources"][number]["relayboard"], keyof RelayBoard>]: never; };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            } & {
                host?: string;
                outlets?: number[] & number[] & { [K_45 in Exclude<keyof I["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                kind?: PowerDistributionUnit_Kind;
            } & { [K_46 in Exclude<keyof I["resources"][number]["pdu"], keyof PowerDistributionUnit>]: never; };
            raven?: {
                host?: string;
            } & {
                host?: string;
            } & { [K_47 in Exclude<keyof I["resources"][number]["raven"], "host">]: never; };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                serviceAddressBlocks?: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_48 in Exclude<keyof I["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                } & { [K_49 in Exclude<keyof I["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                tenantAddressBlocks?: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_50 in Exclude<keyof I["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                } & { [K_51 in Exclude<keyof I["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_52 in Exclude<keyof I["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                    } & { [K_53 in Exclude<keyof I["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                } & { [K_54 in Exclude<keyof I["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
            } & { [K_55 in Exclude<keyof I["resources"][number]["leafConfig"], keyof LeafConfig>]: never; };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            } & {
                [x: string]: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_56 in Exclude<keyof I["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                } & { [K_57 in Exclude<keyof I["resources"][number]["infranetAddr"][string], "list">]: never; };
            } & { [K_58 in Exclude<keyof I["resources"][number]["infranetAddr"], string | number>]: never; };
        } & { [K_59 in Exclude<keyof I["resources"][number], keyof Resource>]: never; })[] & { [K_60 in Exclude<keyof I["resources"], keyof {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[]>]: never; };
        cables?: {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[] & ({
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        } & {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[] & ({
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            } & {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[] & ({
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                } & {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[] & Layer1[] & { [K_61 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_62 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                    } & { [K_63 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof Ref>]: never; };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    } & {
                        index?: number;
                        radix?: number;
                    } & { [K_64 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof Breakout>]: never; };
                } & { [K_65 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"][number], keyof Connector>]: never; })[] & { [K_66 in Exclude<keyof I["cables"][number]["ends"][number]["connectors"], keyof {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[]>]: never; };
            } & { [K_67 in Exclude<keyof I["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_68 in Exclude<keyof I["cables"][number]["ends"], keyof {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[]>]: never; };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_69 in Exclude<keyof I["cables"][number]["productInfo"], keyof ProductInfo>]: never; };
        } & { [K_70 in Exclude<keyof I["cables"][number], keyof Cable>]: never; })[] & { [K_71 in Exclude<keyof I["cables"], keyof {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[]>]: never; };
    } & { [K_72 in Exclude<keyof I, keyof Facility>]: never; }>(base?: I): Facility;
    fromPartial<I_1 extends {
        id?: string;
        fqdn?: string;
        resources?: {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[];
        cables?: {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[];
    } & {
        id?: string;
        fqdn?: string;
        resources?: {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[] & ({
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        } & {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[] & ({
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            } & {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_73 in Exclude<keyof I_1["resources"][number]["procs"][number]["productInfo"], keyof ProductInfo>]: never; };
                reservedCores?: number;
            } & { [K_74 in Exclude<keyof I_1["resources"][number]["procs"][number], keyof Proc>]: never; })[] & { [K_75 in Exclude<keyof I_1["resources"][number]["procs"], keyof {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[]>]: never; };
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[] & ({
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            } & {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_76 in Exclude<keyof I_1["resources"][number]["memory"][number]["productInfo"], keyof ProductInfo>]: never; };
                reservedCapacity?: number;
            } & { [K_77 in Exclude<keyof I_1["resources"][number]["memory"][number], keyof Dimm>]: never; })[] & { [K_78 in Exclude<keyof I_1["resources"][number]["memory"], keyof {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[]>]: never; };
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[] & ({
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            } & {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[] & ({
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                } & {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[] & Layer1[] & { [K_79 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_80 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                    } & { [K_81 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["connector"], keyof Ref>]: never; };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    } & {
                        index?: number;
                        radix?: number;
                    } & { [K_82 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["breakout"], keyof Breakout>]: never; };
                    bond?: {
                        name?: string;
                    } & {
                        name?: string;
                    } & { [K_83 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    } & {
                        Pf?: {
                            MaxVFs?: number;
                        } & {
                            MaxVFs?: number;
                        } & { [K_84 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                        Vf?: {
                            VfIndex?: number;
                        } & {
                            VfIndex?: number;
                        } & { [K_85 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                        PfNi?: number;
                        PfPi?: number;
                    } & { [K_86 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number]["sriov"], keyof SRIOV>]: never; };
                } & { [K_87 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"][number], keyof Port>]: never; })[] & { [K_88 in Exclude<keyof I_1["resources"][number]["NICs"][number]["ports"], keyof {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[]>]: never; };
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_89 in Exclude<keyof I_1["resources"][number]["NICs"][number]["productInfo"], keyof ProductInfo>]: never; };
                DPDK?: boolean;
                model?: NICModel;
            } & { [K_90 in Exclude<keyof I_1["resources"][number]["NICs"][number], keyof NIC>]: never; })[] & { [K_91 in Exclude<keyof I_1["resources"][number]["NICs"], keyof {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[]>]: never; };
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[] & ({
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            } & {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                } & { [K_92 in Exclude<keyof I_1["resources"][number]["disks"][number]["productInfo"], keyof ProductInfo>]: never; };
                roles?: DiskRole[] & DiskRole[] & { [K_93 in Exclude<keyof I_1["resources"][number]["disks"][number]["roles"], keyof DiskRole[]>]: never; };
                NVMEControllerIndex?: number;
            } & { [K_94 in Exclude<keyof I_1["resources"][number]["disks"][number], keyof Disk>]: never; })[] & { [K_95 in Exclude<keyof I_1["resources"][number]["disks"], keyof {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[]>]: never; };
            alloc?: AllocMode[] & AllocMode[] & { [K_96 in Exclude<keyof I_1["resources"][number]["alloc"], keyof AllocMode[]>]: never; };
            roles?: Role[] & Role[] & { [K_97 in Exclude<keyof I_1["resources"][number]["roles"], keyof Role[]>]: never; };
            firmware?: {
                kind?: Firmware_Kind;
            } & {
                kind?: Firmware_Kind;
            } & { [K_98 in Exclude<keyof I_1["resources"][number]["firmware"], "kind">]: never; };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            } & {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[] & ({
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                } & {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[] & ({
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & { [K_99 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_100 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number]["Interfaces"], keyof {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[]>]: never; };
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    } & {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[] & ({
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        } & {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        } & { [K_101 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_102 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[]>]: never; };
                    } & { [K_103 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
                } & { [K_104 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_105 in Exclude<keyof I_1["resources"][number]["OS"]["BGP"], keyof {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[]>]: never; };
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[] & ({
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                } & {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[] & string[] & { [K_106 in Exclude<keyof I_1["resources"][number]["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                    role?: LinkRole;
                } & { [K_107 in Exclude<keyof I_1["resources"][number]["OS"]["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_108 in Exclude<keyof I_1["resources"][number]["OS"]["bridge"], keyof {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[]>]: never; };
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[] & ({
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                } & {
                    device?: string;
                    vid?: number;
                    addrs?: string[] & string[] & { [K_109 in Exclude<keyof I_1["resources"][number]["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                    role?: LinkRole;
                } & { [K_110 in Exclude<keyof I_1["resources"][number]["OS"]["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_111 in Exclude<keyof I_1["resources"][number]["OS"]["VLAN"], keyof {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[]>]: never; };
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                } & {
                    [x: number]: {
                        address?: string;
                    } & {
                        address?: string;
                    } & { [K_112 in Exclude<keyof I_1["resources"][number]["OS"]["serviceEndpoints"][number], "address">]: never; };
                } & { [K_113 in Exclude<keyof I_1["resources"][number]["OS"]["serviceEndpoints"], number>]: never; };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            } & { [K_114 in Exclude<keyof I_1["resources"][number]["OS"], keyof OSConfig>]: never; };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_115 in Exclude<keyof I_1["resources"][number]["productInfo"], keyof ProductInfo>]: never; };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            } & {
                host?: string;
                kind?: BMC_Kind;
            } & { [K_116 in Exclude<keyof I_1["resources"][number]["ipmi"], keyof BMC>]: never; };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            } & {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            } & { [K_117 in Exclude<keyof I_1["resources"][number]["relayboard"], keyof RelayBoard>]: never; };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            } & {
                host?: string;
                outlets?: number[] & number[] & { [K_118 in Exclude<keyof I_1["resources"][number]["pdu"]["outlets"], keyof number[]>]: never; };
                kind?: PowerDistributionUnit_Kind;
            } & { [K_119 in Exclude<keyof I_1["resources"][number]["pdu"], keyof PowerDistributionUnit>]: never; };
            raven?: {
                host?: string;
            } & {
                host?: string;
            } & { [K_120 in Exclude<keyof I_1["resources"][number]["raven"], "host">]: never; };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            } & {
                serviceAddressBlocks?: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_121 in Exclude<keyof I_1["resources"][number]["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
                } & { [K_122 in Exclude<keyof I_1["resources"][number]["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
                tenantAddressBlocks?: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_123 in Exclude<keyof I_1["resources"][number]["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
                } & { [K_124 in Exclude<keyof I_1["resources"][number]["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                } & {
                    [x: string]: {
                        list?: string[];
                    } & {
                        list?: string[] & string[] & { [K_125 in Exclude<keyof I_1["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                    } & { [K_126 in Exclude<keyof I_1["resources"][number]["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
                } & { [K_127 in Exclude<keyof I_1["resources"][number]["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
            } & { [K_128 in Exclude<keyof I_1["resources"][number]["leafConfig"], keyof LeafConfig>]: never; };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            } & {
                [x: string]: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_129 in Exclude<keyof I_1["resources"][number]["infranetAddr"][string]["list"], keyof string[]>]: never; };
                } & { [K_130 in Exclude<keyof I_1["resources"][number]["infranetAddr"][string], "list">]: never; };
            } & { [K_131 in Exclude<keyof I_1["resources"][number]["infranetAddr"], string | number>]: never; };
        } & { [K_132 in Exclude<keyof I_1["resources"][number], keyof Resource>]: never; })[] & { [K_133 in Exclude<keyof I_1["resources"], keyof {
            id?: string;
            facility?: string;
            procs?: {
                isa?: ISA;
                family?: string;
                BaseFrequency?: number;
                L2?: number;
                cores?: number;
                threads?: number;
                tdp?: number;
                hyperthreaded?: boolean;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCores?: number;
            }[];
            memory?: {
                type?: MemoryType;
                capacity?: number;
                frequency?: number;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                reservedCapacity?: number;
            }[];
            NICs?: {
                ports?: {
                    parent?: string;
                    index?: number;
                    protocols?: Layer1[];
                    capacity?: number;
                    mac?: string;
                    formFactor?: ConnectorKind;
                    connector?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    role?: LinkRole;
                    TPA?: number;
                    queues?: number;
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                    bond?: {
                        name?: string;
                    };
                    name?: string;
                    sriov?: {
                        Pf?: {
                            MaxVFs?: number;
                        };
                        Vf?: {
                            VfIndex?: number;
                        };
                        PfNi?: number;
                        PfPi?: number;
                    };
                }[];
                startingIndex?: number;
                kind?: NICKind;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                DPDK?: boolean;
                model?: NICModel;
            }[];
            disks?: {
                capacity?: number;
                formFactor?: DiskFormFactor;
                diskInterface?: DiskInterface;
                productInfo?: {
                    Manufacturer?: string;
                    Model?: string;
                    SKU?: string;
                    Integrated?: boolean;
                    cost?: number;
                };
                roles?: DiskRole[];
                NVMEControllerIndex?: number;
            }[];
            alloc?: AllocMode[];
            roles?: Role[];
            firmware?: {
                kind?: Firmware_Kind;
            };
            OS?: {
                BGP?: {
                    vrf?: string;
                    ASN?: number;
                    Interfaces?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                    EVPN?: {
                        TunnelEndpoints?: {
                            address?: string;
                            interface?: string;
                            role?: LinkRole;
                        }[];
                    };
                }[];
                bridge?: {
                    name?: string;
                    vlanAware?: boolean;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                VLAN?: {
                    device?: string;
                    vid?: number;
                    addrs?: string[];
                    role?: LinkRole;
                }[];
                serviceEndpoints?: {
                    [x: number]: {
                        address?: string;
                    };
                };
                append?: string;
                rootdev?: string;
                defaultImage?: string;
            };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            TPA?: number;
            ipmi?: {
                host?: string;
                kind?: BMC_Kind;
            };
            relayboard?: {
                host?: string;
                index?: number;
                kind?: RelayBoard_Kind;
            };
            pdu?: {
                host?: string;
                outlets?: number[];
                kind?: PowerDistributionUnit_Kind;
            };
            raven?: {
                host?: string;
            };
            leafConfig?: {
                serviceAddressBlocks?: {
                    list?: string[];
                };
                tenantAddressBlocks?: {
                    list?: string[];
                };
                infrapodAddressBlocks?: {
                    [x: string]: {
                        list?: string[];
                    };
                };
            };
            infranetAddr?: {
                [x: string]: {
                    list?: string[];
                };
            };
        }[]>]: never; };
        cables?: {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[] & ({
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        } & {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[] & ({
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            } & {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[] & ({
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                } & {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[] & Layer1[] & { [K_134 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    } & {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        } & {
                            index?: number;
                        } & { [K_135 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                    } & { [K_136 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"][number]["Port"], keyof Ref>]: never; };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    } & {
                        index?: number;
                        radix?: number;
                    } & { [K_137 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"][number]["breakout"], keyof Breakout>]: never; };
                } & { [K_138 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"][number], keyof Connector>]: never; })[] & { [K_139 in Exclude<keyof I_1["cables"][number]["ends"][number]["connectors"], keyof {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[]>]: never; };
            } & { [K_140 in Exclude<keyof I_1["cables"][number]["ends"][number], "connectors">]: never; })[] & { [K_141 in Exclude<keyof I_1["cables"][number]["ends"], keyof {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[]>]: never; };
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_142 in Exclude<keyof I_1["cables"][number]["productInfo"], keyof ProductInfo>]: never; };
        } & { [K_143 in Exclude<keyof I_1["cables"][number], keyof Cable>]: never; })[] & { [K_144 in Exclude<keyof I_1["cables"], keyof {
            id?: string;
            facility?: string;
            kind?: CableKind;
            ends?: {
                connectors?: {
                    parent?: string;
                    index?: number;
                    kind?: ConnectorKind;
                    protocols?: Layer1[];
                    capacity?: number;
                    Port?: {
                        element?: string;
                        index?: number;
                        subref?: {
                            index?: number;
                        };
                    };
                    breakout?: {
                        index?: number;
                        radix?: number;
                    };
                }[];
            }[];
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
        }[]>]: never; };
    } & { [K_145 in Exclude<keyof I_1, keyof Facility>]: never; }>(object: I_1): Facility;
};
export declare const Network: {
    encode(message: Network, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Network;
    fromJSON(object: any): Network;
    toJSON(message: Network): unknown;
    create<I extends {
        id?: string;
        nodes?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[];
        links?: {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[];
        parameters?: {
            routing?: {
                op?: Operator;
                value?: Routing;
            };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            };
            hypervisors?: string[];
            simulators?: string[];
            emulators?: string[];
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            };
        };
    } & {
        id?: string;
        nodes?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[] & ({
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        } & {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[] & ({
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            } & {
                index?: number;
                addrs?: string[] & string[] & { [K in Exclude<keyof I["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_1 in Exclude<keyof I["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                } & { [K_2 in Exclude<keyof I["nodes"][number]["sockets"][number]["endpoint"], keyof Ref>]: never; };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_3 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_4 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_5 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_6 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_7 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_8 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_9 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_10 in Exclude<keyof I["nodes"][number]["sockets"][number]["port"], keyof PortSpec>]: never; };
            } & { [K_11 in Exclude<keyof I["nodes"][number]["sockets"][number], keyof Socket>]: never; })[] & { [K_12 in Exclude<keyof I["nodes"][number]["sockets"], keyof {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[]>]: never; };
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                } & {
                    op?: Operator;
                    value?: ISA;
                } & { [K_13 in Exclude<keyof I["nodes"][number]["proc"]["isa"], keyof ISAConstraint>]: never; };
                family?: {
                    op?: Operator;
                    value?: string;
                } & {
                    op?: Operator;
                    value?: string;
                } & { [K_14 in Exclude<keyof I["nodes"][number]["proc"]["family"], keyof StringConstraint>]: never; };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_15 in Exclude<keyof I["nodes"][number]["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
                L2?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_16 in Exclude<keyof I["nodes"][number]["proc"]["L2"], keyof Uint64Constraint>]: never; };
                cores?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_17 in Exclude<keyof I["nodes"][number]["proc"]["cores"], keyof Uint32Constraint>]: never; };
                threads?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_18 in Exclude<keyof I["nodes"][number]["proc"]["threads"], keyof Uint32Constraint>]: never; };
                tdp?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_19 in Exclude<keyof I["nodes"][number]["proc"]["tdp"], keyof Uint32Constraint>]: never; };
                sockets?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_20 in Exclude<keyof I["nodes"][number]["proc"]["sockets"], keyof Uint32Constraint>]: never; };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_21 in Exclude<keyof I["nodes"][number]["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
            } & { [K_22 in Exclude<keyof I["nodes"][number]["proc"], keyof ProcSpec>]: never; };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                } & {
                    op?: Operator;
                    value?: MemoryType;
                } & { [K_23 in Exclude<keyof I["nodes"][number]["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_24 in Exclude<keyof I["nodes"][number]["memory"]["capacity"], keyof Uint64Constraint>]: never; };
                frequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_25 in Exclude<keyof I["nodes"][number]["memory"]["frequency"], keyof Uint64Constraint>]: never; };
                modules?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_26 in Exclude<keyof I["nodes"][number]["memory"]["modules"], keyof Uint64Constraint>]: never; };
            } & { [K_27 in Exclude<keyof I["nodes"][number]["memory"], keyof MemorySpec>]: never; };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            } & {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[] & ({
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_28 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_29 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_30 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_31 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_32 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_33 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_34 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_35 in Exclude<keyof I["nodes"][number]["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_36 in Exclude<keyof I["nodes"][number]["NIC"]["ports"], keyof {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[]>]: never; };
            } & { [K_37 in Exclude<keyof I["nodes"][number]["NIC"], "ports">]: never; };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_38 in Exclude<keyof I["nodes"][number]["disks"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & { [K_39 in Exclude<keyof I["nodes"][number]["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                } & {
                    op?: Operator;
                    value?: DiskInterface;
                } & { [K_40 in Exclude<keyof I["nodes"][number]["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
                disks?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_41 in Exclude<keyof I["nodes"][number]["disks"]["disks"], keyof Uint64Constraint>]: never; };
            } & { [K_42 in Exclude<keyof I["nodes"][number]["disks"], keyof DiskSpec>]: never; };
            metal?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_43 in Exclude<keyof I["nodes"][number]["metal"], keyof BoolConstraint>]: never; };
            virt?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_44 in Exclude<keyof I["nodes"][number]["virt"], keyof BoolConstraint>]: never; };
            image?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_45 in Exclude<keyof I["nodes"][number]["image"], keyof StringConstraint>]: never; };
            platform?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_46 in Exclude<keyof I["nodes"][number]["platform"], keyof StringConstraint>]: never; };
            viz?: {
                color?: string;
                size?: number;
            } & {
                color?: string;
                size?: number;
            } & { [K_47 in Exclude<keyof I["nodes"][number]["viz"], keyof Visualization>]: never; };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            } & {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[] & ({
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & {
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & { [K_48 in Exclude<keyof I["nodes"][number]["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_49 in Exclude<keyof I["nodes"][number]["conf"]["routes"], keyof {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[]>]: never; };
            } & { [K_50 in Exclude<keyof I["nodes"][number]["conf"], "routes">]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_51 in Exclude<keyof I["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_52 in Exclude<keyof I["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_53 in Exclude<keyof I["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_54 in Exclude<keyof I["nodes"][number]["properties"], "keyvalues">]: never; };
            host?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_55 in Exclude<keyof I["nodes"][number]["host"], keyof StringConstraint>]: never; };
        } & { [K_56 in Exclude<keyof I["nodes"][number], keyof Node>]: never; })[] & { [K_57 in Exclude<keyof I["nodes"], keyof {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[]>]: never; };
        links?: {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[] & ({
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        } & {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_58 in Exclude<keyof I["links"][number]["latency"], keyof Uint64Constraint>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_59 in Exclude<keyof I["links"][number]["capacity"], keyof Uint64Constraint>]: never; };
            loss?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_60 in Exclude<keyof I["links"][number]["loss"], keyof FloatConstraint>]: never; };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[] & ({
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            } & {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_61 in Exclude<keyof I["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                } & { [K_62 in Exclude<keyof I["links"][number]["endpoints"][number]["socket"], keyof Ref>]: never; };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                } & {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_63 in Exclude<keyof I["links"][number]["endpoints"][number]["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
                    protocols?: Layer1[] & Layer1[] & { [K_64 in Exclude<keyof I["links"][number]["endpoints"][number]["connector"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                } & { [K_65 in Exclude<keyof I["links"][number]["endpoints"][number]["connector"], keyof ConnectorSpec>]: never; };
            } & { [K_66 in Exclude<keyof I["links"][number]["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_67 in Exclude<keyof I["links"][number]["endpoints"], keyof {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[]>]: never; };
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            } & {
                op?: Operator;
                value?: Link_Kind;
            } & { [K_68 in Exclude<keyof I["links"][number]["kind"], keyof LinkKindConstraint>]: never; };
            layer?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_69 in Exclude<keyof I["links"][number]["layer"], keyof Uint64Constraint>]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_70 in Exclude<keyof I["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_71 in Exclude<keyof I["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_72 in Exclude<keyof I["links"][number]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_73 in Exclude<keyof I["links"][number]["properties"], "keyvalues">]: never; };
        } & { [K_74 in Exclude<keyof I["links"][number], keyof Link>]: never; })[] & { [K_75 in Exclude<keyof I["links"], keyof {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[]>]: never; };
        parameters?: {
            routing?: {
                op?: Operator;
                value?: Routing;
            };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            };
            hypervisors?: string[];
            simulators?: string[];
            emulators?: string[];
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            };
        } & {
            routing?: {
                op?: Operator;
                value?: Routing;
            } & {
                op?: Operator;
                value?: Routing;
            } & { [K_76 in Exclude<keyof I["parameters"]["routing"], keyof RoutingConstraint>]: never; };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            } & {
                op?: Operator;
                value?: Addressing;
            } & { [K_77 in Exclude<keyof I["parameters"]["addressing"], keyof AddressingConstraint>]: never; };
            hypervisors?: string[] & string[] & { [K_78 in Exclude<keyof I["parameters"]["hypervisors"], keyof string[]>]: never; };
            simulators?: string[] & string[] & { [K_79 in Exclude<keyof I["parameters"]["simulators"], keyof string[]>]: never; };
            emulators?: string[] & string[] & { [K_80 in Exclude<keyof I["parameters"]["emulators"], keyof string[]>]: never; };
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            } & {
                op?: Operator;
                value?: Emulation;
            } & { [K_81 in Exclude<keyof I["parameters"]["emulation"], keyof EmulationConstraint>]: never; };
        } & { [K_82 in Exclude<keyof I["parameters"], keyof ExperimentParameters>]: never; };
    } & { [K_83 in Exclude<keyof I, keyof Network>]: never; }>(base?: I): Network;
    fromPartial<I_1 extends {
        id?: string;
        nodes?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[];
        links?: {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[];
        parameters?: {
            routing?: {
                op?: Operator;
                value?: Routing;
            };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            };
            hypervisors?: string[];
            simulators?: string[];
            emulators?: string[];
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            };
        };
    } & {
        id?: string;
        nodes?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[] & ({
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        } & {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[] & ({
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            } & {
                index?: number;
                addrs?: string[] & string[] & { [K_84 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["addrs"], keyof string[]>]: never; };
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_85 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                } & { [K_86 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["endpoint"], keyof Ref>]: never; };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_87 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_88 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_89 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_90 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_91 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_92 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_93 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_94 in Exclude<keyof I_1["nodes"][number]["sockets"][number]["port"], keyof PortSpec>]: never; };
            } & { [K_95 in Exclude<keyof I_1["nodes"][number]["sockets"][number], keyof Socket>]: never; })[] & { [K_96 in Exclude<keyof I_1["nodes"][number]["sockets"], keyof {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[]>]: never; };
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                } & {
                    op?: Operator;
                    value?: ISA;
                } & { [K_97 in Exclude<keyof I_1["nodes"][number]["proc"]["isa"], keyof ISAConstraint>]: never; };
                family?: {
                    op?: Operator;
                    value?: string;
                } & {
                    op?: Operator;
                    value?: string;
                } & { [K_98 in Exclude<keyof I_1["nodes"][number]["proc"]["family"], keyof StringConstraint>]: never; };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_99 in Exclude<keyof I_1["nodes"][number]["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
                L2?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_100 in Exclude<keyof I_1["nodes"][number]["proc"]["L2"], keyof Uint64Constraint>]: never; };
                cores?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_101 in Exclude<keyof I_1["nodes"][number]["proc"]["cores"], keyof Uint32Constraint>]: never; };
                threads?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_102 in Exclude<keyof I_1["nodes"][number]["proc"]["threads"], keyof Uint32Constraint>]: never; };
                tdp?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_103 in Exclude<keyof I_1["nodes"][number]["proc"]["tdp"], keyof Uint32Constraint>]: never; };
                sockets?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_104 in Exclude<keyof I_1["nodes"][number]["proc"]["sockets"], keyof Uint32Constraint>]: never; };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_105 in Exclude<keyof I_1["nodes"][number]["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
            } & { [K_106 in Exclude<keyof I_1["nodes"][number]["proc"], keyof ProcSpec>]: never; };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                } & {
                    op?: Operator;
                    value?: MemoryType;
                } & { [K_107 in Exclude<keyof I_1["nodes"][number]["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_108 in Exclude<keyof I_1["nodes"][number]["memory"]["capacity"], keyof Uint64Constraint>]: never; };
                frequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_109 in Exclude<keyof I_1["nodes"][number]["memory"]["frequency"], keyof Uint64Constraint>]: never; };
                modules?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_110 in Exclude<keyof I_1["nodes"][number]["memory"]["modules"], keyof Uint64Constraint>]: never; };
            } & { [K_111 in Exclude<keyof I_1["nodes"][number]["memory"], keyof MemorySpec>]: never; };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            } & {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[] & ({
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_112 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_113 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_114 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_115 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_116 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_117 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_118 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_119 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_120 in Exclude<keyof I_1["nodes"][number]["NIC"]["ports"], keyof {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[]>]: never; };
            } & { [K_121 in Exclude<keyof I_1["nodes"][number]["NIC"], "ports">]: never; };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_122 in Exclude<keyof I_1["nodes"][number]["disks"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & { [K_123 in Exclude<keyof I_1["nodes"][number]["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                } & {
                    op?: Operator;
                    value?: DiskInterface;
                } & { [K_124 in Exclude<keyof I_1["nodes"][number]["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
                disks?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_125 in Exclude<keyof I_1["nodes"][number]["disks"]["disks"], keyof Uint64Constraint>]: never; };
            } & { [K_126 in Exclude<keyof I_1["nodes"][number]["disks"], keyof DiskSpec>]: never; };
            metal?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_127 in Exclude<keyof I_1["nodes"][number]["metal"], keyof BoolConstraint>]: never; };
            virt?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_128 in Exclude<keyof I_1["nodes"][number]["virt"], keyof BoolConstraint>]: never; };
            image?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_129 in Exclude<keyof I_1["nodes"][number]["image"], keyof StringConstraint>]: never; };
            platform?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_130 in Exclude<keyof I_1["nodes"][number]["platform"], keyof StringConstraint>]: never; };
            viz?: {
                color?: string;
                size?: number;
            } & {
                color?: string;
                size?: number;
            } & { [K_131 in Exclude<keyof I_1["nodes"][number]["viz"], keyof Visualization>]: never; };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            } & {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[] & ({
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & {
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & { [K_132 in Exclude<keyof I_1["nodes"][number]["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_133 in Exclude<keyof I_1["nodes"][number]["conf"]["routes"], keyof {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[]>]: never; };
            } & { [K_134 in Exclude<keyof I_1["nodes"][number]["conf"], "routes">]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_135 in Exclude<keyof I_1["nodes"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_136 in Exclude<keyof I_1["nodes"][number]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_137 in Exclude<keyof I_1["nodes"][number]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_138 in Exclude<keyof I_1["nodes"][number]["properties"], "keyvalues">]: never; };
            host?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_139 in Exclude<keyof I_1["nodes"][number]["host"], keyof StringConstraint>]: never; };
        } & { [K_140 in Exclude<keyof I_1["nodes"][number], keyof Node>]: never; })[] & { [K_141 in Exclude<keyof I_1["nodes"], keyof {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        }[]>]: never; };
        links?: {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[] & ({
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        } & {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_142 in Exclude<keyof I_1["links"][number]["latency"], keyof Uint64Constraint>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_143 in Exclude<keyof I_1["links"][number]["capacity"], keyof Uint64Constraint>]: never; };
            loss?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_144 in Exclude<keyof I_1["links"][number]["loss"], keyof FloatConstraint>]: never; };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[] & ({
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            } & {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_145 in Exclude<keyof I_1["links"][number]["endpoints"][number]["socket"]["subref"], "index">]: never; };
                } & { [K_146 in Exclude<keyof I_1["links"][number]["endpoints"][number]["socket"], keyof Ref>]: never; };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                } & {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_147 in Exclude<keyof I_1["links"][number]["endpoints"][number]["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
                    protocols?: Layer1[] & Layer1[] & { [K_148 in Exclude<keyof I_1["links"][number]["endpoints"][number]["connector"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: number;
                } & { [K_149 in Exclude<keyof I_1["links"][number]["endpoints"][number]["connector"], keyof ConnectorSpec>]: never; };
            } & { [K_150 in Exclude<keyof I_1["links"][number]["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_151 in Exclude<keyof I_1["links"][number]["endpoints"], keyof {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[]>]: never; };
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            } & {
                op?: Operator;
                value?: Link_Kind;
            } & { [K_152 in Exclude<keyof I_1["links"][number]["kind"], keyof LinkKindConstraint>]: never; };
            layer?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_153 in Exclude<keyof I_1["links"][number]["layer"], keyof Uint64Constraint>]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_154 in Exclude<keyof I_1["links"][number]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_155 in Exclude<keyof I_1["links"][number]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_156 in Exclude<keyof I_1["links"][number]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_157 in Exclude<keyof I_1["links"][number]["properties"], "keyvalues">]: never; };
        } & { [K_158 in Exclude<keyof I_1["links"][number], keyof Link>]: never; })[] & { [K_159 in Exclude<keyof I_1["links"], keyof {
            id?: string;
            latency?: {
                op?: Operator;
                value?: number;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            loss?: {
                op?: Operator;
                value?: number;
            };
            endpoints?: {
                index?: number;
                socket?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                connector?: {
                    kind?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    protocols?: Layer1[];
                    capacity?: number;
                };
            }[];
            kind?: {
                op?: Operator;
                value?: Link_Kind;
            };
            layer?: {
                op?: Operator;
                value?: number;
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
        }[]>]: never; };
        parameters?: {
            routing?: {
                op?: Operator;
                value?: Routing;
            };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            };
            hypervisors?: string[];
            simulators?: string[];
            emulators?: string[];
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            };
        } & {
            routing?: {
                op?: Operator;
                value?: Routing;
            } & {
                op?: Operator;
                value?: Routing;
            } & { [K_160 in Exclude<keyof I_1["parameters"]["routing"], keyof RoutingConstraint>]: never; };
            addressing?: {
                op?: Operator;
                value?: Addressing;
            } & {
                op?: Operator;
                value?: Addressing;
            } & { [K_161 in Exclude<keyof I_1["parameters"]["addressing"], keyof AddressingConstraint>]: never; };
            hypervisors?: string[] & string[] & { [K_162 in Exclude<keyof I_1["parameters"]["hypervisors"], keyof string[]>]: never; };
            simulators?: string[] & string[] & { [K_163 in Exclude<keyof I_1["parameters"]["simulators"], keyof string[]>]: never; };
            emulators?: string[] & string[] & { [K_164 in Exclude<keyof I_1["parameters"]["emulators"], keyof string[]>]: never; };
            experimentnetresolution?: boolean;
            emulation?: {
                op?: Operator;
                value?: Emulation;
            } & {
                op?: Operator;
                value?: Emulation;
            } & { [K_165 in Exclude<keyof I_1["parameters"]["emulation"], keyof EmulationConstraint>]: never; };
        } & { [K_166 in Exclude<keyof I_1["parameters"], keyof ExperimentParameters>]: never; };
    } & { [K_167 in Exclude<keyof I_1, keyof Network>]: never; }>(object: I_1): Network;
};
export declare const ExperimentParameters: {
    encode(message: ExperimentParameters, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ExperimentParameters;
    fromJSON(object: any): ExperimentParameters;
    toJSON(message: ExperimentParameters): unknown;
    create<I extends {
        routing?: {
            op?: Operator;
            value?: Routing;
        };
        addressing?: {
            op?: Operator;
            value?: Addressing;
        };
        hypervisors?: string[];
        simulators?: string[];
        emulators?: string[];
        experimentnetresolution?: boolean;
        emulation?: {
            op?: Operator;
            value?: Emulation;
        };
    } & {
        routing?: {
            op?: Operator;
            value?: Routing;
        } & {
            op?: Operator;
            value?: Routing;
        } & { [K in Exclude<keyof I["routing"], keyof RoutingConstraint>]: never; };
        addressing?: {
            op?: Operator;
            value?: Addressing;
        } & {
            op?: Operator;
            value?: Addressing;
        } & { [K_1 in Exclude<keyof I["addressing"], keyof AddressingConstraint>]: never; };
        hypervisors?: string[] & string[] & { [K_2 in Exclude<keyof I["hypervisors"], keyof string[]>]: never; };
        simulators?: string[] & string[] & { [K_3 in Exclude<keyof I["simulators"], keyof string[]>]: never; };
        emulators?: string[] & string[] & { [K_4 in Exclude<keyof I["emulators"], keyof string[]>]: never; };
        experimentnetresolution?: boolean;
        emulation?: {
            op?: Operator;
            value?: Emulation;
        } & {
            op?: Operator;
            value?: Emulation;
        } & { [K_5 in Exclude<keyof I["emulation"], keyof EmulationConstraint>]: never; };
    } & { [K_6 in Exclude<keyof I, keyof ExperimentParameters>]: never; }>(base?: I): ExperimentParameters;
    fromPartial<I_1 extends {
        routing?: {
            op?: Operator;
            value?: Routing;
        };
        addressing?: {
            op?: Operator;
            value?: Addressing;
        };
        hypervisors?: string[];
        simulators?: string[];
        emulators?: string[];
        experimentnetresolution?: boolean;
        emulation?: {
            op?: Operator;
            value?: Emulation;
        };
    } & {
        routing?: {
            op?: Operator;
            value?: Routing;
        } & {
            op?: Operator;
            value?: Routing;
        } & { [K_7 in Exclude<keyof I_1["routing"], keyof RoutingConstraint>]: never; };
        addressing?: {
            op?: Operator;
            value?: Addressing;
        } & {
            op?: Operator;
            value?: Addressing;
        } & { [K_8 in Exclude<keyof I_1["addressing"], keyof AddressingConstraint>]: never; };
        hypervisors?: string[] & string[] & { [K_9 in Exclude<keyof I_1["hypervisors"], keyof string[]>]: never; };
        simulators?: string[] & string[] & { [K_10 in Exclude<keyof I_1["simulators"], keyof string[]>]: never; };
        emulators?: string[] & string[] & { [K_11 in Exclude<keyof I_1["emulators"], keyof string[]>]: never; };
        experimentnetresolution?: boolean;
        emulation?: {
            op?: Operator;
            value?: Emulation;
        } & {
            op?: Operator;
            value?: Emulation;
        } & { [K_12 in Exclude<keyof I_1["emulation"], keyof EmulationConstraint>]: never; };
    } & { [K_13 in Exclude<keyof I_1, keyof ExperimentParameters>]: never; }>(object: I_1): ExperimentParameters;
};
export declare const Properties: {
    encode(message: Properties, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Properties;
    fromJSON(object: any): Properties;
    toJSON(message: Properties): unknown;
    create<I extends {
        keyvalues?: {
            [x: string]: {
                values?: string[];
            };
        };
    } & {
        keyvalues?: {
            [x: string]: {
                values?: string[];
            };
        } & {
            [x: string]: {
                values?: string[];
            } & {
                values?: string[] & string[] & { [K in Exclude<keyof I["keyvalues"][string]["values"], keyof string[]>]: never; };
            } & { [K_1 in Exclude<keyof I["keyvalues"][string], "values">]: never; };
        } & { [K_2 in Exclude<keyof I["keyvalues"], string | number>]: never; };
    } & { [K_3 in Exclude<keyof I, "keyvalues">]: never; }>(base?: I): Properties;
    fromPartial<I_1 extends {
        keyvalues?: {
            [x: string]: {
                values?: string[];
            };
        };
    } & {
        keyvalues?: {
            [x: string]: {
                values?: string[];
            };
        } & {
            [x: string]: {
                values?: string[];
            } & {
                values?: string[] & string[] & { [K_4 in Exclude<keyof I_1["keyvalues"][string]["values"], keyof string[]>]: never; };
            } & { [K_5 in Exclude<keyof I_1["keyvalues"][string], "values">]: never; };
        } & { [K_6 in Exclude<keyof I_1["keyvalues"], string | number>]: never; };
    } & { [K_7 in Exclude<keyof I_1, "keyvalues">]: never; }>(object: I_1): Properties;
};
export declare const Properties_Values: {
    encode(message: Properties_Values, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Properties_Values;
    fromJSON(object: any): Properties_Values;
    toJSON(message: Properties_Values): unknown;
    create<I extends {
        values?: string[];
    } & {
        values?: string[] & string[] & { [K in Exclude<keyof I["values"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "values">]: never; }>(base?: I): Properties_Values;
    fromPartial<I_1 extends {
        values?: string[];
    } & {
        values?: string[] & string[] & { [K_2 in Exclude<keyof I_1["values"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "values">]: never; }>(object: I_1): Properties_Values;
};
export declare const Properties_KeyvaluesEntry: {
    encode(message: Properties_KeyvaluesEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Properties_KeyvaluesEntry;
    fromJSON(object: any): Properties_KeyvaluesEntry;
    toJSON(message: Properties_KeyvaluesEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            values?: string[];
        };
    } & {
        key?: string;
        value?: {
            values?: string[];
        } & {
            values?: string[] & string[] & { [K in Exclude<keyof I["value"]["values"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["value"], "values">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof Properties_KeyvaluesEntry>]: never; }>(base?: I): Properties_KeyvaluesEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            values?: string[];
        };
    } & {
        key?: string;
        value?: {
            values?: string[];
        } & {
            values?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["values"], keyof string[]>]: never; };
        } & { [K_4 in Exclude<keyof I_1["value"], "values">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof Properties_KeyvaluesEntry>]: never; }>(object: I_1): Properties_KeyvaluesEntry;
};
export declare const Node: {
    encode(message: Node, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Node;
    fromJSON(object: any): Node;
    toJSON(message: Node): unknown;
    create<I extends {
        id?: string;
        sockets?: {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[];
        proc?: {
            isa?: {
                op?: Operator;
                value?: ISA;
            };
            family?: {
                op?: Operator;
                value?: string;
            };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            };
            L2?: {
                op?: Operator;
                value?: number;
            };
            cores?: {
                op?: Operator;
                value?: number;
            };
            threads?: {
                op?: Operator;
                value?: number;
            };
            tdp?: {
                op?: Operator;
                value?: number;
            };
            sockets?: {
                op?: Operator;
                value?: number;
            };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            };
        };
        memory?: {
            type?: {
                op?: Operator;
                value?: MemoryType;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            frequency?: {
                op?: Operator;
                value?: number;
            };
            modules?: {
                op?: Operator;
                value?: number;
            };
        };
        NIC?: {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[];
        };
        disks?: {
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            };
            disks?: {
                op?: Operator;
                value?: number;
            };
        };
        metal?: {
            op?: Operator;
            value?: boolean;
        };
        virt?: {
            op?: Operator;
            value?: boolean;
        };
        image?: {
            op?: Operator;
            value?: string;
        };
        platform?: {
            op?: Operator;
            value?: string;
        };
        viz?: {
            color?: string;
            size?: number;
        };
        conf?: {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[];
        };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        };
        host?: {
            op?: Operator;
            value?: string;
        };
    } & {
        id?: string;
        sockets?: {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[] & ({
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        } & {
            index?: number;
            addrs?: string[] & string[] & { [K in Exclude<keyof I["sockets"][number]["addrs"], keyof string[]>]: never; };
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_1 in Exclude<keyof I["sockets"][number]["endpoint"]["subref"], "index">]: never; };
            } & { [K_2 in Exclude<keyof I["sockets"][number]["endpoint"], keyof Ref>]: never; };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                protocols?: Layer1[] & Layer1[] & { [K_3 in Exclude<keyof I["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_4 in Exclude<keyof I["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_5 in Exclude<keyof I["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                queues?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_6 in Exclude<keyof I["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                } & {
                    op?: Operator;
                    value?: NICModel;
                } & { [K_7 in Exclude<keyof I["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_8 in Exclude<keyof I["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_9 in Exclude<keyof I["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
            } & { [K_10 in Exclude<keyof I["sockets"][number]["port"], keyof PortSpec>]: never; };
        } & { [K_11 in Exclude<keyof I["sockets"][number], keyof Socket>]: never; })[] & { [K_12 in Exclude<keyof I["sockets"], keyof {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[]>]: never; };
        proc?: {
            isa?: {
                op?: Operator;
                value?: ISA;
            };
            family?: {
                op?: Operator;
                value?: string;
            };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            };
            L2?: {
                op?: Operator;
                value?: number;
            };
            cores?: {
                op?: Operator;
                value?: number;
            };
            threads?: {
                op?: Operator;
                value?: number;
            };
            tdp?: {
                op?: Operator;
                value?: number;
            };
            sockets?: {
                op?: Operator;
                value?: number;
            };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            isa?: {
                op?: Operator;
                value?: ISA;
            } & {
                op?: Operator;
                value?: ISA;
            } & { [K_13 in Exclude<keyof I["proc"]["isa"], keyof ISAConstraint>]: never; };
            family?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_14 in Exclude<keyof I["proc"]["family"], keyof StringConstraint>]: never; };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_15 in Exclude<keyof I["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
            L2?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_16 in Exclude<keyof I["proc"]["L2"], keyof Uint64Constraint>]: never; };
            cores?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_17 in Exclude<keyof I["proc"]["cores"], keyof Uint32Constraint>]: never; };
            threads?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_18 in Exclude<keyof I["proc"]["threads"], keyof Uint32Constraint>]: never; };
            tdp?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_19 in Exclude<keyof I["proc"]["tdp"], keyof Uint32Constraint>]: never; };
            sockets?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_20 in Exclude<keyof I["proc"]["sockets"], keyof Uint32Constraint>]: never; };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_21 in Exclude<keyof I["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
        } & { [K_22 in Exclude<keyof I["proc"], keyof ProcSpec>]: never; };
        memory?: {
            type?: {
                op?: Operator;
                value?: MemoryType;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            frequency?: {
                op?: Operator;
                value?: number;
            };
            modules?: {
                op?: Operator;
                value?: number;
            };
        } & {
            type?: {
                op?: Operator;
                value?: MemoryType;
            } & {
                op?: Operator;
                value?: MemoryType;
            } & { [K_23 in Exclude<keyof I["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_24 in Exclude<keyof I["memory"]["capacity"], keyof Uint64Constraint>]: never; };
            frequency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_25 in Exclude<keyof I["memory"]["frequency"], keyof Uint64Constraint>]: never; };
            modules?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_26 in Exclude<keyof I["memory"]["modules"], keyof Uint64Constraint>]: never; };
        } & { [K_27 in Exclude<keyof I["memory"], keyof MemorySpec>]: never; };
        NIC?: {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[];
        } & {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[] & ({
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                protocols?: Layer1[] & Layer1[] & { [K_28 in Exclude<keyof I["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_29 in Exclude<keyof I["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_30 in Exclude<keyof I["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                queues?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_31 in Exclude<keyof I["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                } & {
                    op?: Operator;
                    value?: NICModel;
                } & { [K_32 in Exclude<keyof I["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_33 in Exclude<keyof I["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_34 in Exclude<keyof I["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
            } & { [K_35 in Exclude<keyof I["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_36 in Exclude<keyof I["NIC"]["ports"], keyof {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[]>]: never; };
        } & { [K_37 in Exclude<keyof I["NIC"], "ports">]: never; };
        disks?: {
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            };
            disks?: {
                op?: Operator;
                value?: number;
            };
        } & {
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_38 in Exclude<keyof I["disks"]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            } & {
                op?: Operator;
                value?: DiskFormFactor;
            } & { [K_39 in Exclude<keyof I["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            } & {
                op?: Operator;
                value?: DiskInterface;
            } & { [K_40 in Exclude<keyof I["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
            disks?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_41 in Exclude<keyof I["disks"]["disks"], keyof Uint64Constraint>]: never; };
        } & { [K_42 in Exclude<keyof I["disks"], keyof DiskSpec>]: never; };
        metal?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_43 in Exclude<keyof I["metal"], keyof BoolConstraint>]: never; };
        virt?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_44 in Exclude<keyof I["virt"], keyof BoolConstraint>]: never; };
        image?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_45 in Exclude<keyof I["image"], keyof StringConstraint>]: never; };
        platform?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_46 in Exclude<keyof I["platform"], keyof StringConstraint>]: never; };
        viz?: {
            color?: string;
            size?: number;
        } & {
            color?: string;
            size?: number;
        } & { [K_47 in Exclude<keyof I["viz"], keyof Visualization>]: never; };
        conf?: {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[];
        } & {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[] & ({
                src?: string;
                gw?: string;
                dst?: string;
            } & {
                src?: string;
                gw?: string;
                dst?: string;
            } & { [K_48 in Exclude<keyof I["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_49 in Exclude<keyof I["conf"]["routes"], keyof {
                src?: string;
                gw?: string;
                dst?: string;
            }[]>]: never; };
        } & { [K_50 in Exclude<keyof I["conf"], "routes">]: never; };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        } & {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            } & {
                [x: string]: {
                    values?: string[];
                } & {
                    values?: string[] & string[] & { [K_51 in Exclude<keyof I["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                } & { [K_52 in Exclude<keyof I["properties"]["keyvalues"][string], "values">]: never; };
            } & { [K_53 in Exclude<keyof I["properties"]["keyvalues"], string | number>]: never; };
        } & { [K_54 in Exclude<keyof I["properties"], "keyvalues">]: never; };
        host?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_55 in Exclude<keyof I["host"], keyof StringConstraint>]: never; };
    } & { [K_56 in Exclude<keyof I, keyof Node>]: never; }>(base?: I): Node;
    fromPartial<I_1 extends {
        id?: string;
        sockets?: {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[];
        proc?: {
            isa?: {
                op?: Operator;
                value?: ISA;
            };
            family?: {
                op?: Operator;
                value?: string;
            };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            };
            L2?: {
                op?: Operator;
                value?: number;
            };
            cores?: {
                op?: Operator;
                value?: number;
            };
            threads?: {
                op?: Operator;
                value?: number;
            };
            tdp?: {
                op?: Operator;
                value?: number;
            };
            sockets?: {
                op?: Operator;
                value?: number;
            };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            };
        };
        memory?: {
            type?: {
                op?: Operator;
                value?: MemoryType;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            frequency?: {
                op?: Operator;
                value?: number;
            };
            modules?: {
                op?: Operator;
                value?: number;
            };
        };
        NIC?: {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[];
        };
        disks?: {
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            };
            disks?: {
                op?: Operator;
                value?: number;
            };
        };
        metal?: {
            op?: Operator;
            value?: boolean;
        };
        virt?: {
            op?: Operator;
            value?: boolean;
        };
        image?: {
            op?: Operator;
            value?: string;
        };
        platform?: {
            op?: Operator;
            value?: string;
        };
        viz?: {
            color?: string;
            size?: number;
        };
        conf?: {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[];
        };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        };
        host?: {
            op?: Operator;
            value?: string;
        };
    } & {
        id?: string;
        sockets?: {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[] & ({
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        } & {
            index?: number;
            addrs?: string[] & string[] & { [K_57 in Exclude<keyof I_1["sockets"][number]["addrs"], keyof string[]>]: never; };
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_58 in Exclude<keyof I_1["sockets"][number]["endpoint"]["subref"], "index">]: never; };
            } & { [K_59 in Exclude<keyof I_1["sockets"][number]["endpoint"], keyof Ref>]: never; };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                protocols?: Layer1[] & Layer1[] & { [K_60 in Exclude<keyof I_1["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_61 in Exclude<keyof I_1["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_62 in Exclude<keyof I_1["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                queues?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_63 in Exclude<keyof I_1["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                } & {
                    op?: Operator;
                    value?: NICModel;
                } & { [K_64 in Exclude<keyof I_1["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_65 in Exclude<keyof I_1["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_66 in Exclude<keyof I_1["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
            } & { [K_67 in Exclude<keyof I_1["sockets"][number]["port"], keyof PortSpec>]: never; };
        } & { [K_68 in Exclude<keyof I_1["sockets"][number], keyof Socket>]: never; })[] & { [K_69 in Exclude<keyof I_1["sockets"], keyof {
            index?: number;
            addrs?: string[];
            endpoint?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            port?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
        }[]>]: never; };
        proc?: {
            isa?: {
                op?: Operator;
                value?: ISA;
            };
            family?: {
                op?: Operator;
                value?: string;
            };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            };
            L2?: {
                op?: Operator;
                value?: number;
            };
            cores?: {
                op?: Operator;
                value?: number;
            };
            threads?: {
                op?: Operator;
                value?: number;
            };
            tdp?: {
                op?: Operator;
                value?: number;
            };
            sockets?: {
                op?: Operator;
                value?: number;
            };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            isa?: {
                op?: Operator;
                value?: ISA;
            } & {
                op?: Operator;
                value?: ISA;
            } & { [K_70 in Exclude<keyof I_1["proc"]["isa"], keyof ISAConstraint>]: never; };
            family?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_71 in Exclude<keyof I_1["proc"]["family"], keyof StringConstraint>]: never; };
            BaseFrequency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_72 in Exclude<keyof I_1["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
            L2?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_73 in Exclude<keyof I_1["proc"]["L2"], keyof Uint64Constraint>]: never; };
            cores?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_74 in Exclude<keyof I_1["proc"]["cores"], keyof Uint32Constraint>]: never; };
            threads?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_75 in Exclude<keyof I_1["proc"]["threads"], keyof Uint32Constraint>]: never; };
            tdp?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_76 in Exclude<keyof I_1["proc"]["tdp"], keyof Uint32Constraint>]: never; };
            sockets?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_77 in Exclude<keyof I_1["proc"]["sockets"], keyof Uint32Constraint>]: never; };
            hyperthreaded?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_78 in Exclude<keyof I_1["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
        } & { [K_79 in Exclude<keyof I_1["proc"], keyof ProcSpec>]: never; };
        memory?: {
            type?: {
                op?: Operator;
                value?: MemoryType;
            };
            capacity?: {
                op?: Operator;
                value?: number;
            };
            frequency?: {
                op?: Operator;
                value?: number;
            };
            modules?: {
                op?: Operator;
                value?: number;
            };
        } & {
            type?: {
                op?: Operator;
                value?: MemoryType;
            } & {
                op?: Operator;
                value?: MemoryType;
            } & { [K_80 in Exclude<keyof I_1["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_81 in Exclude<keyof I_1["memory"]["capacity"], keyof Uint64Constraint>]: never; };
            frequency?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_82 in Exclude<keyof I_1["memory"]["frequency"], keyof Uint64Constraint>]: never; };
            modules?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_83 in Exclude<keyof I_1["memory"]["modules"], keyof Uint64Constraint>]: never; };
        } & { [K_84 in Exclude<keyof I_1["memory"], keyof MemorySpec>]: never; };
        NIC?: {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[];
        } & {
            ports?: {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[] & ({
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                protocols?: Layer1[] & Layer1[] & { [K_85 in Exclude<keyof I_1["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_86 in Exclude<keyof I_1["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_87 in Exclude<keyof I_1["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                queues?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_88 in Exclude<keyof I_1["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                } & {
                    op?: Operator;
                    value?: NICModel;
                } & { [K_89 in Exclude<keyof I_1["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_90 in Exclude<keyof I_1["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_91 in Exclude<keyof I_1["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
            } & { [K_92 in Exclude<keyof I_1["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_93 in Exclude<keyof I_1["NIC"]["ports"], keyof {
                protocols?: Layer1[];
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                queues?: {
                    op?: Operator;
                    value?: number;
                };
                model?: {
                    op?: Operator;
                    value?: NICModel;
                };
                DPDK?: {
                    op?: Operator;
                    value?: boolean;
                };
                SriovVF?: {
                    op?: Operator;
                    value?: boolean;
                };
            }[]>]: never; };
        } & { [K_94 in Exclude<keyof I_1["NIC"], "ports">]: never; };
        disks?: {
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            };
            disks?: {
                op?: Operator;
                value?: number;
            };
        } & {
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_95 in Exclude<keyof I_1["disks"]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: DiskFormFactor;
            } & {
                op?: Operator;
                value?: DiskFormFactor;
            } & { [K_96 in Exclude<keyof I_1["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
            diskInterface?: {
                op?: Operator;
                value?: DiskInterface;
            } & {
                op?: Operator;
                value?: DiskInterface;
            } & { [K_97 in Exclude<keyof I_1["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
            disks?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_98 in Exclude<keyof I_1["disks"]["disks"], keyof Uint64Constraint>]: never; };
        } & { [K_99 in Exclude<keyof I_1["disks"], keyof DiskSpec>]: never; };
        metal?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_100 in Exclude<keyof I_1["metal"], keyof BoolConstraint>]: never; };
        virt?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_101 in Exclude<keyof I_1["virt"], keyof BoolConstraint>]: never; };
        image?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_102 in Exclude<keyof I_1["image"], keyof StringConstraint>]: never; };
        platform?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_103 in Exclude<keyof I_1["platform"], keyof StringConstraint>]: never; };
        viz?: {
            color?: string;
            size?: number;
        } & {
            color?: string;
            size?: number;
        } & { [K_104 in Exclude<keyof I_1["viz"], keyof Visualization>]: never; };
        conf?: {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[];
        } & {
            routes?: {
                src?: string;
                gw?: string;
                dst?: string;
            }[] & ({
                src?: string;
                gw?: string;
                dst?: string;
            } & {
                src?: string;
                gw?: string;
                dst?: string;
            } & { [K_105 in Exclude<keyof I_1["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_106 in Exclude<keyof I_1["conf"]["routes"], keyof {
                src?: string;
                gw?: string;
                dst?: string;
            }[]>]: never; };
        } & { [K_107 in Exclude<keyof I_1["conf"], "routes">]: never; };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        } & {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            } & {
                [x: string]: {
                    values?: string[];
                } & {
                    values?: string[] & string[] & { [K_108 in Exclude<keyof I_1["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                } & { [K_109 in Exclude<keyof I_1["properties"]["keyvalues"][string], "values">]: never; };
            } & { [K_110 in Exclude<keyof I_1["properties"]["keyvalues"], string | number>]: never; };
        } & { [K_111 in Exclude<keyof I_1["properties"], "keyvalues">]: never; };
        host?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_112 in Exclude<keyof I_1["host"], keyof StringConstraint>]: never; };
    } & { [K_113 in Exclude<keyof I_1, keyof Node>]: never; }>(object: I_1): Node;
};
export declare const NodeConfig: {
    encode(message: NodeConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NodeConfig;
    fromJSON(object: any): NodeConfig;
    toJSON(message: NodeConfig): unknown;
    create<I extends {
        routes?: {
            src?: string;
            gw?: string;
            dst?: string;
        }[];
    } & {
        routes?: {
            src?: string;
            gw?: string;
            dst?: string;
        }[] & ({
            src?: string;
            gw?: string;
            dst?: string;
        } & {
            src?: string;
            gw?: string;
            dst?: string;
        } & { [K in Exclude<keyof I["routes"][number], keyof RouteConfig>]: never; })[] & { [K_1 in Exclude<keyof I["routes"], keyof {
            src?: string;
            gw?: string;
            dst?: string;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "routes">]: never; }>(base?: I): NodeConfig;
    fromPartial<I_1 extends {
        routes?: {
            src?: string;
            gw?: string;
            dst?: string;
        }[];
    } & {
        routes?: {
            src?: string;
            gw?: string;
            dst?: string;
        }[] & ({
            src?: string;
            gw?: string;
            dst?: string;
        } & {
            src?: string;
            gw?: string;
            dst?: string;
        } & { [K_3 in Exclude<keyof I_1["routes"][number], keyof RouteConfig>]: never; })[] & { [K_4 in Exclude<keyof I_1["routes"], keyof {
            src?: string;
            gw?: string;
            dst?: string;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "routes">]: never; }>(object: I_1): NodeConfig;
};
export declare const RouteConfig: {
    encode(message: RouteConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RouteConfig;
    fromJSON(object: any): RouteConfig;
    toJSON(message: RouteConfig): unknown;
    create<I extends {
        src?: string;
        gw?: string;
        dst?: string;
    } & {
        src?: string;
        gw?: string;
        dst?: string;
    } & { [K in Exclude<keyof I, keyof RouteConfig>]: never; }>(base?: I): RouteConfig;
    fromPartial<I_1 extends {
        src?: string;
        gw?: string;
        dst?: string;
    } & {
        src?: string;
        gw?: string;
        dst?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RouteConfig>]: never; }>(object: I_1): RouteConfig;
};
export declare const Visualization: {
    encode(message: Visualization, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Visualization;
    fromJSON(object: any): Visualization;
    toJSON(message: Visualization): unknown;
    create<I extends {
        color?: string;
        size?: number;
    } & {
        color?: string;
        size?: number;
    } & { [K in Exclude<keyof I, keyof Visualization>]: never; }>(base?: I): Visualization;
    fromPartial<I_1 extends {
        color?: string;
        size?: number;
    } & {
        color?: string;
        size?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Visualization>]: never; }>(object: I_1): Visualization;
};
export declare const Ref: {
    encode(message: Ref, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Ref;
    fromJSON(object: any): Ref;
    toJSON(message: Ref): unknown;
    create<I extends {
        element?: string;
        index?: number;
        subref?: {
            index?: number;
        };
    } & {
        element?: string;
        index?: number;
        subref?: {
            index?: number;
        } & {
            index?: number;
        } & { [K in Exclude<keyof I["subref"], "index">]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Ref>]: never; }>(base?: I): Ref;
    fromPartial<I_1 extends {
        element?: string;
        index?: number;
        subref?: {
            index?: number;
        };
    } & {
        element?: string;
        index?: number;
        subref?: {
            index?: number;
        } & {
            index?: number;
        } & { [K_2 in Exclude<keyof I_1["subref"], "index">]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Ref>]: never; }>(object: I_1): Ref;
};
export declare const Subref: {
    encode(message: Subref, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Subref;
    fromJSON(object: any): Subref;
    toJSON(message: Subref): unknown;
    create<I extends {
        index?: number;
    } & {
        index?: number;
    } & { [K in Exclude<keyof I, "index">]: never; }>(base?: I): Subref;
    fromPartial<I_1 extends {
        index?: number;
    } & {
        index?: number;
    } & { [K_1 in Exclude<keyof I_1, "index">]: never; }>(object: I_1): Subref;
};
export declare const Socket: {
    encode(message: Socket, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Socket;
    fromJSON(object: any): Socket;
    toJSON(message: Socket): unknown;
    create<I extends {
        index?: number;
        addrs?: string[];
        endpoint?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        port?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        };
    } & {
        index?: number;
        addrs?: string[] & string[] & { [K in Exclude<keyof I["addrs"], keyof string[]>]: never; };
        endpoint?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_1 in Exclude<keyof I["endpoint"]["subref"], "index">]: never; };
        } & { [K_2 in Exclude<keyof I["endpoint"], keyof Ref>]: never; };
        port?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            protocols?: Layer1[] & Layer1[] & { [K_3 in Exclude<keyof I["port"]["protocols"], keyof Layer1[]>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_4 in Exclude<keyof I["port"]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_5 in Exclude<keyof I["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
            queues?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_6 in Exclude<keyof I["port"]["queues"], keyof Uint64Constraint>]: never; };
            model?: {
                op?: Operator;
                value?: NICModel;
            } & {
                op?: Operator;
                value?: NICModel;
            } & { [K_7 in Exclude<keyof I["port"]["model"], keyof NICModelConstraint>]: never; };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_8 in Exclude<keyof I["port"]["DPDK"], keyof BoolConstraint>]: never; };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_9 in Exclude<keyof I["port"]["SriovVF"], keyof BoolConstraint>]: never; };
        } & { [K_10 in Exclude<keyof I["port"], keyof PortSpec>]: never; };
    } & { [K_11 in Exclude<keyof I, keyof Socket>]: never; }>(base?: I): Socket;
    fromPartial<I_1 extends {
        index?: number;
        addrs?: string[];
        endpoint?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        port?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        };
    } & {
        index?: number;
        addrs?: string[] & string[] & { [K_12 in Exclude<keyof I_1["addrs"], keyof string[]>]: never; };
        endpoint?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_13 in Exclude<keyof I_1["endpoint"]["subref"], "index">]: never; };
        } & { [K_14 in Exclude<keyof I_1["endpoint"], keyof Ref>]: never; };
        port?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            protocols?: Layer1[] & Layer1[] & { [K_15 in Exclude<keyof I_1["port"]["protocols"], keyof Layer1[]>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_16 in Exclude<keyof I_1["port"]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_17 in Exclude<keyof I_1["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
            queues?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_18 in Exclude<keyof I_1["port"]["queues"], keyof Uint64Constraint>]: never; };
            model?: {
                op?: Operator;
                value?: NICModel;
            } & {
                op?: Operator;
                value?: NICModel;
            } & { [K_19 in Exclude<keyof I_1["port"]["model"], keyof NICModelConstraint>]: never; };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_20 in Exclude<keyof I_1["port"]["DPDK"], keyof BoolConstraint>]: never; };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_21 in Exclude<keyof I_1["port"]["SriovVF"], keyof BoolConstraint>]: never; };
        } & { [K_22 in Exclude<keyof I_1["port"], keyof PortSpec>]: never; };
    } & { [K_23 in Exclude<keyof I_1, keyof Socket>]: never; }>(object: I_1): Socket;
};
export declare const RouteConf: {
    encode(message: RouteConf, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RouteConf;
    fromJSON(object: any): RouteConf;
    toJSON(message: RouteConf): unknown;
    create<I extends {
        src?: string;
        gw?: string;
        dst?: string;
    } & {
        src?: string;
        gw?: string;
        dst?: string;
    } & { [K in Exclude<keyof I, keyof RouteConf>]: never; }>(base?: I): RouteConf;
    fromPartial<I_1 extends {
        src?: string;
        gw?: string;
        dst?: string;
    } & {
        src?: string;
        gw?: string;
        dst?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof RouteConf>]: never; }>(object: I_1): RouteConf;
};
export declare const Link: {
    encode(message: Link, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Link;
    fromJSON(object: any): Link;
    toJSON(message: Link): unknown;
    create<I extends {
        id?: string;
        latency?: {
            op?: Operator;
            value?: number;
        };
        capacity?: {
            op?: Operator;
            value?: number;
        };
        loss?: {
            op?: Operator;
            value?: number;
        };
        endpoints?: {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[];
        kind?: {
            op?: Operator;
            value?: Link_Kind;
        };
        layer?: {
            op?: Operator;
            value?: number;
        };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        };
    } & {
        id?: string;
        latency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K in Exclude<keyof I["latency"], keyof Uint64Constraint>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_1 in Exclude<keyof I["capacity"], keyof Uint64Constraint>]: never; };
        loss?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_2 in Exclude<keyof I["loss"], keyof FloatConstraint>]: never; };
        endpoints?: {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[] & ({
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        } & {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_3 in Exclude<keyof I["endpoints"][number]["socket"]["subref"], "index">]: never; };
            } & { [K_4 in Exclude<keyof I["endpoints"][number]["socket"], keyof Ref>]: never; };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            } & {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_5 in Exclude<keyof I["endpoints"][number]["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
                protocols?: Layer1[] & Layer1[] & { [K_6 in Exclude<keyof I["endpoints"][number]["connector"]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
            } & { [K_7 in Exclude<keyof I["endpoints"][number]["connector"], keyof ConnectorSpec>]: never; };
        } & { [K_8 in Exclude<keyof I["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_9 in Exclude<keyof I["endpoints"], keyof {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[]>]: never; };
        kind?: {
            op?: Operator;
            value?: Link_Kind;
        } & {
            op?: Operator;
            value?: Link_Kind;
        } & { [K_10 in Exclude<keyof I["kind"], keyof LinkKindConstraint>]: never; };
        layer?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_11 in Exclude<keyof I["layer"], keyof Uint64Constraint>]: never; };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        } & {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            } & {
                [x: string]: {
                    values?: string[];
                } & {
                    values?: string[] & string[] & { [K_12 in Exclude<keyof I["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                } & { [K_13 in Exclude<keyof I["properties"]["keyvalues"][string], "values">]: never; };
            } & { [K_14 in Exclude<keyof I["properties"]["keyvalues"], string | number>]: never; };
        } & { [K_15 in Exclude<keyof I["properties"], "keyvalues">]: never; };
    } & { [K_16 in Exclude<keyof I, keyof Link>]: never; }>(base?: I): Link;
    fromPartial<I_1 extends {
        id?: string;
        latency?: {
            op?: Operator;
            value?: number;
        };
        capacity?: {
            op?: Operator;
            value?: number;
        };
        loss?: {
            op?: Operator;
            value?: number;
        };
        endpoints?: {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[];
        kind?: {
            op?: Operator;
            value?: Link_Kind;
        };
        layer?: {
            op?: Operator;
            value?: number;
        };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        };
    } & {
        id?: string;
        latency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_17 in Exclude<keyof I_1["latency"], keyof Uint64Constraint>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_18 in Exclude<keyof I_1["capacity"], keyof Uint64Constraint>]: never; };
        loss?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_19 in Exclude<keyof I_1["loss"], keyof FloatConstraint>]: never; };
        endpoints?: {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[] & ({
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        } & {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_20 in Exclude<keyof I_1["endpoints"][number]["socket"]["subref"], "index">]: never; };
            } & { [K_21 in Exclude<keyof I_1["endpoints"][number]["socket"], keyof Ref>]: never; };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            } & {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                } & {
                    op?: Operator;
                    value?: ConnectorKind;
                } & { [K_22 in Exclude<keyof I_1["endpoints"][number]["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
                protocols?: Layer1[] & Layer1[] & { [K_23 in Exclude<keyof I_1["endpoints"][number]["connector"]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
            } & { [K_24 in Exclude<keyof I_1["endpoints"][number]["connector"], keyof ConnectorSpec>]: never; };
        } & { [K_25 in Exclude<keyof I_1["endpoints"][number], keyof Endpoint>]: never; })[] & { [K_26 in Exclude<keyof I_1["endpoints"], keyof {
            index?: number;
            socket?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            connector?: {
                kind?: {
                    op?: Operator;
                    value?: ConnectorKind;
                };
                protocols?: Layer1[];
                capacity?: number;
            };
        }[]>]: never; };
        kind?: {
            op?: Operator;
            value?: Link_Kind;
        } & {
            op?: Operator;
            value?: Link_Kind;
        } & { [K_27 in Exclude<keyof I_1["kind"], keyof LinkKindConstraint>]: never; };
        layer?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_28 in Exclude<keyof I_1["layer"], keyof Uint64Constraint>]: never; };
        properties?: {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            };
        } & {
            keyvalues?: {
                [x: string]: {
                    values?: string[];
                };
            } & {
                [x: string]: {
                    values?: string[];
                } & {
                    values?: string[] & string[] & { [K_29 in Exclude<keyof I_1["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                } & { [K_30 in Exclude<keyof I_1["properties"]["keyvalues"][string], "values">]: never; };
            } & { [K_31 in Exclude<keyof I_1["properties"]["keyvalues"], string | number>]: never; };
        } & { [K_32 in Exclude<keyof I_1["properties"], "keyvalues">]: never; };
    } & { [K_33 in Exclude<keyof I_1, keyof Link>]: never; }>(object: I_1): Link;
};
export declare const Endpoint: {
    encode(message: Endpoint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Endpoint;
    fromJSON(object: any): Endpoint;
    toJSON(message: Endpoint): unknown;
    create<I extends {
        index?: number;
        socket?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        connector?: {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            protocols?: Layer1[];
            capacity?: number;
        };
    } & {
        index?: number;
        socket?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K in Exclude<keyof I["socket"]["subref"], "index">]: never; };
        } & { [K_1 in Exclude<keyof I["socket"], keyof Ref>]: never; };
        connector?: {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            protocols?: Layer1[];
            capacity?: number;
        } & {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_2 in Exclude<keyof I["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
            protocols?: Layer1[] & Layer1[] & { [K_3 in Exclude<keyof I["connector"]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
        } & { [K_4 in Exclude<keyof I["connector"], keyof ConnectorSpec>]: never; };
    } & { [K_5 in Exclude<keyof I, keyof Endpoint>]: never; }>(base?: I): Endpoint;
    fromPartial<I_1 extends {
        index?: number;
        socket?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        connector?: {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            protocols?: Layer1[];
            capacity?: number;
        };
    } & {
        index?: number;
        socket?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_6 in Exclude<keyof I_1["socket"]["subref"], "index">]: never; };
        } & { [K_7 in Exclude<keyof I_1["socket"], keyof Ref>]: never; };
        connector?: {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            protocols?: Layer1[];
            capacity?: number;
        } & {
            kind?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_8 in Exclude<keyof I_1["connector"]["kind"], keyof ConnectorKindConstraint>]: never; };
            protocols?: Layer1[] & Layer1[] & { [K_9 in Exclude<keyof I_1["connector"]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
        } & { [K_10 in Exclude<keyof I_1["connector"], keyof ConnectorSpec>]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof Endpoint>]: never; }>(object: I_1): Endpoint;
};
export declare const Phyo: {
    encode(message: Phyo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Phyo;
    fromJSON(object: any): Phyo;
    toJSON(message: Phyo): unknown;
    create<I extends {
        id?: string;
        eqtns?: string[];
    } & {
        id?: string;
        eqtns?: string[] & string[] & { [K in Exclude<keyof I["eqtns"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof Phyo>]: never; }>(base?: I): Phyo;
    fromPartial<I_1 extends {
        id?: string;
        eqtns?: string[];
    } & {
        id?: string;
        eqtns?: string[] & string[] & { [K_2 in Exclude<keyof I_1["eqtns"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof Phyo>]: never; }>(object: I_1): Phyo;
};
export declare const Variable: {
    encode(_: Variable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Variable;
    fromJSON(_: any): Variable;
    toJSON(_: Variable): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): Variable;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): Variable;
};
export declare const Bond: {
    encode(_: Bond, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Bond;
    fromJSON(_: any): Bond;
    toJSON(_: Bond): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): Bond;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): Bond;
};
export declare const Coupling: {
    encode(_: Coupling, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Coupling;
    fromJSON(_: any): Coupling;
    toJSON(_: Coupling): unknown;
    create<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(base?: I): Coupling;
    fromPartial<I_1 extends {} & {} & { [K_1 in Exclude<keyof I_1, never>]: never; }>(_: I_1): Coupling;
};
export declare const Sensor: {
    encode(message: Sensor, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Sensor;
    fromJSON(object: any): Sensor;
    toJSON(message: Sensor): unknown;
    create<I extends {
        id?: string;
        var?: string;
        rate?: number;
        target?: string;
        tag?: number;
    } & {
        id?: string;
        var?: string;
        rate?: number;
        target?: string;
        tag?: number;
    } & { [K in Exclude<keyof I, keyof Sensor>]: never; }>(base?: I): Sensor;
    fromPartial<I_1 extends {
        id?: string;
        var?: string;
        rate?: number;
        target?: string;
        tag?: number;
    } & {
        id?: string;
        var?: string;
        rate?: number;
        target?: string;
        tag?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Sensor>]: never; }>(object: I_1): Sensor;
};
export declare const Actuator: {
    encode(message: Actuator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Actuator;
    fromJSON(object: any): Actuator;
    toJSON(message: Actuator): unknown;
    create<I extends {
        id?: string;
        var?: string;
        dynamicLimits?: {
            lower?: number;
            upper?: number;
        };
        staticLimits?: {
            lower?: number;
            upper?: number;
        };
        tag?: number;
    } & {
        id?: string;
        var?: string;
        dynamicLimits?: {
            lower?: number;
            upper?: number;
        } & {
            lower?: number;
            upper?: number;
        } & { [K in Exclude<keyof I["dynamicLimits"], keyof Limits>]: never; };
        staticLimits?: {
            lower?: number;
            upper?: number;
        } & {
            lower?: number;
            upper?: number;
        } & { [K_1 in Exclude<keyof I["staticLimits"], keyof Limits>]: never; };
        tag?: number;
    } & { [K_2 in Exclude<keyof I, keyof Actuator>]: never; }>(base?: I): Actuator;
    fromPartial<I_1 extends {
        id?: string;
        var?: string;
        dynamicLimits?: {
            lower?: number;
            upper?: number;
        };
        staticLimits?: {
            lower?: number;
            upper?: number;
        };
        tag?: number;
    } & {
        id?: string;
        var?: string;
        dynamicLimits?: {
            lower?: number;
            upper?: number;
        } & {
            lower?: number;
            upper?: number;
        } & { [K_3 in Exclude<keyof I_1["dynamicLimits"], keyof Limits>]: never; };
        staticLimits?: {
            lower?: number;
            upper?: number;
        } & {
            lower?: number;
            upper?: number;
        } & { [K_4 in Exclude<keyof I_1["staticLimits"], keyof Limits>]: never; };
        tag?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof Actuator>]: never; }>(object: I_1): Actuator;
};
export declare const Limits: {
    encode(message: Limits, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Limits;
    fromJSON(object: any): Limits;
    toJSON(message: Limits): unknown;
    create<I extends {
        lower?: number;
        upper?: number;
    } & {
        lower?: number;
        upper?: number;
    } & { [K in Exclude<keyof I, keyof Limits>]: never; }>(base?: I): Limits;
    fromPartial<I_1 extends {
        lower?: number;
        upper?: number;
    } & {
        lower?: number;
        upper?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Limits>]: never; }>(object: I_1): Limits;
};
export declare const ProductInfo: {
    encode(message: ProductInfo, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProductInfo;
    fromJSON(object: any): ProductInfo;
    toJSON(message: ProductInfo): unknown;
    create<I extends {
        Manufacturer?: string;
        Model?: string;
        SKU?: string;
        Integrated?: boolean;
        cost?: number;
    } & {
        Manufacturer?: string;
        Model?: string;
        SKU?: string;
        Integrated?: boolean;
        cost?: number;
    } & { [K in Exclude<keyof I, keyof ProductInfo>]: never; }>(base?: I): ProductInfo;
    fromPartial<I_1 extends {
        Manufacturer?: string;
        Model?: string;
        SKU?: string;
        Integrated?: boolean;
        cost?: number;
    } & {
        Manufacturer?: string;
        Model?: string;
        SKU?: string;
        Integrated?: boolean;
        cost?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof ProductInfo>]: never; }>(object: I_1): ProductInfo;
};
export declare const Resource: {
    encode(message: Resource, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource;
    fromJSON(object: any): Resource;
    toJSON(message: Resource): unknown;
    create<I extends {
        id?: string;
        facility?: string;
        procs?: {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[];
        memory?: {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[];
        NICs?: {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[];
        disks?: {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[];
        alloc?: AllocMode[];
        roles?: Role[];
        firmware?: {
            kind?: Firmware_Kind;
        };
        OS?: {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[];
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[];
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[];
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        TPA?: number;
        ipmi?: {
            host?: string;
            kind?: BMC_Kind;
        };
        relayboard?: {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        };
        pdu?: {
            host?: string;
            outlets?: number[];
            kind?: PowerDistributionUnit_Kind;
        };
        raven?: {
            host?: string;
        };
        leafConfig?: {
            serviceAddressBlocks?: {
                list?: string[];
            };
            tenantAddressBlocks?: {
                list?: string[];
            };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            };
        };
        infranetAddr?: {
            [x: string]: {
                list?: string[];
            };
        };
    } & {
        id?: string;
        facility?: string;
        procs?: {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[] & ({
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        } & {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K in Exclude<keyof I["procs"][number]["productInfo"], keyof ProductInfo>]: never; };
            reservedCores?: number;
        } & { [K_1 in Exclude<keyof I["procs"][number], keyof Proc>]: never; })[] & { [K_2 in Exclude<keyof I["procs"], keyof {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[]>]: never; };
        memory?: {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[] & ({
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        } & {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_3 in Exclude<keyof I["memory"][number]["productInfo"], keyof ProductInfo>]: never; };
            reservedCapacity?: number;
        } & { [K_4 in Exclude<keyof I["memory"][number], keyof Dimm>]: never; })[] & { [K_5 in Exclude<keyof I["memory"], keyof {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[]>]: never; };
        NICs?: {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[] & ({
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        } & {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[] & ({
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            } & {
                parent?: string;
                index?: number;
                protocols?: Layer1[] & Layer1[] & { [K_6 in Exclude<keyof I["NICs"][number]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_7 in Exclude<keyof I["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                } & { [K_8 in Exclude<keyof I["NICs"][number]["ports"][number]["connector"], keyof Ref>]: never; };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                } & {
                    index?: number;
                    radix?: number;
                } & { [K_9 in Exclude<keyof I["NICs"][number]["ports"][number]["breakout"], keyof Breakout>]: never; };
                bond?: {
                    name?: string;
                } & {
                    name?: string;
                } & { [K_10 in Exclude<keyof I["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                } & {
                    Pf?: {
                        MaxVFs?: number;
                    } & {
                        MaxVFs?: number;
                    } & { [K_11 in Exclude<keyof I["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                    Vf?: {
                        VfIndex?: number;
                    } & {
                        VfIndex?: number;
                    } & { [K_12 in Exclude<keyof I["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                    PfNi?: number;
                    PfPi?: number;
                } & { [K_13 in Exclude<keyof I["NICs"][number]["ports"][number]["sriov"], keyof SRIOV>]: never; };
            } & { [K_14 in Exclude<keyof I["NICs"][number]["ports"][number], keyof Port>]: never; })[] & { [K_15 in Exclude<keyof I["NICs"][number]["ports"], keyof {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[]>]: never; };
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_16 in Exclude<keyof I["NICs"][number]["productInfo"], keyof ProductInfo>]: never; };
            DPDK?: boolean;
            model?: NICModel;
        } & { [K_17 in Exclude<keyof I["NICs"][number], keyof NIC>]: never; })[] & { [K_18 in Exclude<keyof I["NICs"], keyof {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[]>]: never; };
        disks?: {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[] & ({
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        } & {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_19 in Exclude<keyof I["disks"][number]["productInfo"], keyof ProductInfo>]: never; };
            roles?: DiskRole[] & DiskRole[] & { [K_20 in Exclude<keyof I["disks"][number]["roles"], keyof DiskRole[]>]: never; };
            NVMEControllerIndex?: number;
        } & { [K_21 in Exclude<keyof I["disks"][number], keyof Disk>]: never; })[] & { [K_22 in Exclude<keyof I["disks"], keyof {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[]>]: never; };
        alloc?: AllocMode[] & AllocMode[] & { [K_23 in Exclude<keyof I["alloc"], keyof AllocMode[]>]: never; };
        roles?: Role[] & Role[] & { [K_24 in Exclude<keyof I["roles"], keyof Role[]>]: never; };
        firmware?: {
            kind?: Firmware_Kind;
        } & {
            kind?: Firmware_Kind;
        } & { [K_25 in Exclude<keyof I["firmware"], "kind">]: never; };
        OS?: {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[];
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[];
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[];
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        } & {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[] & ({
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            } & {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[] & ({
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & { [K_26 in Exclude<keyof I["OS"]["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_27 in Exclude<keyof I["OS"]["BGP"][number]["Interfaces"], keyof {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[]>]: never; };
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                } & {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[] & ({
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & { [K_28 in Exclude<keyof I["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_29 in Exclude<keyof I["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[]>]: never; };
                } & { [K_30 in Exclude<keyof I["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
            } & { [K_31 in Exclude<keyof I["OS"]["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_32 in Exclude<keyof I["OS"]["BGP"], keyof {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[]>]: never; };
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[] & ({
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            } & {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[] & string[] & { [K_33 in Exclude<keyof I["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                role?: LinkRole;
            } & { [K_34 in Exclude<keyof I["OS"]["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_35 in Exclude<keyof I["OS"]["bridge"], keyof {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[]>]: never; };
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[] & ({
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            } & {
                device?: string;
                vid?: number;
                addrs?: string[] & string[] & { [K_36 in Exclude<keyof I["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                role?: LinkRole;
            } & { [K_37 in Exclude<keyof I["OS"]["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_38 in Exclude<keyof I["OS"]["VLAN"], keyof {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[]>]: never; };
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            } & {
                [x: number]: {
                    address?: string;
                } & {
                    address?: string;
                } & { [K_39 in Exclude<keyof I["OS"]["serviceEndpoints"][number], "address">]: never; };
            } & { [K_40 in Exclude<keyof I["OS"]["serviceEndpoints"], number>]: never; };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        } & { [K_41 in Exclude<keyof I["OS"], keyof OSConfig>]: never; };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_42 in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
        TPA?: number;
        ipmi?: {
            host?: string;
            kind?: BMC_Kind;
        } & {
            host?: string;
            kind?: BMC_Kind;
        } & { [K_43 in Exclude<keyof I["ipmi"], keyof BMC>]: never; };
        relayboard?: {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        } & {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        } & { [K_44 in Exclude<keyof I["relayboard"], keyof RelayBoard>]: never; };
        pdu?: {
            host?: string;
            outlets?: number[];
            kind?: PowerDistributionUnit_Kind;
        } & {
            host?: string;
            outlets?: number[] & number[] & { [K_45 in Exclude<keyof I["pdu"]["outlets"], keyof number[]>]: never; };
            kind?: PowerDistributionUnit_Kind;
        } & { [K_46 in Exclude<keyof I["pdu"], keyof PowerDistributionUnit>]: never; };
        raven?: {
            host?: string;
        } & {
            host?: string;
        } & { [K_47 in Exclude<keyof I["raven"], "host">]: never; };
        leafConfig?: {
            serviceAddressBlocks?: {
                list?: string[];
            };
            tenantAddressBlocks?: {
                list?: string[];
            };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            };
        } & {
            serviceAddressBlocks?: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_48 in Exclude<keyof I["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
            } & { [K_49 in Exclude<keyof I["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
            tenantAddressBlocks?: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_50 in Exclude<keyof I["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
            } & { [K_51 in Exclude<keyof I["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            } & {
                [x: string]: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_52 in Exclude<keyof I["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                } & { [K_53 in Exclude<keyof I["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
            } & { [K_54 in Exclude<keyof I["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
        } & { [K_55 in Exclude<keyof I["leafConfig"], keyof LeafConfig>]: never; };
        infranetAddr?: {
            [x: string]: {
                list?: string[];
            };
        } & {
            [x: string]: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_56 in Exclude<keyof I["infranetAddr"][string]["list"], keyof string[]>]: never; };
            } & { [K_57 in Exclude<keyof I["infranetAddr"][string], "list">]: never; };
        } & { [K_58 in Exclude<keyof I["infranetAddr"], string | number>]: never; };
    } & { [K_59 in Exclude<keyof I, keyof Resource>]: never; }>(base?: I): Resource;
    fromPartial<I_1 extends {
        id?: string;
        facility?: string;
        procs?: {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[];
        memory?: {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[];
        NICs?: {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[];
        disks?: {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[];
        alloc?: AllocMode[];
        roles?: Role[];
        firmware?: {
            kind?: Firmware_Kind;
        };
        OS?: {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[];
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[];
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[];
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        TPA?: number;
        ipmi?: {
            host?: string;
            kind?: BMC_Kind;
        };
        relayboard?: {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        };
        pdu?: {
            host?: string;
            outlets?: number[];
            kind?: PowerDistributionUnit_Kind;
        };
        raven?: {
            host?: string;
        };
        leafConfig?: {
            serviceAddressBlocks?: {
                list?: string[];
            };
            tenantAddressBlocks?: {
                list?: string[];
            };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            };
        };
        infranetAddr?: {
            [x: string]: {
                list?: string[];
            };
        };
    } & {
        id?: string;
        facility?: string;
        procs?: {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[] & ({
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        } & {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_60 in Exclude<keyof I_1["procs"][number]["productInfo"], keyof ProductInfo>]: never; };
            reservedCores?: number;
        } & { [K_61 in Exclude<keyof I_1["procs"][number], keyof Proc>]: never; })[] & { [K_62 in Exclude<keyof I_1["procs"], keyof {
            isa?: ISA;
            family?: string;
            BaseFrequency?: number;
            L2?: number;
            cores?: number;
            threads?: number;
            tdp?: number;
            hyperthreaded?: boolean;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCores?: number;
        }[]>]: never; };
        memory?: {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[] & ({
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        } & {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_63 in Exclude<keyof I_1["memory"][number]["productInfo"], keyof ProductInfo>]: never; };
            reservedCapacity?: number;
        } & { [K_64 in Exclude<keyof I_1["memory"][number], keyof Dimm>]: never; })[] & { [K_65 in Exclude<keyof I_1["memory"], keyof {
            type?: MemoryType;
            capacity?: number;
            frequency?: number;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            reservedCapacity?: number;
        }[]>]: never; };
        NICs?: {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[] & ({
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        } & {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[] & ({
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            } & {
                parent?: string;
                index?: number;
                protocols?: Layer1[] & Layer1[] & { [K_66 in Exclude<keyof I_1["NICs"][number]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_67 in Exclude<keyof I_1["NICs"][number]["ports"][number]["connector"]["subref"], "index">]: never; };
                } & { [K_68 in Exclude<keyof I_1["NICs"][number]["ports"][number]["connector"], keyof Ref>]: never; };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                } & {
                    index?: number;
                    radix?: number;
                } & { [K_69 in Exclude<keyof I_1["NICs"][number]["ports"][number]["breakout"], keyof Breakout>]: never; };
                bond?: {
                    name?: string;
                } & {
                    name?: string;
                } & { [K_70 in Exclude<keyof I_1["NICs"][number]["ports"][number]["bond"], "name">]: never; };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                } & {
                    Pf?: {
                        MaxVFs?: number;
                    } & {
                        MaxVFs?: number;
                    } & { [K_71 in Exclude<keyof I_1["NICs"][number]["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                    Vf?: {
                        VfIndex?: number;
                    } & {
                        VfIndex?: number;
                    } & { [K_72 in Exclude<keyof I_1["NICs"][number]["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                    PfNi?: number;
                    PfPi?: number;
                } & { [K_73 in Exclude<keyof I_1["NICs"][number]["ports"][number]["sriov"], keyof SRIOV>]: never; };
            } & { [K_74 in Exclude<keyof I_1["NICs"][number]["ports"][number], keyof Port>]: never; })[] & { [K_75 in Exclude<keyof I_1["NICs"][number]["ports"], keyof {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[]>]: never; };
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_76 in Exclude<keyof I_1["NICs"][number]["productInfo"], keyof ProductInfo>]: never; };
            DPDK?: boolean;
            model?: NICModel;
        } & { [K_77 in Exclude<keyof I_1["NICs"][number], keyof NIC>]: never; })[] & { [K_78 in Exclude<keyof I_1["NICs"], keyof {
            ports?: {
                parent?: string;
                index?: number;
                protocols?: Layer1[];
                capacity?: number;
                mac?: string;
                formFactor?: ConnectorKind;
                connector?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                role?: LinkRole;
                TPA?: number;
                queues?: number;
                breakout?: {
                    index?: number;
                    radix?: number;
                };
                bond?: {
                    name?: string;
                };
                name?: string;
                sriov?: {
                    Pf?: {
                        MaxVFs?: number;
                    };
                    Vf?: {
                        VfIndex?: number;
                    };
                    PfNi?: number;
                    PfPi?: number;
                };
            }[];
            startingIndex?: number;
            kind?: NICKind;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            DPDK?: boolean;
            model?: NICModel;
        }[]>]: never; };
        disks?: {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[] & ({
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        } & {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            } & { [K_79 in Exclude<keyof I_1["disks"][number]["productInfo"], keyof ProductInfo>]: never; };
            roles?: DiskRole[] & DiskRole[] & { [K_80 in Exclude<keyof I_1["disks"][number]["roles"], keyof DiskRole[]>]: never; };
            NVMEControllerIndex?: number;
        } & { [K_81 in Exclude<keyof I_1["disks"][number], keyof Disk>]: never; })[] & { [K_82 in Exclude<keyof I_1["disks"], keyof {
            capacity?: number;
            formFactor?: DiskFormFactor;
            diskInterface?: DiskInterface;
            productInfo?: {
                Manufacturer?: string;
                Model?: string;
                SKU?: string;
                Integrated?: boolean;
                cost?: number;
            };
            roles?: DiskRole[];
            NVMEControllerIndex?: number;
        }[]>]: never; };
        alloc?: AllocMode[] & AllocMode[] & { [K_83 in Exclude<keyof I_1["alloc"], keyof AllocMode[]>]: never; };
        roles?: Role[] & Role[] & { [K_84 in Exclude<keyof I_1["roles"], keyof Role[]>]: never; };
        firmware?: {
            kind?: Firmware_Kind;
        } & {
            kind?: Firmware_Kind;
        } & { [K_85 in Exclude<keyof I_1["firmware"], "kind">]: never; };
        OS?: {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[];
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[];
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[];
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        } & {
            BGP?: {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[] & ({
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            } & {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[] & ({
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & { [K_86 in Exclude<keyof I_1["OS"]["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_87 in Exclude<keyof I_1["OS"]["BGP"][number]["Interfaces"], keyof {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[]>]: never; };
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                } & {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[] & ({
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    } & { [K_88 in Exclude<keyof I_1["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_89 in Exclude<keyof I_1["OS"]["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[]>]: never; };
                } & { [K_90 in Exclude<keyof I_1["OS"]["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
            } & { [K_91 in Exclude<keyof I_1["OS"]["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_92 in Exclude<keyof I_1["OS"]["BGP"], keyof {
                vrf?: string;
                ASN?: number;
                Interfaces?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
                EVPN?: {
                    TunnelEndpoints?: {
                        address?: string;
                        interface?: string;
                        role?: LinkRole;
                    }[];
                };
            }[]>]: never; };
            bridge?: {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[] & ({
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            } & {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[] & string[] & { [K_93 in Exclude<keyof I_1["OS"]["bridge"][number]["addrs"], keyof string[]>]: never; };
                role?: LinkRole;
            } & { [K_94 in Exclude<keyof I_1["OS"]["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_95 in Exclude<keyof I_1["OS"]["bridge"], keyof {
                name?: string;
                vlanAware?: boolean;
                addrs?: string[];
                role?: LinkRole;
            }[]>]: never; };
            VLAN?: {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[] & ({
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            } & {
                device?: string;
                vid?: number;
                addrs?: string[] & string[] & { [K_96 in Exclude<keyof I_1["OS"]["VLAN"][number]["addrs"], keyof string[]>]: never; };
                role?: LinkRole;
            } & { [K_97 in Exclude<keyof I_1["OS"]["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_98 in Exclude<keyof I_1["OS"]["VLAN"], keyof {
                device?: string;
                vid?: number;
                addrs?: string[];
                role?: LinkRole;
            }[]>]: never; };
            serviceEndpoints?: {
                [x: number]: {
                    address?: string;
                };
            } & {
                [x: number]: {
                    address?: string;
                } & {
                    address?: string;
                } & { [K_99 in Exclude<keyof I_1["OS"]["serviceEndpoints"][number], "address">]: never; };
            } & { [K_100 in Exclude<keyof I_1["OS"]["serviceEndpoints"], number>]: never; };
            append?: string;
            rootdev?: string;
            defaultImage?: string;
        } & { [K_101 in Exclude<keyof I_1["OS"], keyof OSConfig>]: never; };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_102 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
        TPA?: number;
        ipmi?: {
            host?: string;
            kind?: BMC_Kind;
        } & {
            host?: string;
            kind?: BMC_Kind;
        } & { [K_103 in Exclude<keyof I_1["ipmi"], keyof BMC>]: never; };
        relayboard?: {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        } & {
            host?: string;
            index?: number;
            kind?: RelayBoard_Kind;
        } & { [K_104 in Exclude<keyof I_1["relayboard"], keyof RelayBoard>]: never; };
        pdu?: {
            host?: string;
            outlets?: number[];
            kind?: PowerDistributionUnit_Kind;
        } & {
            host?: string;
            outlets?: number[] & number[] & { [K_105 in Exclude<keyof I_1["pdu"]["outlets"], keyof number[]>]: never; };
            kind?: PowerDistributionUnit_Kind;
        } & { [K_106 in Exclude<keyof I_1["pdu"], keyof PowerDistributionUnit>]: never; };
        raven?: {
            host?: string;
        } & {
            host?: string;
        } & { [K_107 in Exclude<keyof I_1["raven"], "host">]: never; };
        leafConfig?: {
            serviceAddressBlocks?: {
                list?: string[];
            };
            tenantAddressBlocks?: {
                list?: string[];
            };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            };
        } & {
            serviceAddressBlocks?: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_108 in Exclude<keyof I_1["leafConfig"]["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
            } & { [K_109 in Exclude<keyof I_1["leafConfig"]["serviceAddressBlocks"], "list">]: never; };
            tenantAddressBlocks?: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_110 in Exclude<keyof I_1["leafConfig"]["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
            } & { [K_111 in Exclude<keyof I_1["leafConfig"]["tenantAddressBlocks"], "list">]: never; };
            infrapodAddressBlocks?: {
                [x: string]: {
                    list?: string[];
                };
            } & {
                [x: string]: {
                    list?: string[];
                } & {
                    list?: string[] & string[] & { [K_112 in Exclude<keyof I_1["leafConfig"]["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
                } & { [K_113 in Exclude<keyof I_1["leafConfig"]["infrapodAddressBlocks"][string], "list">]: never; };
            } & { [K_114 in Exclude<keyof I_1["leafConfig"]["infrapodAddressBlocks"], string | number>]: never; };
        } & { [K_115 in Exclude<keyof I_1["leafConfig"], keyof LeafConfig>]: never; };
        infranetAddr?: {
            [x: string]: {
                list?: string[];
            };
        } & {
            [x: string]: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_116 in Exclude<keyof I_1["infranetAddr"][string]["list"], keyof string[]>]: never; };
            } & { [K_117 in Exclude<keyof I_1["infranetAddr"][string], "list">]: never; };
        } & { [K_118 in Exclude<keyof I_1["infranetAddr"], string | number>]: never; };
    } & { [K_119 in Exclude<keyof I_1, keyof Resource>]: never; }>(object: I_1): Resource;
};
export declare const Resource_InfranetAddrEntry: {
    encode(message: Resource_InfranetAddrEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Resource_InfranetAddrEntry;
    fromJSON(object: any): Resource_InfranetAddrEntry;
    toJSON(message: Resource_InfranetAddrEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            list?: string[];
        };
    } & {
        key?: string;
        value?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K in Exclude<keyof I["value"]["list"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["value"], "list">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof Resource_InfranetAddrEntry>]: never; }>(base?: I): Resource_InfranetAddrEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            list?: string[];
        };
    } & {
        key?: string;
        value?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["list"], keyof string[]>]: never; };
        } & { [K_4 in Exclude<keyof I_1["value"], "list">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof Resource_InfranetAddrEntry>]: never; }>(object: I_1): Resource_InfranetAddrEntry;
};
export declare const BMC: {
    encode(message: BMC, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BMC;
    fromJSON(object: any): BMC;
    toJSON(message: BMC): unknown;
    create<I extends {
        host?: string;
        kind?: BMC_Kind;
    } & {
        host?: string;
        kind?: BMC_Kind;
    } & { [K in Exclude<keyof I, keyof BMC>]: never; }>(base?: I): BMC;
    fromPartial<I_1 extends {
        host?: string;
        kind?: BMC_Kind;
    } & {
        host?: string;
        kind?: BMC_Kind;
    } & { [K_1 in Exclude<keyof I_1, keyof BMC>]: never; }>(object: I_1): BMC;
};
export declare const RelayBoard: {
    encode(message: RelayBoard, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RelayBoard;
    fromJSON(object: any): RelayBoard;
    toJSON(message: RelayBoard): unknown;
    create<I extends {
        host?: string;
        index?: number;
        kind?: RelayBoard_Kind;
    } & {
        host?: string;
        index?: number;
        kind?: RelayBoard_Kind;
    } & { [K in Exclude<keyof I, keyof RelayBoard>]: never; }>(base?: I): RelayBoard;
    fromPartial<I_1 extends {
        host?: string;
        index?: number;
        kind?: RelayBoard_Kind;
    } & {
        host?: string;
        index?: number;
        kind?: RelayBoard_Kind;
    } & { [K_1 in Exclude<keyof I_1, keyof RelayBoard>]: never; }>(object: I_1): RelayBoard;
};
export declare const PowerDistributionUnit: {
    encode(message: PowerDistributionUnit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PowerDistributionUnit;
    fromJSON(object: any): PowerDistributionUnit;
    toJSON(message: PowerDistributionUnit): unknown;
    create<I extends {
        host?: string;
        outlets?: number[];
        kind?: PowerDistributionUnit_Kind;
    } & {
        host?: string;
        outlets?: number[] & number[] & { [K in Exclude<keyof I["outlets"], keyof number[]>]: never; };
        kind?: PowerDistributionUnit_Kind;
    } & { [K_1 in Exclude<keyof I, keyof PowerDistributionUnit>]: never; }>(base?: I): PowerDistributionUnit;
    fromPartial<I_1 extends {
        host?: string;
        outlets?: number[];
        kind?: PowerDistributionUnit_Kind;
    } & {
        host?: string;
        outlets?: number[] & number[] & { [K_2 in Exclude<keyof I_1["outlets"], keyof number[]>]: never; };
        kind?: PowerDistributionUnit_Kind;
    } & { [K_3 in Exclude<keyof I_1, keyof PowerDistributionUnit>]: never; }>(object: I_1): PowerDistributionUnit;
};
export declare const Raven: {
    encode(message: Raven, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Raven;
    fromJSON(object: any): Raven;
    toJSON(message: Raven): unknown;
    create<I extends {
        host?: string;
    } & {
        host?: string;
    } & { [K in Exclude<keyof I, "host">]: never; }>(base?: I): Raven;
    fromPartial<I_1 extends {
        host?: string;
    } & {
        host?: string;
    } & { [K_1 in Exclude<keyof I_1, "host">]: never; }>(object: I_1): Raven;
};
export declare const Firmware: {
    encode(message: Firmware, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Firmware;
    fromJSON(object: any): Firmware;
    toJSON(message: Firmware): unknown;
    create<I extends {
        kind?: Firmware_Kind;
    } & {
        kind?: Firmware_Kind;
    } & { [K in Exclude<keyof I, "kind">]: never; }>(base?: I): Firmware;
    fromPartial<I_1 extends {
        kind?: Firmware_Kind;
    } & {
        kind?: Firmware_Kind;
    } & { [K_1 in Exclude<keyof I_1, "kind">]: never; }>(object: I_1): Firmware;
};
export declare const ResourceAllocation: {
    encode(message: ResourceAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ResourceAllocation;
    fromJSON(object: any): ResourceAllocation;
    toJSON(message: ResourceAllocation): unknown;
    create<I extends {
        resource?: string;
        facility?: string;
        mzid?: string;
        node?: string;
        procs?: {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            };
        };
        memory?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        };
        NICs?: {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            };
        };
        disks?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        };
        model?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        };
        revision?: number;
        virtual?: boolean;
    } & {
        resource?: string;
        facility?: string;
        mzid?: string;
        node?: string;
        procs?: {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            } & {
                [x: number]: {
                    cores?: number;
                } & {
                    cores?: number;
                } & { [K in Exclude<keyof I["procs"]["alloc"][number], "cores">]: never; };
            } & { [K_1 in Exclude<keyof I["procs"]["alloc"], number>]: never; };
        } & { [K_2 in Exclude<keyof I["procs"], "alloc">]: never; };
        memory?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            } & {
                [x: number]: {
                    capacity?: number;
                } & {
                    capacity?: number;
                } & { [K_3 in Exclude<keyof I["memory"]["alloc"][number], "capacity">]: never; };
            } & { [K_4 in Exclude<keyof I["memory"]["alloc"], number>]: never; };
        } & { [K_5 in Exclude<keyof I["memory"], "alloc">]: never; };
        NICs?: {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            } & {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    } & {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        } & {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        } & { [K_6 in Exclude<keyof I["NICs"]["alloc"][number]["alloc"][number], keyof PortAllocation>]: never; };
                    } & { [K_7 in Exclude<keyof I["NICs"]["alloc"][number]["alloc"], number>]: never; };
                } & { [K_8 in Exclude<keyof I["NICs"]["alloc"][number], "alloc">]: never; };
            } & { [K_9 in Exclude<keyof I["NICs"]["alloc"], number>]: never; };
        } & { [K_10 in Exclude<keyof I["NICs"], "alloc">]: never; };
        disks?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            } & {
                [x: number]: {
                    capacity?: number;
                } & {
                    capacity?: number;
                } & { [K_11 in Exclude<keyof I["disks"]["alloc"][number], "capacity">]: never; };
            } & { [K_12 in Exclude<keyof I["disks"]["alloc"], number>]: never; };
        } & { [K_13 in Exclude<keyof I["disks"], "alloc">]: never; };
        model?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        } & {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[] & ({
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            } & {
                index?: number;
                addrs?: string[] & string[] & { [K_14 in Exclude<keyof I["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_15 in Exclude<keyof I["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                } & { [K_16 in Exclude<keyof I["model"]["sockets"][number]["endpoint"], keyof Ref>]: never; };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_17 in Exclude<keyof I["model"]["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_18 in Exclude<keyof I["model"]["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_19 in Exclude<keyof I["model"]["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_20 in Exclude<keyof I["model"]["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_21 in Exclude<keyof I["model"]["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_22 in Exclude<keyof I["model"]["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_23 in Exclude<keyof I["model"]["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_24 in Exclude<keyof I["model"]["sockets"][number]["port"], keyof PortSpec>]: never; };
            } & { [K_25 in Exclude<keyof I["model"]["sockets"][number], keyof Socket>]: never; })[] & { [K_26 in Exclude<keyof I["model"]["sockets"], keyof {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[]>]: never; };
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                } & {
                    op?: Operator;
                    value?: ISA;
                } & { [K_27 in Exclude<keyof I["model"]["proc"]["isa"], keyof ISAConstraint>]: never; };
                family?: {
                    op?: Operator;
                    value?: string;
                } & {
                    op?: Operator;
                    value?: string;
                } & { [K_28 in Exclude<keyof I["model"]["proc"]["family"], keyof StringConstraint>]: never; };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_29 in Exclude<keyof I["model"]["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
                L2?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_30 in Exclude<keyof I["model"]["proc"]["L2"], keyof Uint64Constraint>]: never; };
                cores?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_31 in Exclude<keyof I["model"]["proc"]["cores"], keyof Uint32Constraint>]: never; };
                threads?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_32 in Exclude<keyof I["model"]["proc"]["threads"], keyof Uint32Constraint>]: never; };
                tdp?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_33 in Exclude<keyof I["model"]["proc"]["tdp"], keyof Uint32Constraint>]: never; };
                sockets?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_34 in Exclude<keyof I["model"]["proc"]["sockets"], keyof Uint32Constraint>]: never; };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_35 in Exclude<keyof I["model"]["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
            } & { [K_36 in Exclude<keyof I["model"]["proc"], keyof ProcSpec>]: never; };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                } & {
                    op?: Operator;
                    value?: MemoryType;
                } & { [K_37 in Exclude<keyof I["model"]["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_38 in Exclude<keyof I["model"]["memory"]["capacity"], keyof Uint64Constraint>]: never; };
                frequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_39 in Exclude<keyof I["model"]["memory"]["frequency"], keyof Uint64Constraint>]: never; };
                modules?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_40 in Exclude<keyof I["model"]["memory"]["modules"], keyof Uint64Constraint>]: never; };
            } & { [K_41 in Exclude<keyof I["model"]["memory"], keyof MemorySpec>]: never; };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            } & {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[] & ({
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_42 in Exclude<keyof I["model"]["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_43 in Exclude<keyof I["model"]["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_44 in Exclude<keyof I["model"]["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_45 in Exclude<keyof I["model"]["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_46 in Exclude<keyof I["model"]["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_47 in Exclude<keyof I["model"]["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_48 in Exclude<keyof I["model"]["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_49 in Exclude<keyof I["model"]["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_50 in Exclude<keyof I["model"]["NIC"]["ports"], keyof {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[]>]: never; };
            } & { [K_51 in Exclude<keyof I["model"]["NIC"], "ports">]: never; };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_52 in Exclude<keyof I["model"]["disks"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & { [K_53 in Exclude<keyof I["model"]["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                } & {
                    op?: Operator;
                    value?: DiskInterface;
                } & { [K_54 in Exclude<keyof I["model"]["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
                disks?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_55 in Exclude<keyof I["model"]["disks"]["disks"], keyof Uint64Constraint>]: never; };
            } & { [K_56 in Exclude<keyof I["model"]["disks"], keyof DiskSpec>]: never; };
            metal?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_57 in Exclude<keyof I["model"]["metal"], keyof BoolConstraint>]: never; };
            virt?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_58 in Exclude<keyof I["model"]["virt"], keyof BoolConstraint>]: never; };
            image?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_59 in Exclude<keyof I["model"]["image"], keyof StringConstraint>]: never; };
            platform?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_60 in Exclude<keyof I["model"]["platform"], keyof StringConstraint>]: never; };
            viz?: {
                color?: string;
                size?: number;
            } & {
                color?: string;
                size?: number;
            } & { [K_61 in Exclude<keyof I["model"]["viz"], keyof Visualization>]: never; };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            } & {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[] & ({
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & {
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & { [K_62 in Exclude<keyof I["model"]["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_63 in Exclude<keyof I["model"]["conf"]["routes"], keyof {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[]>]: never; };
            } & { [K_64 in Exclude<keyof I["model"]["conf"], "routes">]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_65 in Exclude<keyof I["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_66 in Exclude<keyof I["model"]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_67 in Exclude<keyof I["model"]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_68 in Exclude<keyof I["model"]["properties"], "keyvalues">]: never; };
            host?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_69 in Exclude<keyof I["model"]["host"], keyof StringConstraint>]: never; };
        } & { [K_70 in Exclude<keyof I["model"], keyof Node>]: never; };
        revision?: number;
        virtual?: boolean;
    } & { [K_71 in Exclude<keyof I, keyof ResourceAllocation>]: never; }>(base?: I): ResourceAllocation;
    fromPartial<I_1 extends {
        resource?: string;
        facility?: string;
        mzid?: string;
        node?: string;
        procs?: {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            };
        };
        memory?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        };
        NICs?: {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            };
        };
        disks?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        };
        model?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        };
        revision?: number;
        virtual?: boolean;
    } & {
        resource?: string;
        facility?: string;
        mzid?: string;
        node?: string;
        procs?: {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    cores?: number;
                };
            } & {
                [x: number]: {
                    cores?: number;
                } & {
                    cores?: number;
                } & { [K_72 in Exclude<keyof I_1["procs"]["alloc"][number], "cores">]: never; };
            } & { [K_73 in Exclude<keyof I_1["procs"]["alloc"], number>]: never; };
        } & { [K_74 in Exclude<keyof I_1["procs"], "alloc">]: never; };
        memory?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            } & {
                [x: number]: {
                    capacity?: number;
                } & {
                    capacity?: number;
                } & { [K_75 in Exclude<keyof I_1["memory"]["alloc"][number], "capacity">]: never; };
            } & { [K_76 in Exclude<keyof I_1["memory"]["alloc"], number>]: never; };
        } & { [K_77 in Exclude<keyof I_1["memory"], "alloc">]: never; };
        NICs?: {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                };
            } & {
                [x: number]: {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    };
                } & {
                    alloc?: {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        };
                    } & {
                        [x: number]: {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        } & {
                            name?: string;
                            mac?: string;
                            capacity?: number;
                            VfName?: string;
                            VfAlloc?: boolean;
                        } & { [K_78 in Exclude<keyof I_1["NICs"]["alloc"][number]["alloc"][number], keyof PortAllocation>]: never; };
                    } & { [K_79 in Exclude<keyof I_1["NICs"]["alloc"][number]["alloc"], number>]: never; };
                } & { [K_80 in Exclude<keyof I_1["NICs"]["alloc"][number], "alloc">]: never; };
            } & { [K_81 in Exclude<keyof I_1["NICs"]["alloc"], number>]: never; };
        } & { [K_82 in Exclude<keyof I_1["NICs"], "alloc">]: never; };
        disks?: {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    capacity?: number;
                };
            } & {
                [x: number]: {
                    capacity?: number;
                } & {
                    capacity?: number;
                } & { [K_83 in Exclude<keyof I_1["disks"]["alloc"][number], "capacity">]: never; };
            } & { [K_84 in Exclude<keyof I_1["disks"]["alloc"], number>]: never; };
        } & { [K_85 in Exclude<keyof I_1["disks"], "alloc">]: never; };
        model?: {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[];
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            };
            metal?: {
                op?: Operator;
                value?: boolean;
            };
            virt?: {
                op?: Operator;
                value?: boolean;
            };
            image?: {
                op?: Operator;
                value?: string;
            };
            platform?: {
                op?: Operator;
                value?: string;
            };
            viz?: {
                color?: string;
                size?: number;
            };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            };
            host?: {
                op?: Operator;
                value?: string;
            };
        } & {
            id?: string;
            sockets?: {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[] & ({
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            } & {
                index?: number;
                addrs?: string[] & string[] & { [K_86 in Exclude<keyof I_1["model"]["sockets"][number]["addrs"], keyof string[]>]: never; };
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_87 in Exclude<keyof I_1["model"]["sockets"][number]["endpoint"]["subref"], "index">]: never; };
                } & { [K_88 in Exclude<keyof I_1["model"]["sockets"][number]["endpoint"], keyof Ref>]: never; };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_89 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_90 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_91 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_92 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_93 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_94 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_95 in Exclude<keyof I_1["model"]["sockets"][number]["port"]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_96 in Exclude<keyof I_1["model"]["sockets"][number]["port"], keyof PortSpec>]: never; };
            } & { [K_97 in Exclude<keyof I_1["model"]["sockets"][number], keyof Socket>]: never; })[] & { [K_98 in Exclude<keyof I_1["model"]["sockets"], keyof {
                index?: number;
                addrs?: string[];
                endpoint?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                port?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                };
            }[]>]: never; };
            proc?: {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                };
                family?: {
                    op?: Operator;
                    value?: string;
                };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                };
                L2?: {
                    op?: Operator;
                    value?: number;
                };
                cores?: {
                    op?: Operator;
                    value?: number;
                };
                threads?: {
                    op?: Operator;
                    value?: number;
                };
                tdp?: {
                    op?: Operator;
                    value?: number;
                };
                sockets?: {
                    op?: Operator;
                    value?: number;
                };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                };
            } & {
                isa?: {
                    op?: Operator;
                    value?: ISA;
                } & {
                    op?: Operator;
                    value?: ISA;
                } & { [K_99 in Exclude<keyof I_1["model"]["proc"]["isa"], keyof ISAConstraint>]: never; };
                family?: {
                    op?: Operator;
                    value?: string;
                } & {
                    op?: Operator;
                    value?: string;
                } & { [K_100 in Exclude<keyof I_1["model"]["proc"]["family"], keyof StringConstraint>]: never; };
                BaseFrequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_101 in Exclude<keyof I_1["model"]["proc"]["BaseFrequency"], keyof Uint64Constraint>]: never; };
                L2?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_102 in Exclude<keyof I_1["model"]["proc"]["L2"], keyof Uint64Constraint>]: never; };
                cores?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_103 in Exclude<keyof I_1["model"]["proc"]["cores"], keyof Uint32Constraint>]: never; };
                threads?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_104 in Exclude<keyof I_1["model"]["proc"]["threads"], keyof Uint32Constraint>]: never; };
                tdp?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_105 in Exclude<keyof I_1["model"]["proc"]["tdp"], keyof Uint32Constraint>]: never; };
                sockets?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_106 in Exclude<keyof I_1["model"]["proc"]["sockets"], keyof Uint32Constraint>]: never; };
                hyperthreaded?: {
                    op?: Operator;
                    value?: boolean;
                } & {
                    op?: Operator;
                    value?: boolean;
                } & { [K_107 in Exclude<keyof I_1["model"]["proc"]["hyperthreaded"], keyof BoolConstraint>]: never; };
            } & { [K_108 in Exclude<keyof I_1["model"]["proc"], keyof ProcSpec>]: never; };
            memory?: {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                };
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                frequency?: {
                    op?: Operator;
                    value?: number;
                };
                modules?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                type?: {
                    op?: Operator;
                    value?: MemoryType;
                } & {
                    op?: Operator;
                    value?: MemoryType;
                } & { [K_109 in Exclude<keyof I_1["model"]["memory"]["type"], keyof MemoryTypeConstraint>]: never; };
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_110 in Exclude<keyof I_1["model"]["memory"]["capacity"], keyof Uint64Constraint>]: never; };
                frequency?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_111 in Exclude<keyof I_1["model"]["memory"]["frequency"], keyof Uint64Constraint>]: never; };
                modules?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_112 in Exclude<keyof I_1["model"]["memory"]["modules"], keyof Uint64Constraint>]: never; };
            } & { [K_113 in Exclude<keyof I_1["model"]["memory"], keyof MemorySpec>]: never; };
            NIC?: {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[];
            } & {
                ports?: {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[] & ({
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                } & {
                    protocols?: Layer1[] & Layer1[] & { [K_114 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["protocols"], keyof Layer1[]>]: never; };
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_115 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & {
                        op?: Operator;
                        value?: ConnectorKind;
                    } & { [K_116 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    } & {
                        op?: Operator;
                        value?: number;
                    } & { [K_117 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    } & {
                        op?: Operator;
                        value?: NICModel;
                    } & { [K_118 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["model"], keyof NICModelConstraint>]: never; };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_119 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    } & {
                        op?: Operator;
                        value?: boolean;
                    } & { [K_120 in Exclude<keyof I_1["model"]["NIC"]["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
                } & { [K_121 in Exclude<keyof I_1["model"]["NIC"]["ports"][number], keyof PortSpec>]: never; })[] & { [K_122 in Exclude<keyof I_1["model"]["NIC"]["ports"], keyof {
                    protocols?: Layer1[];
                    capacity?: {
                        op?: Operator;
                        value?: number;
                    };
                    formFactor?: {
                        op?: Operator;
                        value?: ConnectorKind;
                    };
                    queues?: {
                        op?: Operator;
                        value?: number;
                    };
                    model?: {
                        op?: Operator;
                        value?: NICModel;
                    };
                    DPDK?: {
                        op?: Operator;
                        value?: boolean;
                    };
                    SriovVF?: {
                        op?: Operator;
                        value?: boolean;
                    };
                }[]>]: never; };
            } & { [K_123 in Exclude<keyof I_1["model"]["NIC"], "ports">]: never; };
            disks?: {
                capacity?: {
                    op?: Operator;
                    value?: number;
                };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                };
                disks?: {
                    op?: Operator;
                    value?: number;
                };
            } & {
                capacity?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_124 in Exclude<keyof I_1["model"]["disks"]["capacity"], keyof Uint64Constraint>]: never; };
                formFactor?: {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & {
                    op?: Operator;
                    value?: DiskFormFactor;
                } & { [K_125 in Exclude<keyof I_1["model"]["disks"]["formFactor"], keyof DiskFormFactorConstraint>]: never; };
                diskInterface?: {
                    op?: Operator;
                    value?: DiskInterface;
                } & {
                    op?: Operator;
                    value?: DiskInterface;
                } & { [K_126 in Exclude<keyof I_1["model"]["disks"]["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
                disks?: {
                    op?: Operator;
                    value?: number;
                } & {
                    op?: Operator;
                    value?: number;
                } & { [K_127 in Exclude<keyof I_1["model"]["disks"]["disks"], keyof Uint64Constraint>]: never; };
            } & { [K_128 in Exclude<keyof I_1["model"]["disks"], keyof DiskSpec>]: never; };
            metal?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_129 in Exclude<keyof I_1["model"]["metal"], keyof BoolConstraint>]: never; };
            virt?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_130 in Exclude<keyof I_1["model"]["virt"], keyof BoolConstraint>]: never; };
            image?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_131 in Exclude<keyof I_1["model"]["image"], keyof StringConstraint>]: never; };
            platform?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_132 in Exclude<keyof I_1["model"]["platform"], keyof StringConstraint>]: never; };
            viz?: {
                color?: string;
                size?: number;
            } & {
                color?: string;
                size?: number;
            } & { [K_133 in Exclude<keyof I_1["model"]["viz"], keyof Visualization>]: never; };
            conf?: {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[];
            } & {
                routes?: {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[] & ({
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & {
                    src?: string;
                    gw?: string;
                    dst?: string;
                } & { [K_134 in Exclude<keyof I_1["model"]["conf"]["routes"][number], keyof RouteConfig>]: never; })[] & { [K_135 in Exclude<keyof I_1["model"]["conf"]["routes"], keyof {
                    src?: string;
                    gw?: string;
                    dst?: string;
                }[]>]: never; };
            } & { [K_136 in Exclude<keyof I_1["model"]["conf"], "routes">]: never; };
            properties?: {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                };
            } & {
                keyvalues?: {
                    [x: string]: {
                        values?: string[];
                    };
                } & {
                    [x: string]: {
                        values?: string[];
                    } & {
                        values?: string[] & string[] & { [K_137 in Exclude<keyof I_1["model"]["properties"]["keyvalues"][string]["values"], keyof string[]>]: never; };
                    } & { [K_138 in Exclude<keyof I_1["model"]["properties"]["keyvalues"][string], "values">]: never; };
                } & { [K_139 in Exclude<keyof I_1["model"]["properties"]["keyvalues"], string | number>]: never; };
            } & { [K_140 in Exclude<keyof I_1["model"]["properties"], "keyvalues">]: never; };
            host?: {
                op?: Operator;
                value?: string;
            } & {
                op?: Operator;
                value?: string;
            } & { [K_141 in Exclude<keyof I_1["model"]["host"], keyof StringConstraint>]: never; };
        } & { [K_142 in Exclude<keyof I_1["model"], keyof Node>]: never; };
        revision?: number;
        virtual?: boolean;
    } & { [K_143 in Exclude<keyof I_1, keyof ResourceAllocation>]: never; }>(object: I_1): ResourceAllocation;
};
export declare const CableAllocation: {
    encode(message: CableAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CableAllocation;
    fromJSON(object: any): CableAllocation;
    toJSON(message: CableAllocation): unknown;
    create<I extends {
        cable?: string;
        facility?: string;
        mzid?: string;
        link?: string;
        capacity?: number;
        revision?: number;
    } & {
        cable?: string;
        facility?: string;
        mzid?: string;
        link?: string;
        capacity?: number;
        revision?: number;
    } & { [K in Exclude<keyof I, keyof CableAllocation>]: never; }>(base?: I): CableAllocation;
    fromPartial<I_1 extends {
        cable?: string;
        facility?: string;
        mzid?: string;
        link?: string;
        capacity?: number;
        revision?: number;
    } & {
        cable?: string;
        facility?: string;
        mzid?: string;
        link?: string;
        capacity?: number;
        revision?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof CableAllocation>]: never; }>(object: I_1): CableAllocation;
};
export declare const AddressList: {
    encode(message: AddressList, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddressList;
    fromJSON(object: any): AddressList;
    toJSON(message: AddressList): unknown;
    create<I extends {
        list?: string[];
    } & {
        list?: string[] & string[] & { [K in Exclude<keyof I["list"], keyof string[]>]: never; };
    } & { [K_1 in Exclude<keyof I, "list">]: never; }>(base?: I): AddressList;
    fromPartial<I_1 extends {
        list?: string[];
    } & {
        list?: string[] & string[] & { [K_2 in Exclude<keyof I_1["list"], keyof string[]>]: never; };
    } & { [K_3 in Exclude<keyof I_1, "list">]: never; }>(object: I_1): AddressList;
};
export declare const LeafConfig: {
    encode(message: LeafConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeafConfig;
    fromJSON(object: any): LeafConfig;
    toJSON(message: LeafConfig): unknown;
    create<I extends {
        serviceAddressBlocks?: {
            list?: string[];
        };
        tenantAddressBlocks?: {
            list?: string[];
        };
        infrapodAddressBlocks?: {
            [x: string]: {
                list?: string[];
            };
        };
    } & {
        serviceAddressBlocks?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K in Exclude<keyof I["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["serviceAddressBlocks"], "list">]: never; };
        tenantAddressBlocks?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K_2 in Exclude<keyof I["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
        } & { [K_3 in Exclude<keyof I["tenantAddressBlocks"], "list">]: never; };
        infrapodAddressBlocks?: {
            [x: string]: {
                list?: string[];
            };
        } & {
            [x: string]: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_4 in Exclude<keyof I["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
            } & { [K_5 in Exclude<keyof I["infrapodAddressBlocks"][string], "list">]: never; };
        } & { [K_6 in Exclude<keyof I["infrapodAddressBlocks"], string | number>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof LeafConfig>]: never; }>(base?: I): LeafConfig;
    fromPartial<I_1 extends {
        serviceAddressBlocks?: {
            list?: string[];
        };
        tenantAddressBlocks?: {
            list?: string[];
        };
        infrapodAddressBlocks?: {
            [x: string]: {
                list?: string[];
            };
        };
    } & {
        serviceAddressBlocks?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K_8 in Exclude<keyof I_1["serviceAddressBlocks"]["list"], keyof string[]>]: never; };
        } & { [K_9 in Exclude<keyof I_1["serviceAddressBlocks"], "list">]: never; };
        tenantAddressBlocks?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K_10 in Exclude<keyof I_1["tenantAddressBlocks"]["list"], keyof string[]>]: never; };
        } & { [K_11 in Exclude<keyof I_1["tenantAddressBlocks"], "list">]: never; };
        infrapodAddressBlocks?: {
            [x: string]: {
                list?: string[];
            };
        } & {
            [x: string]: {
                list?: string[];
            } & {
                list?: string[] & string[] & { [K_12 in Exclude<keyof I_1["infrapodAddressBlocks"][string]["list"], keyof string[]>]: never; };
            } & { [K_13 in Exclude<keyof I_1["infrapodAddressBlocks"][string], "list">]: never; };
        } & { [K_14 in Exclude<keyof I_1["infrapodAddressBlocks"], string | number>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof LeafConfig>]: never; }>(object: I_1): LeafConfig;
};
export declare const LeafConfig_InfrapodAddressBlocksEntry: {
    encode(message: LeafConfig_InfrapodAddressBlocksEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LeafConfig_InfrapodAddressBlocksEntry;
    fromJSON(object: any): LeafConfig_InfrapodAddressBlocksEntry;
    toJSON(message: LeafConfig_InfrapodAddressBlocksEntry): unknown;
    create<I extends {
        key?: string;
        value?: {
            list?: string[];
        };
    } & {
        key?: string;
        value?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K in Exclude<keyof I["value"]["list"], keyof string[]>]: never; };
        } & { [K_1 in Exclude<keyof I["value"], "list">]: never; };
    } & { [K_2 in Exclude<keyof I, keyof LeafConfig_InfrapodAddressBlocksEntry>]: never; }>(base?: I): LeafConfig_InfrapodAddressBlocksEntry;
    fromPartial<I_1 extends {
        key?: string;
        value?: {
            list?: string[];
        };
    } & {
        key?: string;
        value?: {
            list?: string[];
        } & {
            list?: string[] & string[] & { [K_3 in Exclude<keyof I_1["value"]["list"], keyof string[]>]: never; };
        } & { [K_4 in Exclude<keyof I_1["value"], "list">]: never; };
    } & { [K_5 in Exclude<keyof I_1, keyof LeafConfig_InfrapodAddressBlocksEntry>]: never; }>(object: I_1): LeafConfig_InfrapodAddressBlocksEntry;
};
export declare const OSConfig: {
    encode(message: OSConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OSConfig;
    fromJSON(object: any): OSConfig;
    toJSON(message: OSConfig): unknown;
    create<I extends {
        BGP?: {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[];
        bridge?: {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[];
        VLAN?: {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[];
        serviceEndpoints?: {
            [x: number]: {
                address?: string;
            };
        };
        append?: string;
        rootdev?: string;
        defaultImage?: string;
    } & {
        BGP?: {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[] & ({
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        } & {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[] & ({
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & {
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & { [K in Exclude<keyof I["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_1 in Exclude<keyof I["BGP"][number]["Interfaces"], keyof {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[]>]: never; };
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            } & {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[] & ({
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & { [K_2 in Exclude<keyof I["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_3 in Exclude<keyof I["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[]>]: never; };
            } & { [K_4 in Exclude<keyof I["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
        } & { [K_5 in Exclude<keyof I["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_6 in Exclude<keyof I["BGP"], keyof {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[]>]: never; };
        bridge?: {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[] & ({
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        } & {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[] & string[] & { [K_7 in Exclude<keyof I["bridge"][number]["addrs"], keyof string[]>]: never; };
            role?: LinkRole;
        } & { [K_8 in Exclude<keyof I["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_9 in Exclude<keyof I["bridge"], keyof {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[]>]: never; };
        VLAN?: {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[] & ({
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        } & {
            device?: string;
            vid?: number;
            addrs?: string[] & string[] & { [K_10 in Exclude<keyof I["VLAN"][number]["addrs"], keyof string[]>]: never; };
            role?: LinkRole;
        } & { [K_11 in Exclude<keyof I["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_12 in Exclude<keyof I["VLAN"], keyof {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[]>]: never; };
        serviceEndpoints?: {
            [x: number]: {
                address?: string;
            };
        } & {
            [x: number]: {
                address?: string;
            } & {
                address?: string;
            } & { [K_13 in Exclude<keyof I["serviceEndpoints"][number], "address">]: never; };
        } & { [K_14 in Exclude<keyof I["serviceEndpoints"], number>]: never; };
        append?: string;
        rootdev?: string;
        defaultImage?: string;
    } & { [K_15 in Exclude<keyof I, keyof OSConfig>]: never; }>(base?: I): OSConfig;
    fromPartial<I_1 extends {
        BGP?: {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[];
        bridge?: {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[];
        VLAN?: {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[];
        serviceEndpoints?: {
            [x: number]: {
                address?: string;
            };
        };
        append?: string;
        rootdev?: string;
        defaultImage?: string;
    } & {
        BGP?: {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[] & ({
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        } & {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[] & ({
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & {
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & { [K_16 in Exclude<keyof I_1["BGP"][number]["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_17 in Exclude<keyof I_1["BGP"][number]["Interfaces"], keyof {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[]>]: never; };
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            } & {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[] & ({
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                } & { [K_18 in Exclude<keyof I_1["BGP"][number]["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_19 in Exclude<keyof I_1["BGP"][number]["EVPN"]["TunnelEndpoints"], keyof {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[]>]: never; };
            } & { [K_20 in Exclude<keyof I_1["BGP"][number]["EVPN"], "TunnelEndpoints">]: never; };
        } & { [K_21 in Exclude<keyof I_1["BGP"][number], keyof BGPRouterConfig>]: never; })[] & { [K_22 in Exclude<keyof I_1["BGP"], keyof {
            vrf?: string;
            ASN?: number;
            Interfaces?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
            EVPN?: {
                TunnelEndpoints?: {
                    address?: string;
                    interface?: string;
                    role?: LinkRole;
                }[];
            };
        }[]>]: never; };
        bridge?: {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[] & ({
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        } & {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[] & string[] & { [K_23 in Exclude<keyof I_1["bridge"][number]["addrs"], keyof string[]>]: never; };
            role?: LinkRole;
        } & { [K_24 in Exclude<keyof I_1["bridge"][number], keyof BridgeConfig>]: never; })[] & { [K_25 in Exclude<keyof I_1["bridge"], keyof {
            name?: string;
            vlanAware?: boolean;
            addrs?: string[];
            role?: LinkRole;
        }[]>]: never; };
        VLAN?: {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[] & ({
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        } & {
            device?: string;
            vid?: number;
            addrs?: string[] & string[] & { [K_26 in Exclude<keyof I_1["VLAN"][number]["addrs"], keyof string[]>]: never; };
            role?: LinkRole;
        } & { [K_27 in Exclude<keyof I_1["VLAN"][number], keyof VLANConfig>]: never; })[] & { [K_28 in Exclude<keyof I_1["VLAN"], keyof {
            device?: string;
            vid?: number;
            addrs?: string[];
            role?: LinkRole;
        }[]>]: never; };
        serviceEndpoints?: {
            [x: number]: {
                address?: string;
            };
        } & {
            [x: number]: {
                address?: string;
            } & {
                address?: string;
            } & { [K_29 in Exclude<keyof I_1["serviceEndpoints"][number], "address">]: never; };
        } & { [K_30 in Exclude<keyof I_1["serviceEndpoints"], number>]: never; };
        append?: string;
        rootdev?: string;
        defaultImage?: string;
    } & { [K_31 in Exclude<keyof I_1, keyof OSConfig>]: never; }>(object: I_1): OSConfig;
};
export declare const OSConfig_ServiceEndpointsEntry: {
    encode(message: OSConfig_ServiceEndpointsEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): OSConfig_ServiceEndpointsEntry;
    fromJSON(object: any): OSConfig_ServiceEndpointsEntry;
    toJSON(message: OSConfig_ServiceEndpointsEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            address?: string;
        };
    } & {
        key?: number;
        value?: {
            address?: string;
        } & {
            address?: string;
        } & { [K in Exclude<keyof I["value"], "address">]: never; };
    } & { [K_1 in Exclude<keyof I, keyof OSConfig_ServiceEndpointsEntry>]: never; }>(base?: I): OSConfig_ServiceEndpointsEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            address?: string;
        };
    } & {
        key?: number;
        value?: {
            address?: string;
        } & {
            address?: string;
        } & { [K_2 in Exclude<keyof I_1["value"], "address">]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof OSConfig_ServiceEndpointsEntry>]: never; }>(object: I_1): OSConfig_ServiceEndpointsEntry;
};
export declare const ServiceEndpoint: {
    encode(message: ServiceEndpoint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ServiceEndpoint;
    fromJSON(object: any): ServiceEndpoint;
    toJSON(message: ServiceEndpoint): unknown;
    create<I extends {
        address?: string;
    } & {
        address?: string;
    } & { [K in Exclude<keyof I, "address">]: never; }>(base?: I): ServiceEndpoint;
    fromPartial<I_1 extends {
        address?: string;
    } & {
        address?: string;
    } & { [K_1 in Exclude<keyof I_1, "address">]: never; }>(object: I_1): ServiceEndpoint;
};
export declare const VLANConfig: {
    encode(message: VLANConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): VLANConfig;
    fromJSON(object: any): VLANConfig;
    toJSON(message: VLANConfig): unknown;
    create<I extends {
        device?: string;
        vid?: number;
        addrs?: string[];
        role?: LinkRole;
    } & {
        device?: string;
        vid?: number;
        addrs?: string[] & string[] & { [K in Exclude<keyof I["addrs"], keyof string[]>]: never; };
        role?: LinkRole;
    } & { [K_1 in Exclude<keyof I, keyof VLANConfig>]: never; }>(base?: I): VLANConfig;
    fromPartial<I_1 extends {
        device?: string;
        vid?: number;
        addrs?: string[];
        role?: LinkRole;
    } & {
        device?: string;
        vid?: number;
        addrs?: string[] & string[] & { [K_2 in Exclude<keyof I_1["addrs"], keyof string[]>]: never; };
        role?: LinkRole;
    } & { [K_3 in Exclude<keyof I_1, keyof VLANConfig>]: never; }>(object: I_1): VLANConfig;
};
export declare const InterfaceConfig: {
    encode(message: InterfaceConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): InterfaceConfig;
    fromJSON(object: any): InterfaceConfig;
    toJSON(message: InterfaceConfig): unknown;
    create<I extends {
        address?: string;
        interface?: string;
        role?: LinkRole;
    } & {
        address?: string;
        interface?: string;
        role?: LinkRole;
    } & { [K in Exclude<keyof I, keyof InterfaceConfig>]: never; }>(base?: I): InterfaceConfig;
    fromPartial<I_1 extends {
        address?: string;
        interface?: string;
        role?: LinkRole;
    } & {
        address?: string;
        interface?: string;
        role?: LinkRole;
    } & { [K_1 in Exclude<keyof I_1, keyof InterfaceConfig>]: never; }>(object: I_1): InterfaceConfig;
};
export declare const BGPRouterConfig: {
    encode(message: BGPRouterConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BGPRouterConfig;
    fromJSON(object: any): BGPRouterConfig;
    toJSON(message: BGPRouterConfig): unknown;
    create<I extends {
        vrf?: string;
        ASN?: number;
        Interfaces?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[];
        EVPN?: {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
        };
    } & {
        vrf?: string;
        ASN?: number;
        Interfaces?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[] & ({
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & {
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & { [K in Exclude<keyof I["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_1 in Exclude<keyof I["Interfaces"], keyof {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[]>]: never; };
        EVPN?: {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
        } & {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[] & ({
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & {
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & { [K_2 in Exclude<keyof I["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_3 in Exclude<keyof I["EVPN"]["TunnelEndpoints"], keyof {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[]>]: never; };
        } & { [K_4 in Exclude<keyof I["EVPN"], "TunnelEndpoints">]: never; };
    } & { [K_5 in Exclude<keyof I, keyof BGPRouterConfig>]: never; }>(base?: I): BGPRouterConfig;
    fromPartial<I_1 extends {
        vrf?: string;
        ASN?: number;
        Interfaces?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[];
        EVPN?: {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
        };
    } & {
        vrf?: string;
        ASN?: number;
        Interfaces?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[] & ({
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & {
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & { [K_6 in Exclude<keyof I_1["Interfaces"][number], keyof InterfaceConfig>]: never; })[] & { [K_7 in Exclude<keyof I_1["Interfaces"], keyof {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[]>]: never; };
        EVPN?: {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[];
        } & {
            TunnelEndpoints?: {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[] & ({
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & {
                address?: string;
                interface?: string;
                role?: LinkRole;
            } & { [K_8 in Exclude<keyof I_1["EVPN"]["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_9 in Exclude<keyof I_1["EVPN"]["TunnelEndpoints"], keyof {
                address?: string;
                interface?: string;
                role?: LinkRole;
            }[]>]: never; };
        } & { [K_10 in Exclude<keyof I_1["EVPN"], "TunnelEndpoints">]: never; };
    } & { [K_11 in Exclude<keyof I_1, keyof BGPRouterConfig>]: never; }>(object: I_1): BGPRouterConfig;
};
export declare const EVPNConfig: {
    encode(message: EVPNConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EVPNConfig;
    fromJSON(object: any): EVPNConfig;
    toJSON(message: EVPNConfig): unknown;
    create<I extends {
        TunnelEndpoints?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[];
    } & {
        TunnelEndpoints?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[] & ({
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & {
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & { [K in Exclude<keyof I["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_1 in Exclude<keyof I["TunnelEndpoints"], keyof {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[]>]: never; };
    } & { [K_2 in Exclude<keyof I, "TunnelEndpoints">]: never; }>(base?: I): EVPNConfig;
    fromPartial<I_1 extends {
        TunnelEndpoints?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[];
    } & {
        TunnelEndpoints?: {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[] & ({
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & {
            address?: string;
            interface?: string;
            role?: LinkRole;
        } & { [K_3 in Exclude<keyof I_1["TunnelEndpoints"][number], keyof InterfaceConfig>]: never; })[] & { [K_4 in Exclude<keyof I_1["TunnelEndpoints"], keyof {
            address?: string;
            interface?: string;
            role?: LinkRole;
        }[]>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "TunnelEndpoints">]: never; }>(object: I_1): EVPNConfig;
};
export declare const BridgeConfig: {
    encode(message: BridgeConfig, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BridgeConfig;
    fromJSON(object: any): BridgeConfig;
    toJSON(message: BridgeConfig): unknown;
    create<I extends {
        name?: string;
        vlanAware?: boolean;
        addrs?: string[];
        role?: LinkRole;
    } & {
        name?: string;
        vlanAware?: boolean;
        addrs?: string[] & string[] & { [K in Exclude<keyof I["addrs"], keyof string[]>]: never; };
        role?: LinkRole;
    } & { [K_1 in Exclude<keyof I, keyof BridgeConfig>]: never; }>(base?: I): BridgeConfig;
    fromPartial<I_1 extends {
        name?: string;
        vlanAware?: boolean;
        addrs?: string[];
        role?: LinkRole;
    } & {
        name?: string;
        vlanAware?: boolean;
        addrs?: string[] & string[] & { [K_2 in Exclude<keyof I_1["addrs"], keyof string[]>]: never; };
        role?: LinkRole;
    } & { [K_3 in Exclude<keyof I_1, keyof BridgeConfig>]: never; }>(object: I_1): BridgeConfig;
};
export declare const Breakout: {
    encode(message: Breakout, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Breakout;
    fromJSON(object: any): Breakout;
    toJSON(message: Breakout): unknown;
    create<I extends {
        index?: number;
        radix?: number;
    } & {
        index?: number;
        radix?: number;
    } & { [K in Exclude<keyof I, keyof Breakout>]: never; }>(base?: I): Breakout;
    fromPartial<I_1 extends {
        index?: number;
        radix?: number;
    } & {
        index?: number;
        radix?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Breakout>]: never; }>(object: I_1): Breakout;
};
export declare const PortBond: {
    encode(message: PortBond, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortBond;
    fromJSON(object: any): PortBond;
    toJSON(message: PortBond): unknown;
    create<I extends {
        name?: string;
    } & {
        name?: string;
    } & { [K in Exclude<keyof I, "name">]: never; }>(base?: I): PortBond;
    fromPartial<I_1 extends {
        name?: string;
    } & {
        name?: string;
    } & { [K_1 in Exclude<keyof I_1, "name">]: never; }>(object: I_1): PortBond;
};
export declare const sriovPf: {
    encode(message: sriovPf, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): sriovPf;
    fromJSON(object: any): sriovPf;
    toJSON(message: sriovPf): unknown;
    create<I extends {
        MaxVFs?: number;
    } & {
        MaxVFs?: number;
    } & { [K in Exclude<keyof I, "MaxVFs">]: never; }>(base?: I): sriovPf;
    fromPartial<I_1 extends {
        MaxVFs?: number;
    } & {
        MaxVFs?: number;
    } & { [K_1 in Exclude<keyof I_1, "MaxVFs">]: never; }>(object: I_1): sriovPf;
};
export declare const sriovVf: {
    encode(message: sriovVf, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): sriovVf;
    fromJSON(object: any): sriovVf;
    toJSON(message: sriovVf): unknown;
    create<I extends {
        VfIndex?: number;
    } & {
        VfIndex?: number;
    } & { [K in Exclude<keyof I, "VfIndex">]: never; }>(base?: I): sriovVf;
    fromPartial<I_1 extends {
        VfIndex?: number;
    } & {
        VfIndex?: number;
    } & { [K_1 in Exclude<keyof I_1, "VfIndex">]: never; }>(object: I_1): sriovVf;
};
export declare const SRIOV: {
    encode(message: SRIOV, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SRIOV;
    fromJSON(object: any): SRIOV;
    toJSON(message: SRIOV): unknown;
    create<I extends {
        Pf?: {
            MaxVFs?: number;
        };
        Vf?: {
            VfIndex?: number;
        };
        PfNi?: number;
        PfPi?: number;
    } & {
        Pf?: {
            MaxVFs?: number;
        } & {
            MaxVFs?: number;
        } & { [K in Exclude<keyof I["Pf"], "MaxVFs">]: never; };
        Vf?: {
            VfIndex?: number;
        } & {
            VfIndex?: number;
        } & { [K_1 in Exclude<keyof I["Vf"], "VfIndex">]: never; };
        PfNi?: number;
        PfPi?: number;
    } & { [K_2 in Exclude<keyof I, keyof SRIOV>]: never; }>(base?: I): SRIOV;
    fromPartial<I_1 extends {
        Pf?: {
            MaxVFs?: number;
        };
        Vf?: {
            VfIndex?: number;
        };
        PfNi?: number;
        PfPi?: number;
    } & {
        Pf?: {
            MaxVFs?: number;
        } & {
            MaxVFs?: number;
        } & { [K_3 in Exclude<keyof I_1["Pf"], "MaxVFs">]: never; };
        Vf?: {
            VfIndex?: number;
        } & {
            VfIndex?: number;
        } & { [K_4 in Exclude<keyof I_1["Vf"], "VfIndex">]: never; };
        PfNi?: number;
        PfPi?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof SRIOV>]: never; }>(object: I_1): SRIOV;
};
export declare const Port: {
    encode(message: Port, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Port;
    fromJSON(object: any): Port;
    toJSON(message: Port): unknown;
    create<I extends {
        parent?: string;
        index?: number;
        protocols?: Layer1[];
        capacity?: number;
        mac?: string;
        formFactor?: ConnectorKind;
        connector?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        role?: LinkRole;
        TPA?: number;
        queues?: number;
        breakout?: {
            index?: number;
            radix?: number;
        };
        bond?: {
            name?: string;
        };
        name?: string;
        sriov?: {
            Pf?: {
                MaxVFs?: number;
            };
            Vf?: {
                VfIndex?: number;
            };
            PfNi?: number;
            PfPi?: number;
        };
    } & {
        parent?: string;
        index?: number;
        protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
        mac?: string;
        formFactor?: ConnectorKind;
        connector?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_1 in Exclude<keyof I["connector"]["subref"], "index">]: never; };
        } & { [K_2 in Exclude<keyof I["connector"], keyof Ref>]: never; };
        role?: LinkRole;
        TPA?: number;
        queues?: number;
        breakout?: {
            index?: number;
            radix?: number;
        } & {
            index?: number;
            radix?: number;
        } & { [K_3 in Exclude<keyof I["breakout"], keyof Breakout>]: never; };
        bond?: {
            name?: string;
        } & {
            name?: string;
        } & { [K_4 in Exclude<keyof I["bond"], "name">]: never; };
        name?: string;
        sriov?: {
            Pf?: {
                MaxVFs?: number;
            };
            Vf?: {
                VfIndex?: number;
            };
            PfNi?: number;
            PfPi?: number;
        } & {
            Pf?: {
                MaxVFs?: number;
            } & {
                MaxVFs?: number;
            } & { [K_5 in Exclude<keyof I["sriov"]["Pf"], "MaxVFs">]: never; };
            Vf?: {
                VfIndex?: number;
            } & {
                VfIndex?: number;
            } & { [K_6 in Exclude<keyof I["sriov"]["Vf"], "VfIndex">]: never; };
            PfNi?: number;
            PfPi?: number;
        } & { [K_7 in Exclude<keyof I["sriov"], keyof SRIOV>]: never; };
    } & { [K_8 in Exclude<keyof I, keyof Port>]: never; }>(base?: I): Port;
    fromPartial<I_1 extends {
        parent?: string;
        index?: number;
        protocols?: Layer1[];
        capacity?: number;
        mac?: string;
        formFactor?: ConnectorKind;
        connector?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        role?: LinkRole;
        TPA?: number;
        queues?: number;
        breakout?: {
            index?: number;
            radix?: number;
        };
        bond?: {
            name?: string;
        };
        name?: string;
        sriov?: {
            Pf?: {
                MaxVFs?: number;
            };
            Vf?: {
                VfIndex?: number;
            };
            PfNi?: number;
            PfPi?: number;
        };
    } & {
        parent?: string;
        index?: number;
        protocols?: Layer1[] & Layer1[] & { [K_9 in Exclude<keyof I_1["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
        mac?: string;
        formFactor?: ConnectorKind;
        connector?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_10 in Exclude<keyof I_1["connector"]["subref"], "index">]: never; };
        } & { [K_11 in Exclude<keyof I_1["connector"], keyof Ref>]: never; };
        role?: LinkRole;
        TPA?: number;
        queues?: number;
        breakout?: {
            index?: number;
            radix?: number;
        } & {
            index?: number;
            radix?: number;
        } & { [K_12 in Exclude<keyof I_1["breakout"], keyof Breakout>]: never; };
        bond?: {
            name?: string;
        } & {
            name?: string;
        } & { [K_13 in Exclude<keyof I_1["bond"], "name">]: never; };
        name?: string;
        sriov?: {
            Pf?: {
                MaxVFs?: number;
            };
            Vf?: {
                VfIndex?: number;
            };
            PfNi?: number;
            PfPi?: number;
        } & {
            Pf?: {
                MaxVFs?: number;
            } & {
                MaxVFs?: number;
            } & { [K_14 in Exclude<keyof I_1["sriov"]["Pf"], "MaxVFs">]: never; };
            Vf?: {
                VfIndex?: number;
            } & {
                VfIndex?: number;
            } & { [K_15 in Exclude<keyof I_1["sriov"]["Vf"], "VfIndex">]: never; };
            PfNi?: number;
            PfPi?: number;
        } & { [K_16 in Exclude<keyof I_1["sriov"], keyof SRIOV>]: never; };
    } & { [K_17 in Exclude<keyof I_1, keyof Port>]: never; }>(object: I_1): Port;
};
export declare const PortAllocation: {
    encode(message: PortAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortAllocation;
    fromJSON(object: any): PortAllocation;
    toJSON(message: PortAllocation): unknown;
    create<I extends {
        name?: string;
        mac?: string;
        capacity?: number;
        VfName?: string;
        VfAlloc?: boolean;
    } & {
        name?: string;
        mac?: string;
        capacity?: number;
        VfName?: string;
        VfAlloc?: boolean;
    } & { [K in Exclude<keyof I, keyof PortAllocation>]: never; }>(base?: I): PortAllocation;
    fromPartial<I_1 extends {
        name?: string;
        mac?: string;
        capacity?: number;
        VfName?: string;
        VfAlloc?: boolean;
    } & {
        name?: string;
        mac?: string;
        capacity?: number;
        VfName?: string;
        VfAlloc?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof PortAllocation>]: never; }>(object: I_1): PortAllocation;
};
export declare const PortRef: {
    encode(message: PortRef, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortRef;
    fromJSON(object: any): PortRef;
    toJSON(message: PortRef): unknown;
    create<I extends {
        mac?: string;
    } & {
        mac?: string;
    } & { [K in Exclude<keyof I, "mac">]: never; }>(base?: I): PortRef;
    fromPartial<I_1 extends {
        mac?: string;
    } & {
        mac?: string;
    } & { [K_1 in Exclude<keyof I_1, "mac">]: never; }>(object: I_1): PortRef;
};
export declare const PortSpec: {
    encode(message: PortSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PortSpec;
    fromJSON(object: any): PortSpec;
    toJSON(message: PortSpec): unknown;
    create<I extends {
        protocols?: Layer1[];
        capacity?: {
            op?: Operator;
            value?: number;
        };
        formFactor?: {
            op?: Operator;
            value?: ConnectorKind;
        };
        queues?: {
            op?: Operator;
            value?: number;
        };
        model?: {
            op?: Operator;
            value?: NICModel;
        };
        DPDK?: {
            op?: Operator;
            value?: boolean;
        };
        SriovVF?: {
            op?: Operator;
            value?: boolean;
        };
    } & {
        protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["protocols"], keyof Layer1[]>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_1 in Exclude<keyof I["capacity"], keyof Uint64Constraint>]: never; };
        formFactor?: {
            op?: Operator;
            value?: ConnectorKind;
        } & {
            op?: Operator;
            value?: ConnectorKind;
        } & { [K_2 in Exclude<keyof I["formFactor"], keyof ConnectorKindConstraint>]: never; };
        queues?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_3 in Exclude<keyof I["queues"], keyof Uint64Constraint>]: never; };
        model?: {
            op?: Operator;
            value?: NICModel;
        } & {
            op?: Operator;
            value?: NICModel;
        } & { [K_4 in Exclude<keyof I["model"], keyof NICModelConstraint>]: never; };
        DPDK?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_5 in Exclude<keyof I["DPDK"], keyof BoolConstraint>]: never; };
        SriovVF?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_6 in Exclude<keyof I["SriovVF"], keyof BoolConstraint>]: never; };
    } & { [K_7 in Exclude<keyof I, keyof PortSpec>]: never; }>(base?: I): PortSpec;
    fromPartial<I_1 extends {
        protocols?: Layer1[];
        capacity?: {
            op?: Operator;
            value?: number;
        };
        formFactor?: {
            op?: Operator;
            value?: ConnectorKind;
        };
        queues?: {
            op?: Operator;
            value?: number;
        };
        model?: {
            op?: Operator;
            value?: NICModel;
        };
        DPDK?: {
            op?: Operator;
            value?: boolean;
        };
        SriovVF?: {
            op?: Operator;
            value?: boolean;
        };
    } & {
        protocols?: Layer1[] & Layer1[] & { [K_8 in Exclude<keyof I_1["protocols"], keyof Layer1[]>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_9 in Exclude<keyof I_1["capacity"], keyof Uint64Constraint>]: never; };
        formFactor?: {
            op?: Operator;
            value?: ConnectorKind;
        } & {
            op?: Operator;
            value?: ConnectorKind;
        } & { [K_10 in Exclude<keyof I_1["formFactor"], keyof ConnectorKindConstraint>]: never; };
        queues?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_11 in Exclude<keyof I_1["queues"], keyof Uint64Constraint>]: never; };
        model?: {
            op?: Operator;
            value?: NICModel;
        } & {
            op?: Operator;
            value?: NICModel;
        } & { [K_12 in Exclude<keyof I_1["model"], keyof NICModelConstraint>]: never; };
        DPDK?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_13 in Exclude<keyof I_1["DPDK"], keyof BoolConstraint>]: never; };
        SriovVF?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_14 in Exclude<keyof I_1["SriovVF"], keyof BoolConstraint>]: never; };
    } & { [K_15 in Exclude<keyof I_1, keyof PortSpec>]: never; }>(object: I_1): PortSpec;
};
export declare const Cable: {
    encode(message: Cable, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Cable;
    fromJSON(object: any): Cable;
    toJSON(message: Cable): unknown;
    create<I extends {
        id?: string;
        facility?: string;
        kind?: CableKind;
        ends?: {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[];
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
    } & {
        id?: string;
        facility?: string;
        kind?: CableKind;
        ends?: {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[] & ({
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        } & {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[] & ({
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            } & {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["ends"][number]["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_1 in Exclude<keyof I["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                } & { [K_2 in Exclude<keyof I["ends"][number]["connectors"][number]["Port"], keyof Ref>]: never; };
                breakout?: {
                    index?: number;
                    radix?: number;
                } & {
                    index?: number;
                    radix?: number;
                } & { [K_3 in Exclude<keyof I["ends"][number]["connectors"][number]["breakout"], keyof Breakout>]: never; };
            } & { [K_4 in Exclude<keyof I["ends"][number]["connectors"][number], keyof Connector>]: never; })[] & { [K_5 in Exclude<keyof I["ends"][number]["connectors"], keyof {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[]>]: never; };
        } & { [K_6 in Exclude<keyof I["ends"][number], "connectors">]: never; })[] & { [K_7 in Exclude<keyof I["ends"], keyof {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[]>]: never; };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_8 in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
    } & { [K_9 in Exclude<keyof I, keyof Cable>]: never; }>(base?: I): Cable;
    fromPartial<I_1 extends {
        id?: string;
        facility?: string;
        kind?: CableKind;
        ends?: {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[];
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
    } & {
        id?: string;
        facility?: string;
        kind?: CableKind;
        ends?: {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[] & ({
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        } & {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[] & ({
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            } & {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[] & Layer1[] & { [K_10 in Exclude<keyof I_1["ends"][number]["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                } & {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    } & {
                        index?: number;
                    } & { [K_11 in Exclude<keyof I_1["ends"][number]["connectors"][number]["Port"]["subref"], "index">]: never; };
                } & { [K_12 in Exclude<keyof I_1["ends"][number]["connectors"][number]["Port"], keyof Ref>]: never; };
                breakout?: {
                    index?: number;
                    radix?: number;
                } & {
                    index?: number;
                    radix?: number;
                } & { [K_13 in Exclude<keyof I_1["ends"][number]["connectors"][number]["breakout"], keyof Breakout>]: never; };
            } & { [K_14 in Exclude<keyof I_1["ends"][number]["connectors"][number], keyof Connector>]: never; })[] & { [K_15 in Exclude<keyof I_1["ends"][number]["connectors"], keyof {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[]>]: never; };
        } & { [K_16 in Exclude<keyof I_1["ends"][number], "connectors">]: never; })[] & { [K_17 in Exclude<keyof I_1["ends"], keyof {
            connectors?: {
                parent?: string;
                index?: number;
                kind?: ConnectorKind;
                protocols?: Layer1[];
                capacity?: number;
                Port?: {
                    element?: string;
                    index?: number;
                    subref?: {
                        index?: number;
                    };
                };
                breakout?: {
                    index?: number;
                    radix?: number;
                };
            }[];
        }[]>]: never; };
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_18 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
    } & { [K_19 in Exclude<keyof I_1, keyof Cable>]: never; }>(object: I_1): Cable;
};
export declare const End: {
    encode(message: End, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): End;
    fromJSON(object: any): End;
    toJSON(message: End): unknown;
    create<I extends {
        connectors?: {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[];
    } & {
        connectors?: {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[] & ({
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        } & {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_1 in Exclude<keyof I["connectors"][number]["Port"]["subref"], "index">]: never; };
            } & { [K_2 in Exclude<keyof I["connectors"][number]["Port"], keyof Ref>]: never; };
            breakout?: {
                index?: number;
                radix?: number;
            } & {
                index?: number;
                radix?: number;
            } & { [K_3 in Exclude<keyof I["connectors"][number]["breakout"], keyof Breakout>]: never; };
        } & { [K_4 in Exclude<keyof I["connectors"][number], keyof Connector>]: never; })[] & { [K_5 in Exclude<keyof I["connectors"], keyof {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[]>]: never; };
    } & { [K_6 in Exclude<keyof I, "connectors">]: never; }>(base?: I): End;
    fromPartial<I_1 extends {
        connectors?: {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[];
    } & {
        connectors?: {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[] & ({
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        } & {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[] & Layer1[] & { [K_7 in Exclude<keyof I_1["connectors"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_8 in Exclude<keyof I_1["connectors"][number]["Port"]["subref"], "index">]: never; };
            } & { [K_9 in Exclude<keyof I_1["connectors"][number]["Port"], keyof Ref>]: never; };
            breakout?: {
                index?: number;
                radix?: number;
            } & {
                index?: number;
                radix?: number;
            } & { [K_10 in Exclude<keyof I_1["connectors"][number]["breakout"], keyof Breakout>]: never; };
        } & { [K_11 in Exclude<keyof I_1["connectors"][number], keyof Connector>]: never; })[] & { [K_12 in Exclude<keyof I_1["connectors"], keyof {
            parent?: string;
            index?: number;
            kind?: ConnectorKind;
            protocols?: Layer1[];
            capacity?: number;
            Port?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            breakout?: {
                index?: number;
                radix?: number;
            };
        }[]>]: never; };
    } & { [K_13 in Exclude<keyof I_1, "connectors">]: never; }>(object: I_1): End;
};
export declare const Connector: {
    encode(message: Connector, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Connector;
    fromJSON(object: any): Connector;
    toJSON(message: Connector): unknown;
    create<I extends {
        parent?: string;
        index?: number;
        kind?: ConnectorKind;
        protocols?: Layer1[];
        capacity?: number;
        Port?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        breakout?: {
            index?: number;
            radix?: number;
        };
    } & {
        parent?: string;
        index?: number;
        kind?: ConnectorKind;
        protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
        Port?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_1 in Exclude<keyof I["Port"]["subref"], "index">]: never; };
        } & { [K_2 in Exclude<keyof I["Port"], keyof Ref>]: never; };
        breakout?: {
            index?: number;
            radix?: number;
        } & {
            index?: number;
            radix?: number;
        } & { [K_3 in Exclude<keyof I["breakout"], keyof Breakout>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof Connector>]: never; }>(base?: I): Connector;
    fromPartial<I_1 extends {
        parent?: string;
        index?: number;
        kind?: ConnectorKind;
        protocols?: Layer1[];
        capacity?: number;
        Port?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        };
        breakout?: {
            index?: number;
            radix?: number;
        };
    } & {
        parent?: string;
        index?: number;
        kind?: ConnectorKind;
        protocols?: Layer1[] & Layer1[] & { [K_5 in Exclude<keyof I_1["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
        Port?: {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            };
        } & {
            element?: string;
            index?: number;
            subref?: {
                index?: number;
            } & {
                index?: number;
            } & { [K_6 in Exclude<keyof I_1["Port"]["subref"], "index">]: never; };
        } & { [K_7 in Exclude<keyof I_1["Port"], keyof Ref>]: never; };
        breakout?: {
            index?: number;
            radix?: number;
        } & {
            index?: number;
            radix?: number;
        } & { [K_8 in Exclude<keyof I_1["breakout"], keyof Breakout>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof Connector>]: never; }>(object: I_1): Connector;
};
export declare const ConnectorSpec: {
    encode(message: ConnectorSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConnectorSpec;
    fromJSON(object: any): ConnectorSpec;
    toJSON(message: ConnectorSpec): unknown;
    create<I extends {
        kind?: {
            op?: Operator;
            value?: ConnectorKind;
        };
        protocols?: Layer1[];
        capacity?: number;
    } & {
        kind?: {
            op?: Operator;
            value?: ConnectorKind;
        } & {
            op?: Operator;
            value?: ConnectorKind;
        } & { [K in Exclude<keyof I["kind"], keyof ConnectorKindConstraint>]: never; };
        protocols?: Layer1[] & Layer1[] & { [K_1 in Exclude<keyof I["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
    } & { [K_2 in Exclude<keyof I, keyof ConnectorSpec>]: never; }>(base?: I): ConnectorSpec;
    fromPartial<I_1 extends {
        kind?: {
            op?: Operator;
            value?: ConnectorKind;
        };
        protocols?: Layer1[];
        capacity?: number;
    } & {
        kind?: {
            op?: Operator;
            value?: ConnectorKind;
        } & {
            op?: Operator;
            value?: ConnectorKind;
        } & { [K_3 in Exclude<keyof I_1["kind"], keyof ConnectorKindConstraint>]: never; };
        protocols?: Layer1[] & Layer1[] & { [K_4 in Exclude<keyof I_1["protocols"], keyof Layer1[]>]: never; };
        capacity?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof ConnectorSpec>]: never; }>(object: I_1): ConnectorSpec;
};
export declare const Proc: {
    encode(message: Proc, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Proc;
    fromJSON(object: any): Proc;
    toJSON(message: Proc): unknown;
    create<I extends {
        isa?: ISA;
        family?: string;
        BaseFrequency?: number;
        L2?: number;
        cores?: number;
        threads?: number;
        tdp?: number;
        hyperthreaded?: boolean;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        reservedCores?: number;
    } & {
        isa?: ISA;
        family?: string;
        BaseFrequency?: number;
        L2?: number;
        cores?: number;
        threads?: number;
        tdp?: number;
        hyperthreaded?: boolean;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
        reservedCores?: number;
    } & { [K_1 in Exclude<keyof I, keyof Proc>]: never; }>(base?: I): Proc;
    fromPartial<I_1 extends {
        isa?: ISA;
        family?: string;
        BaseFrequency?: number;
        L2?: number;
        cores?: number;
        threads?: number;
        tdp?: number;
        hyperthreaded?: boolean;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        reservedCores?: number;
    } & {
        isa?: ISA;
        family?: string;
        BaseFrequency?: number;
        L2?: number;
        cores?: number;
        threads?: number;
        tdp?: number;
        hyperthreaded?: boolean;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_2 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
        reservedCores?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof Proc>]: never; }>(object: I_1): Proc;
};
export declare const SocketAllocation: {
    encode(message: SocketAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): SocketAllocation;
    fromJSON(object: any): SocketAllocation;
    toJSON(message: SocketAllocation): unknown;
    create<I extends {
        cores?: number;
    } & {
        cores?: number;
    } & { [K in Exclude<keyof I, "cores">]: never; }>(base?: I): SocketAllocation;
    fromPartial<I_1 extends {
        cores?: number;
    } & {
        cores?: number;
    } & { [K_1 in Exclude<keyof I_1, "cores">]: never; }>(object: I_1): SocketAllocation;
};
export declare const ProcAllocation: {
    encode(message: ProcAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcAllocation;
    fromJSON(object: any): ProcAllocation;
    toJSON(message: ProcAllocation): unknown;
    create<I extends {
        alloc?: {
            [x: number]: {
                cores?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                cores?: number;
            };
        } & {
            [x: number]: {
                cores?: number;
            } & {
                cores?: number;
            } & { [K in Exclude<keyof I["alloc"][number], "cores">]: never; };
        } & { [K_1 in Exclude<keyof I["alloc"], number>]: never; };
    } & { [K_2 in Exclude<keyof I, "alloc">]: never; }>(base?: I): ProcAllocation;
    fromPartial<I_1 extends {
        alloc?: {
            [x: number]: {
                cores?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                cores?: number;
            };
        } & {
            [x: number]: {
                cores?: number;
            } & {
                cores?: number;
            } & { [K_3 in Exclude<keyof I_1["alloc"][number], "cores">]: never; };
        } & { [K_4 in Exclude<keyof I_1["alloc"], number>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "alloc">]: never; }>(object: I_1): ProcAllocation;
};
export declare const ProcAllocation_AllocEntry: {
    encode(message: ProcAllocation_AllocEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcAllocation_AllocEntry;
    fromJSON(object: any): ProcAllocation_AllocEntry;
    toJSON(message: ProcAllocation_AllocEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            cores?: number;
        };
    } & {
        key?: number;
        value?: {
            cores?: number;
        } & {
            cores?: number;
        } & { [K in Exclude<keyof I["value"], "cores">]: never; };
    } & { [K_1 in Exclude<keyof I, keyof ProcAllocation_AllocEntry>]: never; }>(base?: I): ProcAllocation_AllocEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            cores?: number;
        };
    } & {
        key?: number;
        value?: {
            cores?: number;
        } & {
            cores?: number;
        } & { [K_2 in Exclude<keyof I_1["value"], "cores">]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof ProcAllocation_AllocEntry>]: never; }>(object: I_1): ProcAllocation_AllocEntry;
};
export declare const ProcSpec: {
    encode(message: ProcSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProcSpec;
    fromJSON(object: any): ProcSpec;
    toJSON(message: ProcSpec): unknown;
    create<I extends {
        isa?: {
            op?: Operator;
            value?: ISA;
        };
        family?: {
            op?: Operator;
            value?: string;
        };
        BaseFrequency?: {
            op?: Operator;
            value?: number;
        };
        L2?: {
            op?: Operator;
            value?: number;
        };
        cores?: {
            op?: Operator;
            value?: number;
        };
        threads?: {
            op?: Operator;
            value?: number;
        };
        tdp?: {
            op?: Operator;
            value?: number;
        };
        sockets?: {
            op?: Operator;
            value?: number;
        };
        hyperthreaded?: {
            op?: Operator;
            value?: boolean;
        };
    } & {
        isa?: {
            op?: Operator;
            value?: ISA;
        } & {
            op?: Operator;
            value?: ISA;
        } & { [K in Exclude<keyof I["isa"], keyof ISAConstraint>]: never; };
        family?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_1 in Exclude<keyof I["family"], keyof StringConstraint>]: never; };
        BaseFrequency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_2 in Exclude<keyof I["BaseFrequency"], keyof Uint64Constraint>]: never; };
        L2?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_3 in Exclude<keyof I["L2"], keyof Uint64Constraint>]: never; };
        cores?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_4 in Exclude<keyof I["cores"], keyof Uint32Constraint>]: never; };
        threads?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_5 in Exclude<keyof I["threads"], keyof Uint32Constraint>]: never; };
        tdp?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_6 in Exclude<keyof I["tdp"], keyof Uint32Constraint>]: never; };
        sockets?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_7 in Exclude<keyof I["sockets"], keyof Uint32Constraint>]: never; };
        hyperthreaded?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_8 in Exclude<keyof I["hyperthreaded"], keyof BoolConstraint>]: never; };
    } & { [K_9 in Exclude<keyof I, keyof ProcSpec>]: never; }>(base?: I): ProcSpec;
    fromPartial<I_1 extends {
        isa?: {
            op?: Operator;
            value?: ISA;
        };
        family?: {
            op?: Operator;
            value?: string;
        };
        BaseFrequency?: {
            op?: Operator;
            value?: number;
        };
        L2?: {
            op?: Operator;
            value?: number;
        };
        cores?: {
            op?: Operator;
            value?: number;
        };
        threads?: {
            op?: Operator;
            value?: number;
        };
        tdp?: {
            op?: Operator;
            value?: number;
        };
        sockets?: {
            op?: Operator;
            value?: number;
        };
        hyperthreaded?: {
            op?: Operator;
            value?: boolean;
        };
    } & {
        isa?: {
            op?: Operator;
            value?: ISA;
        } & {
            op?: Operator;
            value?: ISA;
        } & { [K_10 in Exclude<keyof I_1["isa"], keyof ISAConstraint>]: never; };
        family?: {
            op?: Operator;
            value?: string;
        } & {
            op?: Operator;
            value?: string;
        } & { [K_11 in Exclude<keyof I_1["family"], keyof StringConstraint>]: never; };
        BaseFrequency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_12 in Exclude<keyof I_1["BaseFrequency"], keyof Uint64Constraint>]: never; };
        L2?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_13 in Exclude<keyof I_1["L2"], keyof Uint64Constraint>]: never; };
        cores?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_14 in Exclude<keyof I_1["cores"], keyof Uint32Constraint>]: never; };
        threads?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_15 in Exclude<keyof I_1["threads"], keyof Uint32Constraint>]: never; };
        tdp?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_16 in Exclude<keyof I_1["tdp"], keyof Uint32Constraint>]: never; };
        sockets?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_17 in Exclude<keyof I_1["sockets"], keyof Uint32Constraint>]: never; };
        hyperthreaded?: {
            op?: Operator;
            value?: boolean;
        } & {
            op?: Operator;
            value?: boolean;
        } & { [K_18 in Exclude<keyof I_1["hyperthreaded"], keyof BoolConstraint>]: never; };
    } & { [K_19 in Exclude<keyof I_1, keyof ProcSpec>]: never; }>(object: I_1): ProcSpec;
};
export declare const Dimm: {
    encode(message: Dimm, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Dimm;
    fromJSON(object: any): Dimm;
    toJSON(message: Dimm): unknown;
    create<I extends {
        type?: MemoryType;
        capacity?: number;
        frequency?: number;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        reservedCapacity?: number;
    } & {
        type?: MemoryType;
        capacity?: number;
        frequency?: number;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
        reservedCapacity?: number;
    } & { [K_1 in Exclude<keyof I, keyof Dimm>]: never; }>(base?: I): Dimm;
    fromPartial<I_1 extends {
        type?: MemoryType;
        capacity?: number;
        frequency?: number;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        reservedCapacity?: number;
    } & {
        type?: MemoryType;
        capacity?: number;
        frequency?: number;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_2 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
        reservedCapacity?: number;
    } & { [K_3 in Exclude<keyof I_1, keyof Dimm>]: never; }>(object: I_1): Dimm;
};
export declare const DimmAllocation: {
    encode(message: DimmAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DimmAllocation;
    fromJSON(object: any): DimmAllocation;
    toJSON(message: DimmAllocation): unknown;
    create<I extends {
        capacity?: number;
    } & {
        capacity?: number;
    } & { [K in Exclude<keyof I, "capacity">]: never; }>(base?: I): DimmAllocation;
    fromPartial<I_1 extends {
        capacity?: number;
    } & {
        capacity?: number;
    } & { [K_1 in Exclude<keyof I_1, "capacity">]: never; }>(object: I_1): DimmAllocation;
};
export declare const MemoryAllocation: {
    encode(message: MemoryAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MemoryAllocation;
    fromJSON(object: any): MemoryAllocation;
    toJSON(message: MemoryAllocation): unknown;
    create<I extends {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        } & {
            [x: number]: {
                capacity?: number;
            } & {
                capacity?: number;
            } & { [K in Exclude<keyof I["alloc"][number], "capacity">]: never; };
        } & { [K_1 in Exclude<keyof I["alloc"], number>]: never; };
    } & { [K_2 in Exclude<keyof I, "alloc">]: never; }>(base?: I): MemoryAllocation;
    fromPartial<I_1 extends {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        } & {
            [x: number]: {
                capacity?: number;
            } & {
                capacity?: number;
            } & { [K_3 in Exclude<keyof I_1["alloc"][number], "capacity">]: never; };
        } & { [K_4 in Exclude<keyof I_1["alloc"], number>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "alloc">]: never; }>(object: I_1): MemoryAllocation;
};
export declare const MemoryAllocation_AllocEntry: {
    encode(message: MemoryAllocation_AllocEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MemoryAllocation_AllocEntry;
    fromJSON(object: any): MemoryAllocation_AllocEntry;
    toJSON(message: MemoryAllocation_AllocEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            capacity?: number;
        };
    } & {
        key?: number;
        value?: {
            capacity?: number;
        } & {
            capacity?: number;
        } & { [K in Exclude<keyof I["value"], "capacity">]: never; };
    } & { [K_1 in Exclude<keyof I, keyof MemoryAllocation_AllocEntry>]: never; }>(base?: I): MemoryAllocation_AllocEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            capacity?: number;
        };
    } & {
        key?: number;
        value?: {
            capacity?: number;
        } & {
            capacity?: number;
        } & { [K_2 in Exclude<keyof I_1["value"], "capacity">]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof MemoryAllocation_AllocEntry>]: never; }>(object: I_1): MemoryAllocation_AllocEntry;
};
export declare const MemorySpec: {
    encode(message: MemorySpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MemorySpec;
    fromJSON(object: any): MemorySpec;
    toJSON(message: MemorySpec): unknown;
    create<I extends {
        type?: {
            op?: Operator;
            value?: MemoryType;
        };
        capacity?: {
            op?: Operator;
            value?: number;
        };
        frequency?: {
            op?: Operator;
            value?: number;
        };
        modules?: {
            op?: Operator;
            value?: number;
        };
    } & {
        type?: {
            op?: Operator;
            value?: MemoryType;
        } & {
            op?: Operator;
            value?: MemoryType;
        } & { [K in Exclude<keyof I["type"], keyof MemoryTypeConstraint>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_1 in Exclude<keyof I["capacity"], keyof Uint64Constraint>]: never; };
        frequency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_2 in Exclude<keyof I["frequency"], keyof Uint64Constraint>]: never; };
        modules?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_3 in Exclude<keyof I["modules"], keyof Uint64Constraint>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof MemorySpec>]: never; }>(base?: I): MemorySpec;
    fromPartial<I_1 extends {
        type?: {
            op?: Operator;
            value?: MemoryType;
        };
        capacity?: {
            op?: Operator;
            value?: number;
        };
        frequency?: {
            op?: Operator;
            value?: number;
        };
        modules?: {
            op?: Operator;
            value?: number;
        };
    } & {
        type?: {
            op?: Operator;
            value?: MemoryType;
        } & {
            op?: Operator;
            value?: MemoryType;
        } & { [K_5 in Exclude<keyof I_1["type"], keyof MemoryTypeConstraint>]: never; };
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_6 in Exclude<keyof I_1["capacity"], keyof Uint64Constraint>]: never; };
        frequency?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_7 in Exclude<keyof I_1["frequency"], keyof Uint64Constraint>]: never; };
        modules?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_8 in Exclude<keyof I_1["modules"], keyof Uint64Constraint>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof MemorySpec>]: never; }>(object: I_1): MemorySpec;
};
export declare const NIC: {
    encode(message: NIC, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NIC;
    fromJSON(object: any): NIC;
    toJSON(message: NIC): unknown;
    create<I extends {
        ports?: {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[];
        startingIndex?: number;
        kind?: NICKind;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        DPDK?: boolean;
        model?: NICModel;
    } & {
        ports?: {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[] & ({
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        } & {
            parent?: string;
            index?: number;
            protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["ports"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_1 in Exclude<keyof I["ports"][number]["connector"]["subref"], "index">]: never; };
            } & { [K_2 in Exclude<keyof I["ports"][number]["connector"], keyof Ref>]: never; };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            } & {
                index?: number;
                radix?: number;
            } & { [K_3 in Exclude<keyof I["ports"][number]["breakout"], keyof Breakout>]: never; };
            bond?: {
                name?: string;
            } & {
                name?: string;
            } & { [K_4 in Exclude<keyof I["ports"][number]["bond"], "name">]: never; };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            } & {
                Pf?: {
                    MaxVFs?: number;
                } & {
                    MaxVFs?: number;
                } & { [K_5 in Exclude<keyof I["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                Vf?: {
                    VfIndex?: number;
                } & {
                    VfIndex?: number;
                } & { [K_6 in Exclude<keyof I["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                PfNi?: number;
                PfPi?: number;
            } & { [K_7 in Exclude<keyof I["ports"][number]["sriov"], keyof SRIOV>]: never; };
        } & { [K_8 in Exclude<keyof I["ports"][number], keyof Port>]: never; })[] & { [K_9 in Exclude<keyof I["ports"], keyof {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[]>]: never; };
        startingIndex?: number;
        kind?: NICKind;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_10 in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
        DPDK?: boolean;
        model?: NICModel;
    } & { [K_11 in Exclude<keyof I, keyof NIC>]: never; }>(base?: I): NIC;
    fromPartial<I_1 extends {
        ports?: {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[];
        startingIndex?: number;
        kind?: NICKind;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        DPDK?: boolean;
        model?: NICModel;
    } & {
        ports?: {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[] & ({
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        } & {
            parent?: string;
            index?: number;
            protocols?: Layer1[] & Layer1[] & { [K_12 in Exclude<keyof I_1["ports"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            } & {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                } & {
                    index?: number;
                } & { [K_13 in Exclude<keyof I_1["ports"][number]["connector"]["subref"], "index">]: never; };
            } & { [K_14 in Exclude<keyof I_1["ports"][number]["connector"], keyof Ref>]: never; };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            } & {
                index?: number;
                radix?: number;
            } & { [K_15 in Exclude<keyof I_1["ports"][number]["breakout"], keyof Breakout>]: never; };
            bond?: {
                name?: string;
            } & {
                name?: string;
            } & { [K_16 in Exclude<keyof I_1["ports"][number]["bond"], "name">]: never; };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            } & {
                Pf?: {
                    MaxVFs?: number;
                } & {
                    MaxVFs?: number;
                } & { [K_17 in Exclude<keyof I_1["ports"][number]["sriov"]["Pf"], "MaxVFs">]: never; };
                Vf?: {
                    VfIndex?: number;
                } & {
                    VfIndex?: number;
                } & { [K_18 in Exclude<keyof I_1["ports"][number]["sriov"]["Vf"], "VfIndex">]: never; };
                PfNi?: number;
                PfPi?: number;
            } & { [K_19 in Exclude<keyof I_1["ports"][number]["sriov"], keyof SRIOV>]: never; };
        } & { [K_20 in Exclude<keyof I_1["ports"][number], keyof Port>]: never; })[] & { [K_21 in Exclude<keyof I_1["ports"], keyof {
            parent?: string;
            index?: number;
            protocols?: Layer1[];
            capacity?: number;
            mac?: string;
            formFactor?: ConnectorKind;
            connector?: {
                element?: string;
                index?: number;
                subref?: {
                    index?: number;
                };
            };
            role?: LinkRole;
            TPA?: number;
            queues?: number;
            breakout?: {
                index?: number;
                radix?: number;
            };
            bond?: {
                name?: string;
            };
            name?: string;
            sriov?: {
                Pf?: {
                    MaxVFs?: number;
                };
                Vf?: {
                    VfIndex?: number;
                };
                PfNi?: number;
                PfPi?: number;
            };
        }[]>]: never; };
        startingIndex?: number;
        kind?: NICKind;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_22 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
        DPDK?: boolean;
        model?: NICModel;
    } & { [K_23 in Exclude<keyof I_1, keyof NIC>]: never; }>(object: I_1): NIC;
};
export declare const NICSpec: {
    encode(message: NICSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICSpec;
    fromJSON(object: any): NICSpec;
    toJSON(message: NICSpec): unknown;
    create<I extends {
        ports?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[];
    } & {
        ports?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[] & ({
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            protocols?: Layer1[] & Layer1[] & { [K in Exclude<keyof I["ports"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_1 in Exclude<keyof I["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_2 in Exclude<keyof I["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
            queues?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_3 in Exclude<keyof I["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
            model?: {
                op?: Operator;
                value?: NICModel;
            } & {
                op?: Operator;
                value?: NICModel;
            } & { [K_4 in Exclude<keyof I["ports"][number]["model"], keyof NICModelConstraint>]: never; };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_5 in Exclude<keyof I["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_6 in Exclude<keyof I["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
        } & { [K_7 in Exclude<keyof I["ports"][number], keyof PortSpec>]: never; })[] & { [K_8 in Exclude<keyof I["ports"], keyof {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[]>]: never; };
    } & { [K_9 in Exclude<keyof I, "ports">]: never; }>(base?: I): NICSpec;
    fromPartial<I_1 extends {
        ports?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[];
    } & {
        ports?: {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[] & ({
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        } & {
            protocols?: Layer1[] & Layer1[] & { [K_10 in Exclude<keyof I_1["ports"][number]["protocols"], keyof Layer1[]>]: never; };
            capacity?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_11 in Exclude<keyof I_1["ports"][number]["capacity"], keyof Uint64Constraint>]: never; };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            } & {
                op?: Operator;
                value?: ConnectorKind;
            } & { [K_12 in Exclude<keyof I_1["ports"][number]["formFactor"], keyof ConnectorKindConstraint>]: never; };
            queues?: {
                op?: Operator;
                value?: number;
            } & {
                op?: Operator;
                value?: number;
            } & { [K_13 in Exclude<keyof I_1["ports"][number]["queues"], keyof Uint64Constraint>]: never; };
            model?: {
                op?: Operator;
                value?: NICModel;
            } & {
                op?: Operator;
                value?: NICModel;
            } & { [K_14 in Exclude<keyof I_1["ports"][number]["model"], keyof NICModelConstraint>]: never; };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_15 in Exclude<keyof I_1["ports"][number]["DPDK"], keyof BoolConstraint>]: never; };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            } & {
                op?: Operator;
                value?: boolean;
            } & { [K_16 in Exclude<keyof I_1["ports"][number]["SriovVF"], keyof BoolConstraint>]: never; };
        } & { [K_17 in Exclude<keyof I_1["ports"][number], keyof PortSpec>]: never; })[] & { [K_18 in Exclude<keyof I_1["ports"], keyof {
            protocols?: Layer1[];
            capacity?: {
                op?: Operator;
                value?: number;
            };
            formFactor?: {
                op?: Operator;
                value?: ConnectorKind;
            };
            queues?: {
                op?: Operator;
                value?: number;
            };
            model?: {
                op?: Operator;
                value?: NICModel;
            };
            DPDK?: {
                op?: Operator;
                value?: boolean;
            };
            SriovVF?: {
                op?: Operator;
                value?: boolean;
            };
        }[]>]: never; };
    } & { [K_19 in Exclude<keyof I_1, "ports">]: never; }>(object: I_1): NICSpec;
};
export declare const NICAllocation: {
    encode(message: NICAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICAllocation;
    fromJSON(object: any): NICAllocation;
    toJSON(message: NICAllocation): unknown;
    create<I extends {
        alloc?: {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            };
        } & {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            } & {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            } & { [K in Exclude<keyof I["alloc"][number], keyof PortAllocation>]: never; };
        } & { [K_1 in Exclude<keyof I["alloc"], number>]: never; };
    } & { [K_2 in Exclude<keyof I, "alloc">]: never; }>(base?: I): NICAllocation;
    fromPartial<I_1 extends {
        alloc?: {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            };
        } & {
            [x: number]: {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            } & {
                name?: string;
                mac?: string;
                capacity?: number;
                VfName?: string;
                VfAlloc?: boolean;
            } & { [K_3 in Exclude<keyof I_1["alloc"][number], keyof PortAllocation>]: never; };
        } & { [K_4 in Exclude<keyof I_1["alloc"], number>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "alloc">]: never; }>(object: I_1): NICAllocation;
};
export declare const NICAllocation_AllocEntry: {
    encode(message: NICAllocation_AllocEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICAllocation_AllocEntry;
    fromJSON(object: any): NICAllocation_AllocEntry;
    toJSON(message: NICAllocation_AllocEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        };
    } & {
        key?: number;
        value?: {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        } & {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        } & { [K in Exclude<keyof I["value"], keyof PortAllocation>]: never; };
    } & { [K_1 in Exclude<keyof I, keyof NICAllocation_AllocEntry>]: never; }>(base?: I): NICAllocation_AllocEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        };
    } & {
        key?: number;
        value?: {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        } & {
            name?: string;
            mac?: string;
            capacity?: number;
            VfName?: string;
            VfAlloc?: boolean;
        } & { [K_2 in Exclude<keyof I_1["value"], keyof PortAllocation>]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof NICAllocation_AllocEntry>]: never; }>(object: I_1): NICAllocation_AllocEntry;
};
export declare const NICsAllocation: {
    encode(message: NICsAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICsAllocation;
    fromJSON(object: any): NICsAllocation;
    toJSON(message: NICsAllocation): unknown;
    create<I extends {
        alloc?: {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            };
        } & {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                } & {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    } & {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    } & { [K in Exclude<keyof I["alloc"][number]["alloc"][number], keyof PortAllocation>]: never; };
                } & { [K_1 in Exclude<keyof I["alloc"][number]["alloc"], number>]: never; };
            } & { [K_2 in Exclude<keyof I["alloc"][number], "alloc">]: never; };
        } & { [K_3 in Exclude<keyof I["alloc"], number>]: never; };
    } & { [K_4 in Exclude<keyof I, "alloc">]: never; }>(base?: I): NICsAllocation;
    fromPartial<I_1 extends {
        alloc?: {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            };
        } & {
            [x: number]: {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                };
            } & {
                alloc?: {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    };
                } & {
                    [x: number]: {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    } & {
                        name?: string;
                        mac?: string;
                        capacity?: number;
                        VfName?: string;
                        VfAlloc?: boolean;
                    } & { [K_5 in Exclude<keyof I_1["alloc"][number]["alloc"][number], keyof PortAllocation>]: never; };
                } & { [K_6 in Exclude<keyof I_1["alloc"][number]["alloc"], number>]: never; };
            } & { [K_7 in Exclude<keyof I_1["alloc"][number], "alloc">]: never; };
        } & { [K_8 in Exclude<keyof I_1["alloc"], number>]: never; };
    } & { [K_9 in Exclude<keyof I_1, "alloc">]: never; }>(object: I_1): NICsAllocation;
};
export declare const NICsAllocation_AllocEntry: {
    encode(message: NICsAllocation_AllocEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICsAllocation_AllocEntry;
    fromJSON(object: any): NICsAllocation_AllocEntry;
    toJSON(message: NICsAllocation_AllocEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            };
        };
    } & {
        key?: number;
        value?: {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            } & {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                } & {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                } & { [K in Exclude<keyof I["value"]["alloc"][number], keyof PortAllocation>]: never; };
            } & { [K_1 in Exclude<keyof I["value"]["alloc"], number>]: never; };
        } & { [K_2 in Exclude<keyof I["value"], "alloc">]: never; };
    } & { [K_3 in Exclude<keyof I, keyof NICsAllocation_AllocEntry>]: never; }>(base?: I): NICsAllocation_AllocEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            };
        };
    } & {
        key?: number;
        value?: {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            };
        } & {
            alloc?: {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                };
            } & {
                [x: number]: {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                } & {
                    name?: string;
                    mac?: string;
                    capacity?: number;
                    VfName?: string;
                    VfAlloc?: boolean;
                } & { [K_4 in Exclude<keyof I_1["value"]["alloc"][number], keyof PortAllocation>]: never; };
            } & { [K_5 in Exclude<keyof I_1["value"]["alloc"], number>]: never; };
        } & { [K_6 in Exclude<keyof I_1["value"], "alloc">]: never; };
    } & { [K_7 in Exclude<keyof I_1, keyof NICsAllocation_AllocEntry>]: never; }>(object: I_1): NICsAllocation_AllocEntry;
};
export declare const Disk: {
    encode(message: Disk, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Disk;
    fromJSON(object: any): Disk;
    toJSON(message: Disk): unknown;
    create<I extends {
        capacity?: number;
        formFactor?: DiskFormFactor;
        diskInterface?: DiskInterface;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        roles?: DiskRole[];
        NVMEControllerIndex?: number;
    } & {
        capacity?: number;
        formFactor?: DiskFormFactor;
        diskInterface?: DiskInterface;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K in Exclude<keyof I["productInfo"], keyof ProductInfo>]: never; };
        roles?: DiskRole[] & DiskRole[] & { [K_1 in Exclude<keyof I["roles"], keyof DiskRole[]>]: never; };
        NVMEControllerIndex?: number;
    } & { [K_2 in Exclude<keyof I, keyof Disk>]: never; }>(base?: I): Disk;
    fromPartial<I_1 extends {
        capacity?: number;
        formFactor?: DiskFormFactor;
        diskInterface?: DiskInterface;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        };
        roles?: DiskRole[];
        NVMEControllerIndex?: number;
    } & {
        capacity?: number;
        formFactor?: DiskFormFactor;
        diskInterface?: DiskInterface;
        productInfo?: {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & {
            Manufacturer?: string;
            Model?: string;
            SKU?: string;
            Integrated?: boolean;
            cost?: number;
        } & { [K_3 in Exclude<keyof I_1["productInfo"], keyof ProductInfo>]: never; };
        roles?: DiskRole[] & DiskRole[] & { [K_4 in Exclude<keyof I_1["roles"], keyof DiskRole[]>]: never; };
        NVMEControllerIndex?: number;
    } & { [K_5 in Exclude<keyof I_1, keyof Disk>]: never; }>(object: I_1): Disk;
};
export declare const DiskAllocation: {
    encode(message: DiskAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DiskAllocation;
    fromJSON(object: any): DiskAllocation;
    toJSON(message: DiskAllocation): unknown;
    create<I extends {
        capacity?: number;
    } & {
        capacity?: number;
    } & { [K in Exclude<keyof I, "capacity">]: never; }>(base?: I): DiskAllocation;
    fromPartial<I_1 extends {
        capacity?: number;
    } & {
        capacity?: number;
    } & { [K_1 in Exclude<keyof I_1, "capacity">]: never; }>(object: I_1): DiskAllocation;
};
export declare const DisksAllocation: {
    encode(message: DisksAllocation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DisksAllocation;
    fromJSON(object: any): DisksAllocation;
    toJSON(message: DisksAllocation): unknown;
    create<I extends {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        } & {
            [x: number]: {
                capacity?: number;
            } & {
                capacity?: number;
            } & { [K in Exclude<keyof I["alloc"][number], "capacity">]: never; };
        } & { [K_1 in Exclude<keyof I["alloc"], number>]: never; };
    } & { [K_2 in Exclude<keyof I, "alloc">]: never; }>(base?: I): DisksAllocation;
    fromPartial<I_1 extends {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        };
    } & {
        alloc?: {
            [x: number]: {
                capacity?: number;
            };
        } & {
            [x: number]: {
                capacity?: number;
            } & {
                capacity?: number;
            } & { [K_3 in Exclude<keyof I_1["alloc"][number], "capacity">]: never; };
        } & { [K_4 in Exclude<keyof I_1["alloc"], number>]: never; };
    } & { [K_5 in Exclude<keyof I_1, "alloc">]: never; }>(object: I_1): DisksAllocation;
};
export declare const DisksAllocation_AllocEntry: {
    encode(message: DisksAllocation_AllocEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DisksAllocation_AllocEntry;
    fromJSON(object: any): DisksAllocation_AllocEntry;
    toJSON(message: DisksAllocation_AllocEntry): unknown;
    create<I extends {
        key?: number;
        value?: {
            capacity?: number;
        };
    } & {
        key?: number;
        value?: {
            capacity?: number;
        } & {
            capacity?: number;
        } & { [K in Exclude<keyof I["value"], "capacity">]: never; };
    } & { [K_1 in Exclude<keyof I, keyof DisksAllocation_AllocEntry>]: never; }>(base?: I): DisksAllocation_AllocEntry;
    fromPartial<I_1 extends {
        key?: number;
        value?: {
            capacity?: number;
        };
    } & {
        key?: number;
        value?: {
            capacity?: number;
        } & {
            capacity?: number;
        } & { [K_2 in Exclude<keyof I_1["value"], "capacity">]: never; };
    } & { [K_3 in Exclude<keyof I_1, keyof DisksAllocation_AllocEntry>]: never; }>(object: I_1): DisksAllocation_AllocEntry;
};
export declare const DiskSpec: {
    encode(message: DiskSpec, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DiskSpec;
    fromJSON(object: any): DiskSpec;
    toJSON(message: DiskSpec): unknown;
    create<I extends {
        capacity?: {
            op?: Operator;
            value?: number;
        };
        formFactor?: {
            op?: Operator;
            value?: DiskFormFactor;
        };
        diskInterface?: {
            op?: Operator;
            value?: DiskInterface;
        };
        disks?: {
            op?: Operator;
            value?: number;
        };
    } & {
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K in Exclude<keyof I["capacity"], keyof Uint64Constraint>]: never; };
        formFactor?: {
            op?: Operator;
            value?: DiskFormFactor;
        } & {
            op?: Operator;
            value?: DiskFormFactor;
        } & { [K_1 in Exclude<keyof I["formFactor"], keyof DiskFormFactorConstraint>]: never; };
        diskInterface?: {
            op?: Operator;
            value?: DiskInterface;
        } & {
            op?: Operator;
            value?: DiskInterface;
        } & { [K_2 in Exclude<keyof I["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
        disks?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_3 in Exclude<keyof I["disks"], keyof Uint64Constraint>]: never; };
    } & { [K_4 in Exclude<keyof I, keyof DiskSpec>]: never; }>(base?: I): DiskSpec;
    fromPartial<I_1 extends {
        capacity?: {
            op?: Operator;
            value?: number;
        };
        formFactor?: {
            op?: Operator;
            value?: DiskFormFactor;
        };
        diskInterface?: {
            op?: Operator;
            value?: DiskInterface;
        };
        disks?: {
            op?: Operator;
            value?: number;
        };
    } & {
        capacity?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_5 in Exclude<keyof I_1["capacity"], keyof Uint64Constraint>]: never; };
        formFactor?: {
            op?: Operator;
            value?: DiskFormFactor;
        } & {
            op?: Operator;
            value?: DiskFormFactor;
        } & { [K_6 in Exclude<keyof I_1["formFactor"], keyof DiskFormFactorConstraint>]: never; };
        diskInterface?: {
            op?: Operator;
            value?: DiskInterface;
        } & {
            op?: Operator;
            value?: DiskInterface;
        } & { [K_7 in Exclude<keyof I_1["diskInterface"], keyof DiskInterfaceConstraint>]: never; };
        disks?: {
            op?: Operator;
            value?: number;
        } & {
            op?: Operator;
            value?: number;
        } & { [K_8 in Exclude<keyof I_1["disks"], keyof Uint64Constraint>]: never; };
    } & { [K_9 in Exclude<keyof I_1, keyof DiskSpec>]: never; }>(object: I_1): DiskSpec;
};
export declare const BoolConstraint: {
    encode(message: BoolConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BoolConstraint;
    fromJSON(object: any): BoolConstraint;
    toJSON(message: BoolConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: boolean;
    } & {
        op?: Operator;
        value?: boolean;
    } & { [K in Exclude<keyof I, keyof BoolConstraint>]: never; }>(base?: I): BoolConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: boolean;
    } & {
        op?: Operator;
        value?: boolean;
    } & { [K_1 in Exclude<keyof I_1, keyof BoolConstraint>]: never; }>(object: I_1): BoolConstraint;
};
export declare const StringConstraint: {
    encode(message: StringConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): StringConstraint;
    fromJSON(object: any): StringConstraint;
    toJSON(message: StringConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: string;
    } & {
        op?: Operator;
        value?: string;
    } & { [K in Exclude<keyof I, keyof StringConstraint>]: never; }>(base?: I): StringConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: string;
    } & {
        op?: Operator;
        value?: string;
    } & { [K_1 in Exclude<keyof I_1, keyof StringConstraint>]: never; }>(object: I_1): StringConstraint;
};
export declare const Uint64Constraint: {
    encode(message: Uint64Constraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Uint64Constraint;
    fromJSON(object: any): Uint64Constraint;
    toJSON(message: Uint64Constraint): unknown;
    create<I extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K in Exclude<keyof I, keyof Uint64Constraint>]: never; }>(base?: I): Uint64Constraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Uint64Constraint>]: never; }>(object: I_1): Uint64Constraint;
};
export declare const LinkKindConstraint: {
    encode(message: LinkKindConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): LinkKindConstraint;
    fromJSON(object: any): LinkKindConstraint;
    toJSON(message: LinkKindConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: Link_Kind;
    } & {
        op?: Operator;
        value?: Link_Kind;
    } & { [K in Exclude<keyof I, keyof LinkKindConstraint>]: never; }>(base?: I): LinkKindConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: Link_Kind;
    } & {
        op?: Operator;
        value?: Link_Kind;
    } & { [K_1 in Exclude<keyof I_1, keyof LinkKindConstraint>]: never; }>(object: I_1): LinkKindConstraint;
};
export declare const Uint32Constraint: {
    encode(message: Uint32Constraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Uint32Constraint;
    fromJSON(object: any): Uint32Constraint;
    toJSON(message: Uint32Constraint): unknown;
    create<I extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K in Exclude<keyof I, keyof Uint32Constraint>]: never; }>(base?: I): Uint32Constraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof Uint32Constraint>]: never; }>(object: I_1): Uint32Constraint;
};
export declare const ISAConstraint: {
    encode(message: ISAConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ISAConstraint;
    fromJSON(object: any): ISAConstraint;
    toJSON(message: ISAConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: ISA;
    } & {
        op?: Operator;
        value?: ISA;
    } & { [K in Exclude<keyof I, keyof ISAConstraint>]: never; }>(base?: I): ISAConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: ISA;
    } & {
        op?: Operator;
        value?: ISA;
    } & { [K_1 in Exclude<keyof I_1, keyof ISAConstraint>]: never; }>(object: I_1): ISAConstraint;
};
export declare const MemoryTypeConstraint: {
    encode(message: MemoryTypeConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MemoryTypeConstraint;
    fromJSON(object: any): MemoryTypeConstraint;
    toJSON(message: MemoryTypeConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: MemoryType;
    } & {
        op?: Operator;
        value?: MemoryType;
    } & { [K in Exclude<keyof I, keyof MemoryTypeConstraint>]: never; }>(base?: I): MemoryTypeConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: MemoryType;
    } & {
        op?: Operator;
        value?: MemoryType;
    } & { [K_1 in Exclude<keyof I_1, keyof MemoryTypeConstraint>]: never; }>(object: I_1): MemoryTypeConstraint;
};
export declare const NICModelConstraint: {
    encode(message: NICModelConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NICModelConstraint;
    fromJSON(object: any): NICModelConstraint;
    toJSON(message: NICModelConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: NICModel;
    } & {
        op?: Operator;
        value?: NICModel;
    } & { [K in Exclude<keyof I, keyof NICModelConstraint>]: never; }>(base?: I): NICModelConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: NICModel;
    } & {
        op?: Operator;
        value?: NICModel;
    } & { [K_1 in Exclude<keyof I_1, keyof NICModelConstraint>]: never; }>(object: I_1): NICModelConstraint;
};
export declare const DiskFormFactorConstraint: {
    encode(message: DiskFormFactorConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DiskFormFactorConstraint;
    fromJSON(object: any): DiskFormFactorConstraint;
    toJSON(message: DiskFormFactorConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: DiskFormFactor;
    } & {
        op?: Operator;
        value?: DiskFormFactor;
    } & { [K in Exclude<keyof I, keyof DiskFormFactorConstraint>]: never; }>(base?: I): DiskFormFactorConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: DiskFormFactor;
    } & {
        op?: Operator;
        value?: DiskFormFactor;
    } & { [K_1 in Exclude<keyof I_1, keyof DiskFormFactorConstraint>]: never; }>(object: I_1): DiskFormFactorConstraint;
};
export declare const DiskInterfaceConstraint: {
    encode(message: DiskInterfaceConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): DiskInterfaceConstraint;
    fromJSON(object: any): DiskInterfaceConstraint;
    toJSON(message: DiskInterfaceConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: DiskInterface;
    } & {
        op?: Operator;
        value?: DiskInterface;
    } & { [K in Exclude<keyof I, keyof DiskInterfaceConstraint>]: never; }>(base?: I): DiskInterfaceConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: DiskInterface;
    } & {
        op?: Operator;
        value?: DiskInterface;
    } & { [K_1 in Exclude<keyof I_1, keyof DiskInterfaceConstraint>]: never; }>(object: I_1): DiskInterfaceConstraint;
};
export declare const ConnectorKindConstraint: {
    encode(message: ConnectorKindConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ConnectorKindConstraint;
    fromJSON(object: any): ConnectorKindConstraint;
    toJSON(message: ConnectorKindConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: ConnectorKind;
    } & {
        op?: Operator;
        value?: ConnectorKind;
    } & { [K in Exclude<keyof I, keyof ConnectorKindConstraint>]: never; }>(base?: I): ConnectorKindConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: ConnectorKind;
    } & {
        op?: Operator;
        value?: ConnectorKind;
    } & { [K_1 in Exclude<keyof I_1, keyof ConnectorKindConstraint>]: never; }>(object: I_1): ConnectorKindConstraint;
};
export declare const FloatConstraint: {
    encode(message: FloatConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): FloatConstraint;
    fromJSON(object: any): FloatConstraint;
    toJSON(message: FloatConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K in Exclude<keyof I, keyof FloatConstraint>]: never; }>(base?: I): FloatConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: number;
    } & {
        op?: Operator;
        value?: number;
    } & { [K_1 in Exclude<keyof I_1, keyof FloatConstraint>]: never; }>(object: I_1): FloatConstraint;
};
export declare const RoutingConstraint: {
    encode(message: RoutingConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): RoutingConstraint;
    fromJSON(object: any): RoutingConstraint;
    toJSON(message: RoutingConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: Routing;
    } & {
        op?: Operator;
        value?: Routing;
    } & { [K in Exclude<keyof I, keyof RoutingConstraint>]: never; }>(base?: I): RoutingConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: Routing;
    } & {
        op?: Operator;
        value?: Routing;
    } & { [K_1 in Exclude<keyof I_1, keyof RoutingConstraint>]: never; }>(object: I_1): RoutingConstraint;
};
export declare const AddressingConstraint: {
    encode(message: AddressingConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): AddressingConstraint;
    fromJSON(object: any): AddressingConstraint;
    toJSON(message: AddressingConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: Addressing;
    } & {
        op?: Operator;
        value?: Addressing;
    } & { [K in Exclude<keyof I, keyof AddressingConstraint>]: never; }>(base?: I): AddressingConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: Addressing;
    } & {
        op?: Operator;
        value?: Addressing;
    } & { [K_1 in Exclude<keyof I_1, keyof AddressingConstraint>]: never; }>(object: I_1): AddressingConstraint;
};
export declare const EmulationConstraint: {
    encode(message: EmulationConstraint, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EmulationConstraint;
    fromJSON(object: any): EmulationConstraint;
    toJSON(message: EmulationConstraint): unknown;
    create<I extends {
        op?: Operator;
        value?: Emulation;
    } & {
        op?: Operator;
        value?: Emulation;
    } & { [K in Exclude<keyof I, keyof EmulationConstraint>]: never; }>(base?: I): EmulationConstraint;
    fromPartial<I_1 extends {
        op?: Operator;
        value?: Emulation;
    } & {
        op?: Operator;
        value?: Emulation;
    } & { [K_1 in Exclude<keyof I_1, keyof EmulationConstraint>]: never; }>(object: I_1): EmulationConstraint;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
