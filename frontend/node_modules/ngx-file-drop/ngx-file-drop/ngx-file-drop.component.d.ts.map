{"version":3,"file":"ngx-file-drop.component.d.ts","sources":["ngx-file-drop.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2, TemplateRef } from '@angular/core';\r\nimport { NgxFileDropEntry } from './ngx-file-drop-entry';\r\nexport declare class NgxFileDropComponent implements OnDestroy {\r\n    private zone;\r\n    private renderer;\r\n    accept: string;\r\n    directory: boolean;\r\n    multiple: boolean;\r\n    dropZoneLabel: string;\r\n    dropZoneClassName: string;\r\n    contentClassName: string;\r\n    disabled: boolean;\r\n    showBrowseBtn: boolean;\r\n    browseBtnClassName: string;\r\n    browseBtnLabel: string;\r\n    onFileDrop: EventEmitter<NgxFileDropEntry[]>;\r\n    onFileOver: EventEmitter<any>;\r\n    onFileLeave: EventEmitter<any>;\r\n    contentTemplate: TemplateRef<any>;\r\n    fileSelector: ElementRef;\r\n    isDraggingOverDropZone: boolean;\r\n    private globalDraggingInProgress;\r\n    private globalDragStartListener;\r\n    private globalDragEndListener;\r\n    private files;\r\n    private numOfActiveReadEntries;\r\n    private helperFormEl;\r\n    private fileInputPlaceholderEl;\r\n    private dropEventTimerSubscription;\r\n    private _disabled;\r\n    constructor(zone: NgZone, renderer: Renderer2);\r\n    ngOnDestroy(): void;\r\n    onDragOver(event: Event): void;\r\n    onDragLeave(event: Event): void;\r\n    dropFiles(event: DragEvent): void;\r\n    openFileSelector: (event?: MouseEvent) => void;\r\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param Event event\r\n     */\r\n    uploadFiles(event: Event): void;\r\n    private checkFiles;\r\n    private traverseFileTree;\r\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     */\r\n    private resetFileInput;\r\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     */\r\n    private getHelperFormElement;\r\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     */\r\n    private getFileInputPlaceholderElement;\r\n    private canGetAsEntry;\r\n    private isDropzoneDisabled;\r\n    private addToQueue;\r\n    private preventAndStop;\r\n}\r\n"]}