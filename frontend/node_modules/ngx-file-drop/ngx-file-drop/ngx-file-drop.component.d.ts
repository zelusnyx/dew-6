import { ElementRef, EventEmitter, NgZone, OnDestroy, Renderer2, TemplateRef } from '@angular/core';
import { NgxFileDropEntry } from './ngx-file-drop-entry';
import * as ɵngcc0 from '@angular/core';
export declare class NgxFileDropComponent implements OnDestroy {
    private zone;
    private renderer;
    accept: string;
    directory: boolean;
    multiple: boolean;
    dropZoneLabel: string;
    dropZoneClassName: string;
    contentClassName: string;
    disabled: boolean;
    showBrowseBtn: boolean;
    browseBtnClassName: string;
    browseBtnLabel: string;
    onFileDrop: EventEmitter<NgxFileDropEntry[]>;
    onFileOver: EventEmitter<any>;
    onFileLeave: EventEmitter<any>;
    contentTemplate: TemplateRef<any>;
    fileSelector: ElementRef;
    isDraggingOverDropZone: boolean;
    private globalDraggingInProgress;
    private globalDragStartListener;
    private globalDragEndListener;
    private files;
    private numOfActiveReadEntries;
    private helperFormEl;
    private fileInputPlaceholderEl;
    private dropEventTimerSubscription;
    private _disabled;
    constructor(zone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    onDragOver(event: Event): void;
    onDragLeave(event: Event): void;
    dropFiles(event: DragEvent): void;
    openFileSelector: (event?: MouseEvent) => void;
    /**
     * Processes the change event of the file input and adds the given files.
     * @param Event event
     */
    uploadFiles(event: Event): void;
    private checkFiles;
    private traverseFileTree;
    /**
     * Clears any added files from the file input element so the same file can subsequently be added multiple times.
     */
    private resetFileInput;
    /**
     * Get a cached HTML form element as a helper element to clear the file input element.
     */
    private getHelperFormElement;
    /**
     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.
     */
    private getFileInputPlaceholderElement;
    private canGetAsEntry;
    private isDropzoneDisabled;
    private addToQueue;
    private preventAndStop;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<NgxFileDropComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<NgxFileDropComponent, "ngx-file-drop", never, { "accept": "accept"; "directory": "directory"; "multiple": "multiple"; "dropZoneLabel": "dropZoneLabel"; "dropZoneClassName": "dropZoneClassName"; "contentClassName": "contentClassName"; "showBrowseBtn": "showBrowseBtn"; "browseBtnClassName": "browseBtnClassName"; "browseBtnLabel": "browseBtnLabel"; "disabled": "disabled"; }, { "onFileDrop": "onFileDrop"; "onFileOver": "onFileOver"; "onFileLeave": "onFileLeave"; }, ["contentTemplate"], never>;
}

//# sourceMappingURL=ngx-file-drop.component.d.ts.map