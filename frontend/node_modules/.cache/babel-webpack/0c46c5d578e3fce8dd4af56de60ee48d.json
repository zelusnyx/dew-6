{"ast":null,"code":"import { timer } from 'rxjs';\nimport { Directive, TemplateRef, Component, ContentChild, EventEmitter, Input, NgZone, Output, Renderer2, ViewChild, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * fileEntry is an instance of {\\@link FileSystemFileEntry} or {\\@link FileSystemDirectoryEntry}.\r\n * Which one is it can be checked using {\\@link FileSystemEntry.isFile} or {\\@link FileSystemEntry.isDirectory}\r\n * properties of the given {\\@link FileSystemEntry}.\r\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nconst _c0 = [\"fileSelector\"];\n\nfunction NgxFileDropComponent_ng_template_4_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.dropZoneLabel);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"input\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function NgxFileDropComponent_ng_template_4_div_1_Template_input_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r7);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r6.openFileSelector($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate(\"value\", ctx_r5.browseBtnLabel);\n    ɵngcc0.ɵɵproperty(\"className\", ctx_r5.browseBtnClassName);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_4_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, NgxFileDropComponent_ng_template_4_div_0_Template, 2, 1, \"div\", 6);\n    ɵngcc0.ɵɵtemplate(1, NgxFileDropComponent_ng_template_4_div_1_Template, 2, 2, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.dropZoneLabel);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.showBrowseBtn);\n  }\n}\n\nfunction NgxFileDropComponent_ng_template_6_Template(rf, ctx) {}\n\nconst _c1 = function (a0) {\n  return {\n    openFileSelector: a0\n  };\n};\n\nclass NgxFileDropEntry {\n  /**\r\n   * @param {?} relativePath\r\n   * @param {?} fileEntry\r\n   */\n  constructor(relativePath, fileEntry) {\n    this.relativePath = relativePath;\n    this.fileEntry = fileEntry;\n  }\n\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet NgxFileDropContentTemplateDirective = /*#__PURE__*/(() => {\n  class NgxFileDropContentTemplateDirective {\n    /**\r\n     * @param {?} template\r\n     */\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  NgxFileDropContentTemplateDirective.ɵfac = function NgxFileDropContentTemplateDirective_Factory(t) {\n    return new (t || NgxFileDropContentTemplateDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  NgxFileDropContentTemplateDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NgxFileDropContentTemplateDirective,\n    selectors: [[\"\", \"ngx-file-drop-content-tmp\", \"\"]]\n  });\n  /** @nocollapse */\n\n  return NgxFileDropContentTemplateDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet NgxFileDropComponent = /*#__PURE__*/(() => {\n  class NgxFileDropComponent {\n    /**\r\n     * @param {?} zone\r\n     * @param {?} renderer\r\n     */\n    constructor(zone, renderer) {\n      this.zone = zone;\n      this.renderer = renderer;\n      this.accept = '*';\n      this.directory = false;\n      this.multiple = true;\n      this.dropZoneLabel = '';\n      this.dropZoneClassName = 'ngx-file-drop__drop-zone';\n      this.contentClassName = 'ngx-file-drop__content';\n      this.showBrowseBtn = false;\n      this.browseBtnClassName = 'btn btn-primary btn-xs ngx-file-drop__browse-btn';\n      this.browseBtnLabel = 'Browse files';\n      this.onFileDrop = new EventEmitter();\n      this.onFileOver = new EventEmitter();\n      this.onFileLeave = new EventEmitter();\n      this.isDraggingOverDropZone = false;\n      this.globalDraggingInProgress = false;\n      this.files = [];\n      this.numOfActiveReadEntries = 0;\n      this.helperFormEl = null;\n      this.fileInputPlaceholderEl = null;\n      this.dropEventTimerSubscription = null;\n      this._disabled = false;\n\n      this.openFileSelector =\n      /**\r\n      * @param {?=} event\r\n      * @return {?}\r\n      */\n      event => {\n        if (this.fileSelector && this.fileSelector.nativeElement) {\n          /** @type {?} */\n          this.fileSelector.nativeElement.click();\n        }\n      };\n\n      this.globalDragStartListener = this.renderer.listen('document', 'dragstart',\n      /**\r\n      * @param {?} evt\r\n      * @return {?}\r\n      */\n      evt => {\n        this.globalDraggingInProgress = true;\n      });\n      this.globalDragEndListener = this.renderer.listen('document', 'dragend',\n      /**\r\n      * @param {?} evt\r\n      * @return {?}\r\n      */\n      evt => {\n        this.globalDraggingInProgress = false;\n      });\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    get disabled() {\n      return this._disabled;\n    }\n    /**\r\n     * @param {?} value\r\n     * @return {?}\r\n     */\n\n\n    set disabled(value) {\n      this._disabled = value != null && `${value}` !== 'false';\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n\n    ngOnDestroy() {\n      if (this.dropEventTimerSubscription) {\n        this.dropEventTimerSubscription.unsubscribe();\n        this.dropEventTimerSubscription = null;\n      }\n\n      this.globalDragStartListener();\n      this.globalDragEndListener();\n      this.files = [];\n      this.helperFormEl = null;\n      this.fileInputPlaceholderEl = null;\n    }\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    onDragOver(event) {\n      if (!this.isDropzoneDisabled()) {\n        if (!this.isDraggingOverDropZone) {\n          this.isDraggingOverDropZone = true;\n          this.onFileOver.emit(event);\n        }\n\n        this.preventAndStop(event);\n      }\n    }\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    onDragLeave(event) {\n      if (!this.isDropzoneDisabled()) {\n        if (this.isDraggingOverDropZone) {\n          this.isDraggingOverDropZone = false;\n          this.onFileLeave.emit(event);\n        }\n\n        this.preventAndStop(event);\n      }\n    }\n    /**\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    dropFiles(event) {\n      if (!this.isDropzoneDisabled()) {\n        this.isDraggingOverDropZone = false;\n\n        if (event.dataTransfer) {\n          event.dataTransfer.dropEffect = 'copy';\n          /** @type {?} */\n\n          let items;\n\n          if (event.dataTransfer.items) {\n            items = event.dataTransfer.items;\n          } else {\n            items = event.dataTransfer.files;\n          }\n\n          this.preventAndStop(event);\n          this.checkFiles(items);\n        }\n      }\n    }\n    /**\r\n     * Processes the change event of the file input and adds the given files.\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    uploadFiles(event) {\n      if (!this.isDropzoneDisabled()) {\n        if (event.target) {\n          /** @type {?} */\n          const items =\n          /** @type {?} */\n          event.target.files ||\n          /** @type {?} */\n          [];\n          this.checkFiles(items);\n          this.resetFileInput();\n        }\n      }\n    }\n    /**\r\n     * @private\r\n     * @param {?} items\r\n     * @return {?}\r\n     */\n\n\n    checkFiles(items) {\n      for (let i = 0; i < items.length; i++) {\n        /** @type {?} */\n        const item = items[i];\n        /** @type {?} */\n\n        let entry = null;\n\n        if (this.canGetAsEntry(item)) {\n          entry = item.webkitGetAsEntry();\n        }\n\n        if (!entry) {\n          if (item) {\n            /** @type {?} */\n            const fakeFileEntry = {\n              name:\n              /** @type {?} */\n              item.name,\n              isDirectory: false,\n              isFile: true,\n              file:\n              /**\r\n              * @param {?} callback\r\n              * @return {?}\r\n              */\n              callback => {\n                callback(\n                /** @type {?} */\n                item);\n              }\n            };\n            /** @type {?} */\n\n            const toUpload = new NgxFileDropEntry(fakeFileEntry.name, fakeFileEntry);\n            this.addToQueue(toUpload);\n          }\n        } else {\n          if (entry.isFile) {\n            /** @type {?} */\n            const toUpload = new NgxFileDropEntry(entry.name, entry);\n            this.addToQueue(toUpload);\n          } else if (entry.isDirectory) {\n            this.traverseFileTree(entry, entry.name);\n          }\n        }\n      }\n\n      if (this.dropEventTimerSubscription) {\n        this.dropEventTimerSubscription.unsubscribe();\n      }\n\n      this.dropEventTimerSubscription = timer(200, 200).subscribe(\n      /**\r\n      * @return {?}\r\n      */\n      () => {\n        if (this.files.length > 0 && this.numOfActiveReadEntries === 0) {\n          /** @type {?} */\n          const files = this.files;\n          this.files = [];\n          this.onFileDrop.emit(files);\n        }\n      });\n    }\n    /**\r\n     * @private\r\n     * @param {?} item\r\n     * @param {?} path\r\n     * @return {?}\r\n     */\n\n\n    traverseFileTree(item, path) {\n      if (item.isFile) {\n        /** @type {?} */\n        const toUpload = new NgxFileDropEntry(path, item);\n        this.files.push(toUpload);\n      } else {\n        path = path + '/';\n        /** @type {?} */\n\n        const dirReader =\n        /** @type {?} */\n        item.createReader();\n        /** @type {?} */\n\n        let entries = [];\n        /** @type {?} */\n\n        const readEntries =\n        /**\r\n        * @return {?}\r\n        */\n        () => {\n          this.numOfActiveReadEntries++;\n          dirReader.readEntries(\n          /**\r\n          * @param {?} result\r\n          * @return {?}\r\n          */\n          result => {\n            if (!result.length) {\n              // add empty folders\n              if (entries.length === 0) {\n                /** @type {?} */\n                const toUpload = new NgxFileDropEntry(path, item);\n                this.zone.run(\n                /**\r\n                * @return {?}\r\n                */\n                () => {\n                  this.addToQueue(toUpload);\n                });\n              } else {\n                for (let i = 0; i < entries.length; i++) {\n                  this.zone.run(\n                  /**\r\n                  * @return {?}\r\n                  */\n                  () => {\n                    this.traverseFileTree(entries[i], path + entries[i].name);\n                  });\n                }\n              }\n            } else {\n              // continue with the reading\n              entries = entries.concat(result);\n              readEntries();\n            }\n\n            this.numOfActiveReadEntries--;\n          });\n        };\n\n        readEntries();\n      }\n    }\n    /**\r\n     * Clears any added files from the file input element so the same file can subsequently be added multiple times.\r\n     * @private\r\n     * @return {?}\r\n     */\n\n\n    resetFileInput() {\n      if (this.fileSelector && this.fileSelector.nativeElement) {\n        /** @type {?} */\n        const fileInputEl =\n        /** @type {?} */\n        this.fileSelector.nativeElement;\n        /** @type {?} */\n\n        const fileInputContainerEl = fileInputEl.parentElement;\n        /** @type {?} */\n\n        const helperFormEl = this.getHelperFormElement();\n        /** @type {?} */\n\n        const fileInputPlaceholderEl = this.getFileInputPlaceholderElement(); // Just a quick check so we do not mess up the DOM (will never happen though).\n\n        if (fileInputContainerEl !== helperFormEl) {\n          // Insert the form input placeholder in the DOM before the form input element.\n          this.renderer.insertBefore(fileInputContainerEl, fileInputPlaceholderEl, fileInputEl); // Add the form input as child of the temporary form element, removing the form input from the DOM.\n\n          this.renderer.appendChild(helperFormEl, fileInputEl); // Reset the form, thus clearing the input element of any files.\n\n          helperFormEl.reset(); // Add the file input back to the DOM in place of the file input placeholder element.\n\n          this.renderer.insertBefore(fileInputContainerEl, fileInputEl, fileInputPlaceholderEl); // Remove the input placeholder from the DOM\n\n          this.renderer.removeChild(fileInputContainerEl, fileInputPlaceholderEl);\n        }\n      }\n    }\n    /**\r\n     * Get a cached HTML form element as a helper element to clear the file input element.\r\n     * @private\r\n     * @return {?}\r\n     */\n\n\n    getHelperFormElement() {\n      if (!this.helperFormEl) {\n        this.helperFormEl =\n        /** @type {?} */\n        this.renderer.createElement('form');\n      }\n\n      return this.helperFormEl;\n    }\n    /**\r\n     * Get a cached HTML div element to be used as placeholder for the file input element when clearing said element.\r\n     * @private\r\n     * @return {?}\r\n     */\n\n\n    getFileInputPlaceholderElement() {\n      if (!this.fileInputPlaceholderEl) {\n        this.fileInputPlaceholderEl =\n        /** @type {?} */\n        this.renderer.createElement('div');\n      }\n\n      return this.fileInputPlaceholderEl;\n    }\n    /**\r\n     * @private\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n\n    canGetAsEntry(item) {\n      return !!item.webkitGetAsEntry;\n    }\n    /**\r\n     * @private\r\n     * @return {?}\r\n     */\n\n\n    isDropzoneDisabled() {\n      return this.globalDraggingInProgress || this.disabled;\n    }\n    /**\r\n     * @private\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n\n    addToQueue(item) {\n      this.files.push(item);\n    }\n    /**\r\n     * @private\r\n     * @param {?} event\r\n     * @return {?}\r\n     */\n\n\n    preventAndStop(event) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n\n  }\n\n  NgxFileDropComponent.ɵfac = function NgxFileDropComponent_Factory(t) {\n    return new (t || NgxFileDropComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  NgxFileDropComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: NgxFileDropComponent,\n    selectors: [[\"ngx-file-drop\"]],\n    contentQueries: function NgxFileDropComponent_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, NgxFileDropContentTemplateDirective, 5, TemplateRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentTemplate = _t.first);\n      }\n    },\n    viewQuery: function NgxFileDropComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.fileSelector = _t.first);\n      }\n    },\n    inputs: {\n      accept: \"accept\",\n      directory: \"directory\",\n      multiple: \"multiple\",\n      dropZoneLabel: \"dropZoneLabel\",\n      dropZoneClassName: \"dropZoneClassName\",\n      contentClassName: \"contentClassName\",\n      showBrowseBtn: \"showBrowseBtn\",\n      browseBtnClassName: \"browseBtnClassName\",\n      browseBtnLabel: \"browseBtnLabel\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      onFileDrop: \"onFileDrop\",\n      onFileOver: \"onFileOver\",\n      onFileLeave: \"onFileLeave\"\n    },\n    decls: 7,\n    vars: 15,\n    consts: [[3, \"className\", \"drop\", \"dragover\", \"dragleave\"], [3, \"className\"], [\"type\", \"file\", 1, \"ngx-file-drop__file-input\", 3, \"accept\", \"multiple\", \"change\"], [\"fileSelector\", \"\"], [\"defaultContentTemplate\", \"\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"class\", \"ngx-file-drop__drop-zone-label\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"ngx-file-drop__drop-zone-label\"], [\"type\", \"button\", 3, \"className\", \"value\", \"click\"]],\n    template: function NgxFileDropComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"drop\", function NgxFileDropComponent_Template_div_drop_0_listener($event) {\n          return ctx.dropFiles($event);\n        })(\"dragover\", function NgxFileDropComponent_Template_div_dragover_0_listener($event) {\n          return ctx.onDragOver($event);\n        })(\"dragleave\", function NgxFileDropComponent_Template_div_dragleave_0_listener($event) {\n          return ctx.onDragLeave($event);\n        });\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"input\", 2, 3);\n        ɵngcc0.ɵɵlistener(\"change\", function NgxFileDropComponent_Template_input_change_2_listener($event) {\n          return ctx.uploadFiles($event);\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, NgxFileDropComponent_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(6, NgxFileDropComponent_ng_template_6_Template, 0, 0, \"ng-template\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(5);\n\n        ɵngcc0.ɵɵclassProp(\"ngx-file-drop__drop-zone--over\", ctx.isDraggingOverDropZone);\n        ɵngcc0.ɵɵproperty(\"className\", ctx.dropZoneClassName);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"className\", ctx.contentClassName);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"accept\", ctx.accept)(\"multiple\", ctx.multiple);\n        ɵngcc0.ɵɵattribute(\"directory\", ctx.directory || undefined)(\"webkitdirectory\", ctx.directory || undefined)(\"mozdirectory\", ctx.directory || undefined)(\"msdirectory\", ctx.directory || undefined)(\"odirectory\", ctx.directory || undefined);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.contentTemplate || _r1)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(13, _c1, ctx.openFileSelector));\n      }\n    },\n    directives: [ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf],\n    styles: [\".ngx-file-drop__drop-zone[_ngcontent-%COMP%]{height:100px;margin:auto;border:2px dotted #0782d0;border-radius:30px}.ngx-file-drop__drop-zone--over[_ngcontent-%COMP%]{background-color:rgba(147,147,147,.5)}.ngx-file-drop__content[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;height:100px;color:#0782d0}.ngx-file-drop__drop-zone-label[_ngcontent-%COMP%]{text-align:center}.ngx-file-drop__file-input[_ngcontent-%COMP%]{display:none}\"]\n  });\n  /** @nocollapse */\n\n  return NgxFileDropComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nlet NgxFileDropModule = /*#__PURE__*/(() => {\n  class NgxFileDropModule {}\n\n  NgxFileDropModule.ɵfac = function NgxFileDropModule_Factory(t) {\n    return new (t || NgxFileDropModule)();\n  };\n\n  NgxFileDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NgxFileDropModule,\n    bootstrap: function () {\n      return [NgxFileDropComponent];\n    }\n  });\n  NgxFileDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [],\n    imports: [[CommonModule]]\n  });\n  return NgxFileDropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxFileDropModule, {\n    declarations: function () {\n      return [NgxFileDropComponent, NgxFileDropContentTemplateDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NgxFileDropComponent, NgxFileDropContentTemplateDirective];\n    }\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n\nexport { NgxFileDropComponent, NgxFileDropModule, NgxFileDropEntry, NgxFileDropContentTemplateDirective as ɵa }; //# sourceMappingURL=ngx-file-drop.js.map","map":null,"metadata":{},"sourceType":"module"}