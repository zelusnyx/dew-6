{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Observable, BehaviorSubject, from, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { environment } from '../../environments/environment'; // Import MergeTB API types and clients\n\nimport { IdentityClientImpl } from '@mergetb/api/portal/v1/portal';\nimport * as i0 from \"@angular/core\"; // Simple RPC implementation for HTTP transport\n\nclass HttpRpc {\n  constructor(baseUrl) {\n    this.baseUrl = baseUrl;\n  }\n\n  request(service, method, data) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const url = `${this.baseUrl}/api/v1/${service}/${method}`;\n      const response = yield fetch(url, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-protobuf',\n          'Accept': 'application/x-protobuf'\n        },\n        body: data\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return new Uint8Array(yield response.arrayBuffer());\n    });\n  }\n\n  clientStreamingRequest() {\n    throw new Error('Not implemented');\n  }\n\n  serverStreamingRequest() {\n    throw new Error('Not implemented');\n  }\n\n  bidirectionalStreamingRequest() {\n    throw new Error('Not implemented');\n  }\n\n}\n\nexport let SphereAuthService = /*#__PURE__*/(() => {\n  class SphereAuthService {\n    constructor() {\n      this.sphereToken = null;\n      this.sphereAuthState = new BehaviorSubject(false);\n      this.sphereAuthState$ = this.sphereAuthState.asObservable();\n      this.rpc = new HttpRpc(environment.sphereApiUrl);\n      this.identityClient = new IdentityClientImpl(this.rpc);\n      this.sphereToken = this.getSphereTokenFromStorage();\n\n      if (this.sphereToken) {\n        this.sphereAuthState.next(true);\n      }\n    }\n\n    loginToSphere(username, password) {\n      const loginRequest = {\n        username: username,\n        password: password\n      };\n      return from(this.identityClient.Login(loginRequest)).pipe(map(response => {\n        if (response.token) {\n          this.sphereToken = response.token;\n          this.storeSphereToken(response.token);\n          this.sphereAuthState.next(true);\n          console.log('SPHERE login successful');\n        }\n\n        return response;\n      }), catchError(error => {\n        console.error('SPHERE login failed:', error);\n        this.sphereAuthState.next(false);\n        return throwError(error);\n      }));\n    }\n\n    logoutFromSphere() {\n      this.sphereToken = null;\n      this.clearSphereToken();\n      this.sphereAuthState.next(false);\n      return new Observable(observer => {\n        observer.next(true);\n        observer.complete();\n      });\n    }\n\n    getSphereToken() {\n      return this.sphereToken;\n    }\n\n    isSphereAuthenticated() {\n      return this.sphereToken !== null && this.sphereToken.length > 0;\n    }\n\n    storeSphereToken(token) {\n      localStorage.setItem('sphere_token', token);\n    }\n\n    getSphereTokenFromStorage() {\n      return localStorage.getItem('sphere_token');\n    }\n\n    clearSphereToken() {\n      localStorage.removeItem('sphere_token');\n    }\n\n  }\n\n  SphereAuthService.ɵfac = function SphereAuthService_Factory(t) {\n    return new (t || SphereAuthService)();\n  };\n\n  SphereAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SphereAuthService,\n    factory: SphereAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return SphereAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}