{"ast":null,"code":"import { DataSet } from 'vis-data';\nimport { Network } from 'vis-network';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"@angular/material/snack-bar\";\nconst _c0 = [\"currentInfoNetwork\"];\n\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction CurrentInfoComponent_div_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵelement(1, \"div\", 14);\n    i0.ɵɵelementStart(2, \"div\", 15);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const actor_r5 = ctx.$implicit;\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, ctx_r1.graphColors[actor_r5.value]));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(actor_r5.key);\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"img\", 17);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const legend_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", legend_r6.img, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", legend_r6.label, \" \");\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 37);\n    i0.ɵɵtext(1, \" Successful \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 38);\n    i0.ɵɵtext(1, \" In Progress \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 39);\n    i0.ɵɵtext(1, \" Waiting \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 40);\n    i0.ɵɵtext(1, \" Unsuccessful \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 41);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const s_r8 = i0.ɵɵnextContext().$implicit;\n    const ctx_r14 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r14.getLocalTime(s_r8.time));\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 42);\n  }\n\n  if (rf & 2) {\n    const s_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"innerHTML\", \"Error: *\" + s_r8.error.replace(\"\\n\", \"<br>\") + \"*\", i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_div_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 43);\n    i0.ɵɵelement(1, \"p\", 44);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const s_r8 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", s_r8.output.replace(\"\\n\", \"<br>\"), i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-expansion-panel\");\n    i0.ɵɵelementStart(1, \"mat-expansion-panel-header\", 20);\n    i0.ɵɵelementStart(2, \"mat-panel-title\", 21);\n    i0.ɵɵelementStart(3, \"p\", 22);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementStart(5, \"span\", 23);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"mat-panel-description\", 24);\n    i0.ɵɵelementStart(8, \"div\", 25);\n    i0.ɵɵelementStart(9, \"div\", 26);\n    i0.ɵɵtext(10);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"div\", 27);\n    i0.ɵɵelementStart(12, \"span\", 28);\n    i0.ɵɵtext(13, \" Status: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(14, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_14_Template, 2, 0, \"span\", 29);\n    i0.ɵɵtemplate(15, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_15_Template, 2, 0, \"span\", 30);\n    i0.ɵɵtemplate(16, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_16_Template, 2, 0, \"span\", 31);\n    i0.ɵɵtemplate(17, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_17_Template, 2, 0, \"span\", 32);\n    i0.ɵɵtemplate(18, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_18_Template, 2, 1, \"span\", 33);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"div\", 34);\n    i0.ɵɵtemplate(20, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_span_20_Template, 1, 1, \"span\", 35);\n    i0.ɵɵtemplate(21, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_div_21_Template, 2, 1, \"div\", 36);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const s_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"collapsedHeight\", \"fit-content\")(\"expandedHeight\", \"fit-content\");\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", s_r8.node, \" : \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(s_r8.action);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate1(\" \", s_r8.cmd, \" \");\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", s_r8.status == \"0\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", s_r8.status == \"\" && s_r8.time != \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", s_r8.status == \"\" && s_r8.time == \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", s_r8.status != \"0\" && s_r8.error != \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", s_r8.time != \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", s_r8.error != \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", s_r8.output != \"\");\n  }\n}\n\nfunction CurrentInfoComponent_div_1_div_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 18);\n    i0.ɵɵelementStart(1, \"mat-accordion\");\n    i0.ɵɵtemplate(2, CurrentInfoComponent_div_1_div_10_mat_expansion_panel_2_Template, 22, 12, \"mat-expansion-panel\", 19);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.filteredExecutionScript);\n  }\n}\n\nfunction CurrentInfoComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵelementStart(2, \"div\", 5);\n    i0.ɵɵelementStart(3, \"div\", 6);\n    i0.ɵɵtemplate(4, CurrentInfoComponent_div_1_div_4_Template, 4, 4, \"div\", 7);\n    i0.ɵɵpipe(5, \"keyvalue\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 8);\n    i0.ɵɵtemplate(7, CurrentInfoComponent_div_1_div_7_Template, 3, 2, \"div\", 9);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(8, \"div\", 10, 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(10, CurrentInfoComponent_div_1_div_10_Template, 3, 1, \"div\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(5, 3, ctx_r0.actorsGroup));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.statusLegends);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.filteredExecutionScript && ctx_r0.filteredExecutionScript.length);\n  }\n}\n\nexport let CurrentInfoComponent = /*#__PURE__*/(() => {\n  class CurrentInfoComponent {\n    constructor(http, _snackBar) {\n      this.http = http;\n      this._snackBar = _snackBar;\n      this.errorFlag = false;\n      this.executionScript = [];\n      this.filteredExecutionScript = [];\n      this.loader = false;\n      this.refreshIntervalId = null;\n      this.actorsGroup = new Map();\n      this.graphColors = [\"#F0C929\", \"#F48B29\", \"#AC0D0D\", \"#693C72\", \"#55B3B1\", \"#F08A5D\", \"#B83B5E\", \"#54E346\", \"#1F1D36\", \"#420516\", \"#91091E\", \"#EE8572\", \"#35495E\", \"#347474\", \"#480032\", \"#FF4C29\", \"#FB3640\", \"#126E82\", \"#05004E\", \"#FF005C\", \"#240041\", \"#F4E557\", \"#B983FF\", \"#1DB9C3\", \"#005F99\"];\n      this.graphImages = {\n        successImage: null,\n        errorImage: null,\n        inProgressImage: null,\n        waitingImage: null\n      };\n      this.statusLegends = [{\n        label: 'Success',\n        img: '/assets/checked.png'\n      }, {\n        label: 'Error',\n        img: '/assets/warning.png'\n      }, {\n        label: 'In Progress',\n        img: '/assets/inprogress.png'\n      }, {\n        label: 'Waiting',\n        img: '/assets/stopwatch.png'\n      }];\n    }\n\n    ngOnChanges(changes) {\n      if (changes.account_id !== undefined) {\n        this.account_id = changes.account_id.currentValue;\n      }\n\n      if (changes.experiment_id !== undefined) {\n        this.experiment_id = changes.experiment_id.currentValue;\n      }\n\n      this.ngOnInit();\n    }\n\n    ngOnInit() {\n      this.logList = [];\n      this.executionScript = [];\n      console.log(\"inside Current Info Component\" + this.experiment_id + \":\" + this.account_id);\n      this.graphImages.successImage = new Image();\n      this.graphImages.successImage.src = '/assets/checked.png';\n      this.graphImages.errorImage = new Image();\n      this.graphImages.errorImage.src = '/assets/warning.png';\n      this.graphImages.inProgressImage = new Image();\n      this.graphImages.inProgressImage.src = '/assets/inprogress.png';\n      this.graphImages.waitingImage = new Image();\n      this.graphImages.waitingImage.src = '/assets/stopwatch.png';\n\n      if (this.experiment_id != undefined && this.account_id != undefined) {\n        this.getRunLogs();\n        this.showDependencyGraph();\n      }\n    }\n\n    getRunLogs() {\n      this.logList = [];\n      this.errorFlag = false;\n      let url = 'v1/pr/deter/project/run/logs?eid=' + this.experiment_id + '&account_id=' + this.account_id;\n      this.http.get(url, {\n        withCredentials: true\n      }).subscribe(data => {\n        if (data.logs != undefined && data.logs.length != 0) {\n          this.logList = data.logs.reverse();\n          this.logid = data.logs[0].id;\n        } else {\n          this.error = data.error;\n          this.errorFlag = true;\n        }\n      });\n    }\n\n    onSelectionChange(display) {\n      if (display) {\n        setTimeout(() => {\n          this.dependencyNetworkInstance.fit();\n          this.showDetails();\n        }, 500);\n        this.refreshIntervalId = setInterval(() => {\n          if (this.doRefresh) {\n            this.showDetails();\n          }\n        }, 30000);\n      } else {\n        clearInterval(this.refreshIntervalId);\n      }\n    }\n\n    showDetails() {\n      console.log(this.logid);\n      this.errorFlag = false;\n      this.loader = true;\n      let params = {\n        rid: this.logid,\n        account_id: this.account_id,\n        eid: this.experiment_id,\n        b: 20\n      };\n      this.http.post('/api/v1/pr/deter/project/run/get', params, {\n        withCredentials: true\n      }).subscribe(data1 => {\n        this.loader = false;\n\n        if (data1.error == undefined) {\n          console.log(\"showDetails\", data1.data);\n          this.executionScript = data1.data;\n\n          if (this.dependencyNetworkInstance) {\n            this.updateGraphStats();\n          }\n        } else {\n          console.log(data1.error);\n\n          this._snackBar.open(data1.error, 'close', {\n            duration: 2000\n          });\n        }\n      }, error => {\n        this.loader = false;\n\n        this._snackBar.open('Something went wrong please try again later!', 'close', {\n          duration: 2000\n        });\n      });\n    }\n\n    showDependencyGraph() {\n      this.http.post(\"api/v1/pr/persist/getExperimentById\", {\n        id: this.experiment_id\n      }, {\n        withCredential: true\n      }).subscribe(data => {\n        const request = {\n          ParseType: 'bash',\n          scenario: data.behaviors,\n          constraints: data.constraints\n        };\n        this.http.put(\"v1/pr/hlb/dependency_graph/parse\", request, {\n          withCredential: true\n        }).subscribe(d => {\n          let nodes = [];\n          let links = [];\n          let topologyLabel = 1;\n\n          for (const n of d['nodes']) {\n            if (!this.actorsGroup.has(n.actors[0])) {\n              this.actorsGroup.set(n.actors[0], this.actorsGroup.size);\n            }\n\n            var n2 = {\n              data: n,\n              counters: {\n                success: 0,\n                error: 0,\n                inProgress: 0,\n                waiting: 0\n              },\n              id: n.id,\n              label: n.action,\n              topologyLabel: topologyLabel++,\n              group: \"group\" + this.actorsGroup.get(n.actors[0])\n            };\n            nodes.push(n2);\n          }\n\n          for (const e of d['edges']) {\n            var e2 = e;\n            e2.from = e2.source;\n            e2.to = e2.target;\n            e2.arrows = {\n              to: {\n                enabled: true,\n                type: \"arrow\"\n              }\n            };\n            links.push(e2);\n          }\n\n          const graphGroups = Object.assign({}, ...this.graphColors.map((color, index) => ({\n            [\"group\" + index]: {\n              color\n            }\n          })));\n          this.dependencyGraphNodes = new DataSet(nodes);\n          this.dependencyGraphEdges = new DataSet(links);\n          this.http.put(\"v1/pr/hlb/dependency-graph/get-node-count\", {\n            scenarios: data.behaviors,\n            constraints: data.constraints,\n            bindings: data.bindings\n          }, {\n            withCredential: true\n          }).subscribe(receivedData => {\n            this.dependencyGraphNodes.forEach(node => {\n              const num = receivedData.nodeCountData[node.label];\n              this.dependencyGraphNodes.update({\n                id: node.id,\n                totalNode: num\n              });\n            });\n          });\n          this.dependencyNetworkInstance = new Network(this.currentInfoNetwork.nativeElement, {\n            nodes: this.dependencyGraphNodes,\n            edges: this.dependencyGraphEdges\n          }, {\n            layout: {\n              hierarchical: {\n                sortMethod: \"directed\",\n                shakeTowards: \"leaves\",\n                treeSpacing: 150,\n                levelSeparation: 100,\n                nodeSpacing: 500,\n                edgeMinimization: false,\n                blockShifting: false\n              }\n            },\n            edges: {\n              color: '#999999',\n              length: 200\n            },\n            nodes: {\n              shape: \"box\",\n              font: {\n                color: '#FFFFFF'\n              }\n            },\n            groups: graphGroups,\n            physics: {\n              hierarchicalRepulsion: {\n                nodeDistance: 160\n              }\n            }\n          }); //Show legends in dependency graph\n\n          this.dependencyNetworkInstance.on(\"afterDrawing\", ctx => {\n            this.dependencyGraphNodes.forEach(node => {\n              var nodePosition = this.dependencyNetworkInstance.getPosition(node.id);\n              var boundingBox = this.dependencyNetworkInstance.getBoundingBox(node.id);\n              let x = boundingBox.right;\n              let y = nodePosition.y;\n              ctx.strokeStyle = \"#294475\";\n              ctx.lineWidth = 2;\n              ctx.fillStyle = \"#A6D5F7\";\n              ctx.beginPath();\n              ctx.fillRect(x + 10 - 2.5, y - 15, 145, 25);\n              ctx.closePath();\n              ctx.fill();\n              ctx.stroke();\n              ctx.drawImage(this.graphImages.successImage, x + 10, y - 10, 15, 15);\n              ctx.drawImage(this.graphImages.errorImage, x + 45, y - 10, 15, 15);\n              ctx.drawImage(this.graphImages.inProgressImage, x + 80, y - 10, 15, 15);\n              ctx.drawImage(this.graphImages.waitingImage, x + 115, y - 10, 15, 15);\n              ctx.font = \"12px Arial\";\n              ctx.fillStyle = \"#000000\";\n              ctx.textAlign = \"center\";\n              ctx.textBaseline = \"middle\";\n              ctx.fillText(node.counters.success + \"\", x + 35, y - 2.5);\n              ctx.fillText(node.counters.error + \"\", x + 70, y - 2.5);\n              ctx.fillText(node.counters.inProgress + \"\", x + 105, y - 2.5);\n              ctx.fillText(node.counters.waiting + \"\", x + 140, y - 2.5);\n            });\n          }); //On click\n\n          this.dependencyNetworkInstance.on('click', properties => {\n            if (properties.nodes && properties.nodes.length) {\n              const id = properties.nodes[0];\n              const node = this.dependencyGraphNodes.get(id);\n              this.filteredExecutionScript = this.executionScript.filter(script => node['label'] == script.action);\n            } else {\n              this.filteredExecutionScript = [];\n            }\n          });\n        });\n      });\n    }\n\n    getLocalTime(time) {\n      var d = new Date(0);\n      d.setUTCSeconds(parseInt(time));\n      return d.toLocaleTimeString('en-US', {\n        hour12: false\n      });\n    }\n\n    updateGraphStats() {\n      const actionStats = {};\n\n      for (const script of this.executionScript) {\n        if (!actionStats[script.action]) {\n          actionStats[script.action] = {\n            success: 0,\n            error: 0,\n            inProgress: 0\n          };\n        }\n\n        if (script.status === \"0\") {\n          actionStats[script.action].success += 1;\n        } else {\n          if (script.error) {\n            actionStats[script.action].error += 1;\n          } else if (script.time) {\n            actionStats[script.action].inProgress += 1;\n          }\n        }\n      }\n\n      this.dependencyGraphNodes.forEach(node => {\n        const stats = actionStats[node.label] || {\n          success: 0,\n          error: 0,\n          inProgress: 0\n        };\n        const waiting = node.totalNode - stats.success - stats.error - stats.inProgress;\n        stats.waiting = waiting;\n        this.dependencyGraphNodes.update({\n          id: node.id,\n          counters: stats\n        });\n      });\n      this.dependencyNetworkInstance.fit();\n    }\n\n  }\n\n  CurrentInfoComponent.ɵfac = function CurrentInfoComponent_Factory(t) {\n    return new (t || CurrentInfoComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.MatSnackBar));\n  };\n\n  CurrentInfoComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CurrentInfoComponent,\n    selectors: [[\"current-info\"]],\n    viewQuery: function CurrentInfoComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.currentInfoNetwork = _t.first);\n      }\n    },\n    inputs: {\n      experiment_id: \"experiment_id\",\n      account_id: \"account_id\",\n      doRefresh: \"doRefresh\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"container\", \"p-0\", 2, \"height\", \"100%\"], [\"style\", \"margin:0.5em; display: flex; \", 4, \"ngIf\"], [3, \"hidden\"], [2, \"margin\", \"0.5em\", \"display\", \"flex\"], [2, \"flex-grow\", \"1\"], [1, \"graph-box-dependency\"], [2, \"width\", \"200px\", \"margin-top\", \"20px\", \"margin-left\", \"40px\", \"position\", \"absolute\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [2, \"width\", \"150px\", \"position\", \"absolute\", \"bottom\", \"20px\", \"margin-left\", \"20px\"], [\"class\", \"mt-1\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"currentInfoNetwork\"], [\"currentInfoNetwork\", \"\"], [\"style\", \"margin-left: 10px; width: 40%\", 4, \"ngIf\"], [1, \"row\"], [1, \"col-md-3\", \"mt-1\", 3, \"ngStyle\"], [1, \"col-md-9\", \"mt-1\"], [1, \"mt-1\"], [2, \"width\", \"15px\", \"height\", \"15px\", \"margin-right\", \"7px\", 3, \"src\"], [2, \"margin-left\", \"10px\", \"width\", \"40%\"], [4, \"ngFor\", \"ngForOf\"], [2, \"padding\", \"10px\", 3, \"collapsedHeight\", \"expandedHeight\"], [2, \"width\", \"35%\"], [2, \"word-break\", \"break-all\"], [2, \"color\", \"blue\"], [2, \"width\", \"65%\"], [1, \"row\", 2, \"width\", \"100%\"], [1, \"col-7\"], [1, \"col-5\"], [2, \"margin-right\", \"5px\"], [\"style\", \"color:green\", 4, \"ngIf\"], [\"style\", \"color:#17a2b8\", 4, \"ngIf\"], [\"style\", \"color:#f0c929\", 4, \"ngIf\"], [\"style\", \"color:red\", 4, \"ngIf\"], [\"style\", \"color:gray;\", 4, \"ngIf\"], [1, \"col-md-12\"], [\"style\", \"color:red\", 3, \"innerHTML\", 4, \"ngIf\"], [\"class\", \"col-md-12\", \"style\", \"background-color: black;color: white;\", 4, \"ngIf\"], [2, \"color\", \"green\"], [2, \"color\", \"#17a2b8\"], [2, \"color\", \"#f0c929\"], [2, \"color\", \"red\"], [2, \"color\", \"gray\"], [2, \"color\", \"red\", 3, \"innerHTML\"], [1, \"col-md-12\", 2, \"background-color\", \"black\", \"color\", \"white\"], [3, \"innerHTML\"]],\n    template: function CurrentInfoComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, CurrentInfoComponent_div_1_Template, 11, 5, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"p\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.errorFlag);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", !ctx.errorFlag);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.error);\n      }\n    },\n    styles: [\".container[_ngcontent-%COMP%]{margin-top:.3em}col-md-12[_ngcontent-%COMP%]{word-break:break-all}#currentInfoNetwork[_ngcontent-%COMP%]{height:100%;width:100%}.graph-box-dependency[_ngcontent-%COMP%]{border:#afafaf;border-style:dashed;border-width:2px;width:100%;height:600px;z-index:-10;overflow-x:hidden}\"]\n  });\n  return CurrentInfoComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}