{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"src/app/@auth/auth.service\";\nexport let LogService = /*#__PURE__*/(() => {\n  class LogService {\n    constructor(http, authService) {\n      this.http = http;\n      this.authService = authService;\n      this.level = LogLevel.All;\n      this.logWithDate = true;\n    }\n\n    debug(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Debug, optionalParams);\n    }\n\n    info(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Info, optionalParams);\n    }\n\n    warn(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Warn, optionalParams);\n    }\n\n    error(header, msg) {\n      console.error(msg);\n      this.writeToLog(msg, LogLevel.Error, header);\n    }\n\n    fatal(msg, ...optionalParams) {\n      this.writeToLog(msg, LogLevel.Fatal, optionalParams);\n    }\n\n    log(header, msg) {\n      console.log(msg);\n      this.writeToLog(msg.toString(), LogLevel.All, header);\n    }\n\n    writeToLog(msg, level, header) {\n      if (this.shouldLog(level)) {\n        let entry = new LogEntry();\n        entry.message = msg;\n        entry.level = level;\n        entry.logWithDate = this.logWithDate;\n        var message = entry.buildLogString(header, msg);\n        const data = {\n          message: [message]\n        };\n        this.http.put('v1/pr/log/user-logging', data, {\n          withCredential: true\n        }).subscribe(receivedData => {\n          console.log(receivedData);\n        });\n      }\n    }\n\n    shouldLog(level) {\n      let ret = false;\n\n      if (level >= this.level && level !== LogLevel.Off || this.level === LogLevel.All) {\n        ret = true;\n      }\n\n      return ret;\n    }\n\n  }\n\n  LogService.ɵfac = function LogService_Factory(t) {\n    return new (t || LogService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.AuthService));\n  };\n\n  LogService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LogService,\n    factory: LogService.ɵfac\n  });\n  return LogService;\n})();\nexport var LogLevel = /*#__PURE__*/(() => {\n  (function (LogLevel) {\n    LogLevel[LogLevel[\"All\"] = 0] = \"All\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n    LogLevel[LogLevel[\"Off\"] = 6] = \"Off\";\n  })(LogLevel || (LogLevel = {}));\n\n  return LogLevel;\n})();\nexport var LogHeader = /*#__PURE__*/(() => {\n  (function (LogHeader) {\n    LogHeader[\"KEY_PRESS\"] = \"KEY_PRESS\";\n    LogHeader[\"DATA_RECEIVED\"] = \"DATA_RECEIVED\";\n    LogHeader[\"DATA_SENT\"] = \"DATA_SENT\";\n    LogHeader[\"GRAPH_UPDATE\"] = \"GRAPH_UPDATE\";\n    LogHeader[\"TEXT_UPDATED\"] = \"TEXT_UPDATED\";\n    LogHeader[\"INFO\"] = \"INFO\";\n    LogHeader[\"ERROR\"] = \"ERROR\";\n  })(LogHeader || (LogHeader = {}));\n\n  return LogHeader;\n})();\nexport class LogEntry {\n  constructor() {\n    // Public Properties\n    this.entryDate = new Date();\n    this.message = \"\";\n    this.level = LogLevel.Debug;\n    this.extraInfo = [];\n    this.logWithDate = true;\n  }\n\n  buildLogString(header, logData) {\n    let ret = \"\";\n    var date = new Date();\n    var time = date.toLocaleTimeString();\n    var tempTime = time.split(\":\");\n\n    if (tempTime[0].length == 1) {\n      tempTime[0] = \"0\" + tempTime[0];\n    }\n\n    if (tempTime[1].length == 1) {\n      tempTime[1] = \"0\" + tempTime[1];\n    }\n\n    if (tempTime[2].length == 1) {\n      tempTime[2] = \"0\" + tempTime[2];\n    }\n\n    time = tempTime.join(\":\");\n    var dateTime = (date.getMonth() > 8 ? date.getMonth() + 1 : '0' + (date.getMonth() + 1)) + '/' + (date.getDate() > 9 ? date.getDate() : '0' + date.getDate()) + '/' + date.getFullYear() + \" \" + time;\n\n    if (this.logWithDate) {\n      ret = dateTime + \" | \";\n    }\n\n    ret += \"FRONTEND \";\n    ret += header + \": \" + logData;\n    return ret;\n  }\n\n  printGraphParameterData(graphItemParametersList, id_of_node, id_of_edge) {\n    let string = \"\";\n\n    for (var i in id_of_node) {\n      string += \"Node \" + i + \": (\";\n      var temp = graphItemParametersList[id_of_node[i]];\n\n      for (var j in temp) {\n        string += j + \" - \" + temp[j] + \", \";\n      }\n\n      string = string.substring(0, string.length - 2);\n      string += \"), \";\n    }\n\n    for (var i in id_of_edge) {\n      string += \"Edge \" + i + \": (\";\n      var temp = graphItemParametersList[id_of_edge[i]['id']];\n\n      for (var j in temp) {\n        string += j + \" - \" + temp[j] + \", \";\n      }\n\n      string = string.substring(0, string.length - 2);\n      string += \"), \";\n    }\n\n    string = string.substring(0, string.length - 2);\n    return string;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}