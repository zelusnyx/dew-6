{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport * as shape from 'd3-shape';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"src/app/state-service.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/forms\";\nconst _c0 = [\"graph\"];\n\nfunction SingleSlideComponent_ng_template_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"marker\", 23);\n    i0.ɵɵelement(1, \"path\", 24);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction SingleSlideComponent_ng_template_20_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 25);\n    i0.ɵɵlistener(\"click\", function SingleSlideComponent_ng_template_20_Template__svg_g_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const node_r10 = restoredCtx.$implicit;\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.showMappingPopup(node_r10);\n    });\n    i0.ɵɵelement(1, \"rect\", 26);\n    i0.ɵɵelementStart(2, \"text\", 27);\n    i0.ɵɵelementStart(3, \"tspan\", 28);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"tspan\", 29);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"tspan\", 30);\n    i0.ɵɵtext(8, \"action\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r10 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"stroke\", ctx_r4.getColor(node_r10))(\"width\", node_r10.dimension.width)(\"height\", node_r10.dimension.height)(\"fill\", ctx_r4.getColor(node_r10))(\"rx\", ctx_r4.isLanNode(node_r10, \"x\"))(\"ry\", ctx_r4.isLanNode(node_r10, \"y\"))(\"title\", ctx_r4.getTitle(node_r10));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", node_r10.dimension.width / 2)(\"y\", node_r10.dimension.height / 4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r10.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getSubText(node_r10));\n  }\n}\n\nfunction SingleSlideComponent_ng_template_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 31);\n    i0.ɵɵelement(1, \"rect\", 32);\n    i0.ɵɵelementStart(2, \"text\", 33);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cluster_r13 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"width\", cluster_r13.dimension.width)(\"height\", cluster_r13.dimension.height)(\"fill\", ctx_r6.getColor(cluster_r13));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", 10)(\"y\", 30);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(Actor: \", cluster_r13.label, \")\");\n  }\n}\n\nfunction SingleSlideComponent_ng_template_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 34);\n    i0.ɵɵelement(1, \"path\", 35);\n    i0.ɵɵelementStart(2, \"text\", 36);\n    i0.ɵɵelementStart(3, \"textPath\", 37);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const link_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", link_r14.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"dominant-baseline\", link_r14.dominantBaseline);\n    i0.ɵɵattribute(\"href\", \"#\" + link_r14.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", link_r14.label, \" \");\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction SingleSlideComponent_div_30_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 38);\n    i0.ɵɵelement(2, \"div\", 39);\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r15 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, item_r15.value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r15.key, \" \");\n  }\n}\n\nconst _c2 = \".taller[_ngcontent-%COMP%]{min-height:600px;border:1px solid #666;max-height:1000px}.node[_ngcontent-%COMP%]{max-height:150px}.padded[_ngcontent-%COMP%]{padding:30px}.bottom-border[_ngcontent-%COMP%]{border-bottom:1px dotted #666;padding-bottom:10px;padding-top:10px}.wait_time_text[_ngcontent-%COMP%]{font-size:small;font-style:italic;font-family:serif;font-weight:bold}\";\nexport let SingleSlideComponent = /*#__PURE__*/(() => {\n  class SingleSlideComponent {\n    constructor(http, state, dialog, _snackBar, formBuilder) {\n      this.http = http;\n      this.state = state;\n      this.dialog = dialog;\n      this._snackBar = _snackBar;\n      this.formBuilder = formBuilder;\n      this.navigate = new EventEmitter();\n      this.nodes = [];\n      this.links = [];\n      this.layout = 'dagreCluster';\n      this.layoutSettings = {\n        orientation: \"TB\"\n      };\n      this.curveType = 'Bundle';\n      this.curve = shape.curveLinear;\n      this.interpolationTypes = ['Bundle', 'Cardinal', 'Catmull Rom', 'Linear', 'Monotone X', 'Monotone Y', 'Natural', 'Step', 'Step After', 'Step Before'];\n      this.draggingEnabled = true;\n      this.panningEnabled = true;\n      this.zoomEnabled = false;\n      this.zoomLevel = 1.0;\n      this.zoomSpeed = 0.1;\n      this.minZoomLevel = 0.1;\n      this.maxZoomLevel = 4.0;\n      this.panOnZoom = true;\n      this.experimentId = -1;\n      this.customColors = [\"#bf9d76\", \"#f2dfa7\", \"#a5d7c6\", \"#afafaf\", \"#ba9383\", \"#d9d5c3\", \"#55C22D\", \"#C1F33D\", \"#3CC099\", \"#AFFFFF\", \"#8CFC9D\", \"#76CFFA\", \"#FC9F32\"];\n      this.matching = {};\n      this.autoZoom = false;\n      this.autoCenter = true;\n      this.isDragging = false;\n      this.draggingNode = null;\n      this.slide = {};\n      this.currentDragPosition = {\n        x: 0,\n        y: 0\n      };\n      this.startingDragPosition = {\n        x: 0,\n        y: 0\n      };\n      this.mouseOverNode = null;\n      this.update$ = new Subject();\n      this.zoomToFit$ = new Subject();\n    }\n\n    ngOnInit() {\n      this.state.getExperimentColors().subscribe(d => {\n        this.matching = d;\n      });\n      this.drawGraph();\n      this.state.getslideTobeShown().subscribe(slide => {\n        this.slide = slide;\n      });\n      this.state.getExperimentId().subscribe(id => {\n        this.experimentId = id;\n      });\n    }\n\n    backtoList() {\n      this.navigate.emit(4);\n    }\n\n    getColor(node) {\n      const existingColors = Object.values(this.matching);\n\n      if (this.matching.hasOwnProperty(node.label)) {\n        return this.matching[node.label];\n      } else {\n        var c = this.customColors[Math.floor(Math.random() * this.customColors.length)];\n\n        while (existingColors.includes(c)) {\n          c = this.customColors[Math.floor(Math.random() * this.customColors.length)];\n        }\n\n        this.matching[node.label] = c;\n        this.state.setExperimentColors(this.matching);\n        return c;\n      }\n    }\n\n    showMappingPopup(node) {\n      if (node.data.type == \"lan\") {\n        return;\n      }\n\n      var dialogRef = this.dialog.open(UpdateSlideMapping, {\n        width: \"60%\",\n        data: {\n          actor: node.label,\n          slide: this.slide\n        }\n      });\n    }\n\n    getTitle(node) {\n      if (node.data.type == \"actor\") {\n        return \"num : \" + node.data.num + \", os: \" + node.data.os;\n      } else {\n        return \"\";\n      }\n    }\n\n    createSlide() {\n      var lastSequenceNumber;\n      this.state.getlastSlideSeqNum().subscribe(n => {\n        lastSequenceNumber = n;\n      });\n\n      if (this.experimentId < 1) {\n        this._snackBar.open(\"Please save the experiment to continue!\", \"OK\", {\n          duration: 10000\n        });\n      } else {\n        this.http.post(\"api/v1/pr/design/experiment/slides\", {\n          \"experiment_id\": this.experimentId,\n          \"sequence_number\": lastSequenceNumber + 1\n        }, {\n          withCredential: true\n        }).subscribe(data => {\n          this.slide = data['slide'];\n          this.state.setlastSlideSeqNum(lastSequenceNumber + 1);\n\n          this._snackBar.open(\"Created new slide successfully!\", \"OK\", {\n            duration: 4000\n          });\n        });\n      }\n    }\n\n    getSubText(node) {\n      if (node.data.type == \"actor\") {\n        return \"(\" + node.data.num + \"), (\" + node.data.os + \")\";\n      } else {\n        return \"\";\n      }\n    }\n\n    isLanNode(node, dim) {\n      if (node.data.type == \"lan\") {\n        if (dim == 'x') {\n          return node.dimension.width;\n        } else {\n          return node.dimension.height;\n        }\n      } else {\n        return \"0\";\n      }\n    }\n\n    zoomIn() {\n      this.graphEl.zoom(1.1);\n    }\n\n    zoomOut() {\n      this.graphEl.zoom(0.9);\n    }\n\n    fitToView() {\n      this.zoomToFit$.next(true);\n    }\n    /**\n     * toggleDragging\n     */\n\n\n    toggleDragging() {\n      this.draggingEnabled = !this.draggingEnabled;\n      this.update$.next(true);\n    }\n    /**\n     * isEditable\n     */\n\n\n    isEditable() {\n      if (this.draggingEnabled) {\n        return \"hidden\";\n      } else {\n        return \"visible\";\n      }\n    }\n\n    drawGraph() {\n      var behaviors = null;\n      var constraints = null;\n      this.state.getConstraints().subscribe(c => {\n        constraints = c || [];\n      });\n      this.state.getBehavior().subscribe(b => {\n        behaviors = b || [];\n      });\n      this.http.put(\"v1/pr/hlb/topology/parse\", {\n        \"scenario\": behaviors,\n        \"constraints\": constraints\n      }, {\n        withCredential: true\n      }).subscribe(data => {\n        this.nodes = [];\n        this.links = [];\n\n        for (const n in data['actors']) {\n          var n2 = {\n            data: data['actors'][n],\n            id: n,\n            label: n\n          };\n          this.nodes.push(n2);\n          this.nodes = [...this.nodes];\n        }\n\n        for (const n of data['lans']) {\n          var n2 = {\n            data: n,\n            id: \"lan\" + n['lineNum'],\n            label: \"lan\"\n          };\n          this.nodes.push(n2);\n          this.nodes = [...this.nodes];\n        }\n\n        for (const e of data['edges']) {\n          var e2 = e;\n          this.links.push(e2);\n          this.links = [...this.links];\n        }\n      });\n    }\n\n    redrawGraph() {\n      this.nodes = [];\n      this.links = [];\n      this.drawGraph();\n    }\n\n  }\n\n  SingleSlideComponent.ɵfac = function SingleSlideComponent_Factory(t) {\n    return new (t || SingleSlideComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.FormBuilder));\n  };\n\n  SingleSlideComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SingleSlideComponent,\n    selectors: [[\"single-experiment-slide\"]],\n    viewQuery: function SingleSlideComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.graphEl = _t.first);\n      }\n    },\n    outputs: {\n      navigate: \"navigate\"\n    },\n    decls: 44,\n    vars: 18,\n    consts: [[1, \"container\"], [1, \"row\", \"sticky-top\"], [1, \"col-md-2\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 1, \"col-md-4\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"col-md-4\", 3, \"click\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"col-md-8\", \"taller\"], [3, \"links\", \"nodes\", \"layout\", \"layoutSettings\", \"curve\", \"draggingEnabled\", \"panningEnabled\", \"enableZoom\", \"zoomSpeed\", \"minZoomLevel\", \"maxZoomLevel\", \"panOnZoom\", \"autoZoom\", \"autoCenter\", \"zoomToFit$\"], [\"graph\", \"\"], [\"defsTemplate\", \"\"], [\"nodeTemplate\", \"\"], [\"clusterTemplate\", \"\"], [\"linkTemplate\", \"\"], [1, \"col-md-4\", \"padded\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\"], [1, \"col-md-9\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", 3, \"click\"], [1, \"fa\", \"fa-plus\", \"info\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"click\"], [1, \"fa\", \"fa-minus\", \"info\"], [\"id\", \"arrow\", \"viewBox\", \"0 -5 10 10\", \"refX\", \"8\", \"refY\", \"0\", \"markerWidth\", \"4\", \"markerHeight\", \"4\", \"orient\", \"auto\"], [\"d\", \"M0,-5L10,0L0,5\", 1, \"arrow-head\"], [1, \"node\", 3, \"click\"], [\"stroke-width\", \"15\"], [\"font-size\", \"large\"], [\"dominant-baseline\", \"middle\", \"x\", \"10\", \"dy\", \"1em\"], [\"x\", \"10\", \"dy\", \"1em\", 1, \"wait_time_text\"], [\"x\", \"10\", \"dy\", \"2em\", \"visibility\", \"hidden\"], [1, \"node\", \"cluster\"], [\"rx\", \"5\", \"ry\", \"5\"], [\"alignment-baseline\", \"central\"], [1, \"edge\"], [\"stroke-width\", \"2\", 1, \"line\"], [\"text-anchor\", \"middle\"], [\"startOffset\", \"50%\", 1, \"text-path\"], [1, \"row\", \"bottom-border\"], [1, \"col-md-3\", 3, \"ngStyle\"]],\n    template: function SingleSlideComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-toolbar\");\n        i0.ɵɵelement(3, \"div\", 2);\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function SingleSlideComponent_Template_button_click_4_listener() {\n          return ctx.backtoList();\n        });\n        i0.ɵɵtext(5, \"Go back to list\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"div\", 2);\n        i0.ɵɵelementStart(7, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function SingleSlideComponent_Template_button_click_7_listener() {\n          return ctx.createSlide();\n        });\n        i0.ɵɵtext(8, \"Create new slide\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 5);\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"p\");\n        i0.ɵɵtext(13, \"Click on an actor to view and edit the action being performed.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 5);\n        i0.ɵɵelementStart(15, \"div\", 7);\n        i0.ɵɵelementStart(16, \"ngx-graph\", 8, 9);\n        i0.ɵɵtemplate(18, SingleSlideComponent_ng_template_18_Template, 2, 0, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(20, SingleSlideComponent_ng_template_20_Template, 9, 11, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(22, SingleSlideComponent_ng_template_22_Template, 4, 6, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(24, SingleSlideComponent_ng_template_24_Template, 5, 5, \"ng-template\", null, 13, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"div\", 14);\n        i0.ɵɵelementStart(27, \"div\", 5);\n        i0.ɵɵelementStart(28, \"h5\");\n        i0.ɵɵtext(29, \"Legend\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(30, SingleSlideComponent_div_30_Template, 5, 4, \"div\", 15);\n        i0.ɵɵpipe(31, \"keyvalue\");\n        i0.ɵɵelement(32, \"br\");\n        i0.ɵɵelementStart(33, \"div\", 5);\n        i0.ɵɵelementStart(34, \"div\", 16);\n        i0.ɵɵtext(35, \"Zoom level\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"div\", 17);\n        i0.ɵɵelementStart(37, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function SingleSlideComponent_Template_button_click_37_listener() {\n          return ctx.zoomIn();\n        });\n        i0.ɵɵelement(38, \"i\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function SingleSlideComponent_Template_button_click_39_listener() {\n          return ctx.fitToView();\n        });\n        i0.ɵɵtext(40, \" Fit to view \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(41, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function SingleSlideComponent_Template_button_click_41_listener() {\n          return ctx.zoomOut();\n        });\n        i0.ɵɵelement(42, \"i\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(43, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"links\", ctx.links)(\"nodes\", ctx.nodes)(\"layout\", ctx.layout)(\"layoutSettings\", ctx.layoutSettings)(\"curve\", ctx.curve)(\"draggingEnabled\", ctx.draggingEnabled)(\"panningEnabled\", ctx.panningEnabled)(\"enableZoom\", ctx.zoomEnabled)(\"zoomSpeed\", ctx.zoomSpeed)(\"minZoomLevel\", ctx.minZoomLevel)(\"maxZoomLevel\", ctx.maxZoomLevel)(\"panOnZoom\", ctx.panOnZoom)(\"autoZoom\", ctx.autoZoom)(\"autoCenter\", ctx.autoCenter)(\"zoomToFit$\", ctx.zoomToFit$);\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(31, 16, ctx.matching));\n      }\n    },\n    styles: [_c2]\n  });\n  return SingleSlideComponent;\n})();\nexport let UpdateSlideMapping = /*#__PURE__*/(() => {\n  class UpdateSlideMapping {\n    constructor(dialogRef, http, state, _snackBar, input) {\n      this.dialogRef = dialogRef;\n      this.http = http;\n      this.state = state;\n      this._snackBar = _snackBar;\n      this.input = input;\n      this.binding = undefined;\n    }\n\n    ngOnInit() {\n      this.actor = this.input.actor;\n      this.slide = this.input.slide;\n      this.state.getExperimentId().subscribe(data => this.experimentId = data);\n      this.mapping = JSON.parse(this.slide['actor_action_mapping']);\n      this.bindingMapping = JSON.parse(this.slide['action_binding_mapping']) || {};\n      this.action = this.mapping[this.actor];\n      this.binding = this.bindingMapping[this.action];\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    }\n\n    updateActorActionMapping() {\n      console.log(\"action: \", this.action);\n      this.mapping[this.actor] = this.action;\n\n      if (this.binding != undefined) {\n        this.bindingMapping[this.action] = this.binding;\n      }\n\n      this.slide['actor_action_mapping'] = JSON.stringify(this.mapping);\n      this.slide['action_binding_mapping'] = JSON.stringify(this.bindingMapping);\n      console.log(\"mapping: \", this.mapping);\n      var requestData = {\n        \"experiment_id\": this.experimentId.toString(),\n        \"slide_id\": this.slide['slide_id'].toString(),\n        \"actor_action_mapping\": this.slide['actor_action_mapping'],\n        \"action_binding_mapping\": this.slide['action_binding_mapping']\n      };\n      this.http.put(\"v1/pr/design/experiment/slides\", requestData, {\n        withCredential: true\n      }).subscribe(response => {\n        this.state.setslideTobeShown(this.slide);\n        this.dialogRef.close();\n      });\n    }\n\n  }\n\n  UpdateSlideMapping.ɵfac = function UpdateSlideMapping_Factory(t) {\n    return new (t || UpdateSlideMapping)(i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  UpdateSlideMapping.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateSlideMapping,\n    selectors: [[\"update-slide-mapping\"]],\n    decls: 18,\n    vars: 3,\n    consts: [[\"mat-dialog-content\", \"\"], [1, \"row\", 2, \"margin\", \".5em\"], [1, \"col-md-12\", 2, \"padding\", \"0\"], [\"appearance\", \"outline\", 1, \"col-md-12\"], [\"type\", \"string\", \"placeholder\", \"nothing\", \"aria-label\", \"action\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"string\", \"placeholder\", \"nothing\", \"aria-label\", \"binding\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"click\"]],\n    template: function UpdateSlideMapping_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"h1\");\n        i0.ɵɵtext(4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(6, \"mat-label\");\n        i0.ɵɵtext(7, \"Action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function UpdateSlideMapping_Template_input_ngModelChange_8_listener($event) {\n          return ctx.action = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(10, \"mat-label\");\n        i0.ɵɵtext(11, \"Binding\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function UpdateSlideMapping_Template_input_ngModelChange_12_listener($event) {\n          return ctx.binding = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\", 6);\n        i0.ɵɵelementStart(14, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function UpdateSlideMapping_Template_button_click_14_listener() {\n          return ctx.onNoClick();\n        });\n        i0.ɵɵtext(15, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function UpdateSlideMapping_Template_button_click_16_listener() {\n          return ctx.updateActorActionMapping();\n        });\n        i0.ɵɵtext(17, \"Update\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\"Edit : \", ctx.actor, \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.action);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.binding);\n      }\n    },\n    styles: [_c2]\n  });\n  return UpdateSlideMapping;\n})();","map":null,"metadata":{},"sourceType":"module"}