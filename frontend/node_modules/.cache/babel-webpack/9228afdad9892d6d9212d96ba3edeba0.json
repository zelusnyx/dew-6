{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"src/app/http-service.service\";\nimport * as i3 from \"src/app/state-service.service\";\nimport * as i4 from \"src/app/@auth/auth.service\";\nimport * as i5 from \"@angular/material/tabs\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"./experiment-info/info.component\";\nimport * as i8 from \"./hlb/hlb.component\";\nimport * as i9 from \"./nlp/nlp.component\";\nimport * as i10 from \"./dependency-graph/dependency-graph.component\";\n\nfunction HLBParserComponent_mat_tab_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"experiment-info\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"id\", ctx_r2.experimentId);\n  }\n}\n\nfunction HLBParserComponent_mat_tab_1_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"hlb\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HLBParserComponent_mat_tab_1_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"nlp\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HLBParserComponent_mat_tab_1_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3);\n    i0.ɵɵelement(1, \"dependency-graph\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HLBParserComponent_mat_tab_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-tab\", 1);\n    i0.ɵɵtemplate(1, HLBParserComponent_mat_tab_1_div_1_Template, 2, 1, \"div\", 2);\n    i0.ɵɵtemplate(2, HLBParserComponent_mat_tab_1_div_2_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(3, HLBParserComponent_mat_tab_1_div_3_Template, 2, 0, \"div\", 2);\n    i0.ɵɵtemplate(4, HLBParserComponent_mat_tab_1_div_4_Template, 2, 0, \"div\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const x_r1 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"label\", x_r1.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", x_r1.id == 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", x_r1.id == 2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", x_r1.id == 3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", x_r1.id == 4);\n  }\n}\n\nexport let HLBParserComponent = /*#__PURE__*/(() => {\n  class HLBParserComponent {\n    constructor(route, router, http, state, auth) {\n      this.route = route;\n      this.router = router;\n      this.http = http;\n      this.state = state;\n      this.auth = auth;\n      this.menuList = [];\n      this.experimentId = -1;\n    }\n\n    ngOnInit() {\n      this.route.params.subscribe(params => {\n        if (params[\"id\"] != \"\") {\n          var input = {\n            id: params[\"id\"]\n          };\n          this.experimentId = params[\"id\"];\n          this.state.enableLoader();\n          this.http.get(\"v1/pr/token-based-auth/get/\" + this.experimentId, {\n            withCredential: true\n          }).subscribe(resultT => {\n            if (resultT.data != null && resultT.data.token != undefined && resultT.data.status) {\n              this.http.get(\"v1/pr/token-based-auth/getdetails/\" + this.experimentId, {\n                withCredential: true\n              }).subscribe(result => {\n                var data = result.data;\n                this.state.setActors(data.actors);\n                this.state.setExperimentName(data.name);\n                this.state.setExperimentDescription(data.description);\n                this.state.setBehavior(data.behaviors);\n                this.state.setBindings(data.bindings);\n                this.state.setConstraints(data.constraints);\n                this.state.setTokenLevel(resultT.data.level);\n                this.setMenu();\n                this.state.disableLoader();\n              }, error => {\n                alert(\"Invalid Token\");\n                this.router.navigate([\"auth/login\"]);\n              });\n            } else {\n              alert(\"Invalid Token\");\n              this.router.navigate([\"auth/login\"]);\n            }\n\n            return \"\";\n          });\n        }\n      });\n    }\n\n    setMenu() {\n      this.menuList.push({\n        name: \"Information\",\n        id: 1,\n        html: \"<experiment-info></experiment-info>\"\n      });\n      this.menuList.push({\n        name: \"HLB\",\n        id: 2,\n        html: \"<hlb></hlb>\"\n      });\n\n      if (this.state.getTokenLevel() == \"write\") {\n        this.menuList.push({\n          name: \"NLP\",\n          id: 3,\n          html: \"<nlp></nlp>\"\n        });\n        this.menuList.push({\n          name: \"Behavior Dependency Graph\",\n          id: 4,\n          html: \"<p>In Progress.....</p>\"\n        });\n        this.menuList.push({\n          name: \"Upload\",\n          id: 5,\n          html: \"<upload></upload>\"\n        });\n      }\n    }\n\n  }\n\n  HLBParserComponent.ɵfac = function HLBParserComponent_Factory(t) {\n    return new (t || HLBParserComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.HttpService), i0.ɵɵdirectiveInject(i3.StateService), i0.ɵɵdirectiveInject(i4.AuthService));\n  };\n\n  HLBParserComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HLBParserComponent,\n    selectors: [[\"hlbparser\"]],\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"label\", 4, \"ngFor\", \"ngForOf\"], [3, \"label\"], [\"class\", \"tab\", 4, \"ngIf\"], [1, \"tab\"], [3, \"id\"]],\n    template: function HLBParserComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-tab-group\");\n        i0.ɵɵtemplate(1, HLBParserComponent_mat_tab_1_Template, 5, 5, \"mat-tab\", 0);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.menuList);\n      }\n    },\n    directives: [i5.MatTabGroup, i6.NgForOf, i5.MatTab, i6.NgIf, i7.InfoComponent, i8.HlbComponent, i9.NlpComponent, i10.DependencyGraphComponent],\n    styles: [\".tab[_ngcontent-%COMP%]{overflow:hidden}\"]\n  });\n  return HLBParserComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}