{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"src/app/state-service.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/forms\";\n\nfunction ExperimentSlides_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"div\", 10);\n    i0.ɵɵlistener(\"click\", function ExperimentSlides_div_13_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const slide_r1 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return ctx_r3.editSlide(slide_r1);\n    });\n    i0.ɵɵelementStart(2, \"div\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"br\");\n    i0.ɵɵelementStart(5, \"span\");\n    i0.ɵɵelementStart(6, \"b\");\n    i0.ɵɵtext(7, \"Created Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(9, \" | \");\n    i0.ɵɵelementStart(10, \"span\");\n    i0.ɵɵelementStart(11, \"b\");\n    i0.ɵɵtext(12, \"Updated Date:\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtext(13);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(14, \"div\", 12);\n    i0.ɵɵelementStart(15, \"button\", 13);\n    i0.ɵɵlistener(\"click\", function ExperimentSlides_div_13_Template_button_click_15_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const slide_r1 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.deleteSlide(slide_r1);\n    });\n    i0.ɵɵelement(16, \"mat-icon\", 14);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(17, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function ExperimentSlides_div_13_Template_button_click_17_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const slide_r1 = restoredCtx.$implicit;\n      const i_r2 = restoredCtx.index;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.moveUpSlide(slide_r1, i_r2);\n    });\n    i0.ɵɵelement(18, \"mat-icon\", 16);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(19, \"button\", 17);\n    i0.ɵɵlistener(\"click\", function ExperimentSlides_div_13_Template_button_click_19_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const slide_r1 = restoredCtx.$implicit;\n      const i_r2 = restoredCtx.index;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.moveDownSlide(slide_r1, i_r2);\n    });\n    i0.ɵɵelement(20, \"mat-icon\", 18);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(21, \"hr\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const slide_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵpropertyInterpolate1(\"matTooltip\", \"Edit \", slide_r1.actor_action_mapping, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", slide_r1.actor_action_mapping, \" \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dateView(slide_r1.created_at), \"\");\n    i0.ɵɵadvance(5);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.dateView(slide_r1.updated_at), \"\");\n  }\n}\n\nexport let ExperimentSlides = /*#__PURE__*/(() => {\n  class ExperimentSlides {\n    constructor(http, state, dialog, _snackBar, formBuilder) {\n      this.http = http;\n      this.state = state;\n      this.dialog = dialog;\n      this._snackBar = _snackBar;\n      this.formBuilder = formBuilder;\n      this.navigate = new EventEmitter();\n      this.slides = [];\n      this.lastSequenceNumber = 0;\n    }\n\n    ngOnInit() {\n      console.log(\"experimentId : \", this.experimentId);\n\n      if (this.experimentId > 0) {\n        // code...\n        this.getSlideDetails();\n      } else {\n        // code...\n        this._snackBar.open(\"Please save the experiment to continue!\", \"OK\", {\n          duration: 10000\n        });\n      }\n    }\n\n    showTopology() {\n      this.navigate.emit(5);\n    }\n\n    extractScenario(scenario) {\n      // console.log(scenario);\n      // this.bindingMap = new Map<String,any>();\n      const trigger = [];\n      var parsedEvents = {};\n      scenario.forEach(element => {\n        if (element[0] != null) {\n          element[0].map(x => {\n            if (!trigger.includes(x) && !parsedEvents[x]) {\n              trigger.push({\n                key: x,\n                category: 't_event',\n                value: ''\n              });\n              parsedEvents[x] = true;\n            }\n          });\n        }\n\n        if (element[2] != null) {\n          element[2].map(x => {\n            if (!trigger.includes(x) && !parsedEvents[x]) {\n              trigger.push({\n                key: x,\n                category: 'action',\n                value: ''\n              });\n              parsedEvents[x] = true;\n            }\n          });\n        }\n\n        if (element[3] != null) {\n          element[3].map(x => {\n            if (!trigger.includes(x) && !parsedEvents[x]) {\n              trigger.push({\n                key: x,\n                category: 'event',\n                value: ''\n              });\n              parsedEvents[x] = true;\n            }\n          });\n        }\n      });\n      this.state.setBindings(trigger);\n    }\n\n    updateBindings() {\n      const data = {\n        ParseType: 'bash',\n        Scenario: [],\n        Constraints: []\n      };\n      this.state.getBehavior().subscribe(d => {\n        data.Scenario = d;\n      });\n      this.state.getConstraints().subscribe(d => {\n        data.Constraints = d;\n      });\n      this.http.put('v1/pr/hlb/parse', data, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        this.extractScenario(receivedData.parsedScenario);\n      });\n    }\n\n    showDependencyGraph() {\n      if (this.experimentId < 1) {\n        this._snackBar.open(\"Please save the experiment to continue!\", \"OK\", {\n          duration: 10000\n        });\n      } else {\n        this.http.get(\"v1/pr/design/experiment/slides/\" + this.experimentId + \"/dew\", {\n          withCredential: true\n        }).subscribe(response => {\n          this.state.setBehavior(response['behaviors']);\n          this.state.setBindings(response['bindings']); // this.updateBindings();\n\n          this.navigate.emit(2);\n        });\n      }\n    }\n\n    createSlide() {\n      if (this.experimentId < 1) {\n        this._snackBar.open(\"Please save the experiment to continue!\", \"OK\", {\n          duration: 10000\n        });\n      } else {\n        this.http.post(\"api/v1/pr/design/experiment/slides\", {\n          \"experiment_id\": this.experimentId,\n          \"sequence_number\": this.lastSequenceNumber + 1\n        }, {\n          withCredential: true\n        }).subscribe(data => {\n          this.slides.push(data['slide']);\n          this.lastSequenceNumber += 1;\n          this.state.setlastSlideSeqNum(this.lastSequenceNumber);\n          this.editSlide(data['slide']);\n        });\n      }\n    }\n\n    deleteSlide(slide) {\n      this.http.delete(\"v1/pr/design/experiment/slides/\" + this.experimentId + \"/\" + slide['slide_id'], {\n        withCredential: true\n      }).subscribe(data => {\n        this.slides = this.slides.filter(s => s['slide_id'] != slide['slide_id']);\n      });\n    }\n\n    dateView(timestamp) {\n      var d = new Date(timestamp * 1000);\n      return d.toLocaleString();\n    }\n\n    moveUpSlide(slide, index) {\n      if (index == 0) {\n        return;\n      }\n\n      this.http.post(\"api/v1/pr/design/experiment/slides/swap\", {\n        \"experiment_id\": this.experimentId,\n        \"first_slide_id\": slide['slide_id'].toString(),\n        \"second_slide_id\": this.slides[index - 1]['slide_id'].toString()\n      }, {\n        withCredential: true\n      }).subscribe(data => {\n        var second_slide = this.slides[index - 1];\n        var s = slide['sequence_number'];\n        slide['sequence_number'] = second_slide['sequence_number'];\n        second_slide['sequence_number'] = s;\n        this.slides[index - 1] = slide;\n        this.slides[index] = second_slide;\n      });\n      console.log(this.slides);\n    }\n\n    moveDownSlide(slide, index) {\n      if (index == this.slides.length - 1) {\n        return;\n      }\n\n      this.http.post(\"api/v1/pr/design/experiment/slides/swap\", {\n        \"experiment_id\": this.experimentId,\n        \"first_slide_id\": slide['slide_id'].toString(),\n        \"second_slide_id\": this.slides[index + 1]['slide_id'].toString()\n      }, {\n        withCredential: true\n      }).subscribe(data => {\n        var second_slide = this.slides[index + 1];\n        var s = slide['sequence_number'];\n        slide['sequence_number'] = second_slide['sequence_number'];\n        second_slide['sequence_number'] = s;\n        this.slides[index + 1] = slide;\n        this.slides[index] = second_slide;\n      });\n      console.log(this.slides);\n    }\n\n    editSlide(slide) {\n      this.state.setslideTobeShown(slide);\n      this.navigate.emit(6);\n    }\n\n    getSlideDetails() {\n      this.http.get(\"v1/pr/design/experiment/slides/\" + this.experimentId, {\n        withCredential: true\n      }).subscribe(response => {\n        this.slides = response['slides'];\n        this.slides.forEach(slide => {\n          var num = parseInt(slide['sequence_number']);\n\n          if (this.lastSequenceNumber < num) {\n            this.lastSequenceNumber = num;\n            this.state.setlastSlideSeqNum(num);\n          }\n        });\n      });\n    }\n\n    updateDEW() {\n      this.http.get(\"v1/pr/design/experiment/slides/\" + this.experimentId + \"/dew\", {\n        withCredential: true\n      }).subscribe(response => {\n        this.state.setBehavior(response['behaviors']);\n        this.state.setBindings(response['bindings']);\n      });\n    }\n\n  }\n\n  ExperimentSlides.ɵfac = function ExperimentSlides_Factory(t) {\n    return new (t || ExperimentSlides)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i5.FormBuilder));\n  };\n\n  ExperimentSlides.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ExperimentSlides,\n    selectors: [[\"experiment-slides\"]],\n    inputs: {\n      experimentId: \"experimentId\"\n    },\n    outputs: {\n      navigate: \"navigate\"\n    },\n    decls: 14,\n    vars: 1,\n    consts: [[1, \"container-fluid\"], [1, \"row\", \"sticky-top\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 1, \"col-md-2\", 3, \"click\"], [1, \"col-md-2\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 1, \"col-md-4\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 1, \"col-md-2\", 3, \"click\"], [1, \"row\", \"table\"], [1, \"col-md-12\"], [\"class\", \"row table-row pointer\", \"style\", \"margin-top: 14px;\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\", \"table-row\", \"pointer\", 2, \"margin-top\", \"14px\"], [1, \"col-md-8\", 3, \"matTooltip\", \"click\"], [1, \"header-experiment\"], [1, \"col-md-4\"], [\"matTooltip\", \"Delete the slide\", 1, \"bubble\", 3, \"click\"], [1, \"fas\", \"fa-trash\", \"pointer\"], [\"matTooltip\", \"Move up\", 1, \"bubble\", 3, \"click\"], [1, \"fas\", \"fa-arrow-up\", \"pointer\"], [\"matTooltip\", \"Move down\", 1, \"bubble\", 3, \"click\"], [1, \"fas\", \"fa-arrow-down\", \"pointer\"]],\n    template: function ExperimentSlides_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-toolbar\");\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function ExperimentSlides_Template_button_click_3_listener() {\n          return ctx.showTopology();\n        });\n        i0.ɵɵtext(4, \"Previous : Edit topology\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function ExperimentSlides_Template_button_click_6_listener() {\n          return ctx.createSlide();\n        });\n        i0.ɵɵtext(7, \"Create new slide\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"div\", 3);\n        i0.ɵɵelementStart(9, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function ExperimentSlides_Template_button_click_9_listener() {\n          return ctx.showDependencyGraph();\n        });\n        i0.ɵɵtext(10, \"Next : Update dependencies\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 6);\n        i0.ɵɵelementStart(12, \"div\", 7);\n        i0.ɵɵtemplate(13, ExperimentSlides_div_13_Template, 22, 4, \"div\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"ngForOf\", ctx.slides);\n      }\n    },\n    styles: [\".tab[_ngcontent-%COMP%]{overflow:hidden}.pointer[_ngcontent-%COMP%]{margin:.2em;cursor:pointer}.action_menu[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]{list-style-type:none;padding-left:2rem;margin:0;border-bottom:1px solid #ccc;overflow:hidden}.action_menu[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{float:left}button[_ngcontent-%COMP%]{width:100%}.action_menu[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{display:block;color:#eee;text-align:center;padding:.31rem;text-decoration:none}.action_menu[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]:hover{background-color:#ccc}.table-row[_ngcontent-%COMP%]{padding:.2em;background-color:#f8f9fa;border-radius:10px;box-shadow:3px 0 0 2px #f8f9fa}.bubble[_ngcontent-%COMP%]{float:right;margin:1em;border:1px solid #2196F3;padding:.6em;border-radius:14px;width:77px;text-align:center}.header-experiment[_ngcontent-%COMP%]{font-size:large;font-weight:bold;padding-top:.3em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}\"]\n  });\n  return ExperimentSlides;\n})();","map":null,"metadata":{},"sourceType":"module"}