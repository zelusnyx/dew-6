{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nexport default class EditorService {\n  constructor(quill) {\n    this.textData = new BehaviorSubject(\"\");\n    this.onBlur = new BehaviorSubject(false);\n    this.isEnterPress = new BehaviorSubject(false);\n    this.isTabPress = new BehaviorSubject(false);\n    this.onBlurFlag = false;\n    this.currentword = new BehaviorSubject('');\n    this.currentsentence = new BehaviorSubject(null);\n    this.isTextChange = false;\n    this.index = 0;\n    this.quill = quill;\n    var instance = this;\n    this.quill.on(\"selection-change\", function (range, oldRange, source) {\n      if (range) {\n        instance.index = range.index;\n        instance.range = range.length;\n\n        if (instance.onBlurFlag) {\n          instance.onBlur.next(false);\n          instance.onBlurFlag = false;\n        }\n      } else {\n        instance.onBlurFlag = true;\n        instance.onBlur.next(true);\n      }\n    });\n    this.quill.on(\"text-change\", function (delta, oldDelta, source) {\n      //console.log(delta);\n      var position = 0;\n      var tabFlag = false;\n      var delFlag = false;\n      instance.isTextChange = true;\n\n      if (delta.ops != undefined) {\n        delta.ops.forEach(element => {\n          if (element.retain != undefined) position = element.retain;\n\n          if (element.insert != undefined) {\n            position += element.insert.length;\n            if (element.insert == '\\n') instance.pressedEntered();\n            if (element.insert == '\\t') tabFlag = true;\n          }\n\n          if (element.delete != undefined) delFlag = true;\n        });\n      }\n\n      var index = instance.quill.getText().length - 1;\n      var text = instance.quill.getText().substr(0, index);\n      instance.index = position; //console.log(\"value of index inside:\"+instance.index);\n\n      if (!tabFlag) {\n        instance.currentSentence(text, position);\n        instance.currentWord(text, position);\n      } else {\n        if (!delFlag) setTimeout(function () {\n          instance.pressedTab();\n        }, 50);\n      }\n    });\n  }\n\n  getUpdatedValue() {\n    return this.textData.asObservable();\n  }\n\n  getCurrentWord() {\n    return this.currentword.asObservable();\n  }\n\n  getSuggestionData() {\n    return this.currentsentence.asObservable();\n  }\n\n  isEnterPressed() {\n    return this.isEnterPress.asObservable();\n  }\n\n  isTabPressed() {\n    return this.isTabPress.asObservable();\n  }\n\n  setUpdatedValue(Data) {\n    this.textData.next(Data);\n  }\n\n  currentWord(text, position) {\n    var word = this.getWordAt(text, position);\n    this.currentword.next(word);\n  }\n\n  currentSentence(text, position) {\n    var sentence = this.getSentenceTill(text, position);\n    var remainingSentences = this.getRemainingSentences(text, position); ////console.log(remainingSentences);\n\n    var obj = {\n      currentSentence: sentence,\n      remainingSentences: remainingSentences\n    };\n    this.currentsentence.next(obj);\n  }\n\n  getRemainingSentences(str, pos) {\n    str = String(str);\n    pos = Number(pos) >>> 0;\n    var left = str.slice(0, pos).search(/\\n.*$/);\n    var list = [];\n    var temp; ////console.log(left);\n\n    if (left > 0) {\n      temp = str.slice(0, left).split(\"\\n\");\n      temp.forEach(element => {\n        if (element.trim() != '') list.push(element);\n      });\n    }\n\n    temp = str.slice(left + 1).split(\"\\n\");\n    temp.splice(0, 1);\n    temp.forEach(element => {\n      if (element.trim() != '') list.push(element);\n    });\n    return list;\n  }\n\n  getWordAt(str, pos) {\n    str = String(str);\n    pos = Number(pos) >>> 0;\n    var left = str.slice(0, pos).search(/\\S+$/),\n        right = str.slice(pos).search(/\\s/);\n\n    if (right < 0) {\n      return str.slice(left);\n    }\n\n    return str.slice(left, right + pos);\n  }\n\n  getSentenceTill(str, pos) {\n    str = String(str);\n    pos = Number(pos) >>> 0;\n    var t = str.slice(0, pos).search(/\\n.*$/);\n    var right = str.slice(pos).search(/\\s/);\n\n    if (right < 0) {\n      return str.slice(t + 1);\n    }\n\n    return str.slice(t + 1, right + pos);\n  }\n\n  getSentenceAt(str, pos) {\n    str = String(str);\n    pos = Number(pos) >>> 0;\n    var left = str.slice(0, pos).search(/\\n.+$/);\n    return str.slice(left + 1).split(\"\\n\")[0];\n  }\n\n  isTextChanged() {\n    var flag = this.isTextChange;\n    this.resetTextChangeFlag();\n    return flag;\n  }\n\n  resetTextChangeFlag() {\n    this.isTextChange = false;\n  }\n\n  pressedEntered() {\n    this.isEnterPress.next(true);\n  }\n\n  pressedTab() {\n    this.isTabPress.next(true);\n  }\n\n  insertValue(text, flag = true, word) {\n    if (word.trim() == '') {\n      //console.log(\"inside trim\");\n      if (flag) {\n        this.index--;\n        this.quill.deleteText(this.index, 1);\n      } //console.log(\"::\"+text);\n\n\n      this.quill.insertText(this.index, text + \" \"); //console.log(\"value of index before:\"+this.index);\n    } else this.replaceText(this.quill.getText(), text, word, flag);\n  }\n\n  replaceText(str, text, word, flag) {\n    str = String(str);\n    var pos;\n    if (flag) pos = Number(this.index - 1) >>> 0;else pos = Number(this.index) >>> 0;\n    var left = str.slice(0, pos).search(/\\S+$/);\n    if (flag) this.quill.deleteText(left, word.length + 1);else this.quill.deleteText(left, word.length);\n    let t = this.quill.insertText(left, text + \" \"); //console.log(\"h\");\n\n    this.index = left + text.length + 1;\n  }\n\n  getText() {\n    return this.quill.getText();\n  }\n\n  clear() {\n    this.quill.setText(\"\");\n  }\n\n  isBlur() {\n    return this.onBlur.asObservable();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}