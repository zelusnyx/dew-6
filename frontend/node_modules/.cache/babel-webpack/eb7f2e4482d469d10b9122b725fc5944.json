{"ast":null,"code":"import { __decorate, __param } from 'tslib';\nimport { isPlatformServer, DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, EventEmitter, SecurityContext, ElementRef, Inject, PLATFORM_ID, Renderer2, NgZone, Input, Output, Component, ViewEncapsulation, forwardRef, NgModule } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nimport * as ɵngcc2 from '@angular/common';\nconst _c0 = [[[\"\", \"quill-editor-toolbar\", \"\"]]];\nconst _c1 = [\"[quill-editor-toolbar]\"];\nconst defaultModules = {\n  toolbar: [['bold', 'italic', 'underline', 'strike'], ['blockquote', 'code-block'], [{\n    header: 1\n  }, {\n    header: 2\n  }], [{\n    list: 'ordered'\n  }, {\n    list: 'bullet'\n  }], [{\n    script: 'sub'\n  }, {\n    script: 'super'\n  }], [{\n    indent: '-1'\n  }, {\n    indent: '+1'\n  }], [{\n    direction: 'rtl'\n  }], [{\n    size: ['small', false, 'large', 'huge']\n  }], [{\n    header: [1, 2, 3, 4, 5, 6, false]\n  }], [{\n    color: []\n  }, {\n    background: []\n  }], [{\n    font: []\n  }], [{\n    align: []\n  }], ['clean'], ['link', 'image', 'video'] // link and image, video\n  ]\n};\nconst QUILL_CONFIG_TOKEN = new InjectionToken('config');\n\nconst getFormat = (format, configFormat) => {\n  const passedFormat = format || configFormat;\n  return passedFormat || 'html';\n};\n\nvar QuillEditorComponent_1;\nlet Quill = null;\nlet QuillEditorComponent = QuillEditorComponent_1 = class QuillEditorComponent {\n  constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, config) {\n    this.elementRef = elementRef;\n    this.domSanitizer = domSanitizer;\n    this.doc = doc;\n    this.platformId = platformId;\n    this.renderer = renderer;\n    this.zone = zone;\n    this.config = config;\n    this.required = false;\n    this.customToolbarPosition = 'top';\n    this.sanitize = false;\n    this.styles = null;\n    this.strict = true;\n    this.customOptions = [];\n    this.preserveWhitespace = false;\n    this.onEditorCreated = new EventEmitter();\n    this.onEditorChanged = new EventEmitter();\n    this.onContentChanged = new EventEmitter();\n    this.onSelectionChanged = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.disabled = false; // used to store initial value before ViewInit\n\n    this.valueGetter = (quillEditor, editorElement) => {\n      let html = editorElement.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      let modelValue = html;\n      const format = getFormat(this.format, this.config.format);\n\n      if (format === 'text') {\n        modelValue = quillEditor.getText();\n      } else if (format === 'object') {\n        modelValue = quillEditor.getContents();\n      } else if (format === 'json') {\n        try {\n          modelValue = JSON.stringify(quillEditor.getContents());\n        } catch (e) {\n          modelValue = quillEditor.getText();\n        }\n      }\n\n      return modelValue;\n    };\n\n    this.valueSetter = (quillEditor, value) => {\n      const format = getFormat(this.format, this.config.format);\n\n      if (format === 'html') {\n        if (this.sanitize) {\n          value = this.domSanitizer.sanitize(SecurityContext.HTML, value);\n        }\n\n        return quillEditor.clipboard.convert(value);\n      } else if (format === 'json') {\n        try {\n          return JSON.parse(value);\n        } catch (e) {\n          return [{\n            insert: value\n          }];\n        }\n      }\n\n      return value;\n    };\n\n    this.selectionChangeHandler = (range, oldRange, source) => {\n      const shouldTriggerOnModelTouched = !range && this.onModelTouched; // only emit changes when there's any listener\n\n      if (!this.onBlur.observers.length && !this.onFocus.observers.length && !this.onSelectionChanged.observers.length && !shouldTriggerOnModelTouched) {\n        return;\n      }\n\n      this.zone.run(() => {\n        if (range === null) {\n          this.onBlur.emit({\n            editor: this.quillEditor,\n            source\n          });\n        } else if (oldRange === null) {\n          this.onFocus.emit({\n            editor: this.quillEditor,\n            source\n          });\n        }\n\n        this.onSelectionChanged.emit({\n          editor: this.quillEditor,\n          oldRange,\n          range,\n          source\n        });\n\n        if (shouldTriggerOnModelTouched) {\n          this.onModelTouched();\n        }\n      });\n    };\n\n    this.textChangeHandler = (delta, oldDelta, source) => {\n      // only emit changes emitted by user interactions\n      const text = this.quillEditor.getText();\n      const content = this.quillEditor.getContents();\n      let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n\n      if (html === '<p><br></p>' || html === '<div><br></div>') {\n        html = null;\n      }\n\n      const trackChanges = this.trackChanges || this.config.trackChanges;\n      const shouldTriggerOnModelChange = (source === Quill.sources.USER || trackChanges && trackChanges === 'all') && this.onModelChange; // only emit changes when there's any listener\n\n      if (!this.onContentChanged.observers.length && !shouldTriggerOnModelChange) {\n        return;\n      }\n\n      this.zone.run(() => {\n        if (shouldTriggerOnModelChange) {\n          this.onModelChange(this.valueGetter(this.quillEditor, this.editorElem));\n        }\n\n        this.onContentChanged.emit({\n          content,\n          delta,\n          editor: this.quillEditor,\n          html,\n          oldDelta,\n          source,\n          text\n        });\n      });\n    };\n\n    this.editorChangeHandler = (event, current, old, source) => {\n      // only emit changes when there's any listener\n      if (!this.onEditorChanged.observers.length) {\n        return;\n      } // only emit changes emitted by user interactions\n\n\n      if (event === 'text-change') {\n        const text = this.quillEditor.getText();\n        const content = this.quillEditor.getContents();\n        let html = this.editorElem.querySelector('.ql-editor').innerHTML;\n\n        if (html === '<p><br></p>' || html === '<div><br></div>') {\n          html = null;\n        }\n\n        this.zone.run(() => {\n          this.onEditorChanged.emit({\n            content,\n            delta: current,\n            editor: this.quillEditor,\n            event,\n            html,\n            oldDelta: old,\n            source,\n            text\n          });\n        });\n      } else {\n        this.onEditorChanged.emit({\n          editor: this.quillEditor,\n          event,\n          oldRange: old,\n          range: current,\n          source\n        });\n      }\n    };\n  }\n\n  static normalizeClassNames(classes) {\n    const classList = classes.trim().split(' ');\n    return classList.reduce((prev, cur) => {\n      const trimmed = cur.trim();\n\n      if (trimmed) {\n        prev.push(trimmed);\n      }\n\n      return prev;\n    }, []);\n  }\n\n  onModelChange(_modelValue) {}\n\n  onModelTouched() {}\n\n  ngAfterViewInit() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n\n    if (!Quill) {\n      this.zone.runOutsideAngular(() => {\n        Quill = require('quill');\n      });\n    }\n\n    this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre quill-editor-element></pre>' : '<div quill-editor-element></div>');\n    this.editorElem = this.elementRef.nativeElement.querySelector('[quill-editor-element]');\n    const toolbarElem = this.elementRef.nativeElement.querySelector('[quill-editor-toolbar]');\n    const modules = Object.assign({}, this.modules || this.config.modules || defaultModules);\n\n    if (toolbarElem) {\n      modules.toolbar = toolbarElem;\n    } else if (modules.toolbar === undefined) {\n      modules.toolbar = defaultModules.toolbar;\n    }\n\n    let placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;\n\n    if (placeholder === undefined) {\n      placeholder = 'Insert text here ...';\n    }\n\n    if (this.styles) {\n      Object.keys(this.styles).forEach(key => {\n        this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n      });\n    }\n\n    if (this.classes) {\n      this.addClasses(this.classes);\n    }\n\n    this.customOptions.forEach(customOption => {\n      const newCustomOption = Quill.import(customOption.import);\n      newCustomOption.whitelist = customOption.whitelist;\n      Quill.register(newCustomOption, true);\n    });\n    let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;\n\n    if (!bounds) {\n      bounds = this.config.bounds ? this.config.bounds : this.doc.body;\n    }\n\n    let debug = this.debug;\n\n    if (!debug && debug !== false && this.config.debug) {\n      debug = this.config.debug;\n    }\n\n    let readOnly = this.readOnly;\n\n    if (!readOnly && this.readOnly !== false) {\n      readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;\n    }\n\n    let scrollingContainer = this.scrollingContainer;\n\n    if (!scrollingContainer && this.scrollingContainer !== null) {\n      scrollingContainer = this.config.scrollingContainer === null || this.config.scrollingContainer ? this.config.scrollingContainer : null;\n    }\n\n    let formats = this.formats;\n\n    if (!formats && formats === undefined) {\n      formats = this.config.formats ? [...this.config.formats] : this.config.formats === null ? null : undefined;\n    }\n\n    this.zone.runOutsideAngular(() => {\n      this.quillEditor = new Quill(this.editorElem, {\n        bounds,\n        debug,\n        formats,\n        modules,\n        placeholder,\n        readOnly,\n        scrollingContainer,\n        strict: this.strict,\n        theme: this.theme || (this.config.theme ? this.config.theme : 'snow')\n      });\n    });\n\n    if (this.content) {\n      const format = getFormat(this.format, this.config.format);\n\n      if (format === 'object') {\n        this.quillEditor.setContents(this.content, 'silent');\n      } else if (format === 'text') {\n        this.quillEditor.setText(this.content, 'silent');\n      } else if (format === 'json') {\n        try {\n          this.quillEditor.setContents(JSON.parse(this.content), 'silent');\n        } catch (e) {\n          this.quillEditor.setText(this.content, 'silent');\n        }\n      } else {\n        if (this.sanitize) {\n          this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);\n        }\n\n        const contents = this.quillEditor.clipboard.convert(this.content);\n        this.quillEditor.setContents(contents, 'silent');\n      }\n\n      this.quillEditor.history.clear();\n    } // initialize disabled status based on this.disabled as default value\n\n\n    this.setDisabledState(); // triggered if selection or text changed\n\n    this.quillEditor.on('editor-change', this.editorChangeHandler); // mark model as touched if editor lost focus\n\n    this.quillEditor.on('selection-change', this.selectionChangeHandler); // update model if text changes\n\n    this.quillEditor.on('text-change', this.textChangeHandler); // trigger created in a timeout to avoid changed models after checked\n    // if you are using the editor api in created output to change the editor content\n\n    setTimeout(() => this.onEditorCreated.emit(this.quillEditor));\n  }\n\n  ngOnDestroy() {\n    if (this.quillEditor) {\n      this.quillEditor.off('selection-change', this.selectionChangeHandler);\n      this.quillEditor.off('text-change', this.textChangeHandler);\n      this.quillEditor.off('editor-change', this.editorChangeHandler);\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (!this.quillEditor) {\n      return;\n    } // tslint:disable:no-string-literal\n\n\n    if (changes['readOnly']) {\n      this.quillEditor.enable(!changes['readOnly'].currentValue);\n    }\n\n    if (changes['placeholder']) {\n      this.quillEditor.root.dataset.placeholder = changes['placeholder'].currentValue;\n    }\n\n    if (changes['styles']) {\n      const currentStyling = changes['styles'].currentValue;\n      const previousStyling = changes['styles'].previousValue;\n\n      if (previousStyling) {\n        Object.keys(previousStyling).forEach(key => {\n          this.renderer.removeStyle(this.editorElem, key);\n        });\n      }\n\n      if (currentStyling) {\n        Object.keys(currentStyling).forEach(key => {\n          this.renderer.setStyle(this.editorElem, key, this.styles[key]);\n        });\n      }\n    }\n\n    if (changes['classes']) {\n      const currentClasses = changes['classes'].currentValue;\n      const previousClasses = changes['classes'].previousValue;\n\n      if (previousClasses) {\n        this.removeClasses(previousClasses);\n      }\n\n      if (currentClasses) {\n        this.addClasses(currentClasses);\n      }\n    } // tslint:enable:no-string-literal\n\n  }\n\n  addClasses(classList) {\n    QuillEditorComponent_1.normalizeClassNames(classList).forEach(c => {\n      this.renderer.addClass(this.editorElem, c);\n    });\n  }\n\n  removeClasses(classList) {\n    QuillEditorComponent_1.normalizeClassNames(classList).forEach(c => {\n      this.renderer.removeClass(this.editorElem, c);\n    });\n  }\n\n  writeValue(currentValue) {\n    this.content = currentValue;\n    const format = getFormat(this.format, this.config.format);\n\n    if (this.quillEditor) {\n      if (currentValue) {\n        if (format === 'text') {\n          this.quillEditor.setText(currentValue);\n        } else {\n          this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));\n        }\n\n        return;\n      }\n\n      this.quillEditor.setText('');\n    }\n  }\n\n  setDisabledState(isDisabled = this.disabled) {\n    // store initial value to set appropriate disabled status after ViewInit\n    this.disabled = isDisabled;\n\n    if (this.quillEditor) {\n      if (isDisabled) {\n        this.quillEditor.disable();\n        this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');\n      } else {\n        if (!this.readOnly) {\n          this.quillEditor.enable();\n        }\n\n        this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n      }\n    }\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n\n  validate() {\n    if (!this.quillEditor) {\n      return null;\n    }\n\n    const err = {};\n    let valid = true;\n    const textLength = this.quillEditor.getText().trim().length;\n\n    if (this.minLength && textLength && textLength < this.minLength) {\n      err.minLengthError = {\n        given: textLength,\n        minLength: this.minLength\n      };\n      valid = false;\n    }\n\n    if (this.maxLength && textLength > this.maxLength) {\n      err.maxLengthError = {\n        given: textLength,\n        maxLength: this.maxLength\n      };\n      valid = false;\n    }\n\n    if (this.required && !textLength) {\n      err.requiredError = {\n        empty: true\n      };\n      valid = false;\n    }\n\n    return valid ? null : err;\n  }\n\n};\n\nQuillEditorComponent.ɵfac = function QuillEditorComponent_Factory(t) {\n  return new (t || QuillEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n};\n\nQuillEditorComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n  type: QuillEditorComponent,\n  selectors: [[\"quill-editor\"]],\n  inputs: {\n    required: \"required\",\n    customToolbarPosition: \"customToolbarPosition\",\n    sanitize: \"sanitize\",\n    styles: \"styles\",\n    strict: \"strict\",\n    customOptions: \"customOptions\",\n    preserveWhitespace: \"preserveWhitespace\",\n    valueGetter: \"valueGetter\",\n    valueSetter: \"valueSetter\",\n    format: \"format\",\n    theme: \"theme\",\n    modules: \"modules\",\n    debug: \"debug\",\n    readOnly: \"readOnly\",\n    placeholder: \"placeholder\",\n    maxLength: \"maxLength\",\n    minLength: \"minLength\",\n    formats: \"formats\",\n    scrollingContainer: \"scrollingContainer\",\n    bounds: \"bounds\",\n    trackChanges: \"trackChanges\",\n    classes: \"classes\"\n  },\n  outputs: {\n    onEditorCreated: \"onEditorCreated\",\n    onEditorChanged: \"onEditorChanged\",\n    onContentChanged: \"onContentChanged\",\n    onSelectionChanged: \"onSelectionChanged\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    multi: true,\n    provide: NG_VALUE_ACCESSOR,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => QuillEditorComponent_1)\n  }, {\n    multi: true,\n    provide: NG_VALIDATORS,\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    useExisting: forwardRef(() => QuillEditorComponent_1)\n  }]), ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  template: function QuillEditorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef(_c0);\n      ɵngcc0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});\n\nQuillEditorComponent.ctorParameters = () => [{\n  type: ElementRef,\n  decorators: [{\n    type: Inject,\n    args: [ElementRef]\n  }]\n}, {\n  type: DomSanitizer,\n  decorators: [{\n    type: Inject,\n    args: [DomSanitizer]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [PLATFORM_ID]\n  }]\n}, {\n  type: Renderer2,\n  decorators: [{\n    type: Inject,\n    args: [Renderer2]\n  }]\n}, {\n  type: NgZone,\n  decorators: [{\n    type: Inject,\n    args: [NgZone]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [QUILL_CONFIG_TOKEN]\n  }]\n}];\n\n__decorate([Input()], QuillEditorComponent.prototype, \"format\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"theme\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"modules\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"debug\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"readOnly\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"placeholder\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"maxLength\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"minLength\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"required\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"formats\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"customToolbarPosition\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"sanitize\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"styles\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"strict\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"scrollingContainer\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"bounds\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"customOptions\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"trackChanges\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"preserveWhitespace\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"classes\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onEditorCreated\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onEditorChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onContentChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onSelectionChanged\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onFocus\", void 0);\n\n__decorate([Output()], QuillEditorComponent.prototype, \"onBlur\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"valueGetter\", void 0);\n\n__decorate([Input()], QuillEditorComponent.prototype, \"valueSetter\", void 0);\n\nQuillEditorComponent = QuillEditorComponent_1 = __decorate([__param(0, Inject(ElementRef)), __param(1, Inject(DomSanitizer)), __param(2, Inject(DOCUMENT)), __param(3, Inject(PLATFORM_ID)), __param(4, Inject(Renderer2)), __param(5, Inject(NgZone)), __param(6, Inject(QUILL_CONFIG_TOKEN))], QuillEditorComponent);\nlet QuillViewHTMLComponent = /*#__PURE__*/(() => {\n  let QuillViewHTMLComponent = class QuillViewHTMLComponent {\n    constructor(sanitizer, config) {\n      this.sanitizer = sanitizer;\n      this.config = config;\n      this.innerHTML = '';\n      this.themeClass = 'ql-snow';\n      this.content = '';\n    }\n\n    ngOnChanges(changes) {\n      if (changes.theme) {\n        const theme = changes.theme.currentValue || (this.config.theme ? this.config.theme : 'snow');\n        this.themeClass = `ql-${theme} ngx-quill-view-html`;\n      } else if (!this.theme) {\n        const theme = this.config.theme ? this.config.theme : 'snow';\n        this.themeClass = `ql-${theme} ngx-quill-view-html`;\n      }\n\n      if (changes.content) {\n        this.innerHTML = this.sanitizer.bypassSecurityTrustHtml(changes.content.currentValue);\n      }\n    }\n\n  };\n\n  QuillViewHTMLComponent.ɵfac = function QuillViewHTMLComponent_Factory(t) {\n    return new (t || QuillViewHTMLComponent)(ɵngcc0.ɵɵdirectiveInject(DomSanitizer), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN));\n  };\n\n  QuillViewHTMLComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: QuillViewHTMLComponent,\n    selectors: [[\"quill-view-html\"]],\n    inputs: {\n      content: \"content\",\n      theme: \"theme\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[1, \"ql-container\", 3, \"ngClass\"], [1, \"ql-editor\", 3, \"innerHTML\"]],\n    template: function QuillViewHTMLComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.themeClass);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"innerHTML\", ctx.innerHTML, ɵngcc0.ɵɵsanitizeHtml);\n      }\n    },\n    directives: [ɵngcc2.NgClass],\n    styles: [\"\\n.ql-container.ngx-quill-view-html {\\n  border: 0;\\n}\\n\"],\n    encapsulation: 2\n  });\n\n  __decorate([Input()], QuillViewHTMLComponent.prototype, \"content\", void 0);\n\n  __decorate([Input()], QuillViewHTMLComponent.prototype, \"theme\", void 0);\n\n  QuillViewHTMLComponent = __decorate([__param(0, Inject(DomSanitizer)), __param(1, Inject(QUILL_CONFIG_TOKEN))], QuillViewHTMLComponent);\n  return QuillViewHTMLComponent;\n})();\nlet Quill$1 = null;\nlet QuillViewComponent = /*#__PURE__*/(() => {\n  let QuillViewComponent = class QuillViewComponent {\n    constructor(platformId, config, renderer, elementRef) {\n      this.platformId = platformId;\n      this.config = config;\n      this.renderer = renderer;\n      this.elementRef = elementRef;\n      this.strict = true;\n      this.customOptions = [];\n      this.preserveWhitespace = false;\n\n      this.valueSetter = (quillEditor, value) => {\n        const format = getFormat(this.format, this.config.format);\n        let content = value;\n\n        if (format === 'html' || format === 'text') {\n          content = quillEditor.clipboard.convert(value);\n        } else if (format === 'json') {\n          try {\n            content = JSON.parse(value);\n          } catch (e) {\n            content = [{\n              insert: value\n            }];\n          }\n        }\n\n        quillEditor.setContents(content);\n      };\n    }\n\n    ngOnChanges(changes) {\n      if (!this.quillEditor) {\n        return;\n      }\n\n      if (changes.content) {\n        this.valueSetter(this.quillEditor, changes.content.currentValue);\n      }\n    }\n\n    ngAfterViewInit() {\n      if (isPlatformServer(this.platformId)) {\n        return;\n      }\n\n      if (!Quill$1) {\n        Quill$1 = require('quill');\n      }\n\n      const modules = Object.assign({}, this.modules || this.config.modules || defaultModules);\n      modules.toolbar = false;\n      this.customOptions.forEach(customOption => {\n        const newCustomOption = Quill$1.import(customOption.import);\n        newCustomOption.whitelist = customOption.whitelist;\n        Quill$1.register(newCustomOption, true);\n      });\n      let debug = this.debug;\n\n      if (!debug && debug !== false && this.config.debug) {\n        debug = this.config.debug;\n      }\n\n      let formats = this.formats;\n\n      if (!formats && formats === undefined) {\n        formats = this.config.formats ? Object.assign({}, this.config.formats) : this.config.formats === null ? null : undefined;\n      }\n\n      const theme = this.theme || (this.config.theme ? this.config.theme : 'snow');\n      this.elementRef.nativeElement.insertAdjacentHTML('afterbegin', this.preserveWhitespace ? '<pre quill-view-element></pre>' : '<div quill-view-element></div>');\n      this.editorElem = this.elementRef.nativeElement.querySelector('[quill-view-element]');\n      this.quillEditor = new Quill$1(this.editorElem, {\n        debug,\n        formats,\n        modules,\n        readOnly: true,\n        strict: this.strict,\n        theme\n      });\n      this.renderer.addClass(this.editorElem, 'ngx-quill-view');\n\n      if (this.content) {\n        this.valueSetter(this.quillEditor, this.content);\n      }\n    }\n\n  };\n\n  QuillViewComponent.ɵfac = function QuillViewComponent_Factory(t) {\n    return new (t || QuillViewComponent)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(QUILL_CONFIG_TOKEN), ɵngcc0.ɵɵdirectiveInject(Renderer2), ɵngcc0.ɵɵdirectiveInject(ElementRef));\n  };\n\n  QuillViewComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: QuillViewComponent,\n    selectors: [[\"quill-view\"]],\n    inputs: {\n      strict: \"strict\",\n      customOptions: \"customOptions\",\n      preserveWhitespace: \"preserveWhitespace\",\n      format: \"format\",\n      theme: \"theme\",\n      modules: \"modules\",\n      debug: \"debug\",\n      formats: \"formats\",\n      content: \"content\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function QuillViewComponent_Template(rf, ctx) {},\n    styles: [\"\\n.ql-container.ngx-quill-view {\\n  border: 0;\\n}\\n\"],\n    encapsulation: 2\n  });\n\n  __decorate([Input()], QuillViewComponent.prototype, \"format\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"theme\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"modules\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"debug\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"formats\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"strict\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"content\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"customOptions\", void 0);\n\n  __decorate([Input()], QuillViewComponent.prototype, \"preserveWhitespace\", void 0);\n\n  QuillViewComponent = __decorate([__param(0, Inject(PLATFORM_ID)), __param(1, Inject(QUILL_CONFIG_TOKEN)), __param(2, Inject(Renderer2)), __param(3, Inject(ElementRef))], QuillViewComponent);\n  return QuillViewComponent;\n})();\nvar QuillModule_1;\nlet QuillModule = QuillModule_1 = class QuillModule {\n  static forRoot(config) {\n    return {\n      ngModule: QuillModule_1,\n      providers: [{\n        provide: QUILL_CONFIG_TOKEN,\n        useValue: config || {\n          modules: defaultModules\n        }\n      }]\n    };\n  }\n\n};\n\nQuillModule.ɵfac = function QuillModule_Factory(t) {\n  return new (t || QuillModule)();\n};\n\nQuillModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: QuillModule\n});\nQuillModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(QuillModule, {\n    declarations: function () {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [QuillEditorComponent, QuillViewComponent, QuillViewHTMLComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QUILL_CONFIG_TOKEN, QuillEditorComponent, QuillModule, QuillViewComponent, QuillViewHTMLComponent, defaultModules }; //# sourceMappingURL=ngx-quill.js.map","map":null,"metadata":{},"sourceType":"module"}