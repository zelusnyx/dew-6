{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Subject } from 'rxjs';\nimport * as shape from 'd3-shape';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"src/app/state-service.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/forms\";\nimport * as i5 from \"@angular/material/toolbar\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@swimlane/ngx-graph\";\nimport * as i8 from \"@angular/common\";\nimport * as i9 from \"@angular/material/snack-bar\";\nimport * as i10 from \"@angular/material/form-field\";\nimport * as i11 from \"@angular/material/input\";\nconst _c0 = [\"graph\"];\n\nfunction TopologyGraphComponent_ng_template_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"marker\", 28);\n    i0.ɵɵelement(1, \"path\", 29);\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction TopologyGraphComponent_ng_template_17_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 30);\n    i0.ɵɵlistener(\"contextmenu\", function TopologyGraphComponent_ng_template_17_Template__svg_g_contextmenu_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.editNode($event, node_r11);\n    });\n    i0.ɵɵelementStart(1, \"rect\", 31);\n    i0.ɵɵlistener(\"mousedown\", function TopologyGraphComponent_ng_template_17_Template__svg_rect_mousedown_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.onNodeCircleMouseDown($event, node_r11);\n    })(\"mouseup\", function TopologyGraphComponent_ng_template_17_Template__svg_rect_mouseup_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onNodeCircleMouseUp($event, node_r11);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"g\");\n    i0.ɵɵelementStart(3, \"rect\", 32);\n    i0.ɵɵlistener(\"click\", function TopologyGraphComponent_ng_template_17_Template__svg_rect_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext();\n      return ctx_r16.removeNode(node_r11);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"text\", 33);\n    i0.ɵɵlistener(\"mousedown\", function TopologyGraphComponent_ng_template_17_Template__svg_text_mousedown_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onNodeCircleMouseDown($event, node_r11);\n    })(\"mouseup\", function TopologyGraphComponent_ng_template_17_Template__svg_text_mouseup_4_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r13);\n      const node_r11 = restoredCtx.$implicit;\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.onNodeCircleMouseUp($event, node_r11);\n    });\n    i0.ɵɵelementStart(5, \"tspan\", 34);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(7, \"tspan\", 35);\n    i0.ɵɵtext(8);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"tspan\", 36);\n    i0.ɵɵtext(10, \"action\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const node_r11 = ctx.$implicit;\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"stroke\", ctx_r4.getColor(node_r11))(\"width\", node_r11.dimension.width)(\"height\", node_r11.dimension.height)(\"fill\", ctx_r4.getColor(node_r11))(\"rx\", ctx_r4.isLanNode(node_r11, \"x\"))(\"ry\", ctx_r4.isLanNode(node_r11, \"y\"))(\"title\", ctx_r4.getTitle(node_r11));\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"visibility\", ctx_r4.isEditable());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", node_r11.dimension.width / 2)(\"y\", node_r11.dimension.height / 4);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(node_r11.label);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r4.getSubText(node_r11));\n  }\n}\n\nfunction TopologyGraphComponent_ng_template_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 37);\n    i0.ɵɵelement(1, \"rect\", 38);\n    i0.ɵɵelementStart(2, \"text\", 39);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const cluster_r19 = ctx.$implicit;\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"width\", cluster_r19.dimension.width)(\"height\", cluster_r19.dimension.height)(\"fill\", ctx_r6.getColor(cluster_r19));\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"x\", 10)(\"y\", 30);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"(Actor: \", cluster_r19.label, \")\");\n  }\n}\n\nfunction TopologyGraphComponent_ng_template_21__svg_g_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r24 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 45);\n    i0.ɵɵelementStart(1, \"rect\", 32);\n    i0.ɵɵlistener(\"click\", function TopologyGraphComponent_ng_template_21__svg_g_5_Template__svg_rect_click_1_listener() {\n      i0.ɵɵrestoreView(_r24);\n      const link_r20 = i0.ɵɵnextContext().$implicit;\n      const ctx_r22 = i0.ɵɵnextContext();\n      return ctx_r22.removeEdge(link_r20);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const link_r20 = i0.ɵɵnextContext().$implicit;\n    const ctx_r21 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", \"translate(\" + link_r20.midPoint.x + \",\" + link_r20.midPoint.y + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"visibility\", ctx_r21.isEditable());\n  }\n}\n\nfunction TopologyGraphComponent_ng_template_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 40);\n    i0.ɵɵelement(1, \"path\", 41);\n    i0.ɵɵelementStart(2, \"text\", 42);\n    i0.ɵɵelementStart(3, \"textPath\", 43);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, TopologyGraphComponent_ng_template_21__svg_g_5_Template, 2, 2, \"g\", 44);\n  }\n\n  if (rf & 2) {\n    const link_r20 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"id\", link_r20.id);\n    i0.ɵɵadvance(2);\n    i0.ɵɵstyleProp(\"dominant-baseline\", link_r20.dominantBaseline);\n    i0.ɵɵattribute(\"href\", \"#\" + link_r20.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", link_r20.label, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", link_r20.midPoint);\n  }\n}\n\nfunction TopologyGraphComponent__svg_line_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"line\", 46);\n  }\n\n  if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"x1\", ctx_r9.startingDragPosition.x)(\"y1\", ctx_r9.startingDragPosition.y)(\"x2\", ctx_r9.currentDragPosition.x)(\"y2\", ctx_r9.currentDragPosition.y);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction TopologyGraphComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"div\", 23);\n    i0.ɵɵelement(2, \"div\", 47);\n    i0.ɵɵelementStart(3, \"div\", 17);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r26 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c1, item_r26.value));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r26.key, \" \");\n  }\n}\n\nconst _c2 = \".taller[_ngcontent-%COMP%]{min-height:600px;border:1px solid #666;max-height:1000px}.node[_ngcontent-%COMP%]{max-height:150px}.padded[_ngcontent-%COMP%]{padding:30px}.bottom-border[_ngcontent-%COMP%]{border-bottom:1px dotted #666;padding-bottom:10px;padding-top:10px}.drag-line[_ngcontent-%COMP%]{stroke-width:2px;stroke:#000;stroke-dasharray:4}.wait_time_text[_ngcontent-%COMP%]{font-size:small;font-style:italic;font-family:serif;font-weight:bold}\";\nexport let TopologyGraphComponent = /*#__PURE__*/(() => {\n  class TopologyGraphComponent {\n    constructor(http, state, dialog, formBuilder) {\n      this.http = http;\n      this.state = state;\n      this.dialog = dialog;\n      this.formBuilder = formBuilder;\n      this.navigate = new EventEmitter();\n      this.nodes = [];\n      this.links = [];\n      this.layout = 'dagreCluster';\n      this.layoutSettings = {\n        orientation: \"TB\"\n      };\n      this.curveType = 'Bundle';\n      this.curve = shape.curveLinear;\n      this.interpolationTypes = ['Bundle', 'Cardinal', 'Catmull Rom', 'Linear', 'Monotone X', 'Monotone Y', 'Natural', 'Step', 'Step After', 'Step Before'];\n      this.draggingEnabled = true;\n      this.panningEnabled = true;\n      this.zoomEnabled = false;\n      this.zoomLevel = 1.0;\n      this.zoomSpeed = 0.1;\n      this.minZoomLevel = 0.1;\n      this.maxZoomLevel = 4.0;\n      this.panOnZoom = true;\n      this.customColors = [\"#bf9d76\", \"#f2dfa7\", \"#a5d7c6\", \"#afafaf\", \"#ba9383\", \"#d9d5c3\", \"#55C22D\", \"#C1F33D\", \"#3CC099\", \"#AFFFFF\", \"#8CFC9D\", \"#76CFFA\", \"#FC9F32\"];\n      this.matching = {};\n      this.autoZoom = false;\n      this.autoCenter = true;\n      this.isDragging = false;\n      this.draggingNode = null;\n      this.currentDragPosition = {\n        x: 0,\n        y: 0\n      };\n      this.startingDragPosition = {\n        x: 0,\n        y: 0\n      };\n      this.mouseOverNode = null;\n      this.update$ = new Subject();\n      this.zoomToFit$ = new Subject();\n    }\n\n    ngOnInit() {\n      this.state.getExperimentColors().subscribe(d => {\n        this.matching = d;\n      });\n      this.drawGraph();\n    }\n\n    getColor(node) {\n      const existingColors = Object.values(this.matching);\n\n      if (this.matching.hasOwnProperty(node.label)) {\n        return this.matching[node.label];\n      } else {\n        var c = this.customColors[Math.floor(Math.random() * this.customColors.length)];\n\n        while (existingColors.includes(c)) {\n          c = this.customColors[Math.floor(Math.random() * this.customColors.length)];\n        }\n\n        this.matching[node.label] = c;\n        this.state.setExperimentColors(this.matching);\n        return c;\n      }\n    }\n\n    showPopup(node) {\n      alert(\"node.label: \" + node.label);\n    }\n\n    getTitle(node) {\n      if (node.data.type == \"actor\") {\n        return \"num : \" + node.data.num + \", os: \" + node.data.os;\n      } else {\n        return \"\";\n      }\n    }\n\n    isLanNode(node, dim) {\n      if (node.data.type == \"lan\") {\n        if (dim == 'x') {\n          return node.dimension.width;\n        } else {\n          return node.dimension.height;\n        }\n      } else {\n        return \"0\";\n      }\n    }\n\n    zoomIn() {\n      this.graphEl.zoom(1.1);\n    }\n\n    zoomOut() {\n      this.graphEl.zoom(0.9);\n    }\n\n    fitToView() {\n      this.zoomToFit$.next(true);\n    }\n\n    addActor(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      const id = (this.nodes.length + 1).toString();\n      var node = {\n        data: {\n          'num': 1,\n          'os': 'default',\n          'type': 'actor'\n        },\n        id: id,\n        label: 'actor' + id.toString()\n      };\n      var newConstraints = this.generateConstraintDEW(node);\n      var oldConstraints = null;\n      this.state.getConstraints().subscribe(c => {\n        oldConstraints = c || [];\n      });\n      newConstraints = oldConstraints.concat(newConstraints);\n      this.state.setConstraints(newConstraints);\n      this.nodes.push(node);\n      this.nodes = [...this.nodes];\n    }\n\n    getSubText(node) {\n      if (node.data.type == \"actor\") {\n        return \"(\" + node.data.num + \"), (\" + node.data.os + \")\";\n      } else {\n        return \"\";\n      }\n    }\n\n    addLan(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      const id = (this.nodes.length + 1).toString();\n      var node = {\n        data: {\n          'type': 'lan',\n          actors: [],\n          lineNum: null\n        },\n        id: id,\n        label: 'lan'\n      };\n      this.addLanDEW(node);\n      this.nodes.push(node);\n      this.nodes = [...this.nodes];\n    }\n\n    editNode(event, node) {\n      if (node.data.type !== \"actor\") {\n        return;\n      }\n\n      event.preventDefault();\n      event.stopPropagation();\n      var dialogRef = this.dialog.open(UpdateActorInfo, {\n        width: \"60%\",\n        data: node\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        delete this.matching[node.label];\n        this.state.setExperimentColors(this.matching);\n        this.redrawGraph();\n      });\n    }\n\n    generateConstraintDEW(node) {\n      if (node.data.type == \"lan\") {\n        // var nodes = this.getLanNodes(node)\n        this.addLanDEW(node);\n      } else {\n        var str = [];\n        str.push(\"num \" + node.label + \" \" + node.data.num);\n\n        if (node.data.os != \"default\") {\n          str.push(\"os \" + node.label + \" \" + node.data.os);\n        }\n\n        return str;\n      }\n    }\n\n    addLinkDEW(source, target) {\n      if (source.data.type == \"actor\" && target.data.type == \"actor\") {\n        return [\"link all \" + source.label + \" \" + target.label];\n      } else if (source.data.type == \"lan\" && target.data.type == \"actor\") {\n        source.data.actors.push(target.label);\n        this.addLanDEW(source);\n      } else if (source.data.type == \"actor\" && target.data.type == \"lan\") {\n        target.data.actors.push(source.label);\n        this.addLanDEW(target);\n      }\n    }\n\n    addLanDEW(lannode) {\n      if (lannode.data.actors.length < 2) {\n        return;\n      }\n\n      this.updateLanDEW(lannode);\n    }\n\n    removeLanDEW(lannode) {\n      var oldConstraints = null;\n      this.state.getConstraints().subscribe(c => {\n        oldConstraints = c;\n      });\n      oldConstraints.splice(parseInt(lannode.data.lineNum), 1);\n      this.state.setConstraints(oldConstraints);\n    }\n\n    updateLanDEW(lannode) {\n      if (lannode.data.type != 'lan') {\n        return;\n      }\n\n      if (lannode.data.actors.length < 2) {\n        this.removeLanDEW(lannode);\n      } else {\n        var str = \"lan all \" + lannode.data.actors.join(\" \");\n        var oldConstraints = null;\n        this.state.getConstraints().subscribe(c => {\n          oldConstraints = c;\n        });\n\n        if (lannode.data.lineNum) {\n          oldConstraints[parseInt(lannode.data.lineNum)] = str;\n        } else {\n          oldConstraints.push(str);\n          lannode.data.lineNum = oldConstraints.length - 1;\n        }\n\n        this.state.setConstraints(oldConstraints);\n      }\n    }\n    /**\n     * On mouse up event\n     *\n     */\n\n\n    onMouseMove(event) {\n      if (!this.isDragging) {\n        return;\n      }\n\n      this.currentDragPosition.x += event.movementX / this.graphEl.zoomLevel;\n      this.currentDragPosition.y += event.movementY / this.graphEl.zoomLevel;\n    }\n    /**\n     * On mouse up event\n     *\n     */\n\n\n    onMouseUp(event) {\n      if (this.isDragging && this.draggingNode) {\n        // logic if mouse is released over another node\n        console.log(event, this.draggingNode);\n      }\n\n      this.isDragging = false;\n      this.draggingNode = undefined;\n    }\n\n    onNodeCircleMouseDown(event, node) {\n      if (this.draggingEnabled) {\n        return;\n      }\n\n      this.isDragging = true;\n      this.draggingNode = node;\n      this.startingDragPosition = {\n        x: (event.layerX - this.graphEl.panOffsetX) / this.graphEl.zoomLevel,\n        y: (event.layerY - this.graphEl.panOffsetY) / this.graphEl.zoomLevel\n      };\n      this.currentDragPosition = {\n        x: (event.layerX - this.graphEl.panOffsetX) / this.graphEl.zoomLevel,\n        y: (event.layerY - this.graphEl.panOffsetY) / this.graphEl.zoomLevel\n      };\n      setTimeout(() => {\n        this.mouseOverNode = undefined;\n      });\n    }\n\n    onNodeCircleMouseUp(event, node) {\n      if (this.draggingEnabled) {\n        return;\n      }\n\n      this.isDragging = false;\n      var src = this.draggingNode;\n      var dest = node;\n\n      if (src.id == dest.id || src.data.type == \"lan\" && dest.data.type == \"lan\") {\n        return;\n      }\n\n      var edge = {\n        id: Math.random().toString(36).substring(7),\n        source: this.draggingNode.id,\n        target: dest.id,\n        label: \"\"\n      };\n      this.links.push(edge);\n      this.links = [...this.links];\n      var newConstraints = this.addLinkDEW(this.draggingNode, dest);\n\n      if (newConstraints) {\n        var oldConstraints = null;\n        this.state.getConstraints().subscribe(c => {\n          oldConstraints = c;\n        });\n        newConstraints = oldConstraints.concat(newConstraints);\n        this.state.setConstraints(newConstraints);\n      }\n\n      this.startingDragPosition = {\n        x: (event.layerX - this.graphEl.panOffsetX) / this.graphEl.zoomLevel,\n        y: (event.layerY - this.graphEl.panOffsetY) / this.graphEl.zoomLevel\n      };\n      this.currentDragPosition = {\n        x: node.position.x + node.dimension.width / 2,\n        y: node.position.y\n      };\n      setTimeout(() => {\n        this.mouseOverNode = undefined;\n      });\n    }\n    /**\n    * toggleDragging\n    */\n\n\n    toggleDragging() {\n      this.draggingEnabled = !this.draggingEnabled;\n      this.update$.next(true);\n    }\n    /**\n     * isEditable\n     */\n\n\n    isEditable() {\n      if (this.draggingEnabled) {\n        return \"hidden\";\n      } else {\n        return \"visible\";\n      }\n    }\n\n    removeEdge(edge) {\n      if (this.draggingEnabled) {\n        return;\n      }\n\n      this.links = this.links.filter(e => {\n        return e.id != edge.id;\n      });\n      var source = this.nodes.find(node => node.id == edge.source);\n      var target = this.nodes.find(node => node.id == edge.target);\n      var newConstraints = this.removeLinkDEW(source, target);\n\n      if (newConstraints) {\n        this.state.setConstraints(newConstraints);\n      }\n\n      this.redrawGraph();\n    }\n\n    removeLinkDEW(source, target) {\n      if (source.data.type == \"actor\" && target.data.type == \"actor\") {\n        const dew = \"link all \" + source.label + \" \" + target.label;\n        const dew2 = \"link \" + source.label + \" \" + target.label;\n        var oldConstraints = null;\n        this.state.getConstraints().subscribe(c => {\n          oldConstraints = c;\n        });\n        return oldConstraints.filter(constraint => constraint != dew && constraint != dew2);\n      } else if (source.data.type == \"lan\" && target.data.type == \"actor\") {\n        source.data.actors = source.data.actors.filter(n => n !== target.label);\n        this.updateLanDEW(source);\n      } else if (source.data.type == \"actor\" && target.data.type == \"lan\") {\n        target.data.actors = target.data.actors.filter(n => n !== source.label);\n        this.updateLanDEW(target);\n      }\n    }\n\n    drawGraph() {\n      var behaviors = null;\n      var constraints = null;\n      this.state.getConstraints().subscribe(c => {\n        constraints = c || [];\n      });\n      this.state.getBehavior().subscribe(b => {\n        behaviors = b || [];\n      });\n      this.http.put(\"v1/pr/hlb/topology/parse\", {\n        \"scenario\": behaviors,\n        \"constraints\": constraints\n      }, {\n        withCredential: true\n      }).subscribe(data => {\n        this.nodes = [];\n        this.links = [];\n\n        for (const n in data['actors']) {\n          var n2 = {\n            data: data['actors'][n],\n            id: n,\n            label: n\n          };\n          this.nodes.push(n2);\n          this.nodes = [...this.nodes];\n        }\n\n        for (const n of data['lans']) {\n          var n2 = {\n            data: n,\n            id: \"lan\" + n['lineNum'],\n            label: \"lan\"\n          };\n          this.nodes.push(n2);\n          this.nodes = [...this.nodes];\n        }\n\n        for (const e of data['edges']) {\n          var e2 = e;\n          this.links.push(e2);\n          this.links = [...this.links];\n        }\n      });\n    }\n\n    redrawGraph() {\n      this.nodes = [];\n      this.links = [];\n      this.drawGraph();\n    }\n\n    removeNode(node) {\n      if (this.draggingEnabled) {\n        return;\n      }\n\n      var dependentEdges = this.links.filter(edge => edge.source == node.id || edge.target == node.id);\n\n      if (dependentEdges.length > 0) {\n        alert(\"Please remove all dependent edges before removing the node.\");\n        return;\n      } else {\n        if (node.data.type == \"lan\") {\n          this.removeLanDEW(node);\n        } else {\n          var numConstraint = \"num \" + node.label + \" \" + node.data.num;\n          var osConstraint = \"os \" + node.label + \" \" + node.data.os;\n          var constraints = null;\n          this.state.getConstraints().subscribe(c => {\n            constraints = c;\n          });\n          constraints = constraints.filter(c => c != numConstraint && c != osConstraint);\n          this.state.setConstraints(constraints);\n          var behaviors = [];\n          this.state.getBehavior().subscribe(b => {\n            behaviors = b;\n          });\n          behaviors = behaviors.filter(b => !b.includes(node.label));\n          this.state.setBehavior(behaviors);\n        }\n\n        delete this.matching[node.label];\n        this.state.setExperimentColors(this.matching);\n      }\n\n      this.redrawGraph();\n    }\n\n    showSlides() {\n      this.navigate.emit(4);\n    }\n\n    showEditor() {\n      this.navigate.emit(1);\n    }\n\n  }\n\n  TopologyGraphComponent.ɵfac = function TopologyGraphComponent_Factory(t) {\n    return new (t || TopologyGraphComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i3.MatDialog), i0.ɵɵdirectiveInject(i4.FormBuilder));\n  };\n\n  TopologyGraphComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: TopologyGraphComponent,\n    selectors: [[\"topology-graph\"]],\n    viewQuery: function TopologyGraphComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.graphEl = _t.first);\n      }\n    },\n    hostBindings: function TopologyGraphComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"mousemove\", function TopologyGraphComponent_mousemove_HostBindingHandler($event) {\n          return ctx.onMouseMove($event);\n        }, false, i0.ɵɵresolveDocument)(\"mouseup\", function TopologyGraphComponent_mouseup_HostBindingHandler($event) {\n          return ctx.onMouseUp($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    outputs: {\n      navigate: \"navigate\"\n    },\n    decls: 59,\n    vars: 19,\n    consts: [[1, \"container\"], [1, \"row\", \"sticky-top\"], [\"mat-raised-button\", \"\", \"color\", \"warn\", 1, \"col-md-3\", 3, \"click\"], [1, \"col-md-6\"], [\"mat-raised-button\", \"\", \"color\", \"accent\", 1, \"col-md-3\", 3, \"click\"], [1, \"row\"], [1, \"col-md-8\", \"taller\"], [3, \"links\", \"nodes\", \"layout\", \"layoutSettings\", \"curve\", \"draggingEnabled\", \"panningEnabled\", \"enableZoom\", \"zoomSpeed\", \"minZoomLevel\", \"maxZoomLevel\", \"panOnZoom\", \"autoZoom\", \"autoCenter\", \"zoomToFit$\"], [\"graph\", \"\"], [\"defsTemplate\", \"\"], [\"nodeTemplate\", \"\"], [\"clusterTemplate\", \"\"], [\"linkTemplate\", \"\"], [\"class\", \"line drag-line\", \"marker-end\", \"url(#arrow)\", 4, \"ngIf\"], [1, \"col-md-4\", \"padded\"], [4, \"ngFor\", \"ngForOf\"], [1, \"col-md-3\"], [1, \"col-md-9\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", 3, \"click\"], [1, \"fa\", \"fa-plus\", \"info\"], [\"type\", \"button\", 1, \"btn\", \"btn-danger\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-warning\", 3, \"click\"], [1, \"fa\", \"fa-minus\", \"info\"], [1, \"row\", \"bottom-border\"], [\"type\", \"button\", 1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"click\"], [1, \"custom-control\", \"custom-switch\"], [\"type\", \"checkbox\", \"id\", \"editmode\", 1, \"custom-control-input\", 3, \"click\"], [\"for\", \"editmode\", 1, \"custom-control-label\"], [\"id\", \"arrow\", \"viewBox\", \"0 -5 10 10\", \"refX\", \"8\", \"refY\", \"0\", \"markerWidth\", \"4\", \"markerHeight\", \"4\", \"orient\", \"auto\"], [\"d\", \"M0,-5L10,0L0,5\", 1, \"arrow-head\"], [1, \"node\", 3, \"contextmenu\"], [\"stroke-width\", \"15\", 3, \"mousedown\", \"mouseup\"], [\"fill\", \"red\", \"width\", \"20\", \"height\", \"20\", 3, \"click\"], [\"font-size\", \"large\", 3, \"mousedown\", \"mouseup\"], [\"dominant-baseline\", \"middle\", \"x\", \"10\", \"dy\", \"1em\"], [\"x\", \"10\", \"dy\", \"1em\", 1, \"wait_time_text\"], [\"x\", \"10\", \"dy\", \"2em\", \"visibility\", \"hidden\"], [1, \"node\", \"cluster\"], [\"rx\", \"5\", \"ry\", \"5\"], [\"alignment-baseline\", \"central\"], [1, \"edge\"], [\"stroke-width\", \"2\", 1, \"line\"], [\"text-anchor\", \"middle\"], [\"startOffset\", \"50%\", 1, \"text-path\"], [\"class\", \"linkMidpoint\", 4, \"ngIf\"], [1, \"linkMidpoint\"], [\"marker-end\", \"url(#arrow)\", 1, \"line\", \"drag-line\"], [1, \"col-md-3\", 3, \"ngStyle\"]],\n    template: function TopologyGraphComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"mat-toolbar\");\n        i0.ɵɵelementStart(3, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_3_listener() {\n          return ctx.showEditor();\n        });\n        i0.ɵɵtext(4, \"Previous : Go back to editor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"div\", 3);\n        i0.ɵɵelementStart(6, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_6_listener() {\n          return ctx.showSlides();\n        });\n        i0.ɵɵtext(7, \"Next :Go to Slides\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10, \"This graph outlines the toplogy of the experiment.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 5);\n        i0.ɵɵelementStart(12, \"div\", 6);\n        i0.ɵɵelementStart(13, \"ngx-graph\", 7, 8);\n        i0.ɵɵtemplate(15, TopologyGraphComponent_ng_template_15_Template, 2, 0, \"ng-template\", null, 9, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(17, TopologyGraphComponent_ng_template_17_Template, 11, 12, \"ng-template\", null, 10, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(19, TopologyGraphComponent_ng_template_19_Template, 4, 6, \"ng-template\", null, 11, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(21, TopologyGraphComponent_ng_template_21_Template, 6, 6, \"ng-template\", null, 12, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(23, TopologyGraphComponent__svg_line_23_Template, 1, 4, \"line\", 13);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"div\", 14);\n        i0.ɵɵelementStart(25, \"div\", 5);\n        i0.ɵɵelementStart(26, \"h5\");\n        i0.ɵɵtext(27, \"Legend\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(28, TopologyGraphComponent_div_28_Template, 5, 4, \"div\", 15);\n        i0.ɵɵpipe(29, \"keyvalue\");\n        i0.ɵɵelement(30, \"br\");\n        i0.ɵɵelementStart(31, \"div\", 5);\n        i0.ɵɵelementStart(32, \"div\", 16);\n        i0.ɵɵtext(33, \"Zoom level\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"div\", 17);\n        i0.ɵɵelementStart(35, \"button\", 18);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_35_listener() {\n          return ctx.zoomIn();\n        });\n        i0.ɵɵelement(36, \"i\", 19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"button\", 20);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_37_listener() {\n          return ctx.fitToView();\n        });\n        i0.ɵɵtext(38, \" Fit to view \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"button\", 21);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_39_listener() {\n          return ctx.zoomOut();\n        });\n        i0.ɵɵelement(40, \"i\", 22);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(41, \"br\");\n        i0.ɵɵelementStart(42, \"div\", 23);\n        i0.ɵɵelementStart(43, \"div\", 3);\n        i0.ɵɵelementStart(44, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_44_listener($event) {\n          return ctx.addActor($event);\n        });\n        i0.ɵɵtext(45, \"Add a new actor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"div\", 3);\n        i0.ɵɵelementStart(47, \"button\", 24);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_button_click_47_listener($event) {\n          return ctx.addLan($event);\n        });\n        i0.ɵɵtext(48, \"Add Lan\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(49, \"br\");\n        i0.ɵɵelementStart(50, \"div\", 23);\n        i0.ɵɵelementStart(51, \"div\", 25);\n        i0.ɵɵelementStart(52, \"input\", 26);\n        i0.ɵɵlistener(\"click\", function TopologyGraphComponent_Template_input_click_52_listener() {\n          return ctx.toggleDragging();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(53, \"label\", 27);\n        i0.ɵɵtext(54, \"Edit edges and Delete nodes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(55, \"br\");\n        i0.ɵɵelementStart(56, \"div\", 5);\n        i0.ɵɵtext(57, \" Right click on nodes to update their information. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(58, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(13);\n        i0.ɵɵproperty(\"links\", ctx.links)(\"nodes\", ctx.nodes)(\"layout\", ctx.layout)(\"layoutSettings\", ctx.layoutSettings)(\"curve\", ctx.curve)(\"draggingEnabled\", ctx.draggingEnabled)(\"panningEnabled\", ctx.panningEnabled)(\"enableZoom\", ctx.zoomEnabled)(\"zoomSpeed\", ctx.zoomSpeed)(\"minZoomLevel\", ctx.minZoomLevel)(\"maxZoomLevel\", ctx.maxZoomLevel)(\"panOnZoom\", ctx.panOnZoom)(\"autoZoom\", ctx.autoZoom)(\"autoCenter\", ctx.autoCenter)(\"zoomToFit$\", ctx.zoomToFit$);\n        i0.ɵɵadvance(10);\n        i0.ɵɵproperty(\"ngIf\", ctx.draggingNode);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(29, 17, ctx.matching));\n      }\n    },\n    directives: [i5.MatToolbar, i6.MatButton, i7.GraphComponent, i8.NgIf, i8.NgForOf, i8.NgStyle],\n    pipes: [i8.KeyValuePipe],\n    styles: [_c2]\n  });\n  return TopologyGraphComponent;\n})();\nexport let UpdateActorInfo = /*#__PURE__*/(() => {\n  class UpdateActorInfo {\n    constructor(dialogRef, http, state, _snackBar, actor) {\n      this.dialogRef = dialogRef;\n      this.http = http;\n      this.state = state;\n      this._snackBar = _snackBar;\n      this.actor = actor;\n    }\n\n    ngOnInit() {\n      this.state.getConstraints().subscribe(constraints => {\n        this.constraints = constraints;\n      });\n      this.numIndex = this.constraints.indexOf(\"num \" + this.actor.label + \" \" + this.actor.data.num);\n      this.osIndex = this.constraints.indexOf(\"os \" + this.actor.label + \" \" + this.actor.data.os);\n      this.newLabel = this.actor.label;\n      this.oldLabel = new RegExp(`\\\\b${this.actor.label}\\\\b`, \"g\");\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    }\n\n    updateActorConstraints() {\n      this.constraints[this.numIndex] = \"num \" + this.newLabel + \" \" + this.actor.data.num;\n      this.constraints[this.osIndex] = \"os \" + this.newLabel + \" \" + this.actor.data.os;\n\n      for (var i = 0; i < this.constraints.length; i++) {\n        this.constraints[i] = this.constraints[i].replace(this.oldLabel, this.newLabel);\n      }\n\n      this.state.setConstraints(this.constraints);\n      this.dialogRef.close();\n    }\n\n  }\n\n  UpdateActorInfo.ɵfac = function UpdateActorInfo_Factory(t) {\n    return new (t || UpdateActorInfo)(i0.ɵɵdirectiveInject(i3.MatDialogRef), i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i9.MatSnackBar), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  UpdateActorInfo.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateActorInfo,\n    selectors: [[\"update-actor\"]],\n    decls: 20,\n    vars: 3,\n    consts: [[\"mat-dialog-content\", \"\"], [1, \"row\", 2, \"margin\", \".5em\"], [1, \"col-md-12\", 2, \"padding\", \"0\"], [\"appearance\", \"outline\", 1, \"col-md-12\"], [\"type\", \"string\", \"placeholder\", \"default\", \"aria-label\", \"actorLabel\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"number\", \"placeholder\", \"1\", \"aria-label\", \"numConstraint\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"string\", \"placeholder\", \"default\", \"aria-label\", \"osConstraint\", \"matInput\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"click\"]],\n    template: function UpdateActorInfo_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(4, \"mat-label\");\n        i0.ɵɵtext(5, \"Name of actor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"input\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function UpdateActorInfo_Template_input_ngModelChange_6_listener($event) {\n          return ctx.newLabel = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(8, \"mat-label\");\n        i0.ɵɵtext(9, \"Number of instances\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function UpdateActorInfo_Template_input_ngModelChange_10_listener($event) {\n          return ctx.actor.data.num = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"mat-form-field\", 3);\n        i0.ɵɵelementStart(12, \"mat-label\");\n        i0.ɵɵtext(13, \"OS of actor\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function UpdateActorInfo_Template_input_ngModelChange_14_listener($event) {\n          return ctx.actor.data.os = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"div\", 7);\n        i0.ɵɵelementStart(16, \"button\", 8);\n        i0.ɵɵlistener(\"click\", function UpdateActorInfo_Template_button_click_16_listener() {\n          return ctx.onNoClick();\n        });\n        i0.ɵɵtext(17, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"button\", 9);\n        i0.ɵɵlistener(\"click\", function UpdateActorInfo_Template_button_click_18_listener() {\n          return ctx.updateActorConstraints();\n        });\n        i0.ɵɵtext(19, \"Update\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngModel\", ctx.newLabel);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.actor.data.num);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.actor.data.os);\n      }\n    },\n    directives: [i3.MatDialogContent, i10.MatFormField, i10.MatLabel, i11.MatInput, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, i4.NumberValueAccessor, i3.MatDialogActions, i6.MatButton],\n    styles: [_c2]\n  });\n  return UpdateActorInfo;\n})();","map":null,"metadata":{},"sourceType":"module"}