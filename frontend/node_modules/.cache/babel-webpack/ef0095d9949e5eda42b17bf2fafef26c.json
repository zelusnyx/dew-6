{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { environment } from '../../environments/environment'; //Import angular social login providers\n\nimport { GoogleLoginProvider } from \"angularx-social-login\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../http-service.service\";\nimport * as i2 from \"angularx-social-login\";\nimport * as i3 from \"./sphere-auth.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, socialAuthService, sphereAuthService) {\n      this.http = http;\n      this.socialAuthService = socialAuthService;\n      this.sphereAuthService = sphereAuthService;\n      this.login = false;\n      this.isAuthenticate = new BehaviorSubject(false);\n    }\n\n    startSession(id) {\n      var param = {\n        token: id\n      };\n      return this.http.post('/api/v1/p/user/validateUser/', param, {\n        withCredential: true\n      });\n    }\n\n    authenticate(userData) {\n      this.token = userData.authToken;\n      this.expiry = Number(3500);\n      return this.startSession(this.token);\n    }\n\n    setRefreshTokenIntervals() {\n      //Code to Refresh Access Tokens\n      setInterval(() => {\n        this.refreshToken();\n      }, 60 * 5 * 1000); //Refresh Token every 5 mins\n      //Code to detect if the Computer woke up\n\n      this.lastTime = new Date().getTime();\n      setInterval(() => {\n        this.currentTime = new Date().getTime();\n\n        if (this.currentTime > this.lastTime + 60 * 1 * 1000 + 60 * 1 * 1000) {\n          //Check if the computer is awake every min. Ignore small delays.\n          // Probably just woke up!\n          this.refreshToken();\n        }\n\n        this.lastTime = this.currentTime;\n      }, 60 * 1 * 1000);\n    }\n\n    refreshToken() {\n      try {\n        this.socialAuthService.authState.subscribe(user => {\n          this.user = user;\n          this.login = user != null;\n        });\n        this.socialAuthService.refreshAuthToken(GoogleLoginProvider.PROVIDER_ID).then(() => {\n          try {\n            this.token = this.user.authToken;\n            this.expiry = 3500;\n            this.setCookie(\"token\", this.token, this.expiry, false);\n          } catch (ex) {//Do nothing\n          }\n        });\n      } catch (ex) {//Do nothing\n      }\n    }\n\n    enableAuthentication() {\n      this.isAuthenticate.next(true);\n      this.setCookie(\"token\", this.token, this.expiry, false);\n    }\n\n    getToken() {\n      return this.token;\n    }\n\n    onAuthenticationChange() {\n      throw new Error(\"Method not implemented.\");\n    }\n\n    isAuthenticated() {\n      return of(this.checkAuthentication());\n    }\n\n    checkAuthentication() {\n      //console.log(\"check\");\n      if (!this.isAuthenticate.value) {\n        var token = this.getCookie(\"token\"); //console.log(token);\n\n        if (token != \"\") {\n          this.isAuthenticate.next(true);\n          this.token = token;\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return true;\n      }\n    }\n\n    setCookie(key, value, seconds, withExpiry) {\n      //console.log(key+\"::\"+value);\n      var date = new Date();\n      var expires;\n      withExpiry && date.setTime(date.getTime() + seconds * 1000);\n      withExpiry && (expires = \"expires=\" + date.toUTCString());\n      document.cookie = key + \"=\" + value + \";\" + (withExpiry ? expires + \";\" : \"\") + \"path=/\";\n    }\n\n    getCookie(key) {\n      var name = key + \"=\";\n      var decodedCookie = decodeURIComponent(document.cookie);\n      var ca = decodedCookie.split(';');\n\n      for (var i = 0; i < ca.length; i++) {\n        var c = ca[i];\n\n        while (c.charAt(0) == ' ') {\n          c = c.substring(1);\n        }\n\n        if (c.indexOf(name) == 0) {\n          return c.substring(name.length, c.length);\n        }\n      }\n\n      return \"\";\n    }\n\n    loginWithGoogle() {\n      return new Promise((resolve, reject) => {\n        try {\n          this.socialAuthService.authState.subscribe(user => {\n            this.user = user;\n            this.login = user != null;\n          });\n          this.socialAuthService.signIn(GoogleLoginProvider.PROVIDER_ID).then(() => {\n            resolve(this.user);\n          }).catch(() => {\n            reject(false);\n          });\n        } catch (exception) {\n          reject(false);\n        }\n      });\n    } // loginWithGoogleOldVersion(){\n    //   var redirect = environment.authRedirectUrl\n    //   var client_id = google_oauth_credentials.web.client_id;\n    //   var client_secret = google_oauth_credentials.web.client_secret;\n    //   var url = [];\n    //   var apiurl = \"https://accounts.google.com/o/oauth2/auth\";\n    //   url.push(apiurl);\n    //   url.push(\"?redirect_uri=\"+encodeURIComponent( redirect));\n    //   url.push(\"&access_type=offline&prompt=consent\");\n    //   url.push(\"&response_type=code\");\n    //   url.push(\"&scope=email%20profile%20openid%20\"+encodeURIComponent(\"https://www.googleapis.com/auth/userinfo.profile\")+\"&fetch_basic_profile=true\");\n    //   url.push(\"&client_id=\"+client_id);\n    //   //url.push(\"&client_secret=\"+client_secret);\n    //   //url.push('&grant_type=authorization_code');\n    //  // url.push(\"&ss_domain=https%3A%2F%2Fdevelopers-dot-devsite-v2-prod.appspot.com&gsiwebsdk=2\");\n    //   //console.log(url.join(\"\"));\n    //   window.location.href = url.join(\"\");\n    // }\n\n\n    authorizeGoogleDrive(experiment_id) {\n      const scopes = [\"email\", \"profile\", \"openid\", encodeURIComponent(\"https://www.googleapis.com/auth/userinfo.profile\"), encodeURIComponent(\"https://www.googleapis.com/auth/drive.file\")];\n      var apiurl = `https://accounts.google.com/o/oauth2/v2/auth?client_id=${environment.googleClientId}&response_type=token&state=${experiment_id}&scope=${scopes.join(\"%20\")}&redirect_uri=${encodeURIComponent(environment.googleDriveRedirectUrl)}&include_granted_scopes=true`;\n      var popupWindow = window.open(apiurl, 'authorize');\n\n      var prom = resolve => {\n        if (popupWindow.closed) {\n          resolve();\n        } else {\n          setTimeout(_ => prom(resolve), 1000);\n        }\n      };\n\n      return new Promise(prom);\n    }\n    /**\n     * Login to SPHERE with username and password\n     * @param username SPHERE username\n     * @param password SPHERE password\n     * @returns Promise that resolves when login is complete\n     */\n\n\n    loginWithSphere(username, password) {\n      return new Promise((resolve, reject) => {\n        this.sphereAuthService.loginToSphere(username, password).subscribe({\n          next: response => {\n            if (response.token) {\n              // Store the SPHERE token as the main token for the app\n              this.token = response.token;\n              this.enableAuthentication();\n              console.log('SPHERE authentication successful');\n              resolve(response);\n            } else {\n              reject('No token received from SPHERE');\n            }\n          },\n          error: error => {\n            console.error('SPHERE login failed:', error);\n            reject(error);\n          }\n        });\n      });\n    }\n    /**\n     * Check if user is authenticated to SPHERE\n     * @returns True if authenticated to SPHERE\n     */\n\n\n    isSphereAuthenticated() {\n      return this.sphereAuthService.isSphereAuthenticated();\n    }\n    /**\n     * Get SPHERE authentication token\n     * @returns SPHERE token or null\n     */\n\n\n    getSphereToken() {\n      return this.sphereAuthService.getSphereToken();\n    }\n    /**\n     * Get observable for SPHERE authentication state\n     * @returns Observable that emits SPHERE auth state changes\n     */\n\n\n    getSphereAuthState() {\n      return this.sphereAuthService.sphereAuthState$;\n    }\n\n    logout() {\n      try {\n        this.isAuthenticate.next(false);\n        this.login = false;\n        this.token = \"\";\n        this.setCookie(\"token\", \"\", 0, true);\n        this.setCookie(\"emailId\", \"\", 0, true);\n        this.setCookie(\"fullName\", \"\", 0, true);\n        this.setCookie(\"givenName\", \"\", 0, true);\n        this.setCookie(\"lastName\", \"\", 0, true);\n        this.setCookie(\"img\", \"\", 0, true);\n        this.setCookie(\"userHandle\", \"\", 0, true); // Logout from Google OAuth\n\n        this.socialAuthService.authState.subscribe(user => {\n          this.user = user;\n          this.login = user != null;\n        });\n        this.socialAuthService.signOut(true); // Logout from SPHERE\n\n        this.sphereAuthService.logoutFromSphere().subscribe({\n          next: () => {\n            console.log('SPHERE logout successful');\n          },\n          error: error => {\n            console.error('SPHERE logout error:', error);\n          }\n        });\n      } catch (ex) {//Do nothing\n      }\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.SocialAuthService), i0.ɵɵinject(i3.SphereAuthService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}