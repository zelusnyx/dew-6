{"ast":null,"code":"import * as Quill from \"quill\";\nimport EditorService from \"../common/editor-service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"../../../state-service.service\";\nimport * as i3 from \"@angular/material/snack-bar\";\n\nconst _c0 = function () {\n  return {\n    height: \"100px\"\n  };\n};\n\nconst _c1 = function () {\n  return {\n    container: \"#editor1\"\n  };\n};\n\nconst _c2 = function (a0) {\n  return {\n    counter: a0,\n    toolbar: false\n  };\n};\n\nQuill.register(\"modules/counter\", EditorService);\nexport let NlpComponent = /*#__PURE__*/(() => {\n  class NlpComponent {\n    constructor(http, stateservice, _snackBar) {\n      this.http = http;\n      this.stateservice = stateservice;\n      this._snackBar = _snackBar;\n      this.nlpTextFilter = \"\";\n      this.nlpText = \"\";\n      this.behaviorList = [];\n      this.wordlist = [];\n    }\n\n    created(editor) {\n      this.nlpText = \"\";\n      this.service = editor.getModule(\"counter\");\n    }\n\n    logChange(event, id) {\n      if (this.service.getText().trim() === \"\") {\n        return;\n      }\n\n      var text = this.service.getText().split(/\\s/);\n      this.nlpTextFilter = text[text.length - 2];\n    }\n\n    insertValue(text) {\n      this.service.insertValue(text);\n    }\n\n    delete(index) {\n      this.behaviorList.splice(index, 1);\n    }\n\n    save() {\n      var text = this.service.getText();\n      var data = {\n        text: text.trim()\n      };\n      this.stateservice.enableLoader();\n      this.http.put(\"v1/pr/nlp/behavior\", data, {\n        withCredential: true\n      }).subscribe(data => {\n        console.log(data);\n        this.stateservice.disableLoader();\n        this.stateservice.setBehavior(data.behavior);\n        this.stateservice.setActors(data.actors);\n        this.stateservice.setConstraints(data.constraints);\n\n        this._snackBar.open(\"Successfully Translated.\", \"close\", {\n          duration: 2000\n        }); // this.stateservice.setBindings(data.Bindings);\n\n      }, error => {\n        this.stateservice.disableLoader();\n\n        this._snackBar.open(error, \"close\", {\n          duration: 2000\n        });\n      });\n    }\n\n    updateWordList() {\n      this.localWordList = [];\n      var dict = new Map();\n      this.behaviorList.forEach(element => {\n        //console.log(element);\n        var wordlist = element.text.trim().split(/\\s/);\n        wordlist.forEach(element => {\n          if (element.trim() !== \"\") {\n            if (!dict.has(element.trim())) {\n              this.localWordList.push({\n                value: element.trim()\n              });\n              dict.set(element.trim(), true);\n            }\n          }\n        });\n      });\n      this.wordlist = this.wordlist.concat(this.localWordList);\n    }\n\n  }\n\n  NlpComponent.ɵfac = function NlpComponent_Factory(t) {\n    return new (t || NlpComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.StateService), i0.ɵɵdirectiveInject(i3.MatSnackBar));\n  };\n\n  NlpComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NlpComponent,\n    selectors: [[\"nlp\"]],\n    decls: 12,\n    vars: 7,\n    consts: [[1, \"row\"], [1, \"col-md-12\", 2, \"padding\", \"2em\"], [2, \"color\", \"red\"], [1, \"flex-container\"], [3, \"styles\", \"modules\", \"ngModel\", \"ngModelChange\", \"onContentChanged\", \"onEditorCreated\"], [1, \"col-md-12\"], [2, \"float\", \"right\"], [\"mat-stroked-button\", \"\", 3, \"click\"]],\n    template: function NlpComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \"Please specify your scenario using natural language and we will try to extract DEW statements from it. For example you can type \\u201CFirst server starts and then client starts. After client starts, client sends traffic to server.\\u201D \");\n        i0.ɵɵelementStart(4, \"span\", 2);\n        i0.ɵɵtext(5, \"<note this doesn\\u2019t work>\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\", 3);\n        i0.ɵɵelementStart(7, \"quill-editor\", 4);\n        i0.ɵɵlistener(\"ngModelChange\", function NlpComponent_Template_quill_editor_ngModelChange_7_listener($event) {\n          return ctx.nlpText = $event;\n        })(\"onContentChanged\", function NlpComponent_Template_quill_editor_onContentChanged_7_listener($event) {\n          return ctx.logChange($event, 1);\n        })(\"onEditorCreated\", function NlpComponent_Template_quill_editor_onEditorCreated_7_listener($event) {\n          return ctx.created($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelementStart(10, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function NlpComponent_Template_button_click_10_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtext(11, \"Convert\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"styles\", i0.ɵɵpureFunction0(3, _c0))(\"modules\", i0.ɵɵpureFunction1(5, _c2, i0.ɵɵpureFunction0(4, _c1)))(\"ngModel\", ctx.nlpText);\n      }\n    },\n    styles: [\".behavior-list[_ngcontent-%COMP%]{margin:.1em;list-style:none;padding:0}.behavior-box[_ngcontent-%COMP%]{margin:.5em;border:1px solid #ccc;padding:.5em}.word-bubble[_ngcontent-%COMP%]{border:1px dotted black;border-radius:1em;padding:.4em;margin:.1em;cursor:pointer}.word-bubble-button[_ngcontent-%COMP%]{border-radius:1em;padding:.4em;margin:.1em;cursor:pointer}.float-left[_ngcontent-%COMP%]{float:left}.actions[_ngcontent-%COMP%]{float:right}.disabled[_ngcontent-%COMP%]{pointer-events:none;background-color:gray}\"]\n  });\n  return NlpComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}