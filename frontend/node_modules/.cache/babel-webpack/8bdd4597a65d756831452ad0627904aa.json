{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport let StateService = /*#__PURE__*/(() => {\n  class StateService {\n    constructor() {\n      this.experimentColors = new BehaviorSubject({});\n      this.loaderSwitch = new BehaviorSubject(false);\n      this.actors = new BehaviorSubject(null);\n      this.behavior = new BehaviorSubject(null);\n      this.constraints = new BehaviorSubject(null);\n      this.bindings = new BehaviorSubject(null);\n      this.experimentId = new BehaviorSubject(0);\n      this.experimentName = new BehaviorSubject(\"\");\n      this.experimentDescription = new BehaviorSubject(\"\");\n      this.driveId = new BehaviorSubject(\"\");\n      this.tokenList = new BehaviorSubject(\"\");\n      this.experimentControl = new BehaviorSubject(4);\n      this.saveEvent = new BehaviorSubject(false);\n      this.serverData = new BehaviorSubject(null);\n      this.slideTobeShown = new BehaviorSubject({});\n      this.lastSlideSeqNum = new BehaviorSubject(0);\n      this.allAnyPresent = false;\n      this.currentViewId = new BehaviorSubject(1);\n      this.isUpload = new BehaviorSubject(false);\n    }\n\n    setAllAnyPresentFlag(val) {\n      this.allAnyPresent = val;\n    }\n\n    getAllAnyPresentFlag() {\n      return this.allAnyPresent;\n    }\n\n    triggerSaveEvent() {\n      this.saveEvent.next(true);\n    }\n\n    monitorSaveEvent() {\n      return this.saveEvent.asObservable();\n    }\n\n    setLocalServerData(serverData) {\n      this.serverData.next(serverData);\n    }\n\n    getLocalServerData() {\n      return this.serverData.asObservable();\n    }\n\n    setExperimentControl(code) {\n      this.experimentControl.next(code);\n    }\n\n    getExperimentControl() {\n      return this.experimentControl.asObservable();\n    }\n\n    getTokenLevel() {\n      return this.tokenLevel;\n    }\n\n    setTokenLevel(tokenLevel) {\n      this.tokenLevel = tokenLevel;\n    }\n\n    setTokenList(data) {\n      this.tokenList.next(data);\n    }\n\n    getTokenList() {\n      return this.tokenList.asObservable();\n    }\n\n    enableLoader() {\n      this.loaderSwitch.next(true);\n    }\n\n    disableLoader() {\n      this.loaderSwitch.next(false);\n    }\n\n    isLoaderEnabled() {\n      return this.loaderSwitch.asObservable();\n    }\n\n    getExperimentName() {\n      return this.experimentName.asObservable();\n    }\n\n    getExperimentColors() {\n      return this.experimentColors.asObservable();\n    }\n\n    getDriveId() {\n      return this.driveId.asObservable();\n    }\n\n    getExperimentDescription() {\n      return this.experimentDescription.asObservable();\n    }\n\n    getUserDetails() {\n      return this.userDetails;\n    }\n\n    setUserDetails(user) {\n      this.userDetails = user;\n    }\n\n    getBindings() {\n      return this.bindings.asObservable();\n    }\n\n    getActors() {\n      return this.actors.asObservable();\n    }\n\n    setCurrentBehaviorWord(word) {\n      this.currentBehaviorWord = word;\n    }\n\n    getCurrentBehaviorWord() {\n      return this.currentBehaviorWord;\n    }\n\n    setCurrentConstraintWord(word) {\n      this.currentConstraintWord = word;\n    }\n\n    getCurrentConstraintWord() {\n      return this.currentConstraintWord;\n    }\n\n    getBehavior() {\n      return this.behavior.asObservable();\n    }\n\n    getConstraints() {\n      return this.constraints.asObservable();\n    }\n\n    setBindings(Bindings) {\n      this.bindings.next(Bindings);\n    }\n\n    setActors(data) {\n      this.actors.next(data);\n    }\n\n    setBehavior(data) {\n      this.behavior.next(data);\n    }\n\n    setConstraints(data) {\n      this.constraints.next(data);\n    }\n\n    setExperimentName(data) {\n      this.experimentName.next(data);\n    }\n\n    setDriveId(data) {\n      this.driveId.next(data);\n    }\n\n    setExperimentColors(data) {\n      this.experimentColors.next(data);\n    }\n\n    setUpload(val) {\n      this.isUpload.next(val);\n    }\n\n    getUpload() {\n      return this.isUpload.asObservable();\n    }\n\n    setExperimentDescription(data) {\n      this.experimentDescription.next(data);\n    }\n\n    getExperimentId() {\n      return this.experimentId.asObservable();\n    }\n\n    setExperimentId(newId) {\n      this.experimentId.next(newId);\n    }\n\n    getslideTobeShown() {\n      return this.slideTobeShown.asObservable();\n    }\n\n    setslideTobeShown(slide) {\n      this.slideTobeShown.next(slide);\n    }\n\n    getCurrentViewId() {\n      return this.currentViewId.asObservable();\n    }\n\n    setCurrentViewId(viewId) {\n      this.currentViewId.next(viewId);\n    }\n\n    getlastSlideSeqNum() {\n      return this.lastSlideSeqNum;\n    }\n\n    setlastSlideSeqNum(snum) {\n      this.lastSlideSeqNum.next(snum);\n    }\n\n  }\n\n  StateService.ɵfac = function StateService_Factory(t) {\n    return new (t || StateService)();\n  };\n\n  StateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StateService,\n    factory: StateService.ɵfac\n  });\n  return StateService;\n})();","map":null,"metadata":{},"sourceType":"module"}