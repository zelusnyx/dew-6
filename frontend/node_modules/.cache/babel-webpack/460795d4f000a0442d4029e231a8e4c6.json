{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../state-service.service\";\nexport let AuthGuard = /*#__PURE__*/(() => {\n  class AuthGuard {\n    // canLoad(route: import(\"@angular/router\").Route, segments: import(\"@angular/router\").UrlSegment[]): boolean | Observable<boolean> | Promise<boolean> {\n    //   return this.authService.authenticated.pipe(map(logged => {\n    //     console.log(\"inside canActivateChild\");\n    //       if(logged) {\n    //         this.router.navigate(['/protected']);\n    //         return false;\n    //       }\n    //       return true;\n    //     })\n    //     )\n    // }\n    // canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | import(\"@angular/router\").UrlTree | Observable<boolean | import(\"@angular/router\").UrlTree> | Promise<boolean | import(\"@angular/router\").UrlTree> {\n    //   return this.authService.authenticated.pipe(map(logged => {\n    //     console.log(\"inside canActivateChild\");\n    //       if(logged) {\n    //         this.router.navigate(['/protected']);\n    //         return false;\n    //       }\n    //       return true;\n    //     })\n    //     )\n    // }\n    constructor(authService, router, state) {\n      this.authService = authService;\n      this.router = router;\n      this.state = state;\n    }\n\n    canActivate() {\n      return this.authService.isAuthenticated().pipe(map(logged => {\n        console.log(\"inside canActivate\");\n        console.log(logged);\n\n        if (!logged) {\n          this.router.navigate(['auth/login']);\n          return false;\n        }\n\n        return true;\n      }));\n    }\n\n  }\n\n  AuthGuard.ɵfac = function AuthGuard_Factory(t) {\n    return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.StateService));\n  };\n\n  AuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthGuard,\n    factory: AuthGuard.ɵfac\n  });\n  return AuthGuard;\n})();","map":null,"metadata":{},"sourceType":"module"}