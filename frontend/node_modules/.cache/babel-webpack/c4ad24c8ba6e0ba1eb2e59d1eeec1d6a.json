{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { moveItemInArray } from \"@angular/cdk/drag-drop\";\nimport * as Quill from \"quill\";\nimport EditorService from \"../common/editor-service\";\nimport { MAT_DIALOG_DATA } from \"@angular/material/dialog\";\nimport { of } from \"rxjs\";\nimport * as _ from 'lodash'; // import * as $ from 'jquery';\n\nimport { DataSet } from 'vis-data';\nimport { Network } from 'vis-network';\nimport { GRAPH_ITEM_PARAMETERS_LIST } from '../../graph-data/graph-item-parameters-list';\nimport { GraphItemType } from '../../graph-data/graph-item-parameters-interface';\nimport { LogHeader, LogEntry } from '../common/logging-service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/http-service.service\";\nimport * as i2 from \"@angular/material/dialog\";\nimport * as i3 from \"../../../state-service.service\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"../common/logging-service\";\nimport * as i6 from \"../../../@auth/auth.service\";\nimport * as i7 from \"@angular/material/sidenav\";\nimport * as i8 from \"@angular/material/tooltip\";\nimport * as i9 from \"@angular/common\";\nimport * as i10 from \"ngx-quill\";\nimport * as i11 from \"@angular/forms\";\nimport * as i12 from \"@angular/material/form-field\";\nimport * as i13 from \"@angular/material/input\";\nimport * as i14 from \"@angular/material/autocomplete\";\nimport * as i15 from \"@angular/material/core\";\nimport * as i16 from \"@angular/cdk/drag-drop\";\nimport * as i17 from \"../common/text-filter.pipe\";\nimport * as i18 from \"@angular/material/button\";\nconst _c0 = [\"topologyGraphNetwork\"];\nconst _c1 = [\"dependencyGraphNetwork\"];\nconst _c2 = [\"dependencyGraphCycleNetwork\"];\n\nfunction HlbComponent_button_33_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 132);\n    i0.ɵɵlistener(\"click\", function HlbComponent_button_33_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r26);\n      const word_r24 = restoredCtx.$implicit;\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.insertValue(word_r24.value, true);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const word_r24 = ctx.$implicit;\n    i0.ɵɵproperty(\"disabled\", word_r24.flag);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", word_r24.value, \" \");\n  }\n}\n\nfunction HlbComponent_button_36_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 133);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r2.suggestionbehaviorMessage, \" \");\n  }\n}\n\nfunction HlbComponent_div_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 134);\n    i0.ɵɵelement(1, \"i\", 135);\n    i0.ɵɵtext(2, \" Dependency cycle detected \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HlbComponent_button_56_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 132);\n    i0.ɵɵlistener(\"click\", function HlbComponent_button_56_Template_button_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r29);\n      const word_r27 = restoredCtx.$implicit;\n      const ctx_r28 = i0.ɵɵnextContext();\n      return ctx_r28.insertValueInConstraint(word_r27.value, true);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const word_r27 = ctx.$implicit;\n    i0.ɵɵproperty(\"disabled\", word_r27.flag);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", word_r27.value, \" \");\n  }\n}\n\nfunction HlbComponent_button_59_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"button\", 133);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"disabled\", true);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.suggestionConstraintMessage, \" \");\n  }\n}\n\nfunction HlbComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 136);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"i\");\n    i0.ɵɵtext(3, \"No Bindings Needed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HlbComponent_button_84_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r31 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 137);\n    i0.ɵɵlistener(\"click\", function HlbComponent_button_84_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r31);\n      const ctx_r30 = i0.ɵɵnextContext();\n      return ctx_r30.toggleSpecialFuncDialog();\n    });\n    i0.ɵɵtext(1, \"Show Special Functions\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HlbComponent_ng_template_85_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r33 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 137);\n    i0.ɵɵlistener(\"click\", function HlbComponent_ng_template_85_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r33);\n      const ctx_r32 = i0.ɵɵnextContext();\n      return ctx_r32.toggleSpecialFuncDialog();\n    });\n    i0.ɵɵtext(1, \"Hide Special Functions\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HlbComponent_div_87_li_2_mat_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 144);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r39 = ctx.$implicit;\n    const item_r35 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵproperty(\"value\", option_r39.replace(\"$action\", item_r35.key));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", option_r39.replace(\"$action\", item_r35.key), \" \");\n  }\n}\n\nfunction HlbComponent_div_87_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r42 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"mat-form-field\", 139);\n    i0.ɵɵelementStart(3, \"mat-label\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"input\", 140);\n    i0.ɵɵlistener(\"ngModelChange\", function HlbComponent_div_87_li_2_Template_input_ngModelChange_5_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const item_r35 = restoredCtx.$implicit;\n      return item_r35.value = $event;\n    })(\"change\", function HlbComponent_div_87_li_2_Template_input_change_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const index_r36 = restoredCtx.index;\n      const ctx_r43 = i0.ɵɵnextContext(2);\n      return ctx_r43.storeBinding(index_r36);\n    })(\"focus\", function HlbComponent_div_87_li_2_Template_input_focus_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const item_r35 = restoredCtx.$implicit;\n      const ctx_r44 = i0.ɵɵnextContext(2);\n      return ctx_r44.searchFilter(item_r35.value, item_r35.category);\n    })(\"keyup\", function HlbComponent_div_87_li_2_Template_input_keyup_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const item_r35 = restoredCtx.$implicit;\n      const ctx_r45 = i0.ɵɵnextContext(2);\n      return ctx_r45.searchFilter(item_r35.value, item_r35.category);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"mat-autocomplete\", 141, 142);\n    i0.ɵɵlistener(\"optionSelected\", function HlbComponent_div_87_li_2_Template_mat_autocomplete_optionSelected_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r42);\n      const index_r36 = restoredCtx.index;\n      const ctx_r46 = i0.ɵɵnextContext(2);\n      return ctx_r46.storeBinding(index_r36);\n    });\n    i0.ɵɵtemplate(8, HlbComponent_div_87_li_2_mat_option_8_Template, 2, 2, \"mat-option\", 143);\n    i0.ɵɵpipe(9, \"async\");\n    i0.ɵɵpipe(10, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r35 = ctx.$implicit;\n\n    const _r37 = i0.ɵɵreference(7);\n\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(4);\n    i0.ɵɵtextInterpolate(item_r35.key + \" represents: \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r34.isExperimentDisabled())(\"ngModel\", item_r35.value)(\"matAutocomplete\", _r37);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", item_r35.category === \"event\" ? i0.ɵɵpipeBind1(9, 5, ctx_r34.filteredBindingHandleForEvent) : i0.ɵɵpipeBind1(10, 7, ctx_r34.filteredBindingHandle));\n  }\n}\n\nfunction HlbComponent_div_87_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"ul\", 138);\n    i0.ɵɵtemplate(2, HlbComponent_div_87_li_2_Template, 11, 9, \"li\", 107);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r10 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r10.bindingList);\n  }\n}\n\nfunction HlbComponent_div_88_tr_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵelementStart(1, \"th\", 148);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const func_r48 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(func_r48.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(func_r48.value);\n  }\n}\n\nfunction HlbComponent_div_88_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 145);\n    i0.ɵɵelementStart(1, \"table\", 146);\n    i0.ɵɵelementStart(2, \"thead\");\n    i0.ɵɵelementStart(3, \"tr\");\n    i0.ɵɵelementStart(4, \"th\", 147);\n    i0.ɵɵtext(5, \"Special Functions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"th\", 147);\n    i0.ɵɵtext(7, \"What they do\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(8, \"tbody\");\n    i0.ɵɵtemplate(9, HlbComponent_div_88_tr_9_Template, 5, 2, \"tr\", 107);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(9);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r11.specialFunctions);\n  }\n}\n\nfunction HlbComponent_i_114_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r50 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"i\", 149);\n    i0.ɵɵlistener(\"click\", function HlbComponent_i_114_Template_i_click_0_listener() {\n      i0.ɵɵrestoreView(_r50);\n      const ctx_r49 = i0.ɵɵnextContext();\n      return ctx_r49.topologyGraphSelectedNodeData.nameEditable = true;\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction HlbComponent_div_115_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 152);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r51 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r51.topologyGraphSelectedNodeData.nameEditableError);\n  }\n}\n\nfunction HlbComponent_div_115_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r53 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"input\", 150);\n    i0.ɵɵlistener(\"ngModelChange\", function HlbComponent_div_115_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r53);\n      const ctx_r52 = i0.ɵɵnextContext();\n      return ctx_r52.topologyGraphSelectedNodeData.name = $event;\n    })(\"keyup\", function HlbComponent_div_115_Template_input_keyup_1_listener() {\n      i0.ɵɵrestoreView(_r53);\n      const ctx_r54 = i0.ɵɵnextContext();\n      return ctx_r54.onTopologyNodeChange();\n    })(\"change\", function HlbComponent_div_115_Template_input_change_1_listener() {\n      i0.ɵɵrestoreView(_r53);\n      const ctx_r55 = i0.ɵɵnextContext();\n      return ctx_r55.onTopologyNodeSave();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, HlbComponent_div_115_div_2_Template, 2, 1, \"div\", 151);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r13 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r13.topologyGraphSelectedNodeData.name);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r13.topologyGraphSelectedNodeData.nameEditableError);\n  }\n}\n\nfunction HlbComponent_div_136_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r59 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 155);\n    i0.ɵɵelementStart(1, \"div\", 156);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 157);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"div\", 158);\n    i0.ɵɵlistener(\"click\", function HlbComponent_div_136_div_4_Template_div_click_5_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r59);\n      const action_r57 = restoredCtx.$implicit;\n      const ctx_r58 = i0.ɵɵnextContext(2);\n      return ctx_r58.onEditActionFromTopologyDependencyClick(action_r57.topologyLabel);\n    });\n    i0.ɵɵelement(6, \"i\", 159);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const action_r57 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", action_r57.topologyLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", action_r57.action, \" \");\n  }\n}\n\nfunction HlbComponent_div_136_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 153);\n    i0.ɵɵelementStart(1, \"h5\");\n    i0.ɵɵtext(2, \"Actions\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\");\n    i0.ɵɵtemplate(4, HlbComponent_div_136_div_4_Template, 7, 2, \"div\", 154);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r14.topologyGraphSelectedNodeData.actions);\n  }\n}\n\nconst _c3 = function (a0) {\n  return {\n    \"background-color\": a0\n  };\n};\n\nfunction HlbComponent_div_177_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 16);\n    i0.ɵɵelement(1, \"div\", 160);\n    i0.ɵɵelementStart(2, \"div\", 161);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const actor_r60 = ctx.$implicit;\n    const ctx_r16 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction1(2, _c3, ctx_r16.graphColors[actor_r60.value]));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(actor_r60.key);\n  }\n}\n\nfunction HlbComponent_div_194_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r62 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 162);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"button\", 163);\n    i0.ɵɵlistener(\"click\", function HlbComponent_div_194_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r62);\n      const ctx_r61 = i0.ɵɵnextContext();\n      return ctx_r61.unsetShowAlertMessage();\n    });\n    i0.ɵɵelementStart(3, \"span\", 100);\n    i0.ɵɵtext(4, \"\\u00D7\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r19.alertMessage, \" \");\n  }\n}\n\nfunction HlbComponent_option_211_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r63 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r63.text);\n  }\n}\n\nfunction HlbComponent_option_227_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r64 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r64);\n  }\n}\n\nfunction HlbComponent_option_234_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r65 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r65);\n  }\n}\n\nfunction HlbComponent_option_258_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r66 = ctx.$implicit;\n    const ctx_r23 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r23.currentActionNameInModal ? item_r66.replace(\"$action\", ctx_r23.currentActionNameInModal) : item_r66);\n  }\n}\n\nconst _c4 = function () {\n  return {\n    border: \"none\",\n    \"font-size\": \"12px\"\n  };\n};\n\nconst _c5 = function () {\n  return {\n    container: \"#editor1\"\n  };\n};\n\nconst _c6 = function (a0) {\n  return {\n    counter: a0,\n    toolbar: false\n  };\n};\n\nfunction BindingPopUp_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵelementStart(1, \"span\");\n    i0.ɵɵelementStart(2, \"i\");\n    i0.ɵɵtext(3, \"No Bindings Needed\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction BindingPopUp_div_8_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 12);\n    i0.ɵɵelementStart(1, \"div\");\n    i0.ɵɵelementStart(2, \"mat-form-field\", 13);\n    i0.ɵɵelementStart(3, \"input\", 14);\n    i0.ɵɵlistener(\"ngModelChange\", function BindingPopUp_div_8_li_2_Template_input_ngModelChange_3_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const item_r3 = restoredCtx.$implicit;\n      return item_r3.value = $event;\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"placeholder\", item_r3.key + \" represents: \");\n    i0.ɵɵproperty(\"ngModel\", item_r3.value);\n  }\n}\n\nfunction BindingPopUp_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelementStart(1, \"ul\", 10);\n    i0.ɵɵtemplate(2, BindingPopUp_div_8_li_2_Template, 5, 2, \"li\", 11);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.bindingList);\n  }\n}\n\nconst _c7 = \".behavior-list[_ngcontent-%COMP%]{margin:.1em;list-style:none;padding:0}.behavior-box[_ngcontent-%COMP%]{margin:.5em;border:1px solid #ccc;padding:.5em}.word-bubble[_ngcontent-%COMP%]{border:1px dotted black;border-radius:1em;padding:.4em;margin:.1em;font-size:12px;cursor:pointer}.code-snippet[_ngcontent-%COMP%]{border:1px solid #e1e4e5;background-color:#f8f8f8;padding:12px;text-align:center;overflow-x:auto}.code-snippet[_ngcontent-%COMP%]::-webkit-scrollbar{width:100px;height:10px}.convert-btn[_ngcontent-%COMP%] > div[_ngcontent-%COMP%]{float:right;background-color:#337ddf;color:#fff;font-weight:bold;border-radius:30px;margin-left:10px;padding:10px}.convert-btn[_ngcontent-%COMP%] > div[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{filter:invert(100%);height:20px}.convert-btn[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-weight:bold;text-align:left;font-size:12px}.error-text[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{color:#f73737;margin-left:5px}.error-text[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{filter:invert(38%) sepia(90%) saturate(4410%) hue-rotate(343deg) brightness(98%) contrast(98%);height:15px}.binding-word-bubble[_ngcontent-%COMP%]{border:1px solid black;float:left;margin:2px;border-radius:8px;padding:3px}.word-bubble-button[_ngcontent-%COMP%]{border-radius:1em;padding:.4em;margin:.1em;font-size:12px}.float-left[_ngcontent-%COMP%]{float:left}.actions[_ngcontent-%COMP%]{float:right;cursor:pointer;display:none}.behavior-list[_ngcontent-%COMP%]:hover   .actions[_ngcontent-%COMP%]{display:block}.disabled[_ngcontent-%COMP%]{pointer-events:none}.grabbable[_ngcontent-%COMP%]{cursor:move;cursor:grab;cursor:-webkit-grab}.grabbable[_ngcontent-%COMP%]:active{cursor:grabbing;cursor:-webkit-grabbing}.mat-radio-button[_ngcontent-%COMP%] ~ .mat-radio-button[_ngcontent-%COMP%]{margin-left:16px}.padding-left-right[_ngcontent-%COMP%]{padding-left:5px;padding-right:5px}.button-padding[_ngcontent-%COMP%]{margin-left:.1em}.expand[_ngcontent-%COMP%]{float:right;cursor:pointer}.hide[_ngcontent-%COMP%]{display:none}ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{word-wrap:break-word}ul[_ngcontent-%COMP%]{padding-left:1em}.info[_ngcontent-%COMP%]{float:right;cursor:pointer}.actor_example_color[_ngcontent-%COMP%]{color:orange}.binding_example_color[_ngcontent-%COMP%]{color:green}.alert[_ngcontent-%COMP%]{position:absolute;top:10%;right:2%;width:20%}.special-func-btn[_ngcontent-%COMP%]{text-align:center;background-color:#dcdcdc}.special-func-div[_ngcontent-%COMP%]{position:absolute;bottom:10%;right:1%}.special-func-div[_ngcontent-%COMP%]   .table[_ngcontent-%COMP%]{outline:.3px solid lightgrey;background:#f3f3f3}.drawer-container[_ngcontent-%COMP%]{width:100%;height:100%}.drawer-sidenav-content[_ngcontent-%COMP%]{display:flex;height:100%;width:50%}.drawer-sidenav[_ngcontent-%COMP%]{width:50%;height:100%}.side-nav-container[_ngcontent-%COMP%]{margin-top:10px}.side-nav-icon[_ngcontent-%COMP%]{background-color:#f5be08;padding:10px;align-items:center;float:left;width:-moz-fit-content;width:fit-content;cursor:pointer;border-bottom-right-radius:10px;min-width:212px}.side-nav-icon[_ngcontent-%COMP%] > img[_ngcontent-%COMP%]{width:20px}.side-nav-icon[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{padding:10px;font-weight:bolder}.hide[_ngcontent-%COMP%]{display:none!important}.mat-drawer-container[_ngcontent-%COMP%]{background-color:#fff;padding-bottom:20px}.graph-box[_ngcontent-%COMP%], .graph-box-dependency[_ngcontent-%COMP%]{position:absolute;border:#afafaf;border-style:dashed;border-width:2px;width:100%;height:100%;z-index:-10;overflow-x:hidden}.drawer-content[_ngcontent-%COMP%]{overflow-x:hidden}.dialog-box[_ngcontent-%COMP%]{position:absolute;border:#999999;height:50%;width:30%;z-index:100;border-style:solid;border-radius:10px;padding:10px;margin:50px 10px 10px;right:0px;top:0px;box-shadow:2px 2px #818181;background:white}.dialog-box-fields[_ngcontent-%COMP%]{overflow-y:auto}.dialog-box-fields[_ngcontent-%COMP%] > mat-form-field[_ngcontent-%COMP%]{padding-right:20px}.field-units[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-weight:bold;color:#000;padding-left:10px;padding-right:5px}.dialog-box-content[_ngcontent-%COMP%]{max-height:100%}#dialog-box-title[_ngcontent-%COMP%]{color:#424242;font-weight:bolder;font-size:20px}.dialog-box-action-button[_ngcontent-%COMP%]{background-color:orange;color:#fff;font-weight:bold;font-size:14px;height:40px}.toastBox[_ngcontent-%COMP%]{position:fixed;bottom:0;float:left;z-index:100;border-radius:10px;padding:10px;margin:10px 10px 45px;box-shadow:2px 2px #818181;background-color:#e20000;color:#fff;text-align:left;font-weight:bolder}#topologyGraphNetwork[_ngcontent-%COMP%], #dependencyGraphNetwork[_ngcontent-%COMP%], #dependencyGraphCycleNetwork[_ngcontent-%COMP%]{height:100%}.disabled[_ngcontent-%COMP%]{color:#777}.modal-content[_ngcontent-%COMP%]{width:700px;margin-left:calc(50% - 350px)}.modal-add-button[_ngcontent-%COMP%]{color:#fff;background-color:#04aa6d;font-weight:bold}.modal-action-headers[_ngcontent-%COMP%]{padding-top:10px;padding-bottom:10px}.modal-add-action-error[_ngcontent-%COMP%]{margin-left:200px}.modal-action-headers[_ngcontent-%COMP%] > label[_ngcontent-%COMP%], .modal-action-headers[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-size:20px;font-weight:bold;margin-left:5px;min-width:150px}.modal-action-headers[_ngcontent-%COMP%] > input[type=checkbox][_ngcontent-%COMP%]:not(checked) + label[_ngcontent-%COMP%]{color:#777}.modal-action-headers[_ngcontent-%COMP%] > input[type=checkbox][_ngcontent-%COMP%]:checked + label[_ngcontent-%COMP%]{color:#000}.modal-action-headers[_ngcontent-%COMP%] > input[type=checkbox][_ngcontent-%COMP%]{transform:scale(1.5);padding:10px}.modal-action-headers[_ngcontent-%COMP%] > input[type=text][_ngcontent-%COMP%], .modal-action-headers[_ngcontent-%COMP%] > select[_ngcontent-%COMP%], .modal-action-headers[_ngcontent-%COMP%] > .input-group[_ngcontent-%COMP%]{margin-left:20px;width:100%}.modal-action-headers[_ngcontent-%COMP%] > .input-group[_ngcontent-%COMP%] > .input-group-append[_ngcontent-%COMP%] > span[_ngcontent-%COMP%]{font-weight:bold}.modal-delete-button[_ngcontent-%COMP%]{background-color:#db4500;color:#fff;font-weight:bold}.toggle-icons[_ngcontent-%COMP%]{position:absolute;width:100%}.dependency-topology-toggle-icon-topology[_ngcontent-%COMP%], .dependency-topology-toggle-icon-dependency[_ngcontent-%COMP%]{color:#fff;font-weight:bolder;position:relative;border-bottom-right-radius:10px;border-bottom-left-radius:10px;transform:scale(1);transition:transform .25s ease;z-index:0;width:100px;float:right;cursor:pointer;text-align:center;padding:10px;opacity:.6}.dependency-topology-toggle-icon-topology.active[_ngcontent-%COMP%], .dependency-topology-toggle-icon-dependency.active[_ngcontent-%COMP%]{transform:scale(1.25);transition:transform .25s ease;z-index:50;opacity:1}.dependency-topology-toggle-icon-dependency[_ngcontent-%COMP%]{background-color:#db4500;margin-right:20px}.dependency-topology-toggle-icon-topology[_ngcontent-%COMP%]{background-color:#31d100}.custom-menu[_ngcontent-%COMP%]{display:none;z-index:1000;position:absolute;overflow:hidden;border:1px solid #CCC;white-space:nowrap;font-family:sans-serif;background:#FFF;color:#333;border-radius:5px;padding:0}.custom-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]{padding:8px 12px;cursor:pointer;list-style-type:none;transition:all .3s ease;-webkit-user-select:none;-moz-user-select:none;user-select:none}.custom-menu[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:hover{background-color:#def}[_ngcontent-%COMP%]::-webkit-scrollbar{width:10px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:#c5c5c5;border-radius:10px}[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover{background:#797979}.graph-buttons[_ngcontent-%COMP%]{position:absolute;bottom:20px;z-index:10;width:100%}kbd[_ngcontent-%COMP%]{background-color:#eee;border-radius:3px;border:1px solid #b4b4b4;box-shadow:0 1px 1px #0003,0 2px #ffffffb3 inset;color:#333;display:inline-block;font-size:.85em;font-weight:700;line-height:1;padding:2px 4px;white-space:nowrap}.graph-action-button[_ngcontent-%COMP%]{background-color:#04aa6d;border:none;color:#fff;text-decoration:none;font-size:12px;font-weight:bold;padding:10px;border-radius:10px;cursor:pointer;margin:10px 15px;z-index:10;width:100px;text-align:center}.noselect[_ngcontent-%COMP%]{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;user-select:none}.graph-description-box[_ngcontent-%COMP%]{border:#5bc0de dashed 2px;border-radius:5px;padding:10px;background-color:#fff;opacity:.9;position:absolute;right:0;margin:60px 10px 10px;width:200px}.graph-description-box[_ngcontent-%COMP%]   .graph-description-box-icon[_ngcontent-%COMP%]{color:#5bc0de;text-align:center}.graph-description-box[_ngcontent-%COMP%]   .graph-description-box-content[_ngcontent-%COMP%]{float:left}.dependency-cycle-alert[_ngcontent-%COMP%]{border:solid 1px #ffcc00;padding:10px;border-radius:5px;width:-moz-fit-content;width:fit-content;margin:auto;color:#fc0}#dependencyGraphCycleContainer[_ngcontent-%COMP%]{position:absolute;right:0;bottom:0;text-align:center;font-size:18px}.topology-actor-action[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:space-between;align-items:center;margin:10px 0;padding:0 10px}.topology-actor-action[_ngcontent-%COMP%]   .topology-actor-action-label[_ngcontent-%COMP%]{width:25px;height:25px;background-color:#a6d5f7;display:flex;align-items:center;justify-content:center}.topology-actor-action[_ngcontent-%COMP%]   .topology-actor-action-name[_ngcontent-%COMP%]{flex-grow:1;margin:0 10px}.topology-actor-action[_ngcontent-%COMP%]   .topology-actor-action-edit[_ngcontent-%COMP%]{width:40px;display:flex;align-items:center;justify-content:center;color:#fc0;font-size:20px;cursor:pointer}.topology-actor-name-action[_ngcontent-%COMP%]{font-size:20px;cursor:pointer}.topology-actor-name-action.edit[_ngcontent-%COMP%]{color:#fc0}.topology-actor-name-action.cancel[_ngcontent-%COMP%]{color:#db4500;margin-left:15px}.topology-actor-name-action.save[_ngcontent-%COMP%]{color:#31d100;margin-left:15px}.topology-actor-name-action.disabled[_ngcontent-%COMP%]{cursor:not-allowed!important;opacity:.5}.topology-actor-name-action-error[_ngcontent-%COMP%]{font-size:12px;color:#db4500}\";\nQuill.register(\"modules/counter\", EditorService);\nexport let HlbComponent = /*#__PURE__*/(() => {\n  class HlbComponent {\n    constructor(http, dialog, stateservice, _snackBar, changeDetection, logger, authService) {\n      this.http = http;\n      this.dialog = dialog;\n      this.stateservice = stateservice;\n      this._snackBar = _snackBar;\n      this.changeDetection = changeDetection;\n      this.logger = logger;\n      this.isKeyPressed = false;\n      this.actorsGroup = new Map();\n      this.graphColors = [\"#F0C929\", \"#F48B29\", \"#AC0D0D\", \"#693C72\", \"#55B3B1\", \"#F08A5D\", \"#B83B5E\", \"#54E346\", \"#1F1D36\", \"#420516\", \"#91091E\", \"#EE8572\", \"#35495E\", \"#347474\", \"#480032\", \"#FF4C29\", \"#FB3640\", \"#126E82\", \"#05004E\", \"#FF005C\", \"#240041\", \"#F4E557\", \"#B983FF\", \"#1DB9C3\", \"#005F99\"];\n      this.currentActionNameInModal = \"\";\n      this.triggerSignals = [];\n      this.scenariosObjFormat = [];\n      this.constraintsObjFormat = [];\n      this.defaultTextColor = {};\n      this.actorTextFilter = \"\";\n      this.behaviorTextFilter = {\n        name: \"behavior\",\n        text: \"\"\n      };\n      this.constraintTextFilter = {\n        name: \"constraint\",\n        text: \"\"\n      };\n      this.behaviorList = [];\n      this.constraintWordList = [];\n      this.actorsList = [];\n      this.contraintList = [];\n      this.bindingList = [];\n      this.canvasClickFlag = true;\n      this.bindingMap = new Map();\n      this.behaviorWordList = [];\n      this.inputText = \"\";\n      this.actors = \"\";\n      this.selectedIndex = 0;\n      this.experimentAccess = 4;\n      this.showAlertMsg = false;\n      this.showSpecialFuncDialog = false;\n\n      this.displayMessage = message => {\n        $(\"#graphActionButtonList\").hide();\n        $(\"#actionMessage\").html(message);\n        $(\"#actionMessage\").show();\n      };\n\n      this.clearMessage = () => {\n        $(\"#graphActionButtonList\").show();\n        $(\"#actionMessage\").html(\"<span>Hold <kbd>Space</kbd> and click-and-drag between nodes to add edges, Select a node/edge and press <kbd>Del</kbd> to delete</span>\"); //$(\"#actionMessage\").hide();\n      };\n\n      this.onDependencyClick = properties => __awaiter(this, void 0, void 0, function* () {\n        var ids = properties.nodes;\n        var clickedNodes = this.dependencyGraphNodes.get(ids);\n        clickedNodes.length ? $('.dialog-box-action-button, .modal-add-button, .dependency-edit-action-button').css('background-color', graphColors[clickedNodes[0]['group'].replace('group', '')]) && (this.selectedDependencyNodeData = clickedNodes[0]['data']) && $('.dependency-edit-action-button').removeClass('hide') : $('.dependency-edit-action-button').addClass('hide');\n      });\n\n      this.onTopologyClick = properties => __awaiter(this, void 0, void 0, function* () {\n        var ids = properties.nodes;\n        var clickedNodes = this.topologyGraphNodes.get(ids);\n        var items = properties.items; //Show Dialog Box\n\n        var $dialogBox = $('.dialog-box');\n        $dialogBox.hasClass('hide') && $dialogBox.toggleClass('hide');\n        clickedNodes.length || items.length || $dialogBox.toggleClass('hide'); //Show Node/Link Content\n\n        if (clickedNodes.length) {\n          accessibleLogger.log(LogHeader.KEY_PRESS, \"User Clicked on a Node\");\n          $('.dialog-box-action-button').removeClass('hide');\n          var nodeGroup = clickedNodes[0]['group'];\n          nodeGroup.includes('group') && $('.dialog-box-action-button, .modal-add-button').css('background-color', graphColors[nodeGroup.replace('group', '')]);\n          $('#dialog-box-title').html(clickedNodes[0].label) && (currentGraphItemSelection['id'] = clickedNodes[0].id) && (currentGraphItemSelection['type'] = 'node');\n\n          for (var i in id_of_node) {\n            if (id_of_node[i] == currentGraphItemSelection['id'] && clickedNodes[0].group == 'LAN') {\n              accessibleLogger.log(LogHeader.KEY_PRESS, \"User Clicked on a LAN\");\n              $('#dialog-box-title').html('LAN') && (currentGraphItemSelection['type'] = 'lan');\n              $('.dialog-box-action-button').addClass('hide');\n              break;\n            }\n          }\n        }\n\n        if (items.length && clickedNodes.length == 0) {\n          accessibleLogger.log(LogHeader.KEY_PRESS, \"User Clicked on a Link\");\n          $('#dialog-box-title').html('Link') && (currentGraphItemSelection['id'] = items[0].edgeId) && (currentGraphItemSelection['type'] = 'link');\n          $('.dialog-box-action-button').addClass('hide');\n          var selectedEdge = items[0]['edgeId'];\n          var id_of_nodes_rev = swapJSON(id_of_node);\n\n          for (var i in id_of_edge) {\n            if (id_of_edge[i]['id'] == selectedEdge && id_of_nodes_rev[id_of_edge[i]['to']].includes('lan')) {\n              $dialogBox.toggleClass('hide');\n              break;\n            }\n          }\n        }\n\n        if (items.length && clickedNodes.length == 0 || currentGraphItemSelection['type'] == 'lan') {\n          $('.dialog-box-fields:not(is-node)').removeClass('hide');\n          $('.dialog-box-fields.is-node').addClass('hide');\n        } else if (clickedNodes.length) {\n          $('.dialog-box-fields:not(is-node)').addClass('hide');\n          $('.dialog-box-fields.is-node').removeClass('hide');\n        }\n\n        if (ids[0]) {\n          const selectedNode = this.topologyGraphNodes.get(ids[0]);\n          const selectedNodeData = {\n            id: selectedNode.id,\n            name: String(selectedNode.label),\n            nameEditable: false,\n            nameEditableError: null,\n            nodetype: selectedNode.group == 'LAN' ? 'LAN' : 'NODE',\n            actions: Array()\n          };\n\n          if (selectedNode.group != 'LAN') {\n            selectedNodeData.actions = this.dependencyGraphNodes.get({\n              filter: item => item.data.actors[0] == selectedNode.label\n            }).map(item => {\n              return {\n                id: item.id,\n                action: item.label,\n                topologyLabel: item.topologyLabel\n              };\n            });\n          }\n\n          this.topologyGraphSelectedNodeData = selectedNodeData;\n        } else {\n          this.topologyGraphSelectedNodeData = null;\n        }\n\n        showRelevantContentInDialogBox(); //Content to Display on the Context Menu\n        //Hide dialogBox and customMenu\n        //$(\".custom-menu\").is(':visible') && $(\".custom-menu\").finish().toggle(100);\n      });\n\n      this.onTopologyNodeChange = () => {\n        if (!this.topologyGraphSelectedNodeData.name) {\n          this.topologyGraphSelectedNodeData.nameEditableError = \"Required\";\n          return;\n        }\n\n        const duplicateNodes = this.topologyGraphNodes.get({\n          filter: node => node.id != this.topologyGraphSelectedNodeData.id && node.label == this.topologyGraphSelectedNodeData.name\n        });\n\n        if (duplicateNodes.length) {\n          this.topologyGraphSelectedNodeData.nameEditableError = \"Duplicate node name\";\n        } else {\n          this.topologyGraphSelectedNodeData.nameEditableError = null;\n        }\n      };\n\n      this.onTopologyNodeSave = () => {\n        if (!this.topologyGraphSelectedNodeData.nameEditableError) {\n          const new_name = this.topologyGraphSelectedNodeData.name;\n          const old_name = this.topologyGraphNodes.get(this.topologyGraphSelectedNodeData.id)['label'];\n          const node_id = this.topologyGraphSelectedNodeData.id;\n          this.actorsList[this.actorsList.findIndex(item => item['text'] == old_name)]['text'] = new_name;\n          let index = Object.keys(this.graphItemParametersList).find(key => this.graphItemParametersList[key]['nodeName'] === old_name);\n          this.graphItemParametersList[index]['nodeName'] = new_name;\n          globalGraphItemParametersList = this.graphItemParametersList;\n          let temp = swapJSON(id_of_node);\n          temp[currentGraphItemSelection['id']] = new_name;\n          id_of_node = swapJSON(temp);\n          var request = {\n            constraints: this.getConstraintsFromEditor(),\n            scenarios: this.getScenariosFromEditor(),\n            old_name: old_name,\n            new_name: new_name\n          };\n          this.http.put('v1/pr/hlb/topology/node-rename', request, {\n            withCredential: true\n          }).subscribe(receivedData => {\n            this.actorsGroup.set(new_name, this.actorsGroup.get(old_name));\n            this.actorsGroup.delete(old_name);\n            this.stateservice.setBehavior(receivedData['scenarios']);\n            this.stateservice.setConstraints(receivedData['constraints']);\n            this.topologyGraphNodes.update({\n              id: node_id,\n              label: new_name\n            });\n            $('#dialog-box-title').html(new_name);\n            this.topologyGraphSelectedNodeData.nameEditable = false;\n            setTimeout(() => {\n              this.updateGraph(false, true);\n            }, 500);\n          });\n        }\n      };\n\n      this.onTopologyNodeCancel = () => {\n        this.topologyGraphSelectedNodeData.nameEditable = false;\n        this.topologyGraphSelectedNodeData.name = this.topologyGraphNodes.get(this.topologyGraphSelectedNodeData.id)['label'];\n      };\n\n      this.onAddNodeClick = type => {\n        accessibleLogger.log(LogHeader.GRAPH_UPDATE, \"User initiated node addition. Node type - \" + type);\n\n        if (type == \"Node\") {\n          this.addNodeType = \"Node\";\n          this.displayMessage(\"Click anywhere to add a node, press <kbd>ESC</kbd> to cancel.\");\n        } else {\n          this.addNodeType = \"LAN\";\n          this.displayMessage(\"Click anywhere to add a LAN, press <kbd>ESC</kbd> to cancel.\");\n        }\n\n        this.topologyNetworkInstance.addNodeMode();\n        $(\"#graph-container\").focus();\n      };\n\n      this.authService = authService;\n      this.graphItemParametersList = GRAPH_ITEM_PARAMETERS_LIST;\n      accessibleLogger = logger;\n      graphColors = this.graphColors;\n    }\n\n    onKeydownHandler(event) {\n      this.addNodeType = null;\n      this.clearMessage();\n      this.topologyNetworkInstance.disableEditMode();\n    }\n\n    resetFilterList() {\n      this.logger.log(LogHeader.INFO, \"Retreiving binding data from server\");\n      this.http.put('v1/pr/hlb/getBindingOptions', null, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        this.filterBindingOptions = receivedData['event'];\n        this.filterBindingOptionsForEvent = receivedData['trigger'];\n        this.filterBindingOptionsForEventCleaned = this.filterBindingOptionsForEvent.map(value => {\n          return value.split(' - ')[0];\n        });\n        this.specialFunctions = receivedData['specialFunctions'];\n        this.filteredBindingHandle = of(this.filterBindingOptions);\n        this.filteredBindingHandleForEvent = of(this.filterBindingOptionsForEvent);\n      });\n    }\n\n    searchFilter(value, category) {\n      if (category === 'event' || category === 't_event') {\n        this.filteredBindingHandleForEvent = of(this._filter(value, this.filterBindingOptionsForEvent));\n      } else {\n        this.filteredBindingHandle = of(this._filter(value, this.filterBindingOptions));\n      }\n    }\n\n    convertStringToJsonObject(text) {\n      const wordArray = text.trim().split(' ');\n      const result = [];\n      wordArray.forEach(element => {\n        if (this.defaultTextColor[element] !== undefined && this.defaultTextColor[element] !== null && this.defaultTextColor[element].trim() !== '') {\n          result.push({\n            insert: element + ' ',\n            attributes: {\n              color: this.defaultTextColor[element],\n              bold: true\n            }\n          });\n        } else {\n          result.push({\n            insert: element + ' '\n          });\n        }\n      });\n      return result;\n    }\n\n    convertTextToMap(textJson) {\n      const map = new Map();\n      console.log(textJson);\n      textJson.forEach(element => {\n        map.set(element['text'] + \"_row_\" + element['row'], element);\n      });\n      return map;\n    }\n\n    openSideNavBar() {\n      $('.side-nav-icon > img').toggleClass('hide');\n      this.logger.log(LogHeader.KEY_PRESS, \"User opened/closed the side navigation bar\");\n      setTimeout(() => {\n        this.selectedNetworkInstance.fit();\n      }, 600);\n    }\n\n    addColor(stringArray, row, map) {\n      let occurenceMap = new Map();\n      stringArray.forEach(element => {\n        if (occurenceMap.has(element.insert.trim())) {\n          occurenceMap.set(element.insert.trim(), occurenceMap.get(element.insert.trim()) + 1);\n        } else {\n          occurenceMap.set(element.insert.trim(), 1);\n        }\n\n        if (map.has(element.insert.trim() + \"_row_\" + row)) {\n          let detail = map.get(element.insert.trim() + \"_row_\" + row);\n\n          if (detail['occurence'] == -1) {\n            element[\"attributes\"] = {\n              \"color\": detail['color'],\n              \"bold\": true\n            };\n          } else {\n            if (occurenceMap.get(element.insert.trim()) == detail['occurence']) {\n              element[\"attributes\"] = {\n                \"color\": detail['color'],\n                \"bold\": true\n              };\n            }\n          }\n        }\n      });\n      return stringArray;\n    }\n\n    colorText(data, textJson) {\n      let map = this.convertTextToMap(textJson);\n      var textArray = [];\n      let row = 1;\n      data.forEach(element => {\n        let stringArray = this.convertStringToJsonObject(element);\n        textArray = [...textArray, ...this.addColor(stringArray, row, map), {\n          insert: '\\n'\n        }];\n        row++;\n      });\n      return textArray;\n    }\n\n    ngOnInit() {\n      this.logger.log(LogHeader.INFO, \"User entered the experiment page\");\n      this.authService.setRefreshTokenIntervals();\n      this.resetFilterList();\n      this.bindingMap = new Map();\n      this.behaviorList = [];\n      const instance = this;\n      this.stateservice.getBehavior().subscribe(data => {\n        if (data != null) {\n          var text = \"\";\n          var textArray = [];\n          data.forEach(element => {\n            textArray = [...textArray, ...this.convertStringToJsonObject(element), {\n              insert: '\\n'\n            }];\n            text += element + \"<br>\";\n          });\n          this.scenariosObjFormat = textArray;\n          instance.behaviorText = text;\n        }\n      });\n      this.stateservice.getBindings().subscribe(data => {\n        if (data != null) {\n          this.bindingList = [];\n          this.filterBindingOptionsForEvent = [];\n          this.bindingMap = new Map();\n          this.filterBindingOptionsForEvent = [];\n          data.forEach(element => {\n            this.bindingMap.set(element.key, element);\n            this.bindingList.push(element);\n\n            if (element.category != 'event' && element.category != 't_event') {\n              // Jelena\n              this.filterBindingOptionsForEvent.push('pexists(' + element.key + ')');\n              this.filterBindingOptionsForEvent.push('psuccess(' + element.key + ')');\n            }\n\n            ;\n          });\n        }\n      });\n      this.stateservice.getActors().subscribe(data => {\n        // //console.log(data);\n        if (data != null) {\n          instance.actorsList = [];\n          data.forEach(element => {\n            this.actorsList.push({\n              text: element\n            });\n          });\n        }\n      });\n      this.stateservice.getConstraints().subscribe(data => {\n        // //console.log(data);\n        if (data != null) {\n          let text = '';\n          let textArray = [];\n          data.forEach(element => {\n            textArray = [...textArray, ...this.convertStringToJsonObject(element), {\n              insert: '\\n'\n            }];\n            text += element + '<br>';\n          });\n          instance.constraintText = text;\n          this.constraintsObjFormat = textArray;\n        }\n      });\n      this.stateservice.getExperimentControl().subscribe(flag => {\n        this.experimentAccess = flag;\n      }); //Detect Uploads\n\n      this.stateservice.getUpload().subscribe(flag => {\n        if (flag) {\n          this.stateservice.setUpload(false);\n          setTimeout(() => {\n            this.detectDEWVersion();\n            this.updateActors();\n            this.updateActorsConstraint();\n          }, 1000);\n        }\n      });\n    }\n\n    ngAfterViewInit() {\n      //JQuery Functions\n      $('.convert-btn > div').on('click', () => {\n        var $convertButtonDiv = $('.convert-btn').parent();\n        this.logger.log(LogHeader.KEY_PRESS, \"User tried converting the constraints from DEW 1.0 to 2.0\"); //Animate Button\n\n        $('.convert-btn > div').animate({\n          deg: '+=360'\n        }, {\n          duration: 600,\n          step: function (now) {\n            $(this).css({\n              transform: 'rotate(' + now + 'deg)'\n            });\n          }\n        }); //Update DEW\n\n        const data = {\n          constraints: []\n        };\n        const constraints = this.getConstraintsFromEditor();\n        this.logger.log(LogHeader.DATA_SENT, constraints);\n        data.constraints = constraints;\n        this.http.put('v1/pr/convert/dew1to2', data, {\n          withCredential: true\n        }).subscribe(receivedData => {\n          $('.error-text').addClass('hide');\n          this.stateservice.setConstraints(receivedData.parsedConstraints);\n          this.logger.log(LogHeader.DATA_RECEIVED, receivedData.parsedConstraints);\n          setTimeout(() => {\n            this.updateActorsConstraint();\n            $convertButtonDiv.addClass('hide');\n          }, 1000);\n        }, error => {\n          $convertButtonDiv.find('.error-text').removeClass('hide');\n          setTimeout(() => {\n            $convertButtonDiv.find('.error-text').addClass('hide');\n          }, 3000);\n          this.logger.log(LogHeader.DATA_RECEIVED, \"Error converting constraints\");\n        });\n      });\n      $('#modal-action-wait-checkbox').on('change', event => {\n        $('#modal-action-wait-input').attr('disabled', !event.currentTarget.checked);\n      });\n      $('#modal-action-emit-checkbox').on('change', event => {\n        $('#modal-action-emit-input').attr('disabled', !event.currentTarget.checked);\n\n        if (!event.currentTarget.checked) {\n          $('#modal-action-event-checkbox').prop('checked', false);\n          $('#modal-event-binding-input').attr('disabled', true);\n        }\n\n        $('#modal-action-event-checkbox').attr('disabled', !event.currentTarget.checked);\n      });\n      $('#modal-action-trigger-checkbox').on('change', event => {\n        $('#modal-action-trigger-selections').attr('disabled', !event.currentTarget.checked);\n      });\n      $('#modal-action-event-checkbox').on('change', event => {\n        $('#modal-event-binding-input').attr('disabled', !event.currentTarget.checked);\n      });\n      $('#modal-action-name-input').on('change', event => {\n        this.currentActionNameInModal = event.target.value;\n        let binding = this.bindingList.find(item => item.key === this.currentActionNameInModal);\n        binding && $('#modal-action-binding-input').val(binding.value);\n      });\n      this.toggleTopologyView();\n    }\n\n    detectDEWVersion() {\n      const data = {\n        constraints: []\n      };\n      var constraints = this.getConstraintsFromEditor();\n      this.logger.log(LogHeader.INFO, 'Attempting to detect the DEW version');\n      data.constraints = constraints;\n      this.http.put('v1/pr/convert/detectDEWVersion', data, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        var $convertDEWDiv = $('.convert-btn').parent();\n\n        switch (receivedData['version']) {\n          case 1:\n            $convertDEWDiv.removeClass('hide');\n            break;\n\n          default:\n            $convertDEWDiv.addClass('hide');\n            break;\n        }\n      }, error => {\n        this.logger.log(LogHeader.DATA_RECEIVED, \"Error detecting DEW version\");\n      });\n    }\n\n    clearModalContent() {\n      $('.modal-title').html('Add Action');\n      $('.modal-delete-button').hide();\n      $('.modal-add-button').html('Add');\n      $('#modal-action-name-input').val('');\n      $('#modal-action-binding-input').val('');\n      $('#modal-action-wait-input').val('');\n      $('#modal-action-emit-input').val('');\n      $('#modal-event-binding-input').val('');\n      $(\"#modal-action-trigger-selections option:selected\").prop(\"selected\", false);\n      $(\".modal-action-headers > input[type='checkbox']:checked\").prop('checked', false).change();\n      $(\"#modal-actor-input > option:selected\").prop(\"selected\", false);\n      $(\"#modal-actor-input > option\").filter(function () {\n        return $(this).html() === swapJSON(id_of_node)[currentGraphItemSelection['id']];\n      }).prop(\"selected\", true);\n      $(\"#modal-actor-input\").attr('disabled', $('.graph-box-dependency').hasClass('hide'));\n    }\n\n    onEditActionFromTopologyDependencyClick(data) {\n      var nodeData = this.allDependencyNodeData.filter(item => parseInt(item.id) == parseInt(data))[0]['data'];\n      this.populateAndShowEditActionModal(nodeData);\n    }\n\n    deleteActionFromUI() {\n      const actor = $(\"#modal-actor-input > option:selected\").html();\n      const action = $('#modal-action-name-input').val().trim();\n      this.onDependencyNodeDelete(actor, action);\n      setTimeout(() => {\n        this.updateActorsConstraint();\n      }, 500);\n      $('.modal').modal('toggle');\n    }\n\n    addActionFromUI() {\n      var actionData = {};\n      var action = $('#modal-action-name-input').val().trim();\n      $('#modal-action-name-input').val(action);\n      actionData['action'] = action;\n      actionData['actor'] = $(\"#modal-actor-input > option:selected\").html();\n\n      if (actionData['action'] == '') {\n        $('.modal-add-action-error').removeClass('hide');\n        setTimeout(() => {\n          $('.modal-add-action-error').addClass('hide');\n        }, 3000);\n      } else {\n        $('.modal').modal('toggle');\n        actionData['actionBinding'] = $('#modal-action-binding-input').val().trim();\n        actionData['doesActionBindingExist'] = actionData['actionBinding'] != '';\n        actionData['emit'] = $('#modal-action-emit-input').val().trim();\n        actionData['doesEmitExist'] = actionData['emit'] != '' && $('#modal-action-emit-checkbox').prop('checked');\n        actionData['wait'] = $('#modal-action-wait-input').val().trim();\n        actionData['doesWaitExist'] = actionData['wait'] != '' && $('#modal-action-wait-checkbox').prop('checked');\n        actionData['eventBinding'] = $('#modal-event-binding-input').val().trim();\n        actionData['doesEventBindingExist'] = actionData['eventBinding'] != '' && $('#modal-action-event-checkbox').prop('checked');\n        var triggers = [];\n\n        for (var item of $(\"#modal-action-trigger-selections option:selected\")) {\n          triggers.push(item.innerHTML);\n        }\n\n        actionData['triggers'] = triggers;\n        actionData['doesTriggerExist'] = actionData['triggers'].length > 0 && $('#modal-action-trigger-checkbox').prop('checked');\n\n        if ($('.modal-title').html() == 'Edit Action') {\n          if (this.oldEmit != actionData['emit'] && actionData['emit'] == \"\") {\n            this.onDependencyNodeDelete(this.oldActor, this.oldAction);\n          } else {\n            var scenario = this.getScenariosFromEditor();\n            var filtered = [];\n\n            for (var i = 0; i < scenario.length; i++) {\n              if (!(scenario[i].includes(this.oldActor + \" \") && scenario[i].includes(\" \" + this.oldAction))) {\n                if (this.oldEmit != \"\") {\n                  scenario[i] = scenario[i].replace(this.oldEmit, actionData['emit']);\n                }\n\n                filtered.push(scenario[i]);\n              }\n            }\n\n            this.stateservice.setBehavior(filtered);\n          }\n\n          setTimeout(() => {\n            this.updateScenarioFromAddActionUI(actionData);\n          }, 500);\n        } else {\n          this.updateScenarioFromAddActionUI(actionData);\n        }\n      }\n    }\n\n    updateScenarioFromAddActionUI(actionData) {\n      var newLine = this.buildScenarioLine(actionData);\n      var scenario = this.getScenariosFromEditor();\n      scenario.push(newLine);\n      this.stateservice.setBehavior(scenario);\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"User added a new scenario line from UI - \" + newLine);\n      setTimeout(() => {\n        this.updateActorsConstraint();\n      }, 1000);\n    }\n\n    buildScenarioLine(action) {\n      var result = \"\";\n      var triggerStmt = \"when \";\n      var waitStmt = \"wait \";\n      var emitStmt = \"emit \";\n\n      if (action['doesTriggerExist']) {\n        result = result + triggerStmt;\n\n        for (var item of action['triggers']) {\n          result = result + item + \", \";\n        }\n\n        result = result.substring(0, result.length - 2);\n        result += \" \";\n      }\n\n      if (action['doesWaitExist']) {\n        result += waitStmt + action['wait'] + \" \";\n      }\n\n      result += action['actor'] + \" \" + action['action'] + \" \";\n\n      if (action['doesEmitExist']) {\n        result += emitStmt + action['emit'] + \" \";\n      }\n\n      result = result.substring(0, result.length - 1);\n      var eventBinding = eventBinding = {\n        'key': action['emit'],\n        'category': 'event',\n        'value': action['doesEventBindingExist'] ? action['eventBinding'] : ''\n      };\n      var actionBinding = {\n        'key': action['action'],\n        'category': 'action',\n        'value': action['doesActionBindingExist'] ? action['actionBinding'] : ''\n      };\n      var temp = this.bindingList.filter(item => {\n        return item['category'] == 'action' && item['key'] == action['action'];\n      });\n\n      if (temp.length) {\n        var index = this.bindingList.indexOf(temp[0]);\n        this.bindingList.splice(index, 1);\n      }\n\n      temp = this.bindingList.filter(item => {\n        return item['category'] == 'event' && item['key'] == action['emit'];\n      });\n\n      if (temp.length) {\n        var index = this.bindingList.indexOf(temp[0]);\n        this.bindingList.splice(index, 1);\n      }\n\n      this.bindingList.push(actionBinding);\n      action['doesEmitExist'] && this.bindingList.push(eventBinding);\n      this.stateservice.setBindings(this.bindingList);\n      return result;\n    }\n\n    isExperimentDisabled() {\n      return this.experimentAccess == 2;\n    }\n\n    drop(event, list) {\n      moveItemInArray(list, event.previousIndex, event.currentIndex);\n    }\n\n    _filter(value, options) {\n      const filterValue = value.toLowerCase();\n      return options.filter(option => option.toLowerCase().includes(filterValue));\n    }\n\n    created(editor, id) {\n      // //console.log(id);\n      var instance = this;\n\n      switch (id) {\n        case 1:\n          this.actorService = editor.getModule(\"counter\");\n          break;\n\n        case 2:\n          this.behaviorService = editor.getModule(\"counter\");\n          this.behaviorService.isBlur().subscribe(data => {\n            // if (data && instance.behaviorService.isTextChanged())\n            //   this.updateActors();\n            if (!data) this.textBoxId = 2;else this.textBoxId = -1;\n          });\n          this.behaviorService.isEnterPressed().subscribe(flag => {\n            if (flag && instance.behaviorService.isTextChanged()) {\n              if (this.behaviorService.getText().trim() === \"\") return;\n              var index = this.behaviorService.getText().length - 2;\n              if (this.behaviorService.getText().charAt(index) == \"\\n\") this.updateActors();\n            }\n          });\n          this.behaviorService.isTabPressed().subscribe(flag => {\n            if (flag) {\n              //console.log(\"inside istab\");\n              if (this.stateservice.getCurrentBehaviorWord().trim() != \"\") this.insertValue(this.stateservice.getCurrentBehaviorWord(), true); //this.behaviorService\n            }\n          });\n          this.behaviorService.getSuggestionData().subscribe(data => {\n            if (data == null) {\n              data = {\n                currentSentence: \"\",\n                remainingSentences: []\n              };\n            }\n\n            if (data != null) {\n              var params = {\n                type: \"behavior\",\n                suggestion_for: data.currentSentence,\n                behaviors: data.remainingSentences,\n                constraints: [],\n                actors: []\n              };\n              this.stateservice.getConstraints().subscribe(constraints => {\n                if (constraints != null || constraints != undefined) {\n                  params.constraints = constraints;\n                }\n              });\n              this.behaviorTextFilter.text = \"\";\n              this.http.put(\"v1/pr/hlb/suggestions\", params, {\n                withCredential: true\n              }).subscribe(data => {\n                var list = [];\n                data.suggestions.forEach(element => {\n                  list.push({\n                    value: element,\n                    flag: false\n                  });\n                });\n                if (data.suggestion_text.trim() != \"\") this.suggestionbehaviorMessage = data.suggestion_text;else this.suggestionbehaviorMessage = null;\n                this.behaviorWordList = list;\n                this.changeDetection.detectChanges();\n              });\n            }\n          });\n          this.behaviorService.getCurrentWord().subscribe(data => {\n            //console.log(data);\n            if (data != null && data.trim()) {\n              this.behaviorTextFilter.text = data;\n            }\n          });\n          break;\n\n        case 3:\n          this.constraintService = editor.getModule(\"counter\");\n          this.constraintService.isBlur().subscribe(data => {\n            // if (data && instance.constraintService.isTextChanged())\n            //   this.updateActorsConstraint();\n            if (!data) this.textBoxId = 3;else this.textBoxId = -1;\n          });\n          this.constraintService.isEnterPressed().subscribe(flag => {\n            if (flag && instance.constraintService.isTextChanged()) {\n              if (this.constraintService.getText().trim() === \"\") return;\n              var index = this.constraintService.getText().length - 2;\n              if (this.constraintService.getText().charAt(index) == \"\\n\") this.updateActorsConstraint();\n            }\n          });\n          this.constraintService.isTabPressed().subscribe(flag => {\n            if (flag) {\n              if (this.stateservice.getCurrentConstraintWord().trim() != \"\") {\n                this.insertValueInConstraint(this.stateservice.getCurrentConstraintWord(), true);\n              }\n            }\n          });\n          this.constraintService.getSuggestionData().subscribe(data => {\n            if (data == null) {\n              data = {\n                currentSentence: \"\",\n                remainingSentences: []\n              };\n            }\n\n            if (data != null) {\n              var params = {\n                type: \"constraint\",\n                suggestion_for: data.currentSentence,\n                behaviors: [],\n                constraints: data.remainingSentences,\n                actors: []\n              };\n              var behaviors = this.behaviorService.getText().trim();\n\n              if (behaviors != \"\") {\n                var behaviorsList = behaviors.split(\"\\n\");\n                params.behaviors = behaviorsList;\n              }\n\n              this.constraintTextFilter.text = \"\";\n              this.http.put(\"v1/pr/hlb/suggestions\", params, {\n                withCredential: true\n              }).subscribe(data => {\n                var list = [];\n                data.suggestions.forEach(element => {\n                  list.push({\n                    value: element,\n                    flag: false\n                  });\n                });\n                if (data.suggestion_text.trim() != \"\") this.suggestionConstraintMessage = data.suggestion_text;else this.suggestionConstraintMessage = null;\n                this.constraintWordList = list;\n                this.changeDetection.detectChanges();\n              });\n            }\n          });\n          this.constraintService.getCurrentWord().subscribe(data => {\n            if (data != null && data.trim()) {\n              this.constraintTextFilter.text = data;\n            }\n          });\n          break;\n      }\n\n      this.updateActors();\n    }\n\n    getScenariosFromEditor() {\n      const bList = [];\n      this.behaviorService.getText().trim().split('\\n').forEach(element => {\n        const text = element.trim();\n\n        if (text !== '') {\n          bList.push(text);\n        }\n      });\n      return bList;\n    }\n\n    getConstraintsFromEditor() {\n      const cList = [];\n      this.constraintService.getText().trim().split('\\n').forEach(element => {\n        const text = element.trim();\n\n        if (text !== '') {\n          cList.push(text);\n        }\n      });\n      return cList;\n    }\n\n    checkIfAllKeywordPresentInStrings(values) {\n      for (const value of values) {\n        if (value.includes('ALL') || value.includes('all')) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    updateActors() {\n      // if (this.behaviorService.getText().trim() === '') {\n      //   this.actorsList = [];\n      //   return;\n      // }\n      setTimeout(() => {\n        if ($(\"#scenario-quill-box .ql-editor\")[0] !== document.activeElement) {\n          const data = {\n            ParseType: 'bash',\n            Scenario: [],\n            Constraints: []\n          };\n          const scenarios = this.getScenariosFromEditor(); // const constraints = this.getConstraintsFromEditor();\n          // if (this.stateservice.getAllAnyPresentFlag() && (!this.checkIfAllKeywordPresentInStrings(scenarios) ||\n          //     !this.checkIfAllKeywordPresentInStrings(constraints))) {\n          //   // this.alertMessage = 'You have an unresolved choice between ALL or ANY for either a link or an event.' +\n          //   //                     ' Please resolved it to process the bindings.';\n          //   this.alertMessage = 'You have not inserted an ALL keyword for either a link command, lan command, ' +\n          //                       'os command or an event. Please resolve it to process the bindings.';\n          //   this.showAlertMsg = true;\n          //   return;\n          // } else {\n          //   this.showAlertMsg = false;\n          //   this.stateservice.setAllAnyPresentFlag(false);\n          // }\n\n          data.Constraints = this.getConstraintsFromEditor();\n          data.Scenario = this.behaviorList = scenarios;\n          this.stateservice.setBehavior(this.behaviorList);\n          this.http.put('v1/pr/hlb/parse', data, {\n            withCredential: true\n          }).subscribe(receivedData => {\n            this.extractInfo(receivedData); //this.suggestAll(receivedData);\n          });\n        }\n      }, 500);\n    }\n\n    updateActorsConstraint() {\n      // if (this.constraintService.getText().trim() === '') {\n      //   this.stateservice.setConstraints(this.getConstraintsFromEditor());\n      //   this.actorsList = [];\n      //   return;\n      // }\n      setTimeout(() => {\n        if ($(\"#constraint-quill-box .ql-editor\")[0] !== document.activeElement) {\n          this.detectDEWVersion();\n          const data = {\n            ParseType: 'bash',\n            Scenario: [],\n            Constraints: []\n          };\n          const scenarios = this.getScenariosFromEditor();\n          const constraints = this.getConstraintsFromEditor(); // if (this.stateservice.getAllAnyPresentFlag() && (!this.checkIfAllKeywordPresentInStrings(scenarios) ||\n          //     !this.checkIfAllKeywordPresentInStrings(constraints))) {\n          //   // this.alertMessage = 'You have an unresolved choice between ALL or ANY for either a link or an event.' +\n          //   //                     ' Please resolved it to process the bindings.';\n          //   this.alertMessage = 'You have not inserted an ALL keyword for either a link command, lan command, ' +\n          //                       'os command or an event. Please resolve it to process the bindings.';\n          //   this.showAlertMsg = true;\n          //   return;\n          // } else {\n          //   this.showAlertMsg = false;\n          //   this.stateservice.setAllAnyPresentFlag(false);\n          // }\n\n          data.Scenario = scenarios;\n          data.Constraints = this.contraintList = constraints;\n          this.stateservice.setConstraints(this.contraintList);\n          this.http.put('v1/pr/hlb/parse', data, {\n            withCredential: true\n          }).subscribe(receivedData => {\n            //this.suggestAll(receivedData);\n            this.extractInfo(receivedData);\n          });\n        }\n      }, 500);\n    }\n\n    extractInfo(data) {\n      this.actorsList = [];\n      this.getActionBindingDataFromScenario(data['parsedScenario']);\n      this.logger.log(LogHeader.TEXT_UPDATED, \"Constraints/Scenario Updated\");\n      this.logger.log(LogHeader.DATA_RECEIVED, \"Parsed Scenario - \" + data.parsedScenario + \" | Parsed Constraints - \" + data.parsedConstraints);\n      this.updateGraph();\n      this.extractScenario(data.parsedScenario);\n      this.storeBinding(undefined);\n      this.detectDEWVersion();\n    }\n\n    getActionBindingDataFromScenario(data) {\n      this.actionInBindingHelper = {};\n      data.forEach(element => {\n        this.actionInBindingHelper[element[3]] = element[2][0];\n      });\n      console.log(this.actionInBindingHelper);\n    }\n\n    assignNewActorInTopologyGraph(isLAN) {\n      var name;\n      var max_count = 0;\n\n      for (var i in id_of_node) {\n        max_count = Math.max(max_count, id_of_node[i]);\n      }\n\n      for (var i in id_of_edge) {\n        max_count = Math.max(max_count, id_of_edge[i]['id']);\n      }\n\n      name = isLAN ? \"lan\" + (max_count + 1) : \"actor\" + (max_count + 1);\n\n      while (true) {\n        let counter = max_count + 1;\n        const duplicateNodes = this.topologyGraphNodes.get({\n          filter: node => node.label == name\n        });\n\n        if (duplicateNodes.length) {\n          counter++;\n          name = \"actor\" + counter;\n        } else {\n          break;\n        }\n      }\n\n      id_of_node[name] = max_count + 1;\n      this.createNewGraphTypeObject(isLAN, name);\n      return [isLAN ? \"\" : name, max_count + 1];\n    }\n\n    assignNewEdgeInTopologyGraph(from, to) {\n      var max_count = 0;\n\n      for (var i in id_of_edge) {\n        max_count = Math.max(max_count, id_of_edge[i]['id']);\n      }\n\n      for (var i in id_of_node) {\n        max_count = Math.max(max_count, id_of_node[i]);\n      }\n\n      var swappedNodes = swapJSON(id_of_node);\n      var name = swappedNodes[from] + '-' + swappedNodes[to];\n      id_of_edge[name] = {\n        from: from,\n        to: to,\n        id: max_count + 1\n      };\n      console.log(id_of_edge);\n      var temp = this.stateservice.getConstraints().source['_value'];\n      temp.push('link ' + swappedNodes[from] + ' ' + swappedNodes[to] + \" [ ]\"); // this.stateservice.setConstraints(temp);\n\n      this.createNewGraphTypeObjectEdge(name);\n      return max_count + 1;\n    }\n\n    createNewGraphTypeObjectEdge(name) {\n      var temp = {};\n      temp['bandwidth'] = '';\n      temp['delay'] = '';\n      temp['ipAddress'] = '';\n      temp['operatingSystem'] = '';\n      temp['hardwareType'] = '';\n      temp['nodeName'] = name;\n      temp['num'] = '';\n      temp['type'] = GraphItemType.LINK;\n      this.graphItemParametersList[id_of_edge[name]['id']] = temp;\n      globalGraphItemParametersList = this.graphItemParametersList;\n    }\n\n    createNewGraphTypeObject(isLAN, name) {\n      var temp = {};\n      temp['bandwidth'] = '';\n      temp['delay'] = '';\n      temp['ipAddress'] = '';\n      temp['operatingSystem'] = '';\n      temp['hardwareType'] = '';\n      temp['nodeName'] = name;\n      temp['num'] = isLAN ? '' : '1';\n      temp['type'] = isLAN ? GraphItemType.LAN : GraphItemType.NODE;\n      this.graphItemParametersList[id_of_node[name]] = temp;\n      globalGraphItemParametersList = this.graphItemParametersList;\n    }\n\n    updateGraph(updateTopology = true, updateDependency = true) {\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"Graph update initiated\");\n      var request = {\n        ParseType: 'bash',\n        scenario: [],\n        constraints: []\n      };\n      var scenarios = this.getScenariosFromEditor();\n      var constraints = this.getConstraintsFromEditor();\n      request.constraints = constraints;\n      request.scenario = scenarios;\n\n      if (updateTopology) {\n        this.http.put('v1/pr/hlb/topology/parse', request, {\n          withCredential: true\n        }).subscribe(receivedData => {\n          for (var item of Object.keys(receivedData['actors'])) {\n            this.extractActors([item]);\n          } //Graph Operations\n\n\n          var temp_nodes = [];\n          var temp_edges = [];\n          id_of_node = {};\n          id_of_edge = {};\n          var id_count = 1;\n          var temp; //Populate the Nodes in the Graph\n\n          var actors = receivedData['actors'];\n\n          for (var data in actors) {\n            //Create actor group\n            if (!this.actorsGroup.has(data)) {\n              this.actorsGroup.set(data, this.actorsGroup.size);\n            }\n\n            if (!id_of_node[data]) {\n              id_of_node[data] = id_count;\n              temp = {\n                id: id_count++,\n                label: data.toString(),\n                group: \"group\" + this.actorsGroup.get(data)\n              };\n              temp_nodes.push(temp);\n              temp = {};\n              temp['bandwidth'] = '';\n              temp['delay'] = '';\n              temp['ipAddress'] = actors[data]['ip'] == 'default' ? '' : actors[data]['ip'];\n              temp['operatingSystem'] = actors[data]['os'] == 'default' ? '' : actors[data]['os'];\n              temp['hardwareType'] = actors[data]['nodetype'] == 'default' ? '' : actors[data]['nodetype'];\n              temp['nodeName'] = data;\n              temp['num'] = actors[data]['num'];\n              temp['type'] = GraphItemType.NODE;\n              this.graphItemParametersList[id_count - 1] = temp;\n              globalGraphItemParametersList = this.graphItemParametersList;\n            }\n          }\n\n          var received_lans = receivedData['lans'];\n\n          for (var i = 0; i < received_lans.length; i++) {\n            var name = received_lans[i]['type'] + received_lans[i]['lineNum'];\n\n            if (!id_of_node[name]) {\n              id_of_node[name] = id_count;\n              temp = {\n                id: id_count++,\n                label: \"\",\n                group: \"LAN\"\n              };\n              temp_nodes.push(temp);\n            }\n          } //Populate the Edges in the Graph\n\n\n          var received_edges = receivedData['edges'];\n\n          for (var i = 0; i < received_edges.length; i++) {\n            var source = received_edges[i]['source'];\n            var target = received_edges[i]['target'];\n            temp = {\n              from: id_of_node[source],\n              to: id_of_node[target],\n              id: id_count++\n            };\n            temp_edges.push(temp);\n            id_of_edge[source + '-' + target] = temp;\n            temp = {};\n            temp['bandwidth'] = received_edges[i]['bw'] == 'default' ? '' : received_edges[i]['bw'];\n            temp['delay'] = received_edges[i]['delay'] == 'default' ? '' : received_edges[i]['delay'];\n            temp['ipAddress'] = '';\n            temp['operatingSystem'] = '';\n            temp['hardwareType'] = '';\n            temp['nodeName'] = '';\n            temp['num'] = ''; //The value is empty to help with the backend parsing of graph to text\n\n            temp['type'] = target.includes('lan') ? GraphItemType.LAN : GraphItemType.LINK;\n            var pointer = temp['type'] == GraphItemType.LAN ? id_of_node[target] : id_count - 1;\n            this.graphItemParametersList[pointer] = temp;\n            globalGraphItemParametersList = this.graphItemParametersList;\n          } //Log Data\n\n\n          this.logger.log(LogHeader.GRAPH_UPDATE, entry.printGraphParameterData(globalGraphItemParametersList, id_of_node, id_of_edge)); // Create an array with nodes\n\n          this.topologyGraphNodes = new DataSet(temp_nodes); // Create an array with edges\n\n          this.topologyGraphEdges = new DataSet(temp_edges);\n          var nodes = this.topologyGraphNodes;\n          var edges = this.topologyGraphEdges;\n          this.graph_data = {\n            nodes,\n            edges\n          };\n          this.topologyNetworkInstance = new Network(this.topologyGraphNetwork.nativeElement, this.graph_data, {\n            manipulation: {\n              enabled: false,\n              initiallyActive: false,\n              addNode: (nodeData, callback) => {\n                if (this.addNodeType == \"LAN\") {\n                  nodeData.group = \"LAN\";\n                } else {\n                  nodeData.group = \"group\" + this.actorsGroup.get(nodeData.label);\n                }\n\n                [nodeData.label, nodeData.id] = this.assignNewActorInTopologyGraph(nodeData.group == \"LAN\");\n                this.createGraphItemEntry(nodeData);\n                this.extractActors([nodeData.label]);\n\n                if (!this.actorsGroup.has(nodeData.label)) {\n                  this.actorsGroup.set(nodeData.label, this.actorsGroup.size);\n                }\n\n                setTimeout(() => {\n                  this.topologyNetworkInstance.selectNodes([nodeData.id]);\n                  setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n                    yield this.onTopologyClick({\n                      nodes: [nodeData.id],\n                      items: [],\n                      edges: []\n                    });\n\n                    if (this.addNodeType == \"LAN\") {\n                      this.topologyGraphSelectedNodeData.nameEditable = false;\n                    } else {\n                      this.topologyGraphSelectedNodeData.nameEditable = true;\n                    }\n                  }), 100);\n                }, 100);\n                this.clearMessage();\n                this.onTopologyChange();\n                callback(nodeData);\n              },\n              addEdge: (edgeData, callback) => {\n                //Check for self connection\n                if (edgeData.from == edgeData.to) {\n                  return;\n                } //Check if such an edge already exists or 2 LANs are connected\n\n\n                const sameEdges = this.topologyGraphEdges.get({\n                  filter: edge => edge.from == edgeData.from && edge.to == edgeData.to || edge.from == edgeData.to && edge.to == edgeData.from || this.topologyGraphNodes.get(edgeData.from)[\"group\"] == \"LAN\" && this.topologyGraphNodes.get(edgeData.to)[\"group\"] == \"LAN\"\n                });\n\n                if (sameEdges.length) {\n                  return;\n                }\n\n                this.clearMessage();\n                edgeData.id = this.assignNewEdgeInTopologyGraph(edgeData.from, edgeData.to);\n                this.onTopologyChange();\n                callback(edgeData);\n              },\n              deleteNode: (data, callback) => {\n                //Remove node from id_of_node and all linked edges from id_of_edge\n                var tempActorsList = this.actorsList;\n                this.actorsList.splice(tempActorsList.map(element => element.text).indexOf(globalGraphItemParametersList[data.nodes[0]]['nodeName']), 1);\n                delete id_of_node[Object.keys(id_of_node).find(node_name => id_of_node[node_name] == data.nodes[0])];\n                delete globalGraphItemParametersList[data.nodes[0] + \"\"];\n\n                for (var deletedEdge of data.edges) {\n                  delete id_of_edge[Object.keys(id_of_edge).find(edge_name => id_of_edge[edge_name].id == deletedEdge)];\n                }\n\n                this.onTopologyDelete(this.topologyGraphNodes.get(data.nodes[0])['label']);\n                this.onTopologyChange();\n                callback(data);\n              },\n              deleteEdge: (data, callback) => {\n                //Remove deleted edge from id_of_edge\n                delete id_of_edge[Object.keys(id_of_edge).find(edge_name => id_of_edge[edge_name].id == data.edges[0])];\n                delete globalGraphItemParametersList[data.edges[0] + \"\"];\n                const edge = this.topologyGraphEdges.get(data.edges[0]);\n                this.onTopologyChange();\n                callback(data);\n              }\n            },\n            edges: {\n              color: '#777777'\n            },\n            nodes: {\n              image: \"/assets/server.png\",\n              shape: \"image\"\n            },\n            groups: Object.assign({\n              LAN: {\n                shape: 'circle',\n                color: '#000000'\n              }\n            }, Object.assign({}, ...this.graphColors.map((color, index) => ({\n              [\"group\" + index]: {\n                font: {\n                  color\n                }\n              }\n            })))),\n            physics: {\n              enabled: false\n            }\n          });\n          this.topologyNetworkInstance.on('click', properties => {\n            this.onTopologyClick(properties);\n          }); //Show legends in topology graph\n\n          this.topologyNetworkInstance.on(\"afterDrawing\", ctx => {\n            this.canvasEventListenerTopology && ctx.canvas.removeEventListener('click', this.canvasEventListenerTopology);\n            this.actionNumberNodes = [];\n            let curScale = this.topologyNetworkInstance.getScale();\n            this.topologyGraphNodes.forEach(node => {\n              if (node.group != \"LAN\") {\n                var nodePosition = this.topologyNetworkInstance.getPosition(node.id);\n                let x = nodePosition.x;\n                let y = nodePosition.y; //Draw node numbers\n\n                var nodeNum = globalGraphItemParametersList[id_of_node[node.label]]['num'];\n\n                if (nodeNum > 1) {\n                  ctx.fillStyle = \"#E05860\";\n                  ctx.strokeStyle = \"#E05860\";\n                  ctx.beginPath();\n                  ctx.arc(x - 20, y - 25, 10, 0, 2 * Math.PI);\n                  ctx.closePath();\n                  ctx.fill();\n                  ctx.stroke();\n                  ctx.font = \"10px Arial\";\n                  ctx.fillStyle = \"#FFFFFF\";\n                  ctx.textAlign = \"center\";\n                  ctx.textBaseline = \"middle\";\n                  ctx.fillText(nodeNum, x - 20, y - 25);\n                }\n\n                this.dependencyGraphNodes.get({\n                  filter: item => item.data.actors[0] == node.label\n                }).forEach((dependencyNode, dependencyIndex) => {\n                  ctx.strokeStyle = \"#294475\";\n                  ctx.lineWidth = 2;\n                  ctx.fillStyle = \"#A6D5F7\";\n                  ctx.beginPath();\n                  ctx.fillRect(x + 10 + 30 * (dependencyIndex + 1) - 10, y - 10, 20, 20);\n                  ctx.closePath();\n                  ctx.fill();\n                  ctx.stroke();\n                  ctx.font = \"10px Arial\";\n                  ctx.fillStyle = \"#000000\";\n                  ctx.textAlign = \"center\";\n                  ctx.textBaseline = \"middle\";\n                  ctx.fillText(dependencyNode.topologyLabel + \"\", x + 10 + 30 * (dependencyIndex + 1), y);\n                  var abs_pos = this.topologyNetworkInstance.canvasToDOM(this.topologyNetworkInstance.getPositions([node.id])[node.id]);\n                  this.actionNumberNodes.push({\n                    x: abs_pos.x + (10 + 30 * (dependencyIndex + 1) - 10) * curScale,\n                    y: abs_pos.y - 10 * curScale,\n                    width: 20 * curScale,\n                    height: 20 * curScale,\n                    dependencyNode: dependencyNode\n                  });\n                });\n              }\n            });\n\n            function isIntersect(point, box) {\n              return point.x >= box.x && point.x <= box.x + box.width && point.y >= box.y && point.y <= box.y + box.height;\n            }\n\n            function getCursorPosition(canvas, event) {\n              const rect = canvas.getBoundingClientRect();\n              const x = event.clientX - rect.left;\n              const y = event.clientY - rect.top;\n              return {\n                x: x,\n                y: y\n              };\n            }\n\n            this.canvasEventListenerTopology = ctx.canvas.addEventListener('click', e => {\n              if (this.canvasClickFlag) {\n                const pos = getCursorPosition(ctx.canvas, e);\n                this.actionNumberNodes.forEach(item => {\n                  if (isIntersect(pos, item)) {\n                    this.onEditActionFromTopologyDependencyClick(item.dependencyNode.topologyLabel);\n                  }\n                });\n                this.canvasClickFlag = false;\n                setTimeout(() => {\n                  this.canvasClickFlag = true;\n                }, 1000);\n              }\n            });\n          });\n          this.topologyNetworkInstance.on('oncontext', function (properties) {// properties.event.preventDefault();\n            // if (!properties.nodes.length) {\n            //   $('.toastBox').fadeIn(200);\n            //   setTimeout(() => {\n            //     $('.toastBox').fadeOut(500);\n            //   }, 4000);\n            // } else {\n            //   $(\".custom-menu\").is(':visible') && $(\".custom-menu\").finish().toggle();;\n            //   $(\".custom-menu\").finish().toggle(100);\n            //   $(\".custom-menu\").css({\n            //     top: properties.event.pageY - 100 + \"px\",\n            //     left: properties.event.pageX + \"px\"\n            //   });\n            // }\n          });\n          $('.dependency-topology-toggle-icon-topology').hasClass('active') && (this.selectedNetworkInstance = this.topologyNetworkInstance);\n        });\n      }\n\n      if (updateDependency) {\n        this.http.put(\"v1/pr/hlb/dependency-graph/has-cycle\", {\n          scenarios: scenarios\n        }, {\n          withCredential: true\n        }).subscribe(d => {\n          const cyclePath = d[\"cycle_path\"];\n          this.dependencyGraphCyclePath = cyclePath;\n          this.http.put(\"v1/pr/hlb/dependency_graph/parse\", request, {\n            withCredential: true\n          }).subscribe(d => {\n            let nodes = [];\n            let links = [];\n            let topologyLabel = 1;\n\n            for (const n of d['nodes']) {\n              if (!this.actorsGroup.has(n.actors[0])) {\n                this.actorsGroup.set(n.actors[0], this.actorsGroup.size);\n              }\n\n              var n2 = {\n                data: n,\n                id: n.id,\n                label: n.action,\n                topologyLabel: topologyLabel++,\n                group: \"group\" + this.actorsGroup.get(n.actors[0])\n              };\n              nodes.push(n2);\n            }\n\n            for (const e of d['edges']) {\n              var e2 = e;\n              e2.from = e2.source;\n              e2.to = e2.target;\n              e2.arrows = {\n                to: {\n                  enabled: true,\n                  type: \"arrow\"\n                }\n              };\n              const waitTime = nodes.find(item => item.id == e2.target)['data']['wait_time'];\n              e2.label = e2.label + (waitTime != \"None\" ? \" (\" + waitTime + \"s)\" : \"\");\n              links.push(e2);\n            }\n\n            const graphGroups = Object.assign({}, ...this.graphColors.map((color, index) => ({\n              [\"group\" + index]: {\n                color\n              }\n            })));\n            this.allDependencyNodeData = nodes;\n            this.dependencyGraphNodes = new DataSet(nodes);\n            this.dependencyGraphEdges = new DataSet(links);\n            this.dependencyGraphNodes.on(\"*\", () => {\n              this.topologyNetworkInstance.fit();\n            });\n            this.topologyNetworkInstance.fit();\n            this.dependencyNetworkInstance = new Network(this.dependencyGraphNetwork.nativeElement, {\n              nodes: this.dependencyGraphNodes,\n              edges: this.dependencyGraphEdges\n            }, {\n              manipulation: {\n                enabled: false,\n                initiallyActive: false,\n                addNode: (data, callback) => {\n                  return;\n                },\n                deleteNode: (data, callback) => {\n                  const actor = this.dependencyGraphNodes.get(data.nodes[0])[\"data\"].actors[0];\n                  const action = this.dependencyGraphNodes.get(data.nodes[0])[\"data\"].action;\n                  this.onDependencyNodeDelete(actor, action);\n                  callback(data);\n                },\n                addEdge: (edgeData, callback) => __awaiter(this, void 0, void 0, function* () {\n                  if (edgeData.from == edgeData.to) {\n                    return;\n                  } //Check if such an edge already exists\n\n\n                  const sameEdges = this.dependencyGraphEdges.get({\n                    filter: edge => edge.from == edgeData.from && edge.to == edgeData.to || edge.from == edgeData.to && edge.to == edgeData.from\n                  });\n\n                  if (sameEdges.length) {\n                    return;\n                  }\n\n                  edgeData.arrows = {\n                    to: {\n                      enabled: true,\n                      type: \"arrow\"\n                    }\n                  };\n                  const actorFrom = this.dependencyGraphNodes.get(edgeData.from)[\"data\"].actors[0];\n                  const actionFrom = this.dependencyGraphNodes.get(edgeData.from)[\"data\"].action;\n                  const actorTo = this.dependencyGraphNodes.get(edgeData.to)[\"data\"].actors[0];\n                  const actionTo = this.dependencyGraphNodes.get(edgeData.to)[\"data\"].action;\n                  const result = yield this.onDependencyUpdateEdge(\"INSERT\", actorFrom, actionFrom, actorTo, actionTo);\n                  const eventName = result.eventName;\n                  const cyclePath = result.cyclePath; //Only add edge if event name received (if event name is null, the new edge creates a cycle)\n\n                  if (!cyclePath) {\n                    const waitTime = this.dependencyGraphNodes.get(edgeData.to)['data']['wait_time'];\n                    edgeData.label = eventName + (waitTime != \"None\" ? \" (\" + waitTime + \"s)\" : \"\");\n                    callback(edgeData);\n                  } else {\n                    alert(\"Cannot add this dependency, as it will create cyclic dependency\");\n                  }\n\n                  this.clearMessage();\n                }),\n                deleteEdge: (data, callback) => {\n                  const edgeData = this.dependencyGraphEdges.get(data.edges[0]);\n                  const actorFrom = this.dependencyGraphNodes.get(edgeData[\"from\"])[\"data\"].actors[0];\n                  const actionFrom = this.dependencyGraphNodes.get(edgeData[\"from\"])[\"data\"].action;\n                  const actorTo = this.dependencyGraphNodes.get(edgeData[\"to\"])[\"data\"].actors[0];\n                  const actionTo = this.dependencyGraphNodes.get(edgeData[\"to\"])[\"data\"].action;\n                  this.onDependencyUpdateEdge(\"REMOVE\", actorFrom, actionFrom, actorTo, actionTo);\n                  this.clearMessage();\n                  callback(data);\n                }\n              },\n              layout: {\n                hierarchical: {\n                  sortMethod: \"directed\",\n                  shakeTowards: \"leaves\",\n                  treeSpacing: 150,\n                  levelSeparation: 100,\n                  nodeSpacing: 200,\n                  edgeMinimization: false,\n                  blockShifting: false\n                }\n              },\n              edges: {\n                color: '#999999',\n                length: 200\n              },\n              nodes: {\n                shape: \"box\",\n                font: {\n                  color: '#FFFFFF'\n                }\n              },\n              groups: graphGroups,\n              physics: {\n                enabled: false\n              }\n            }); //Dependency Graph Click Event\n\n            this.dependencyNetworkInstance.on('click', properties => {\n              this.onDependencyClick(properties);\n            }); //Show legends in dependency graph\n\n            this.dependencyNetworkInstance.on(\"afterDrawing\", ctx => {\n              this.actionNumberNodesDependency = [];\n              this.canvasEventListenerDependency && ctx.canvas.removeEventListener('click', this.canvasEventListenerDependency);\n              let curScale = this.dependencyNetworkInstance.getScale();\n              this.dependencyGraphNodes.forEach(node => {\n                var nodePosition = this.dependencyNetworkInstance.getPosition(node.id);\n                var boundingBox = this.dependencyNetworkInstance.getBoundingBox(node.id);\n                let x = boundingBox.right;\n                let y = nodePosition.y;\n                ctx.strokeStyle = \"#294475\";\n                ctx.lineWidth = 2;\n                ctx.fillStyle = \"#A6D5F7\";\n                ctx.beginPath();\n                ctx.fillRect(x, y - 10, 20, 20);\n                ctx.closePath();\n                ctx.fill();\n                ctx.stroke();\n                ctx.font = \"10px Arial\";\n                ctx.fillStyle = \"#000000\";\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                ctx.fillText(node.topologyLabel + \"\", x + 10, y);\n                var abs_pos = this.dependencyNetworkInstance.canvasToDOM({\n                  x: x,\n                  y: y\n                });\n                this.actionNumberNodesDependency.push({\n                  x: abs_pos.x + curScale,\n                  y: abs_pos.y - 10 * curScale,\n                  width: 20 * curScale,\n                  height: 20 * curScale,\n                  dependencyNode: node\n                });\n              });\n\n              function isIntersect(point, box) {\n                return point.x >= box.x && point.x <= box.x + box.width && point.y >= box.y && point.y <= box.y + box.height;\n              }\n\n              function getCursorPosition(canvas, event) {\n                const rect = canvas.getBoundingClientRect();\n                const x = event.clientX - rect.left;\n                const y = event.clientY - rect.top;\n                return {\n                  x: x,\n                  y: y\n                };\n              }\n\n              this.canvasEventListenerDependency = ctx.canvas.addEventListener('click', e => {\n                if (this.canvasClickFlag) {\n                  const pos = getCursorPosition(ctx.canvas, e);\n                  this.actionNumberNodesDependency.forEach(item => {\n                    console.warn(item);\n                    console.error(pos);\n\n                    if (isIntersect(pos, item)) {\n                      this.onEditActionFromTopologyDependencyClick(item.dependencyNode.topologyLabel);\n                    }\n                  });\n                  this.canvasClickFlag = false;\n                  setTimeout(() => {\n                    this.canvasClickFlag = true;\n                  }, 1000);\n                }\n              });\n            }); //Show dependency cycle if any\n\n            if (this.dependencyGraphCyclePath) {\n              $('#dependencyGraphCycleContainer').show();\n              const cycleNodes = this.dependencyGraphCyclePath.map((node, index) => {\n                return {\n                  id: index,\n                  label: node[1].toString(),\n                  group: \"group\" + this.actorsGroup.get(node[0].toString())\n                };\n              });\n              const cycleEdge = [];\n\n              for (let i = 0; i < this.dependencyGraphCyclePath.length; i++) {\n                cycleEdge.push({\n                  from: i,\n                  to: (i + 1) % this.dependencyGraphCyclePath.length,\n                  arrows: {\n                    to: {\n                      enabled: true,\n                      type: \"arrow\"\n                    }\n                  }\n                });\n              }\n\n              this.dependencyCycleNetworkInstance = new Network(this.dependencyGraphCycleNetwork.nativeElement, {\n                nodes: cycleNodes,\n                edges: cycleEdge\n              }, {\n                edges: {\n                  color: '#999999',\n                  length: 200\n                },\n                nodes: {\n                  // fixed: true,\n                  shape: \"box\",\n                  font: {\n                    color: '#FFFFFF'\n                  }\n                },\n                groups: graphGroups\n              });\n            } else {\n              $('#dependencyGraphCycleContainer').hide();\n            }\n          });\n          $('.dependency-topology-toggle-icon-dependency').hasClass('active') && (this.selectedNetworkInstance = this.dependencyNetworkInstance);\n        });\n      }\n\n      $(\"#graph-container\").keyup(e => {\n        this.isKeyPressed = false;\n\n        if (e.key === \" \") {\n          this.addNodeType = null;\n          this.clearMessage();\n          this.selectedNetworkInstance.disableEditMode();\n        } else if (e.key === \"Delete\") {\n          this.selectedNetworkInstance.deleteSelected();\n          var $dialogBox = $('.dialog-box');\n          !$dialogBox.hasClass('hide') && $dialogBox.addClass('hide');\n        }\n      });\n      $(\"#graph-container\").keydown(e => {\n        if (this.isKeyPressed) {\n          return;\n        }\n\n        this.isKeyPressed = true;\n\n        if (e.key === \" \") {\n          this.selectedNetworkInstance.addEdgeMode(); //this.displayMessage(\"Draw an edge between two nodes\");\n\n          accessibleLogger.log(LogHeader.GRAPH_UPDATE, \"User initiated drawing an edge\");\n        }\n      });\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"Graph update completed\");\n    }\n\n    createGraphItemEntry(nodeData) {\n      var temp = {};\n      temp['bandwidth'] = '';\n      temp['delay'] = '';\n      temp['ipAddress'] = '';\n      temp['operatingSystem'] = '';\n      temp['hardwareType'] = '';\n      temp['nodeName'] = nodeData.label;\n      temp['num'] = '1';\n      temp['type'] = nodeData.group == \"LAN\" ? GraphItemType.LAN : GraphItemType.NODE;\n      this.graphItemParametersList[nodeData.id] = temp;\n      globalGraphItemParametersList = this.graphItemParametersList;\n    }\n\n    onAddActionDependencyClick() {\n      this.clearModalContent();\n      $('.dialog-box-action-button, .modal-add-button').css('background-color', '#04aa6d');\n      $('.modal').modal('toggle');\n    }\n\n    onEditActionDependencyClick() {\n      this.populateAndShowEditActionModal(this.selectedDependencyNodeData);\n    }\n\n    populateAndShowEditActionModal(nodeData) {\n      $('.modal').modal('toggle');\n      $('.modal-title').html('Edit Action');\n      $('.modal-delete-button').show();\n      $('.modal-add-button').html('Edit');\n      $(\"#modal-actor-input > option:selected\").prop(\"selected\", false);\n      $(\"#modal-actor-input > option\").filter(function () {\n        return $(this).html() === nodeData['actors'][0];\n      }).prop(\"selected\", true);\n      this.oldActor = $(\"#modal-actor-input > option:selected\").html();\n      $(\"#modal-actor-input\").attr('disabled', true);\n      $('#modal-action-name-input').val(nodeData['action']);\n      this.oldAction = nodeData['action'];\n\n      if (nodeData['wait_time'] != \"None\") {\n        $('#modal-action-wait-checkbox').prop('checked', true).change();\n        $('#modal-action-wait-input').val(nodeData['wait_time']);\n      } else {\n        $('#modal-action-wait-checkbox').prop('checked', false).change();\n        $('#modal-action-wait-input').val(\"\");\n      }\n\n      if (nodeData['e_events'].length) {\n        this.oldEmit = nodeData['e_events'][0];\n        $('#modal-action-emit-checkbox').prop('checked', true).change();\n        $('#modal-action-emit-input').val(nodeData['e_events'][0]);\n        var tempEventBinding = this.bindingList.filter(item => {\n          return item['category'] == 'event' && item['key'] == nodeData['e_events'][0];\n        });\n        tempEventBinding = tempEventBinding[0]['value'];\n\n        if (tempEventBinding) {\n          $('#modal-action-event-checkbox').prop('checked', true).change();\n        } else {\n          $('#modal-action-event-checkbox').prop('checked', false).change();\n        }\n\n        $('#modal-event-binding-input').val(tempEventBinding);\n      } else {\n        $('#modal-action-emit-checkbox').prop('checked', false).change();\n        $('#modal-action-emit-input').val(\"\");\n        this.oldEmit = \"\";\n      }\n\n      $(\"#modal-action-trigger-selections option:selected\").prop(\"selected\", false);\n\n      if (nodeData['t_events'].length) {\n        $(\"#modal-action-trigger-selections option\").filter(function () {\n          return nodeData['t_events'].includes($(this).html());\n        }).prop(\"selected\", true);\n        $('#modal-action-trigger-checkbox').prop('checked', true).change();\n      } else {\n        $('#modal-action-trigger-checkbox').prop('checked', false).change();\n      }\n\n      var tempBindings = this.bindingList.filter(item => {\n        return item['category'] == 'action' && item['key'] == nodeData['action'];\n      });\n      tempBindings = tempBindings[0]['value'];\n      $('#modal-action-binding-input').val(tempBindings);\n    }\n\n    toggleTopologyView() {\n      this.logger.log(LogHeader.KEY_PRESS, \"User toggled topology view\");\n      $('.dependency-topology-toggle-icon-topology').addClass('active');\n      $('.dependency-topology-toggle-icon-dependency').removeClass('active');\n      $('.graph-box').removeClass('hide');\n      $('.graph-box-dependency').addClass('hide'); //$(\".custom-menu\").is(':visible') && $(\".custom-menu\").finish().toggle(100);\n\n      var $dialogBox = $('.dialog-box');\n      !$dialogBox.hasClass('hide') && $dialogBox.addClass('hide');\n      $('#graphActionButtonList').removeClass('hide');\n      this.graphDescription = \"This graph depicts the connections between different Node/LAN in the network\";\n      this.selectedNetworkInstance = this.topologyNetworkInstance;\n      this.selectedNetworkInstance.fit();\n    }\n\n    toggleDependencyView() {\n      this.logger.log(LogHeader.KEY_PRESS, \"User toggled dependency view\");\n      $('.dependency-topology-toggle-icon-topology').removeClass('active');\n      $('.dependency-topology-toggle-icon-dependency').addClass('active');\n      $('.graph-box').addClass('hide');\n      $('.graph-box-dependency').removeClass('hide'); //$(\".custom-menu\").is(':visible') && $(\".custom-menu\").finish().toggle(100);\n\n      var $dialogBox = $('.dialog-box');\n      !$dialogBox.hasClass('hide') && $dialogBox.addClass('hide');\n      $('#graphActionButtonList').addClass('hide');\n      this.graphDescription = \"This graph depicts the dependency between different actions as stated in scenario\";\n      this.selectedNetworkInstance = this.dependencyNetworkInstance;\n      this.selectedNetworkInstance.fit();\n      this.dependencyCycleNetworkInstance.fit();\n    }\n\n    onTopologyChange() {\n      this.logger.log(LogHeader.KEY_PRESS, \"The topology changed\");\n      var request = {\n        parameters: [JSON.stringify(globalGraphItemParametersList)],\n        nodes: [JSON.stringify(id_of_node)],\n        edges: [JSON.stringify(id_of_edge)]\n      };\n      this.http.put('v1/pr/hlb/topology-graph/generate-constraints', request, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        this.stateservice.setConstraints(receivedData['constraints']);\n        this.logger.log(LogHeader.DATA_RECEIVED, \"Updated constraints - \" + receivedData['constraints']);\n      });\n    }\n\n    onTopologyDelete(deletedNode) {\n      this.logger.log(LogHeader.KEY_PRESS, \"User tried to delete a topology element\");\n      var request = {\n        scenarios: this.getScenariosFromEditor(),\n        bindings: [JSON.stringify(this.bindingList)],\n        deleted_node: deletedNode\n      };\n      this.logger.log(LogHeader.DATA_SENT, \"Scenario - \" + request['scenarios'] + \",Bindings - \" + request['bindings'] + \", Deleted Node - \" + request['deleted_node']);\n      this.http.put('v1/pr/hlb/topology/graph-remove', request, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        this.stateservice.setBehavior(receivedData['scenarios']);\n        this.stateservice.setBindings(receivedData['bindings']);\n        this.logger.log(LogHeader.DATA_RECEIVED, \"Scenario - \" + receivedData['scenarios'] + \", Bindings - \" + receivedData['bindings']);\n        setTimeout(() => {\n          this.updateGraph(false, true);\n        }, 500);\n      });\n    }\n\n    onTopologyParametersChange(event) {\n      // type: GraphItemType,\n      // bandwidth: string,\n      // delay: string,\n      // ipAddress: string,\n      // operatingSystem: string,\n      // hardwareType: string\n      // num: string\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"Topology parameters have changed\");\n      var temp = this.graphItemParametersList[currentGraphItemSelection['id']] ? this.graphItemParametersList[currentGraphItemSelection['id']] : null;\n\n      if (!temp) {\n        temp = {};\n        temp['bandwidth'] = '';\n        temp['delay'] = '';\n        temp['ipAddress'] = '';\n        temp['operatingSystem'] = '';\n        temp['hardwareType'] = '';\n        temp['nodeName'] = '';\n        temp['num'] = '1'; //Default Value - keep for number of nodes\n\n        switch (currentGraphItemSelection['type']) {\n          case 'node':\n            temp['type'] = GraphItemType.NODE;\n            temp['nodeName'] = $('#dialog-box-title').html();\n            break;\n\n          case 'link':\n            temp['type'] = GraphItemType.LINK;\n            break;\n\n          case 'lan':\n            temp['type'] = GraphItemType.LAN;\n            break;\n        }\n      }\n\n      var currentValue = event.target.value;\n      var currentField = $(event.target).attr('id');\n\n      switch (currentField) {\n        case 'node-ip-address':\n          temp['ipAddress'] = currentValue;\n          break;\n\n        case 'node-operating-system':\n          temp['operatingSystem'] = currentValue;\n          break;\n\n        case 'node-hardware-type':\n          temp['hardwareType'] = currentValue;\n          break;\n\n        case 'node-num':\n          temp['num'] = currentValue == \"\" || parseInt(currentValue) <= 0 ? '1' : currentValue;\n          $('#node-num').val(temp['num']);\n          break;\n\n        case 'link-bandwidth':\n          temp['bandwidth'] = currentValue == \"\" ? '' : parseInt(currentValue) < 0 ? '' : currentValue;\n          break;\n\n        case 'link-delay':\n          temp['delay'] = currentValue == \"\" ? '' : parseInt(currentValue) < 0 ? '' : currentValue;\n          break;\n      }\n\n      this.graphItemParametersList[currentGraphItemSelection['id']] = temp;\n      globalGraphItemParametersList = this.graphItemParametersList;\n      this.logger.log(LogHeader.GRAPH_UPDATE, entry.printGraphParameterData(globalGraphItemParametersList, id_of_node, id_of_edge));\n      this.onTopologyChange();\n    }\n\n    onDependencyNodeDelete(actor, action) {\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"User deleted actor - \" + actor + \", action - \" + action);\n      var request = {\n        scenarios: this.getScenariosFromEditor(),\n        bindings: [JSON.stringify(this.bindingList)],\n        actor: actor,\n        action: action\n      };\n      this.http.put('v1/pr/hlb/dependency-graph/node-delete', request, {\n        withCredential: true\n      }).subscribe(receivedData => {\n        this.stateservice.setBehavior(receivedData['scenarios']);\n        this.stateservice.setBindings(receivedData['bindings']);\n      });\n    }\n\n    onDependencyUpdateEdge(updateType, actorFrom, actionFrom, actorTo, actionTo) {\n      this.logger.log(LogHeader.GRAPH_UPDATE, \"User updated edge of dependency graph. actorFrom - \" + actorFrom + \", actionFrom - \" + actionFrom + \", actorTo - \" + actorTo + \", actionTo - \" + actionTo);\n      return new Promise((resolve, reject) => {\n        var request = {\n          scenarios: this.getScenariosFromEditor(),\n          bindings: [JSON.stringify(this.bindingList)],\n          actor_from: actorFrom,\n          action_from: actionFrom,\n          actor_to: actorTo,\n          action_to: actionTo,\n          update_type: updateType\n        };\n        this.http.put('v1/pr/hlb/dependency-graph/update-edge', request, {\n          withCredential: true\n        }).subscribe(receivedData => {\n          this.stateservice.setBehavior(receivedData['scenarios']);\n          this.stateservice.setBindings(receivedData['bindings']);\n          resolve({\n            eventName: receivedData['event_name'],\n            cyclePath: receivedData['cycle_path']\n          });\n        });\n      });\n    }\n\n    removeConstraintSentences(data) {\n      var temp = [];\n      data.forEach(element => {\n        if (!['os', 'nodetype', 'ip'].includes(element.split(' ')[0])) {\n          temp.push(element);\n        }\n      });\n      return temp;\n    }\n\n    checkIfEmittedEventIsATriggerEvent(emittedEvents, scenario) {\n      if (!emittedEvents) {\n        return false;\n      }\n\n      for (const evt of emittedEvents) {\n        for (const sce of scenario) {\n          if (sce[0] && sce[0].includes(evt)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    checkIfAllOrAnyAlreadyEntered(emittedEvents) {\n      for (const evt of emittedEvents) {\n        const allIdxs = _.map(_.keys(_.pickBy(this.scenariosObjFormat, {\n          insert: evt + ' '\n        })), Number);\n\n        for (const idx of allIdxs) {\n          if (idx > 0) {\n            if (this.scenariosObjFormat[idx - 1].insert.toLowerCase() === 'all ') {\n              // || this.scenariosObjFormat[idx - 1].insert.toLowerCase() === 'any ') {\n              return true;\n            }\n          }\n        }\n      }\n\n      return false;\n    }\n\n    addAllInScenarioEditor(emittedEvents) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // addAllAnyInScenarioEditor - change function name to this when including all and any\n        if (!emittedEvents) {\n          return;\n        }\n\n        for (const val of emittedEvents) {\n          const allIdxs = _.map(_.keys(_.pickBy(this.scenariosObjFormat, {\n            insert: val + ' '\n          })), Number); // Add the all/any keyword at the location of the when keyword and assign new array to the scenario object array\n\n\n          const tempObjFmtArray = _.cloneDeep(this.scenariosObjFormat);\n\n          for (const idx of allIdxs) {\n            if (idx > 0) {\n              if (this.scenariosObjFormat[idx - 1].insert.toLowerCase() === 'when ') {\n                // tempObjFmtArray.splice(idx, 0, {insert: 'ALL|ANY ', attributes: {bold: true, color: 'red'}});\n                tempObjFmtArray.splice(idx, 0, {\n                  insert: 'all '\n                });\n              }\n            }\n          }\n\n          this.scenariosObjFormat = tempObjFmtArray;\n        }\n      });\n    }\n\n    addAllInConstraintsEditor(actor) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // addAllAnyInConstraintsEditor - change function name to this when including all and any\n        if (!actor) {\n          return;\n        } // Add the all/any keyword at the location of the when keyword and assign new array to the scenario object array\n\n\n        const tempObjFmtArray = _.cloneDeep(this.constraintsObjFormat); // Get all indexes where the actor is present\n\n\n        const allIdxs = _.map(_.keys(_.pickBy(tempObjFmtArray, {\n          insert: actor + ' '\n        })), Number);\n\n        for (const idx of allIdxs) {\n          if (idx === 1) {\n            if (this.constraintsObjFormat[idx - 1].insert.toLowerCase() === 'link ' || this.constraintsObjFormat[idx - 1].insert.toLowerCase() === 'lan ') {\n              // tempObjFmtArray.splice(idx, 0, {insert: 'ALL|ANY ', attributes: {bold: true, color: 'red'}});\n              tempObjFmtArray.splice(idx, 0, {\n                insert: 'all '\n              });\n              continue;\n            }\n          }\n\n          if (idx > 1) {\n            if ((this.constraintsObjFormat[idx - 1].insert.toLowerCase() === 'link ' || this.constraintsObjFormat[idx - 2].insert.toLowerCase() === 'link ' || this.constraintsObjFormat[idx - 1].insert.toLowerCase() === 'lan ' || this.constraintsObjFormat[idx - 2].insert.toLowerCase() === 'lan ') && this.constraintsObjFormat[idx - 1].insert.toLowerCase() !== 'all ') {\n              // tempObjFmtArray.splice(idx, 0, {insert: 'ALL|ANY ', attributes: {bold: true, color: 'red'}});\n              tempObjFmtArray.splice(idx, 0, {\n                insert: 'all '\n              });\n            }\n          }\n        }\n\n        this.constraintsObjFormat = tempObjFmtArray;\n      });\n    }\n\n    validateAllKeywordIfPresent(constraints, actorEventObj) {\n      // Filter all actors with the all keyword\n      const constraintsWithNum = _.filter(constraints, v => v[0] === 'num'); // First run in the scenario editor and update the object\n\n\n      let tempArray = _.cloneDeep(this.scenariosObjFormat);\n\n      let allIdxs = _.map(_.keys(_.pickBy(tempArray, {\n        insert: 'all '\n      })), Number);\n\n      for (const idx of allIdxs) {\n        const actName = _.findKey(actorEventObj, (v, k) => {\n          return v.includes(this.scenariosObjFormat[idx + 1].insert.trimEnd());\n        });\n\n        const numActor = _.find(constraintsWithNum, v => v[1][0] === actName);\n\n        if (!constraintsWithNum.map(v => v[1][0]).includes(actName) || numActor && parseInt(numActor[2][0], 10) === 1) {\n          tempArray.splice(idx, 1);\n        }\n      }\n\n      if (!_.isEqual(this.scenariosObjFormat, tempArray)) {\n        this.scenariosObjFormat = tempArray;\n      } // Secondly run in the constraints editor and update the object\n\n\n      tempArray = _.cloneDeep(this.constraintsObjFormat);\n      allIdxs = _.map(_.keys(_.pickBy(tempArray, {\n        insert: 'all '\n      })), Number);\n\n      for (const idx of allIdxs) {\n        const actName = this.constraintsObjFormat[idx + 1].insert.trimEnd();\n\n        const numActor = _.find(constraintsWithNum, v => v[1][0] === actName);\n\n        if (!constraintsWithNum.map(v => v[1][0]).includes(actName) || numActor && parseInt(numActor[2][0], 10) === 1) {\n          tempArray.splice(idx, 1);\n        }\n      }\n\n      if (!_.isEqual(this.constraintsObjFormat, tempArray)) {\n        this.constraintsObjFormat = tempArray;\n      }\n    }\n\n    suggestAll(parsedConstraintData) {\n      // change name to suggestAllAny when adding any also\n      const actorEventObj = {};\n      parsedConstraintData.parsedConstraints.forEach(val => {\n        if (val[2]) {\n          // Check if its in any link attribute\n          const foundInLinkLan = _.find(parsedConstraintData.parsedConstraints, vl => {\n            return (vl[0] === 'link' || vl[0] === 'lan') && vl[1].includes(val[1][0]);\n          }); // get if the Actor emits an event and get the emitted events\n\n\n          const foundScenario = _.find(parsedConstraintData.parsedScenario, vl => {\n            return vl[1].includes(val[1][0]);\n          });\n\n          const emittedEvents = foundScenario ? foundScenario[3] : []; // this.validateAllKeywordIfPresent(val[1][0], emittedEvents, val);\n\n          actorEventObj[val[1][0]] = emittedEvents; // if it has a link attribute or its emitted event is waited for my some node\n\n          if (val[0] === 'num' && parseInt(val[2][0], 10) > 1 && (foundInLinkLan || this.checkIfEmittedEventIsATriggerEvent(emittedEvents, parsedConstraintData.parsedScenario) && !this.checkIfAllOrAnyAlreadyEntered(emittedEvents))) {\n            // this.alertMessage = 'You should have an ALL or ANY preceding ' + val[1][0] + '. Please see the documentation';\n            this.alertMessage = 'An ALL keyword has been inserted preceding ' + val[1][0] + ' and/or its events as it maps to multiple nodes. Please see the documentation';\n            this.showAlertMsg = true;\n            setTimeout(() => {\n              this.showAlertMsg = false;\n            }, 5000); // add all in the scenarios and constraints\n\n            Promise.all([this.addAllInScenarioEditor(emittedEvents), this.addAllInConstraintsEditor(val[1][0])]).then(done => {\n              // Still have to resolve the promises part. This is a hack and ugly way of doing it\n              setTimeout(() => {\n                this.stateservice.setBehavior(this.getScenariosFromEditor());\n                this.stateservice.setConstraints(this.getConstraintsFromEditor());\n              }, 1000);\n            });\n            this.stateservice.setAllAnyPresentFlag(true);\n          }\n        }\n      });\n      this.validateAllKeywordIfPresent(parsedConstraintData.parsedConstraints, actorEventObj);\n    }\n\n    toggleSpecialFuncDialog() {\n      this.showSpecialFuncDialog = !this.showSpecialFuncDialog;\n    }\n\n    unsetShowAlertMessage() {\n      this.showAlertMsg = false;\n    }\n\n    extractScenario(scenario) {\n      // console.log(scenario);\n      // this.bindingMap = new Map<String,any>();\n      this.bindingList = [];\n      const trigger = [];\n      scenario.forEach(element => {\n        this.extractActors(element[1] != null ? element[1] : []);\n\n        if (element[0] != null) {\n          element[0].map(x => {\n            if (!trigger.includes(x)) {\n              trigger.push({\n                key: x,\n                category: 't_event',\n                value: ''\n              });\n            }\n          });\n        }\n\n        if (element[2] != null) {\n          element[2].map(x => {\n            if (!trigger.includes(x)) {\n              trigger.push({\n                key: x,\n                category: 'action',\n                value: ''\n              });\n            }\n          });\n        }\n\n        if (element[3] != null) {\n          element[3].map(x => {\n            if (!trigger.includes(x)) {\n              trigger.push({\n                key: x,\n                category: 'event',\n                value: ''\n              });\n            }\n          });\n        }\n      });\n      this.extractEvents(trigger);\n      this.extractTriggers(trigger); // this.loadBindings();\n\n      this.changeDetection.detectChanges();\n    }\n\n    extractTriggers(triggers) {\n      this.triggerSignals = [];\n\n      for (var item of triggers) {\n        if (item['category'] != 'action') {\n          if (!this.triggerSignals.includes(item['key'])) {\n            this.triggerSignals.push(item['key']);\n          }\n        }\n      }\n    }\n\n    isEmpty(binding) {\n      if (binding.value == undefined) return true;\n      return binding.value.trim() == \"\";\n    }\n\n    loadBindings() {\n      this.bindingMap.forEach((value, key) => {\n        this.bindingList.push(key);\n      });\n    }\n\n    extractEvents(triggers //,actions,emitters\n    ) {\n      if (triggers != null) {\n        triggers.forEach(element => {\n          if (!this.bindingMap.has(element.key)) {\n            this.bindingMap.set(element.key, element);\n            this.bindingList.push(element);\n          } else {\n            if (!this.bindingList.some(e => e.key === element.key)) {\n              this.bindingList.push(this.bindingMap.get(element.key));\n            }\n          }\n        });\n      } //   if(actions!=null)\n      //   actions.forEach(element => {\n      //     //console.log(element);\n      //     if (!this.bindingMap.has(element)){\n      //       var t = {key:element,value:\"\"};\n      //       this.bindingMap.set(element,t);\n      //       this.bindingList.push(t);\n      // }else{\n      //   this.bindingList.push(this.bindingMap.get(element));\n      // }\n      //   });\n      //   if(emitters!=null)\n      //   emitters.forEach(element => {\n      //     //console.log(element);\n      //     if (!this.bindingMap.has(element)){\n      //       var t = {key:element,value:\"\"};\n      //       this.bindingMap.set(element,t);\n      //       this.bindingList.push(t);\n      // }else{\n      //   this.bindingList.push(this.bindingMap.get(element));\n      // }\n      //   });\n      // //console.log(this.bindingMap);\n\n    }\n\n    logChangeBehavior(event) {// if (this.behaviorService.getText().trim() === \"\") return;\n      // var index = this.behaviorService.getText().length-2;\n      // if (this.behaviorService.getText().charAt(index) == '\\n')\n      //     this.updateActors();\n    }\n\n    logChangeConstraints(event) {// if (this.constraintService.getText().trim() === \"\") return;\n      // //console.log(this.constraintService.getText().charAt(this.constraintService.getText().length-1))\n    }\n\n    insertValue(text, flag = false) {\n      // console.log(\"word:\"+text);\n      this.service.insertValue(text, flag, this.behaviorTextFilter.text);\n    }\n\n    insertValueInConstraint(text, flag = false) {\n      this.service.insertValue(text, flag, this.constraintTextFilter.text);\n    }\n\n    selectTextBox(id) {\n      this.textBoxId = id;\n\n      switch (id) {\n        case 1:\n          this.service = this.actorService;\n          break;\n\n        case 2:\n          this.service = this.behaviorService;\n          break;\n\n        case 3:\n          this.service = this.constraintService;\n          break;\n      }\n    }\n\n    isEnable(id) {\n      return this.textBoxId == id;\n    }\n\n    extractActors(data) {\n      data.forEach(element => {\n        ////console.log(element);\n        this.insertActor(element);\n      });\n      var alist = [];\n      this.actorsList.forEach(element => {\n        alist.push(element.text);\n      });\n      this.stateservice.setActors(alist);\n    }\n\n    showInfo(id) {\n      //console.log(this.bindingList);\n      var dialogRef = this.dialog.open(HLBInforPopUp, {\n        width: \"70%\",\n        data: id\n      });\n    }\n\n    insertActor(actor) {\n      var t = this.actorsList.find(function (element) {\n        return element.text === actor;\n      }); // //console.log(t);\n\n      if (t == undefined) this.actorsList.push({\n        text: actor\n      });\n    }\n\n    clear() {\n      //console.log(this.behaviorText);\n      this.service.clear();\n      this.behaviorText = \"\";\n    }\n\n    selectedTab(index) {\n      this.selectedIndex = index;\n    }\n\n    addBindings() {\n      //console.log(this.bindingList);\n      var dialogRef = this.dialog.open(BindingPopUp, {\n        width: \"70%\",\n        data: this.bindingList\n      });\n      dialogRef.afterClosed().subscribe(result => {\n        //console.log('The dialog was closed');\n        this.generateNs();\n      });\n    }\n\n    generateNs() {\n      var data = {\n        actors: [],\n        behaviors: [],\n        constraints: [],\n        bindings: []\n      };\n      if (this.actorsList.length == 0) return;\n      if (this.behaviorList.length == 0) return;\n      this.actorsList.forEach(element => {\n        data.actors.push(element.text);\n      });\n      var flag = false;\n      this.behaviorList.forEach(element => {\n        data.behaviors.push(element);\n      });\n      this.contraintList.forEach(element => {\n        data.constraints.push(element.text);\n      });\n      this.bindingList.forEach(element => {\n        if (element.value == null || element.value.trim() == \"\") {\n          flag = true;\n          return;\n        }\n\n        data.bindings.push(element.key + \" \" + element.value);\n      });\n      if (flag) return;\n      this.stateservice.enableLoader();\n      this.http.put(\"v1/pr/hlb/generateNs\", data, {\n        withCredential: true\n      }).subscribe(data => {\n        //console.log(data);\n        this.stateservice.disableLoader();\n        this.downLoadFile(data.script);\n\n        this._snackBar.open(\"Successfully Downloaded.\", \"close\", {\n          duration: 2000\n        }); // this.stateservice.setBindings(data.Bindings);\n\n      }, error => {\n        this.stateservice.disableLoader();\n\n        this._snackBar.open(error, \"close\", {\n          duration: 2000\n        });\n      });\n    }\n\n    storeBinding(index) {\n      const str1 = ' - file exists';\n      const str2 = ' - file was modified';\n      const str3 = ' - process exists that performs action in the binding';\n      const str4 = ' - process completed w success for the given action'; // This part is done just to remove the the description\n\n      if (index && (this.bindingList[index].value.includes(str1) || this.bindingList[index].value.includes(str2) || this.bindingList[index].value.includes(str3) || this.bindingList[index].value.includes(str4))) {\n        const splitter = this.bindingList[index].value.split(' - ');\n        this.bindingList[index].value = splitter[0];\n      }\n\n      this.stateservice.setBindings(this.bindingList);\n    }\n\n    downLoadFile(data) {\n      var blob = new Blob([data], {\n        type: \"text/plain\"\n      }); //console.log(blob);\n      // var url = (window.URL || window.webkitURL).createObjectURL(blob);\n\n      var fileName = \"experiment.txt\";\n\n      if (\"msSaveOrOpenBlob\" in navigator) {\n        navigator.msSaveOrOpenBlob(blob, fileName);\n      } else {\n        var downloadLink = document.createElement(\"a\");\n        downloadLink.download = fileName;\n        downloadLink.innerHTML = \"Download File\";\n        downloadLink.href = window.URL.createObjectURL(blob); //downloadLink.onclick = destroyClickedElement;\n\n        downloadLink.style.display = \"none\";\n        document.body.appendChild(downloadLink); //  }\n\n        downloadLink.click();\n      }\n    }\n\n  }\n\n  HlbComponent.ɵfac = function HlbComponent_Factory(t) {\n    return new (t || HlbComponent)(i0.ɵɵdirectiveInject(i1.HttpService), i0.ɵɵdirectiveInject(i2.MatDialog), i0.ɵɵdirectiveInject(i3.StateService), i0.ɵɵdirectiveInject(i4.MatSnackBar), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i5.LogService), i0.ɵɵdirectiveInject(i6.AuthService));\n  };\n\n  HlbComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HlbComponent,\n    selectors: [[\"hlb\"]],\n    viewQuery: function HlbComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n        i0.ɵɵviewQuery(_c1, 5);\n        i0.ɵɵviewQuery(_c2, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.topologyGraphNetwork = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dependencyGraphNetwork = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dependencyGraphCycleNetwork = _t.first);\n      }\n    },\n    hostBindings: function HlbComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keydown.escape\", function HlbComponent_keydown_escape_HostBindingHandler($event) {\n          return ctx.onKeydownHandler($event);\n        }, false, i0.ɵɵresolveDocument);\n      }\n    },\n    decls: 266,\n    vars: 53,\n    consts: [[2, \"height\", \"650px\"], [\"autosize\", \"\", 1, \"drawer-container\"], [\"mode\", \"side\", 1, \"drawer-sidenav\"], [\"drawer\", \"\"], [1, \"drawer-content\"], [1, \"row\", 2, \"font-size\", \"12px\", \"font-family\", \"Arial, Helvetica, sans-serif\"], [1, \"col-md-12\", \"text-center\", \"p-2\"], [\"matTooltip\", \"Information\", 1, \"fa\", \"fa-question-circle\"], [\"href\", \"/docs/experiment_page\"], [\"href\", \"/docs/examples/\"], [1, \"d-flex\", \"flex-column\", 2, \"font-size\", \"12px\", \"font-family\", \"Arial, Helvetica, sans-serif\", \"min-height\", \"500px\", \"margin-top\", \"1em\"], [1, \"d-flex\", \"align-items-stretch\", \"side-nav-container\"], [1, \"p-2\", 2, \"width\", \"50%\"], [2, \"text-align\", \"center\", \"word-wrap\", \"break-word\"], [\"matTooltip\", \"Information\", 1, \"fa\", \"fa-question-circle\", \"info\", 3, \"click\"], [1, \"code-snippet\"], [1, \"row\"], [1, \"col-md-12\", 3, \"click\"], [2, \"margin\", \"0.6em\", \"border-bottom\", \"1px solid #eee\"], [\"type\", \"button\", \"class\", \"btn btn-outline-primary word-bubble-button\", 3, \"disabled\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"class\", \"btn btn-outline-primary word-bubble-button\", 3, \"disabled\", 4, \"ngIf\"], [1, \"flex-container\", 2, \"min-height\", \"200px\"], [\"class\", \"dependency-cycle-alert\", 4, \"ngIf\"], [\"id\", \"scenario-quill-box\", \"placeholder\", \"Steps to be executed during the experiment.\", \"format\", \"object\", 3, \"styles\", \"modules\", \"ngModel\", \"disabled\", \"ngModelChange\", \"onContentChanged\", \"onEditorCreated\", \"focusout\"], [2, \"border-left\", \"1px dashed #ccc\", \"border-right\", \"1px dashed #ccc\"], [\"id\", \"constraint-quill-box\", \"format\", \"object\", 3, \"styles\", \"modules\", \"disabled\", \"ngModel\", \"ngModelChange\", \"onContentChanged\", \"onEditorCreated\", \"focusout\"], [1, \"d-flex\", \"flex-column\", \"hide\"], [1, \"d-flex\", \"flex-row\", \"convert-btn\", \"p-2\", \"justify-content-center\"], [1, \"align-self-center\"], [\"src\", \"../../../../assets/icons/svg/loop-circular.svg\"], [1, \"d-flex\", \"justify-content-center\", \"error-text\", \"hide\"], [\"src\", \"../../../../assets/icons/svg/warning.svg\", 1, \"align-self-center\"], [2, \"border-top\", \"1px dashed #ccc\", \"border-bottom\", \"1px dashed #ccc\"], [1, \"p-2\", \"side-nav-container\"], [\"style\", \"font-size: 0.8em; text-align: center;\", 4, \"ngIf\"], [1, \"d-flex\", \"justify-content-center\"], [\"type\", \"button\", \"class\", \"btn btn-light special-func-btn\", 3, \"click\", 4, \"ngIf\", \"ngIfElse\"], [\"elseBlock\", \"\"], [4, \"ngIf\"], [\"class\", \"special-func-div\", \"cdkDrag\", \"\", 4, \"ngIf\"], [\"id\", \"graph-container\"], [1, \"d-flex\", \"flex-row\", \"justify-content-between\", \"toggle-icons\"], [2, \"width\", \"30%\"], [1, \"side-nav-icon\", 3, \"click\"], [\"src\", \"../../../../assets/icons/svg/arrow-circle-right.svg\"], [\"src\", \"../../../../assets/icons/svg/arrow-circle-left.svg\", 1, \"hide\"], [1, \"text-left\", \"font-weight-bold\"], [1, \"dependency-topology-toggle-icon-dependency\", 3, \"click\"], [1, \"dependency-topology-toggle-icon-topology\", 3, \"click\"], [1, \"graph-description-box\"], [1, \"graph-description-box-icon\"], [1, \"fas\", \"fa-info-circle\"], [1, \"graph-description-box-content\"], [1, \"dialog-box\", \"hide\"], [1, \"dialog-box-content\", \"d-flex\", \"flex-column\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"flex-wrap\"], [3, \"hidden\"], [\"id\", \"dialog-box-title\", 1, \"p-2\"], [\"class\", \"fas fa-edit topology-actor-name-action edit\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"data-toggle\", \"modal\", \"data-target\", \"#add-action-modal\", 1, \"btn\", \"dialog-box-action-button\", 3, \"click\"], [1, \"dialog-box-fields\", \"d-flex\", \"flex-column\", \"is-node\"], [\"appearance\", \"outline\", 1, \"flex-grow-1\"], [\"type\", \"text\", \"id\", \"node-ip-address\", \"aria-label\", \"string\", \"onkeypress\", \"return ((event.charCode !=8 && event.charCode ==0) || (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 46)\", \"matInput\", \"\", 3, \"change\"], [\"type\", \"text\", \"id\", \"node-operating-system\", \"aria-label\", \"string\", \"matInput\", \"\", 3, \"change\"], [\"type\", \"text\", \"id\", \"node-hardware-type\", \"aria-label\", \"string\", \"matInput\", \"\", 3, \"change\"], [\"type\", \"text\", \"id\", \"node-num\", \"onkeypress\", \"return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))\", \"value\", \"1\", \"aria-label\", \"string\", \"matInput\", \"\", 3, \"change\"], [\"class\", \"mt-2\", 4, \"ngIf\"], [1, \"dialog-box-fields\", \"d-flex\", \"flex-column\"], [1, \"d-flex\", \"flex-row\"], [\"type\", \"text\", \"id\", \"link-bandwidth\", \"onkeypress\", \"return ((event.charCode !=8 && event.charCode ==0) || (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 46)\", \"aria-label\", \"string\", \"matInput\", \"\", 1, \"flex-grow-1\", \"align-self-center\", 3, \"change\"], [1, \"field-units\", \"align-self-center\"], [\"type\", \"text\", \"id\", \"link-delay\", \"onkeypress\", \"return (event.charCode !=8 && event.charCode ==0 || (event.charCode >= 48 && event.charCode <= 57))\", \"aria-label\", \"string\", \"matInput\", \"\", 1, \"flex-grow-1\", \"align-self-center\", 3, \"change\"], [1, \"toastBox\", 2, \"display\", \"none\"], [1, \"graph-box\", \"hide\"], [1, \"graph-buttons\", \"d-flex\", \"flex-column\", \"noselect\", 2, \"text-align\", \"center\"], [\"id\", \"graphActionButtonList\", 1, \"flex-grow-1\"], [1, \"d-flex\", \"flex-row\", \"justify-content-center\"], [1, \"graph-action-button\", 3, \"click\"], [\"id\", \"actionMessage\"], [\"id\", \"topologyGraphNetwork\"], [\"topologyGraphNetwork\", \"\"], [1, \"graph-box-dependency\", \"hide\"], [2, \"width\", \"200px\", \"margin-top\", \"100px\", \"margin-left\", \"50px\", \"position\", \"absolute\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"id\", \"dependencyGraphCycleContainer\", 2, \"width\", \"200px\", \"height\", \"200px\"], [2, \"height\", \"10%\"], [2, \"height\", \"90%\"], [\"id\", \"dependencyGraphCycleNetwork\"], [\"dependencyGraphCycleNetwork\", \"\"], [1, \"flex-grow-1\"], [1, \"graph-action-button\", \"dependency-edit-action-button\", \"hide\", 3, \"click\"], [\"id\", \"dependencyGraphNetwork\"], [\"dependencyGraphNetwork\", \"\"], [\"class\", \"alert alert-warning alert-dismissible fade show\", \"role\", \"alert\", 4, \"ngIf\"], [\"id\", \"add-action-modal\", \"role\", \"dialog\", \"aria-labelledby\", \"add-action-modal-label\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-dialog-centered\"], [1, \"modal-content\"], [1, \"modal-header\"], [\"id\", \"add-action-modal-label\", 1, \"modal-title\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\"], [\"aria-hidden\", \"true\"], [1, \"modal-body\"], [1, \"d-flex\", \"flex-column\", \"p-2\"], [1, \"d-flex\", \"flex-grow-1\"], [1, \"form-check\", \"modal-action-headers\", \"d-flex\", \"align-items-center\", \"flex-grow-1\"], [1, \"form-check-label\"], [\"aria-label\", \"modal-actor-input\", \"id\", \"modal-actor-input\", 1, \"form-select\", \"form-control\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Action Name\", \"id\", \"modal-action-name-input\", 1, \"form-control\", \"flex-grow-1\"], [1, \"d-flex\", \"justify-content-start\", \"error-text\", \"modal-add-action-error\", \"hide\"], [\"type\", \"text\", \"placeholder\", \"Binding\", \"id\", \"modal-action-binding-input\", \"list\", \"action-bindings\", 1, \"form-control\", \"flex-grow-1\"], [\"id\", \"action-bindings\"], [\"type\", \"checkbox\", \"value\", \"\", \"id\", \"modal-action-trigger-checkbox\", 1, \"form-check-input\"], [\"for\", \"modal-action-trigger-checkbox\", 1, \"form-check-label\"], [\"multiple\", \"\", \"id\", \"modal-action-trigger-selections\", \"disabled\", \"\", 1, \"form-control\", \"flex-grow-1\"], [\"type\", \"checkbox\", \"value\", \"\", \"id\", \"modal-action-wait-checkbox\", 1, \"form-check-input\"], [\"for\", \"modal-action-wait-checkbox\", 1, \"form-check-label\"], [1, \"input-group\"], [\"type\", \"number\", \"placeholder\", \"Wait Time\", \"id\", \"modal-action-wait-input\", \"disabled\", \"\", 1, \"form-control\", \"flex-grow-1\"], [1, \"input-group-append\"], [\"id\", \"basic-addon2\", 1, \"input-group-text\"], [\"type\", \"checkbox\", \"value\", \"\", \"id\", \"modal-action-emit-checkbox\", 1, \"form-check-input\"], [\"for\", \"modal-action-emit-checkbox\", 1, \"form-check-label\"], [\"type\", \"text\", \"placeholder\", \"Emit Event\", \"id\", \"modal-action-emit-input\", \"disabled\", \"\", 1, \"form-control\", \"flex-grow-1\"], [\"type\", \"checkbox\", \"value\", \"\", \"id\", \"modal-action-event-checkbox\", \"disabled\", \"\", 1, \"form-check-input\"], [\"for\", \"modal-action-event-checkbox\", 1, \"form-check-label\"], [\"type\", \"text\", \"placeholder\", \"Binding\", \"id\", \"modal-event-binding-input\", \"list\", \"event-bindings\", \"disabled\", \"\", \"autocomplete\", \"off\", 1, \"form-control\", \"flex-grow-1\"], [\"id\", \"event-bindings\"], [1, \"modal-footer\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", 1, \"btn\", \"btn-light\"], [\"type\", \"button\", \"id\", \"modal-delete-action-button\", 1, \"btn\", \"modal-delete-button\", 3, \"click\"], [\"type\", \"button\", \"id\", \"modal-add-action-button\", 1, \"btn\", \"modal-add-button\", 3, \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"word-bubble-button\", 3, \"disabled\", \"click\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-primary\", \"word-bubble-button\", 3, \"disabled\"], [1, \"dependency-cycle-alert\"], [1, \"fas\", \"fa-exclamation-triangle\"], [2, \"font-size\", \"0.8em\", \"text-align\", \"center\"], [\"type\", \"button\", 1, \"btn\", \"btn-light\", \"special-func-btn\", 3, \"click\"], [1, \"behavior-list\"], [\"appearance\", \"outline\", 2, \"width\", \"100%\"], [\"type\", \"text\", \"aria-label\", \"string\", \"matInput\", \"\", 3, \"disabled\", \"ngModel\", \"matAutocomplete\", \"ngModelChange\", \"change\", \"focus\", \"keyup\"], [3, \"optionSelected\"], [\"UserInfo\", \"matAutocomplete\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"], [\"cdkDrag\", \"\", 1, \"special-func-div\"], [1, \"table\", \"table-bordered\"], [\"scope\", \"col\"], [\"scope\", \"row\"], [1, \"fas\", \"fa-edit\", \"topology-actor-name-action\", \"edit\", 3, \"click\"], [3, \"ngModel\", \"ngModelChange\", \"keyup\", \"change\"], [\"class\", \"topology-actor-name-action-error\", 4, \"ngIf\"], [1, \"topology-actor-name-action-error\"], [1, \"mt-2\"], [\"class\", \"topology-actor-action\", 4, \"ngFor\", \"ngForOf\"], [1, \"topology-actor-action\"], [1, \"topology-actor-action-label\"], [1, \"topology-actor-action-name\"], [1, \"topology-actor-action-edit\", 3, \"click\"], [1, \"fas\", \"fa-edit\"], [1, \"col-md-3\", \"mt-1\", 3, \"ngStyle\"], [1, \"col-md-9\", \"mt-1\"], [\"role\", \"alert\", 1, \"alert\", \"alert-warning\", \"alert-dismissible\", \"fade\", \"show\"], [\"type\", \"button\", \"data-dismiss\", \"alert\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"]],\n    template: function HlbComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r67 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"mat-drawer-container\", 1);\n        i0.ɵɵelementStart(2, \"mat-drawer\", 2, 3);\n        i0.ɵɵelementStart(4, \"div\", 4);\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"div\", 6);\n        i0.ɵɵtext(7, \" In DEW, an experiment consists of a behavior (who does what and when), constraints (how experiment should be materialized on a testbed) and bindings (specific commands to run on nodes for each action). Click on \");\n        i0.ɵɵelement(8, \"span\", 7);\n        i0.ɵɵtext(9, \" to learn more about each component or explore our \");\n        i0.ɵɵelementStart(10, \"a\", 8);\n        i0.ɵɵtext(11, \"documentation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(12, \" and \");\n        i0.ɵɵelementStart(13, \"a\", 9);\n        i0.ɵɵtext(14, \"examples\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(15, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\", 10);\n        i0.ɵɵelementStart(17, \"div\", 11);\n        i0.ɵɵelementStart(18, \"div\", 12);\n        i0.ɵɵelementStart(19, \"div\");\n        i0.ɵɵelementStart(20, \"div\", 13);\n        i0.ɵɵelementStart(21, \"i\", 14);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_i_click_21_listener() {\n          return ctx.showInfo(1);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"h2\");\n        i0.ɵɵtext(23, \"Scenario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"hr\");\n        i0.ɵɵelementStart(25, \"pre\", 15);\n        i0.ɵɵtext(26, \"[when <event>][wait <time>] actor action [emit <event>]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(27, \"hr\");\n        i0.ɵɵelementStart(28, \"div\", 16);\n        i0.ɵɵelementStart(29, \"div\", 17);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_29_listener() {\n          return ctx.selectTextBox(2);\n        });\n        i0.ɵɵelementStart(30, \"div\", 18);\n        i0.ɵɵelementStart(31, \"span\");\n        i0.ɵɵtext(32, \"Suggestions:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(33, HlbComponent_button_33_Template, 2, 2, \"button\", 19);\n        i0.ɵɵpipe(34, \"textfilter\");\n        i0.ɵɵpipe(35, \"slice\");\n        i0.ɵɵtemplate(36, HlbComponent_button_36_Template, 2, 2, \"button\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"div\", 21);\n        i0.ɵɵtemplate(38, HlbComponent_div_38_Template, 3, 0, \"div\", 22);\n        i0.ɵɵelementStart(39, \"quill-editor\", 23);\n        i0.ɵɵlistener(\"ngModelChange\", function HlbComponent_Template_quill_editor_ngModelChange_39_listener($event) {\n          return ctx.scenariosObjFormat = $event;\n        })(\"onContentChanged\", function HlbComponent_Template_quill_editor_onContentChanged_39_listener($event) {\n          return ctx.logChangeBehavior($event);\n        })(\"onEditorCreated\", function HlbComponent_Template_quill_editor_onEditorCreated_39_listener($event) {\n          return ctx.created($event, 2);\n        })(\"focusout\", function HlbComponent_Template_quill_editor_focusout_39_listener() {\n          return ctx.updateActors();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(40, \"div\", 24);\n        i0.ɵɵelementStart(41, \"div\", 12);\n        i0.ɵɵelementStart(42, \"div\");\n        i0.ɵɵelementStart(43, \"div\", 13);\n        i0.ɵɵelementStart(44, \"i\", 14);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_i_click_44_listener() {\n          return ctx.showInfo(2);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(45, \"h2\");\n        i0.ɵɵtext(46, \"Constraints\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(47, \"hr\");\n        i0.ɵɵelementStart(48, \"pre\", 15);\n        i0.ɵɵtext(49, \"actor [ constraint value, constraint value ] | link actor [ constraint value, constraint value  ]\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(50, \"hr\");\n        i0.ɵɵelementStart(51, \"div\", 16);\n        i0.ɵɵelementStart(52, \"div\", 17);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_52_listener() {\n          return ctx.selectTextBox(3);\n        });\n        i0.ɵɵelementStart(53, \"div\", 18);\n        i0.ɵɵelementStart(54, \"span\");\n        i0.ɵɵtext(55, \"Suggestions:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(56, HlbComponent_button_56_Template, 2, 2, \"button\", 19);\n        i0.ɵɵpipe(57, \"textfilter\");\n        i0.ɵɵpipe(58, \"slice\");\n        i0.ɵɵtemplate(59, HlbComponent_button_59_Template, 2, 2, \"button\", 20);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"div\", 21);\n        i0.ɵɵelementStart(61, \"quill-editor\", 25);\n        i0.ɵɵlistener(\"ngModelChange\", function HlbComponent_Template_quill_editor_ngModelChange_61_listener($event) {\n          return ctx.constraintsObjFormat = $event;\n        })(\"onContentChanged\", function HlbComponent_Template_quill_editor_onContentChanged_61_listener($event) {\n          return ctx.logChangeConstraints($event);\n        })(\"onEditorCreated\", function HlbComponent_Template_quill_editor_onEditorCreated_61_listener($event) {\n          return ctx.created($event, 3);\n        })(\"focusout\", function HlbComponent_Template_quill_editor_focusout_61_listener() {\n          return ctx.updateActorsConstraint();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"div\", 26);\n        i0.ɵɵelementStart(63, \"div\", 27);\n        i0.ɵɵelementStart(64, \"span\", 28);\n        i0.ɵɵtext(65, \"Convert from DEW 1.0 to 2.0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"div\", 28);\n        i0.ɵɵelement(67, \"img\", 29);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"div\", 30);\n        i0.ɵɵelement(69, \"img\", 31);\n        i0.ɵɵelementStart(70, \"span\", 28);\n        i0.ɵɵtext(71, \"Unable to convert the given constraints.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(72, \"div\", 32);\n        i0.ɵɵelementStart(73, \"div\", 33);\n        i0.ɵɵelementStart(74, \"div\", 13);\n        i0.ɵɵelementStart(75, \"i\", 14);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_i_click_75_listener() {\n          return ctx.showInfo(3);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(76, \"h2\");\n        i0.ɵɵtext(77, \"Bindings\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(78, \"hr\");\n        i0.ɵɵelementStart(79, \"p\", 15);\n        i0.ɵɵtext(80, \"Choose an option from drop-down boxes or input your own commands. Variables are preceded by $ to indicate that their values should be replaced by constants in the design stage.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(81, \"hr\");\n        i0.ɵɵtemplate(82, HlbComponent_div_82_Template, 4, 0, \"div\", 34);\n        i0.ɵɵelementStart(83, \"div\", 35);\n        i0.ɵɵtemplate(84, HlbComponent_button_84_Template, 2, 0, \"button\", 36);\n        i0.ɵɵtemplate(85, HlbComponent_ng_template_85_Template, 2, 0, \"ng-template\", null, 37, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(87, HlbComponent_div_87_Template, 3, 1, \"div\", 38);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(88, HlbComponent_div_88_Template, 10, 1, \"div\", 39);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(89, \"div\", 40);\n        i0.ɵɵelementStart(90, \"div\", 41);\n        i0.ɵɵelementStart(91, \"div\", 42);\n        i0.ɵɵelementStart(92, \"div\", 43);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_92_listener() {\n          i0.ɵɵrestoreView(_r67);\n\n          const _r0 = i0.ɵɵreference(3);\n\n          _r0.toggle();\n\n          return ctx.openSideNavBar();\n        });\n        i0.ɵɵelement(93, \"img\", 44);\n        i0.ɵɵelement(94, \"img\", 45);\n        i0.ɵɵelementStart(95, \"span\", 46);\n        i0.ɵɵtext(96, \"Textual Representation\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(97, \"div\", 42);\n        i0.ɵɵelementStart(98, \"div\", 47);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_98_listener() {\n          return ctx.toggleDependencyView();\n        });\n        i0.ɵɵelementStart(99, \"span\", 46);\n        i0.ɵɵtext(100, \"Dependency\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(101, \"div\", 48);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_101_listener() {\n          return ctx.toggleTopologyView();\n        });\n        i0.ɵɵelementStart(102, \"span\", 46);\n        i0.ɵɵtext(103, \"Topology\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(104, \"div\", 49);\n        i0.ɵɵelementStart(105, \"div\", 50);\n        i0.ɵɵelement(106, \"i\", 51);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(107, \"div\", 52);\n        i0.ɵɵtext(108);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(109, \"div\", 53);\n        i0.ɵɵelementStart(110, \"div\", 54);\n        i0.ɵɵelementStart(111, \"div\", 55);\n        i0.ɵɵelementStart(112, \"div\", 56);\n        i0.ɵɵelement(113, \"span\", 57);\n        i0.ɵɵtemplate(114, HlbComponent_i_114_Template, 1, 0, \"i\", 58);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(115, HlbComponent_div_115_Template, 3, 2, \"div\", 38);\n        i0.ɵɵelementStart(116, \"button\", 59);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_button_click_116_listener() {\n          return ctx.clearModalContent();\n        });\n        i0.ɵɵtext(117, \"Add Action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(118, \"hr\");\n        i0.ɵɵelementStart(119, \"div\", 60);\n        i0.ɵɵelementStart(120, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(121, \"mat-label\");\n        i0.ɵɵtext(122, \"IP Address\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(123, \"input\", 62);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_123_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(124, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(125, \"mat-label\");\n        i0.ɵɵtext(126, \"Operating System\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(127, \"input\", 63);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_127_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(128, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(129, \"mat-label\");\n        i0.ɵɵtext(130, \"Hardware Type\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(131, \"input\", 64);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_131_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(132, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(133, \"mat-label\");\n        i0.ɵɵtext(134, \"Number of Nodes\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(135, \"input\", 65);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_135_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(136, HlbComponent_div_136_Template, 5, 1, \"div\", 66);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(137, \"div\", 67);\n        i0.ɵɵelementStart(138, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(139, \"mat-label\");\n        i0.ɵɵtext(140, \"BandWidth\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(141, \"div\", 68);\n        i0.ɵɵelementStart(142, \"input\", 69);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_142_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(143, \"div\", 70);\n        i0.ɵɵelementStart(144, \"span\");\n        i0.ɵɵtext(145, \"Gbps\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(146, \"mat-form-field\", 61);\n        i0.ɵɵelementStart(147, \"mat-label\");\n        i0.ɵɵtext(148, \"Delay\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(149, \"div\", 68);\n        i0.ɵɵelementStart(150, \"input\", 71);\n        i0.ɵɵlistener(\"change\", function HlbComponent_Template_input_change_150_listener($event) {\n          return ctx.onTopologyParametersChange($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(151, \"div\", 70);\n        i0.ɵɵelementStart(152, \"span\");\n        i0.ɵɵtext(153, \"ms\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(154, \"div\", 72);\n        i0.ɵɵtext(155, \" Kindly select a node before attempting to change any of the links \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(156, \"div\", 73);\n        i0.ɵɵelementStart(157, \"div\", 74);\n        i0.ɵɵelementStart(158, \"div\", 75);\n        i0.ɵɵelementStart(159, \"div\", 76);\n        i0.ɵɵelementStart(160, \"div\", 77);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_160_listener() {\n          return ctx.onAddNodeClick(\"Node\");\n        });\n        i0.ɵɵtext(161, \"Add Node\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(162, \"div\", 77);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_162_listener() {\n          return ctx.onAddNodeClick(\"LAN\");\n        });\n        i0.ɵɵtext(163, \"Add LAN\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(164, \"div\", 78);\n        i0.ɵɵelementStart(165, \"span\");\n        i0.ɵɵtext(166, \"Hold \");\n        i0.ɵɵelementStart(167, \"kbd\");\n        i0.ɵɵtext(168, \"Space\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(169, \" and click-and-drag between nodes to add edges, Select a node/edge and press \");\n        i0.ɵɵelementStart(170, \"kbd\");\n        i0.ɵɵtext(171, \"Del\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(172, \" to delete\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(173, \"div\", 79, 80);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(175, \"div\", 81);\n        i0.ɵɵelementStart(176, \"div\", 82);\n        i0.ɵɵtemplate(177, HlbComponent_div_177_Template, 4, 4, \"div\", 83);\n        i0.ɵɵpipe(178, \"keyvalue\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(179, \"div\", 84);\n        i0.ɵɵelementStart(180, \"div\", 85);\n        i0.ɵɵtext(181, \" Dependency Cycle \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(182, \"div\", 86);\n        i0.ɵɵelement(183, \"div\", 87, 88);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(185, \"div\", 74);\n        i0.ɵɵelementStart(186, \"div\", 89);\n        i0.ɵɵelementStart(187, \"div\", 76);\n        i0.ɵɵelementStart(188, \"div\", 77);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_188_listener() {\n          return ctx.onAddActionDependencyClick();\n        });\n        i0.ɵɵtext(189, \"Add Action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(190, \"div\", 90);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_div_click_190_listener() {\n          return ctx.onEditActionDependencyClick();\n        });\n        i0.ɵɵtext(191, \"Edit Action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(192, \"div\", 91, 92);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(194, HlbComponent_div_194_Template, 5, 1, \"div\", 93);\n        i0.ɵɵelementStart(195, \"div\", 94);\n        i0.ɵɵelementStart(196, \"div\", 95);\n        i0.ɵɵelementStart(197, \"div\", 96);\n        i0.ɵɵelementStart(198, \"div\", 97);\n        i0.ɵɵelementStart(199, \"h5\", 98);\n        i0.ɵɵtext(200, \"Add Action\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(201, \"button\", 99);\n        i0.ɵɵelementStart(202, \"span\", 100);\n        i0.ɵɵtext(203, \"\\u00D7\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(204, \"div\", 101);\n        i0.ɵɵelementStart(205, \"div\", 102);\n        i0.ɵɵelementStart(206, \"div\", 103);\n        i0.ɵɵelementStart(207, \"div\", 104);\n        i0.ɵɵelementStart(208, \"span\", 105);\n        i0.ɵɵtext(209, \" Actor \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(210, \"select\", 106);\n        i0.ɵɵtemplate(211, HlbComponent_option_211_Template, 2, 1, \"option\", 107);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(212, \"div\", 103);\n        i0.ɵɵelementStart(213, \"div\", 104);\n        i0.ɵɵelementStart(214, \"span\", 105);\n        i0.ɵɵtext(215, \" Action \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(216, \"input\", 108);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(217, \"div\", 109);\n        i0.ɵɵelement(218, \"img\", 31);\n        i0.ɵɵelementStart(219, \"span\", 28);\n        i0.ɵɵtext(220, \"Kindly add an Action Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(221, \"div\", 103);\n        i0.ɵɵelementStart(222, \"div\", 104);\n        i0.ɵɵelementStart(223, \"span\", 105);\n        i0.ɵɵtext(224, \" Action Binding \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(225, \"input\", 110);\n        i0.ɵɵelementStart(226, \"datalist\", 111);\n        i0.ɵɵtemplate(227, HlbComponent_option_227_Template, 2, 1, \"option\", 107);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(228, \"div\", 103);\n        i0.ɵɵelementStart(229, \"div\", 104);\n        i0.ɵɵelement(230, \"input\", 112);\n        i0.ɵɵelementStart(231, \"label\", 113);\n        i0.ɵɵtext(232, \" Trigger \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(233, \"select\", 114);\n        i0.ɵɵtemplate(234, HlbComponent_option_234_Template, 2, 1, \"option\", 107);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(235, \"div\", 103);\n        i0.ɵɵelementStart(236, \"div\", 104);\n        i0.ɵɵelement(237, \"input\", 115);\n        i0.ɵɵelementStart(238, \"label\", 116);\n        i0.ɵɵtext(239, \" Wait \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(240, \"div\", 117);\n        i0.ɵɵelement(241, \"input\", 118);\n        i0.ɵɵelementStart(242, \"div\", 119);\n        i0.ɵɵelementStart(243, \"span\", 120);\n        i0.ɵɵtext(244, \"s\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(245, \"div\", 103);\n        i0.ɵɵelementStart(246, \"div\", 104);\n        i0.ɵɵelement(247, \"input\", 121);\n        i0.ɵɵelementStart(248, \"label\", 122);\n        i0.ɵɵtext(249, \" Emit \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(250, \"input\", 123);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(251, \"div\", 103);\n        i0.ɵɵelementStart(252, \"div\", 104);\n        i0.ɵɵelement(253, \"input\", 124);\n        i0.ɵɵelementStart(254, \"label\", 125);\n        i0.ɵɵtext(255, \" Event Binding \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(256, \"input\", 126);\n        i0.ɵɵelementStart(257, \"datalist\", 127);\n        i0.ɵɵtemplate(258, HlbComponent_option_258_Template, 2, 1, \"option\", 107);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(259, \"div\", 128);\n        i0.ɵɵelementStart(260, \"button\", 129);\n        i0.ɵɵtext(261, \"Close\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(262, \"button\", 130);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_button_click_262_listener() {\n          return ctx.deleteActionFromUI();\n        });\n        i0.ɵɵtext(263, \"Delete\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(264, \"button\", 131);\n        i0.ɵɵlistener(\"click\", function HlbComponent_Template_button_click_264_listener() {\n          return ctx.addActionFromUI();\n        });\n        i0.ɵɵtext(265, \"Add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        const _r8 = i0.ɵɵreference(86);\n\n        i0.ɵɵadvance(33);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(34, 29, i0.ɵɵpipeBind3(35, 32, ctx.behaviorWordList, 0, 3), ctx.behaviorTextFilter));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.suggestionbehaviorMessage != null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.dependencyGraphCyclePath != null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"styles\", i0.ɵɵpureFunction0(45, _c4))(\"modules\", i0.ɵɵpureFunction1(47, _c6, i0.ɵɵpureFunction0(46, _c5)))(\"ngModel\", ctx.scenariosObjFormat)(\"disabled\", ctx.isExperimentDisabled());\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(57, 36, i0.ɵɵpipeBind3(58, 39, ctx.constraintWordList, 0, 4), ctx.constraintTextFilter));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.suggestionConstraintMessage != null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"styles\", i0.ɵɵpureFunction0(49, _c4))(\"modules\", i0.ɵɵpureFunction1(51, _c6, i0.ɵɵpureFunction0(50, _c5)))(\"disabled\", ctx.isExperimentDisabled())(\"ngModel\", ctx.constraintsObjFormat);\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"ngIf\", ctx.bindingList.length == 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", !ctx.showSpecialFuncDialog)(\"ngIfElse\", _r8);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.bindingList.length != 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSpecialFuncDialog);\n        i0.ɵɵadvance(20);\n        i0.ɵɵtextInterpolate1(\" \", ctx.graphDescription, \" \");\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"hidden\", !(!ctx.topologyGraphSelectedNodeData || !ctx.topologyGraphSelectedNodeData.nameEditable));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.topologyGraphSelectedNodeData && ctx.topologyGraphSelectedNodeData.nodetype == \"NODE\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.topologyGraphSelectedNodeData && ctx.topologyGraphSelectedNodeData.nameEditable);\n        i0.ɵɵadvance(21);\n        i0.ɵɵproperty(\"ngIf\", ctx.topologyGraphSelectedNodeData && ctx.topologyGraphSelectedNodeData.actions && ctx.topologyGraphSelectedNodeData.actions.length);\n        i0.ɵɵadvance(41);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(178, 43, ctx.actorsGroup));\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngIf\", ctx.showAlertMsg);\n        i0.ɵɵadvance(17);\n        i0.ɵɵproperty(\"ngForOf\", ctx.actorsList);\n        i0.ɵɵadvance(16);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filterBindingOptions);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngForOf\", ctx.triggerSignals);\n        i0.ɵɵadvance(24);\n        i0.ɵɵproperty(\"ngForOf\", ctx.filterBindingOptionsForEventCleaned);\n      }\n    },\n    directives: [i7.MatDrawerContainer, i7.MatDrawer, i8.MatTooltip, i9.NgForOf, i9.NgIf, i10.QuillEditorComponent, i11.NgControlStatus, i11.NgModel, i12.MatFormField, i12.MatLabel, i13.MatInput, i11.DefaultValueAccessor, i14.MatAutocompleteTrigger, i14.MatAutocomplete, i15.MatOption, i16.CdkDrag, i9.NgStyle, i11.NgSelectOption, i11.ɵNgSelectMultipleOption],\n    pipes: [i17.TextFilterPipe, i9.SlicePipe, i9.KeyValuePipe, i9.AsyncPipe],\n    styles: [_c7]\n  });\n  return HlbComponent;\n})();\nexport let BindingPopUp = /*#__PURE__*/(() => {\n  class BindingPopUp {\n    constructor(dialogRef, bindingList) {\n      this.dialogRef = dialogRef;\n      this.bindingList = bindingList;\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  BindingPopUp.ɵfac = function BindingPopUp_Factory(t) {\n    return new (t || BindingPopUp)(i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  BindingPopUp.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: BindingPopUp,\n    selectors: [[\"hlb-binding\"]],\n    decls: 14,\n    vars: 3,\n    consts: [[\"mat-dialog-content\", \"\"], [1, \"row\", 2, \"margin\", \".5em\"], [1, \"col-md-12\"], [2, \"text-align\", \"center\"], [\"style\", \"font-size: .8em;text-align: center;\", 4, \"ngIf\"], [4, \"ngIf\"], [\"mat-dialog-actions\", \"\"], [\"mat-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", \"cdkFocusInitial\", \"\", 3, \"mat-dialog-close\"], [2, \"font-size\", \".8em\", \"text-align\", \"center\"], [1, \"behavior-list\"], [\"class\", \"binding-box\", 4, \"ngFor\", \"ngForOf\"], [1, \"binding-box\"], [2, \"width\", \"100%\"], [\"matInput\", \"\", 3, \"placeholder\", \"ngModel\", \"ngModelChange\"]],\n    template: function BindingPopUp_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h2\");\n        i0.ɵɵtext(5, \"Bindings\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(6, \"hr\");\n        i0.ɵɵtemplate(7, BindingPopUp_div_7_Template, 4, 0, \"div\", 4);\n        i0.ɵɵtemplate(8, BindingPopUp_div_8_Template, 3, 1, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\", 6);\n        i0.ɵɵelementStart(10, \"button\", 7);\n        i0.ɵɵlistener(\"click\", function BindingPopUp_Template_button_click_10_listener() {\n          return ctx.onNoClick();\n        });\n        i0.ɵɵtext(11, \"Back\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"button\", 8);\n        i0.ɵɵtext(13, \"Download\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"ngIf\", ctx.bindingList.length == 0);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.bindingList.length != 0);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"mat-dialog-close\", ctx.bindingList);\n      }\n    },\n    directives: [i2.MatDialogContent, i9.NgIf, i2.MatDialogActions, i18.MatButton, i2.MatDialogClose, i9.NgForOf, i12.MatFormField, i13.MatInput, i11.DefaultValueAccessor, i11.NgControlStatus, i11.NgModel],\n    styles: [_c7]\n  });\n  return BindingPopUp;\n})();\nexport let HLBInforPopUp = /*#__PURE__*/(() => {\n  class HLBInforPopUp {\n    constructor(dialogRef, showId) {\n      this.dialogRef = dialogRef;\n      this.showId = showId;\n    }\n\n    onNoClick() {\n      this.dialogRef.close();\n    }\n\n  }\n\n  HLBInforPopUp.ɵfac = function HLBInforPopUp_Factory(t) {\n    return new (t || HLBInforPopUp)(i0.ɵɵdirectiveInject(i2.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA));\n  };\n\n  HLBInforPopUp.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: HLBInforPopUp,\n    selectors: [[\"hlb-info\"]],\n    decls: 107,\n    vars: 3,\n    consts: [[\"mat-dialog-content\", \"\"], [1, \"row\", 2, \"margin\", \"0.5em\", 3, \"hidden\"], [1, \"actor_example_color\"], [1, \"binding_example_color\"], [\"href\", \"/docs/experiment_page/#behavior\"], [\"href\", \"/docs/experiment_page/#constraints\"], [\"href\", \"/docs/experiment_page/#bindings\"]],\n    template: function HLBInforPopUp_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"ul\");\n        i0.ɵɵelementStart(3, \"li\");\n        i0.ɵɵtext(4, \"Define steps to be executed during this experiment.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"li\");\n        i0.ɵɵelementStart(6, \"dl\");\n        i0.ɵɵelementStart(7, \"dt\");\n        i0.ɵɵtext(8, \" For example: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ul\");\n        i0.ɵɵelementStart(10, \"li\");\n        i0.ɵɵelementStart(11, \"span\", 2);\n        i0.ɵɵtext(12, \"actor0\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(13, \"\\u00A0\");\n        i0.ɵɵelementStart(14, \"span\", 3);\n        i0.ɵɵtext(15, \"start_log\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"li\");\n        i0.ɵɵtext(17, \" wait t0 \");\n        i0.ɵɵelementStart(18, \"span\", 2);\n        i0.ɵɵtext(19, \"actor1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(20, \"\\u00A0\");\n        i0.ɵɵelementStart(21, \"span\", 3);\n        i0.ɵɵtext(22, \"legitimate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(23, \"li\");\n        i0.ɵɵtext(24, \" when\\u00A0\");\n        i0.ɵɵelementStart(25, \"span\", 3);\n        i0.ɵɵtext(26, \"stop_attack_done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(27, \"\\u00A0wait t3\\u00A0\");\n        i0.ɵɵelementStart(28, \"span\", 2);\n        i0.ɵɵtext(29, \"actor1\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(30, \"\\u00A0\");\n        i0.ɵɵelementStart(31, \"span\", 3);\n        i0.ɵɵtext(32, \"stop_legitimate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(33, \"\\u00A0emit\\u00A0\");\n        i0.ɵɵelementStart(34, \"span\", 3);\n        i0.ɵɵtext(35, \"stop_legitimate_done\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(36, \"li\");\n        i0.ɵɵtext(37, \" As you start typing there will be auto-suggestion displayed near the top of the text area. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"li\");\n        i0.ɵɵtext(39, \" Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"li\");\n        i0.ɵɵtext(41, \" There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"li\");\n        i0.ɵɵtext(43, \" For more information, refer to the documentation \");\n        i0.ɵɵelementStart(44, \"a\", 4);\n        i0.ɵɵtext(45, \"here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(46, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(47, \"div\", 1);\n        i0.ɵɵelementStart(48, \"ul\");\n        i0.ɵɵelementStart(49, \"li\");\n        i0.ɵɵtext(50, \"Define all the constraints for this experiment.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(51, \"li\");\n        i0.ɵɵelementStart(52, \"dl\");\n        i0.ɵɵelementStart(53, \"dt\");\n        i0.ɵɵtext(54, \" For example: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(55, \"ul\");\n        i0.ɵɵelementStart(56, \"li\");\n        i0.ɵɵtext(57, \" server\\u00A0[\\u00A0os\\u00A0ubuntu\\u00A0] \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(58, \"li\");\n        i0.ɵɵtext(59, \" attacker\\u00A0[\\u00A0num\\u00A03\\u00A0] \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(60, \"li\");\n        i0.ɵɵtext(61, \" lan\\u00A0client\\u00A0attacker\\u00A0server\\u00A0[\\u00A0bw\\u00A01\\u00A0] \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(62, \"li\");\n        i0.ɵɵtext(63, \" link\\u00A0router\\u00A0server\\u00A0[\\u00A0bw\\u00A01,\\u00A0delay\\u00A05\\u00A0] \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(64, \"li\");\n        i0.ɵɵtext(65, \" As you start typing there will be auto-suggestion displayed near the top of the text area. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(66, \"li\");\n        i0.ɵɵtext(67, \" Press tab to use the first auto suggested word. It will append the word near the cursor in the textarea. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(68, \"li\");\n        i0.ɵɵtext(69, \" There will also be suggestion displayed along with suggested text. This will help you to write the next word or phrase. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(70, \"li\");\n        i0.ɵɵtext(71, \" For more information, refer to the documentation \");\n        i0.ɵɵelementStart(72, \"a\", 5);\n        i0.ɵɵtext(73, \"here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(74, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(75, \"div\", 1);\n        i0.ɵɵelementStart(76, \"ul\");\n        i0.ɵɵelementStart(77, \"li\");\n        i0.ɵɵtext(78, \"Define all the constraints for this experiment.\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(79, \"li\");\n        i0.ɵɵelementStart(80, \"dl\");\n        i0.ɵɵelementStart(81, \"dt\");\n        i0.ɵɵtext(82, \" For example: \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(83, \"ul\");\n        i0.ɵɵelementStart(84, \"li\");\n        i0.ɵɵelementStart(85, \"span\", 3);\n        i0.ɵɵtext(86, \" install_iperf\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(87, \"\\u00A0apt-get install iperf -y \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(88, \"li\");\n        i0.ɵɵelementStart(89, \"span\", 3);\n        i0.ɵɵtext(90, \" install_tcpdump\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(91, \"\\u00A0apt-get install tcpdump -y \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(92, \"li\");\n        i0.ɵɵelementStart(93, \"span\", 3);\n        i0.ɵɵtext(94, \" install_flooder\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(95, \"\\u00A0/scripts/common/install_flooder.sh \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(96, \"li\");\n        i0.ɵɵelementStart(97, \"span\", 3);\n        i0.ɵɵtext(98, \" start_server\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(99, \"\\u00A0iperf -s \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(100, \"li\");\n        i0.ɵɵtext(101, \" As you start typing behavior above this area will be populated with the terms which require definition for the experiment to execute. \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(102, \"li\");\n        i0.ɵɵtext(103, \" For more information, refer to the documentation \");\n        i0.ɵɵelementStart(104, \"a\", 6);\n        i0.ɵɵtext(105, \"here\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(106, \". \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"hidden\", ctx.showId != 1);\n        i0.ɵɵadvance(46);\n        i0.ɵɵproperty(\"hidden\", ctx.showId != 2);\n        i0.ɵɵadvance(28);\n        i0.ɵɵproperty(\"hidden\", ctx.showId != 3);\n      }\n    },\n    directives: [i2.MatDialogContent],\n    styles: [_c7]\n  });\n  return HLBInforPopUp;\n})();\nvar currentGraphItemSelection = {};\nvar globalGraphItemParametersList;\nvar id_of_node = {};\nvar id_of_edge = {};\nlet accessibleLogger;\nlet entry = new LogEntry();\nvar graphColors;\n\nfunction swapJSON(data) {\n  var temp = {};\n\n  for (var i in data) {\n    temp[data[i]] = i;\n  }\n\n  return temp;\n}\n\nfunction showRelevantContentInDialogBox() {\n  try {\n    var temp = globalGraphItemParametersList[currentGraphItemSelection['id']];\n\n    if (!temp) {\n      $('#node-ip-address').val('');\n      $('#node-operating-system').val('');\n      $('#node-hardware-type').val('');\n      $('#node-num').val('');\n      $('#link-bandwidth').val('');\n      $('#link-delay').val('');\n    } else {\n      $('#node-ip-address').val(temp.ipAddress);\n      $('#node-operating-system').val(temp.operatingSystem);\n      $('#node-hardware-type').val(temp.hardwareType);\n      $('#node-num').val(temp.num);\n      $('#link-bandwidth').val(temp.bandwidth);\n      $('#link-delay').val(temp.delay);\n    }\n  } catch (ex) {//Do nothing\n  }\n}","map":null,"metadata":{},"sourceType":"module"}