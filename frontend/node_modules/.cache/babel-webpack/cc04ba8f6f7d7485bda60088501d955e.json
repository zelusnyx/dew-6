{"ast":null,"code":"/**\n * Calculate a point transformed with an affine matrix\n * @param matrix Affine matrix\n * @param point Point\n * @returns {{x: number, y: number} | Array} Point\n */\nexport function applyToPoint(matrix, point) {\n  return Array.isArray(point) ? [matrix.a * point[0] + matrix.c * point[1] + matrix.e, matrix.b * point[0] + matrix.d * point[1] + matrix.f] : {\n    x: matrix.a * point.x + matrix.c * point.y + matrix.e,\n    y: matrix.b * point.x + matrix.d * point.y + matrix.f\n  };\n}\n/**\n * Calculate an array of points transformed with an affine matrix\n * @param matrix Affine matrix\n * @param points Array of points\n * @returns {array} Array of points\n */\n\nexport function applyToPoints(matrix, points) {\n  return points.map(function (point) {\n    return applyToPoint(matrix, point);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}